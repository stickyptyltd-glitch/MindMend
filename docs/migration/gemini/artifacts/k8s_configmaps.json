{
    "apiVersion": "v1",
    "items": [
        {
            "apiVersion": "v1",
            "data": {
                "ca.crt": "-----BEGIN CERTIFICATE-----\nMIIELDCCApSgAwIBAgIQdEkbUROVP0jzFt73weMS1TANBgkqhkiG9w0BAQsFADAv\nMS0wKwYDVQQDEyQxODY3YWYwMy1jZDQwLTQ5YjctYjVmZi1hMmNjZDk1MGVmZTYw\nIBcNMjUwOTE5MjMzMjU1WhgPMjA1NTA5MTMwMDMyNTVaMC8xLTArBgNVBAMTJDE4\nNjdhZjAzLWNkNDAtNDliNy1iNWZmLWEyY2NkOTUwZWZlNjCCAaIwDQYJKoZIhvcN\nAQEBBQADggGPADCCAYoCggGBAOC82Vl3cCMiiS59DLLtIUp8N87fXlBAMnfHVdim\nZYNDtwDNl3oPPq3LZkVfVIZb9cPawN7FwFnTdbdoRsn/JkbzHemBIUE8/4DkKvue\nJbQdQwdlkyjkIR2/WPkONZCpmy9459CQ3nv4fJP5S2kxKOj/IpmcDZRA/rrNnwAH\nJRRo0ay/lnC9+FV0l4bExA6SqpIAwJg62W6erthDQ5HV44WQdYvpK9etg0gO5aBO\n9Eg8lxIROF3UHdxF3RsUpiluf22FCuv+q81Y80Rc6g3xE82PzdFVIoNgnWaOckc3\naDurXlppOQ9DDW/Nd7AsunvFYw6AGm9wiSpAsMb7f2qGfk5YIe+17Eft0PVU90yx\ni3jQpaKvGUm0oI+x3buvpcQfpWP2FUprPmHtwcmTMKPhG9lJpISnusDcSA3AyERo\nEXRXgaXwqBRE0rdZVcpSvjesrndmHY79J9Ztxa1dVlgjFPZsWcK+CGb21FHolOH6\nWmJnis9t3SFuM15v/Li7ZvxatwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAgQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwf6mDlkM/wC9GjMC9APUkR2/CWQwDQYJ\nKoZIhvcNAQELBQADggGBADOvnShVMpCCxrA9JD1fuMbCY/XvtxRDscP6M1NbKW7K\nplXbJus7zR+nlGOILFUFZaxE2F11dnZVj8+wvPkNRZvWDyKIwInuFRe16z8skt8M\nAPUF2MRhLR0nA1gXegbTQLxAXbusToEZLarxoH+c/kpft9wvLd+XKvBKMaRFk252\nvTAv29pOH/61v9YQ521u+oOk+sBpcD7Uwj6z4yuci+j05hiTE2pSpiCRE1MNYXTi\n1sYZSo8vJsn5zSQwtLl57impnRHDj+HQK4JMxb4hfFi47Y2PISn6AwfBUggTsxve\ntfmuAay+FU4MXQkVi0Qi9G0t97zne63bqIlV2bXj+uR53jBn7uCAXD/DMeXwx1bp\nwxrHRSCjwhHtsDXxxX8K5LwHpYH+RSqyYx3vY0RUAM41r4g9y1Cp3sq7DHomqvm+\nKJ1avnqHDLWznEzzGIX2EuI6hx0qPdbf5z7CH3LlGP23Fs3BVrrgaw1TAVD6G174\nT6DWmKVVHdmH801y9fsQrA==\n-----END CERTIFICATE-----\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubernetes.io/description": "Contains a CA bundle that can be used to verify the kube-apiserver when using internal endpoints such as the internal service IP or kubernetes.default.svc. No other usage is guaranteed across distributions of Kubernetes clusters."
                },
                "creationTimestamp": "2025-09-22T07:58:35Z",
                "name": "kube-root-ca.crt",
                "namespace": "cert-manager",
                "resourceVersion": "1758527915937375001",
                "uid": "d64bb685-e9d1-4b9c-a4db-ef5013392f5d"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "__init__.py": "# Models package initialization\nfrom .database import (\n    Session, BiometricData, VideoAnalysis, Exercise, \n    Patient, Assessment, TherapistSession\n)",
                "admin_ai_assistant.py": "\"\"\"\nAdmin AI Assistant for Fraud Detection and Management\n===================================================\nAI-powered assistant for business management, fraud detection, and administrative tasks\n\"\"\"\n\nfrom typing import Dict, List\nimport re\nfrom collections import defaultdict\n\nclass AdminAIAssistant:\n    def __init__(self):\n        self.fraud_patterns = {\n            'payment_anomalies': {\n                'rapid_transactions': {'threshold': 5, 'timeframe': 60},  # 5 transactions in 60 seconds\n                'unusual_amounts': {'min': 0.01, 'max': 10000},\n                'duplicate_attempts': {'threshold': 3, 'timeframe': 300},  # 3 attempts in 5 minutes\n                'suspicious_locations': ['high_risk_countries'],\n                'card_testing': {'small_amount_threshold': 1.00, 'attempts': 3}\n            },\n            'account_anomalies': {\n                'rapid_registrations': {'threshold': 10, 'timeframe': 3600},  # 10 registrations per hour from same IP\n                'suspicious_emails': ['temp-mail', 'guerrillamail', '10minutemail'],\n                'unusual_login_patterns': {'locations': 3, 'timeframe': 3600},  # 3 different locations in 1 hour\n                'credential_stuffing': {'failed_attempts': 5, 'timeframe': 300}\n            },\n            'usage_anomalies': {\n                'api_abuse': {'requests_per_minute': 100},\n                'data_scraping': {'page_views_per_minute': 50},\n                'session_hijacking': {'concurrent_sessions': 3}\n            }\n        }\n        \n        self.risk_scores = defaultdict(float)\n        self.blocked_ips = set()\n        self.flagged_users = set()\n        \n    def analyze_fraud_risk(self, activity_data: Dict) -\u003e Dict:\n        \"\"\"\n        Analyze activity for fraud risk\n        Returns risk assessment with score and recommendations\n        \"\"\"\n        risk_assessment = {\n            'risk_score': 0,\n            'risk_level': 'low',\n            'fraud_indicators': [],\n            'recommendations': [],\n            'auto_actions': []\n        }\n        \n        # Payment fraud detection\n        if 'payment' in activity_data:\n            payment_risk = self._analyze_payment_fraud(activity_data['payment'])\n            risk_assessment['risk_score'] += payment_risk['score']\n            risk_assessment['fraud_indicators'].extend(payment_risk['indicators'])\n            risk_assessment['recommendations'].extend(payment_risk['recommendations'])\n            \n        # Account fraud detection\n        if 'account' in activity_data:\n            account_risk = self._analyze_account_fraud(activity_data['account'])\n            risk_assessment['risk_score'] += account_risk['score']\n            risk_assessment['fraud_indicators'].extend(account_risk['indicators'])\n            risk_assessment['recommendations'].extend(account_risk['recommendations'])\n            \n        # Usage fraud detection\n        if 'usage' in activity_data:\n            usage_risk = self._analyze_usage_fraud(activity_data['usage'])\n            risk_assessment['risk_score'] += usage_risk['score']\n            risk_assessment['fraud_indicators'].extend(usage_risk['indicators'])\n            risk_assessment['recommendations'].extend(usage_risk['recommendations'])\n            \n        # Calculate risk level\n        if risk_assessment['risk_score'] \u003e= 80:\n            risk_assessment['risk_level'] = 'critical'\n            risk_assessment['auto_actions'].append('block_immediately')\n        elif risk_assessment['risk_score'] \u003e= 60:\n            risk_assessment['risk_level'] = 'high'\n            risk_assessment['auto_actions'].append('require_verification')\n        elif risk_assessment['risk_score'] \u003e= 40:\n            risk_assessment['risk_level'] = 'medium'\n            risk_assessment['auto_actions'].append('monitor_closely')\n        else:\n            risk_assessment['risk_level'] = 'low'\n            \n        return risk_assessment\n        \n    def _analyze_payment_fraud(self, payment_data: Dict) -\u003e Dict:\n        \"\"\"Analyze payment data for fraud indicators\"\"\"\n        risk_result = {\n            'score': 0,\n            'indicators': [],\n            'recommendations': []\n        }\n        \n        # Check for rapid transactions\n        if payment_data.get('transaction_count', 0) \u003e self.fraud_patterns['payment_anomalies']['rapid_transactions']['threshold']:\n            risk_result['score'] += 30\n            risk_result['indicators'].append('Rapid transaction pattern detected')\n            risk_result['recommendations'].append('Review transaction history for card testing')\n            \n        # Check for unusual amounts\n        amount = payment_data.get('amount', 0)\n        if amount \u003c self.fraud_patterns['payment_anomalies']['unusual_amounts']['min'] or \\\n           amount \u003e self.fraud_patterns['payment_anomalies']['unusual_amounts']['max']:\n            risk_result['score'] += 20\n            risk_result['indicators'].append(f'Unusual payment amount: ${amount}')\n            risk_result['recommendations'].append('Verify payment method and user identity')\n            \n        # Check for card testing patterns\n        if amount \u003c= self.fraud_patterns['payment_anomalies']['card_testing']['small_amount_threshold']:\n            risk_result['score'] += 15\n            risk_result['indicators'].append('Possible card testing pattern')\n            risk_result['recommendations'].append('Monitor for subsequent larger transactions')\n            \n        return risk_result\n        \n    def _analyze_account_fraud(self, account_data: Dict) -\u003e Dict:\n        \"\"\"Analyze account activity for fraud indicators\"\"\"\n        risk_result = {\n            'score': 0,\n            'indicators': [],\n            'recommendations': []\n        }\n        \n        # Check email domain\n        email = account_data.get('email', '')\n        for suspicious_domain in self.fraud_patterns['account_anomalies']['suspicious_emails']:\n            if suspicious_domain in email:\n                risk_result['score'] += 25\n                risk_result['indicators'].append(f'Suspicious email domain: {email}')\n                risk_result['recommendations'].append('Require email verification')\n                break\n                \n        # Check login patterns\n        failed_logins = account_data.get('failed_login_attempts', 0)\n        if failed_logins \u003e= self.fraud_patterns['account_anomalies']['credential_stuffing']['failed_attempts']:\n            risk_result['score'] += 35\n            risk_result['indicators'].append(f'Multiple failed login attempts: {failed_logins}')\n            risk_result['recommendations'].append('Enable 2FA and temporarily lock account')\n            \n        # Check IP reputation\n        ip_address = account_data.get('ip_address', '')\n        if ip_address in self.blocked_ips:\n            risk_result['score'] += 40\n            risk_result['indicators'].append(f'Login from blocked IP: {ip_address}')\n            risk_result['recommendations'].append('Block access and investigate account')\n            \n        return risk_result\n        \n    def _analyze_usage_fraud(self, usage_data: Dict) -\u003e Dict:\n        \"\"\"Analyze usage patterns for fraud indicators\"\"\"\n        risk_result = {\n            'score': 0,\n            'indicators': [],\n            'recommendations': []\n        }\n        \n        # Check API abuse\n        api_calls = usage_data.get('api_calls_per_minute', 0)\n        if api_calls \u003e self.fraud_patterns['usage_anomalies']['api_abuse']['requests_per_minute']:\n            risk_result['score'] += 30\n            risk_result['indicators'].append(f'Excessive API calls: {api_calls}/min')\n            risk_result['recommendations'].append('Implement rate limiting')\n            \n        # Check for data scraping\n        page_views = usage_data.get('page_views_per_minute', 0)\n        if page_views \u003e self.fraud_patterns['usage_anomalies']['data_scraping']['page_views_per_minute']:\n            risk_result['score'] += 25\n            risk_result['indicators'].append(f'Possible data scraping: {page_views} pages/min')\n            risk_result['recommendations'].append('Enable CAPTCHA verification')\n            \n        return risk_result\n        \n    def get_management_recommendations(self, context: str) -\u003e Dict:\n        \"\"\"\n        Provide AI-powered recommendations for management tasks\n        \"\"\"\n        recommendations = {\n            'upgrades': [],\n            'security': [],\n            'optimization': [],\n            'compliance': []\n        }\n        \n        if context == 'subscription_management':\n            recommendations['upgrades'] = [\n                \"Consider implementing tiered pricing with feature gates\",\n                \"Add usage-based billing for API calls\",\n                \"Implement automatic upgrade prompts at usage limits\",\n                \"Create bundle offers for counselor + AI features\"\n            ]\n            \n        elif context == 'security_audit':\n            recommendations['security'] = [\n                \"Enable mandatory 2FA for admin accounts\",\n                \"Implement IP whitelisting for admin access\",\n                \"Set up automated security scanning\",\n                \"Create audit logs for all admin actions\",\n                \"Implement session timeout policies\"\n            ]\n            \n        elif context == 'performance_optimization':\n            recommendations['optimization'] = [\n                \"Enable CDN for static assets\",\n                \"Implement database query caching\",\n                \"Set up auto-scaling for peak usage\",\n                \"Optimize image delivery with lazy loading\",\n                \"Enable compression for API responses\"\n            ]\n            \n        elif context == 'compliance_check':\n            recommendations['compliance'] = [\n                \"Ensure HIPAA compliance documentation is current\",\n                \"Review data retention policies\",\n                \"Update privacy policy for GDPR compliance\",\n                \"Implement consent management system\",\n                \"Schedule security audit with third party\"\n            ]\n            \n        return recommendations\n        \n    def automated_error_checking(self, system_logs: List[Dict]) -\u003e Dict:\n        \"\"\"\n        Analyze system logs for errors and provide fixes\n        \"\"\"\n        error_analysis = {\n            'critical_errors': [],\n            'warnings': [],\n            'performance_issues': [],\n            'suggested_fixes': [],\n            'auto_fixed': []\n        }\n        \n        error_patterns = {\n            'database_connection': r'database.*connection.*failed',\n            'api_timeout': r'api.*timeout|request.*timed out',\n            'memory_leak': r'memory.*exceeded|out of memory',\n            'authentication': r'auth.*failed|invalid.*token',\n            'payment_gateway': r'payment.*failed|stripe.*error'\n        }\n        \n        for log in system_logs:\n            log_message = log.get('message', '').lower()\n            \n            for error_type, pattern in error_patterns.items():\n                if re.search(pattern, log_message):\n                    if log.get('level') == 'ERROR':\n                        error_analysis['critical_errors'].append({\n                            'type': error_type,\n                            'message': log['message'],\n                            'timestamp': log.get('timestamp'),\n                            'suggested_fix': self._get_error_fix(error_type)\n                        })\n                    else:\n                        error_analysis['warnings'].append({\n                            'type': error_type,\n                            'message': log['message']\n                        })\n                        \n        return error_analysis\n        \n    def _get_error_fix(self, error_type: str) -\u003e str:\n        \"\"\"Get suggested fix for error type\"\"\"\n        fixes = {\n            'database_connection': \"Check DATABASE_URL environment variable and ensure PostgreSQL is running\",\n            'api_timeout': \"Increase timeout limits and check API endpoint health\",\n            'memory_leak': \"Restart application and review recent code changes for memory management\",\n            'authentication': \"Verify API keys and check token expiration settings\",\n            'payment_gateway': \"Verify Stripe/PayPal API keys and webhook configuration\"\n        }\n        return fixes.get(error_type, \"Review logs and contact support if issue persists\")\n        \n    def generate_admin_insights(self, analytics_data: Dict) -\u003e Dict:\n        \"\"\"\n        Generate business insights from analytics data\n        \"\"\"\n        insights = {\n            'revenue_insights': [],\n            'user_insights': [],\n            'platform_insights': [],\n            'action_items': []\n        }\n        \n        # Revenue insights\n        if 'revenue' in analytics_data:\n            monthly_revenue = analytics_data['revenue'].get('monthly', 0)\n            growth_rate = analytics_data['revenue'].get('growth_rate', 0)\n            \n            if growth_rate \u003e 20:\n                insights['revenue_insights'].append(\"Excellent revenue growth! Consider scaling infrastructure\")\n            elif growth_rate \u003c 5:\n                insights['revenue_insights'].append(\"Revenue growth is slow. Consider promotional campaigns\")\n                \n        # User insights\n        if 'users' in analytics_data:\n            churn_rate = analytics_data['users'].get('churn_rate', 0)\n            engagement = analytics_data['users'].get('engagement_score', 0)\n            \n            if churn_rate \u003e 10:\n                insights['user_insights'].append(\"High churn rate detected. Implement retention strategies\")\n                insights['action_items'].append(\"Survey churned users for feedback\")\n                \n            if engagement \u003c 50:\n                insights['user_insights'].append(\"Low user engagement. Consider adding gamification\")\n                \n        # Platform insights\n        if 'platform' in analytics_data:\n            uptime = analytics_data['platform'].get('uptime_percentage', 100)\n            error_rate = analytics_data['platform'].get('error_rate', 0)\n            \n            if uptime \u003c 99.9:\n                insights['platform_insights'].append(\"Uptime below SLA. Review infrastructure reliability\")\n                \n            if error_rate \u003e 1:\n                insights['platform_insights'].append(\"High error rate. Prioritize bug fixes\")\n                \n        return insights",
                "ai_manager.py": "import os\nimport json\nimport logging\nfrom openai import OpenAI\n\nclass AIManager:\n    def __init__(self):\n        self.openai_client = OpenAI(api_key=os.environ.get(\"OPENAI_API_KEY\", \"demo-key\"))\n        self.models = {\n            \"default\": self.get_openai_response,\n            \"advanced\": self.get_advanced_analysis,\n            \"crisis\": self.get_crisis_response\n        }\n    \n    def fake_ai_response(self, text, context=\"general\"):\n        \"\"\"Fallback response when OpenAI is not available\"\"\"\n        return f\"[AI Therapist] I hear you saying: '{text}'. Let's explore this together in our {context} session.\"\n    \n    def get_therapeutic_response(self, message, session_type=\"individual\", context=None):\n        \"\"\"Enhanced therapeutic response method for Level 2 features\"\"\"\n        try:\n            system_prompt = self._get_system_prompt(session_type)\n            \n            response = self.openai_client.chat.completions.create(\n                model=\"gpt-4o\",  # the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024.\n                messages=[\n                    {\"role\": \"system\", \"content\": system_prompt},\n                    {\"role\": \"user\", \"content\": message}\n                ],\n                temperature=0.7,\n                max_tokens=500\n            )\n            \n            ai_message = response.choices[0].message.content\n            \n            # Return enhanced response object\n            return {\n                \"message\": ai_message,\n                \"mood_analysis\": self._analyze_mood(message),\n                \"recommendations\": self._generate_recommendations(message, session_type),\n                \"next_steps\": self._suggest_next_steps(message, session_type),\n                \"session_type\": session_type,\n                \"confidence\": 0.85\n            }\n            \n        except Exception as e:\n            logging.error(f\"OpenAI API error: {e}\")\n            return self._get_enhanced_fallback_response(message, session_type)\n    \n    def get_openai_response(self, text, session_type=\"individual\"):\n        \"\"\"Get therapeutic response using OpenAI GPT-4o\"\"\"\n        result = self.get_therapeutic_response(text, session_type)\n        return result.get('message', self.fake_ai_response(text, session_type))\n    \n    def get_advanced_analysis(self, text, session_type=\"individual\", context_data=None):\n        \"\"\"Get comprehensive AI analysis with multi-modal data\"\"\"\n        try:\n            system_prompt = f\"\"\"You are an advanced AI therapist specializing in {session_type} therapy.\n            Provide comprehensive analysis including:\n            1. Emotional state assessment\n            2. Key themes and concerns\n            3. Therapeutic recommendations\n            4. Risk assessment (low/medium/high)\n            5. Suggested interventions\n            \n            Respond in JSON format with these fields:\n            {{\"emotional_state\": \"\", \"key_themes\": [], \"recommendations\": [], \"risk_level\": \"\", \"interventions\": [], \"therapeutic_response\": \"\"}}\n            \"\"\"\n            \n            user_content = text\n            if context_data:\n                user_content += f\"\\n\\nAdditional context: {json.dumps(context_data)}\"\n            \n            response = self.openai_client.chat.completions.create(\n                model=\"gpt-4o\",\n                messages=[\n                    {\"role\": \"system\", \"content\": system_prompt},\n                    {\"role\": \"user\", \"content\": user_content}\n                ],\n                response_format={\"type\": \"json_object\"},\n                temperature=0.6,\n                max_tokens=800\n            )\n            \n            return json.loads(response.choices[0].message.content)\n            \n        except Exception as e:\n            logging.error(f\"Advanced analysis error: {e}\")\n            return {\n                \"emotional_state\": \"Unable to analyze - please try again\",\n                \"key_themes\": [\"Analysis temporarily unavailable\"],\n                \"recommendations\": [\"Continue with regular therapy sessions\"],\n                \"risk_level\": \"unknown\",\n                \"interventions\": [],\n                \"therapeutic_response\": self.fake_ai_response(text, session_type)\n            }\n    \n    def get_crisis_response(self, text, urgency_level=\"high\"):\n        \"\"\"Get immediate crisis intervention response\"\"\"\n        try:\n            system_prompt = \"\"\"You are a crisis intervention AI therapist. \n            Provide immediate support and safety planning.\n            Prioritize:\n            1. Immediate safety assessment\n            2. Crisis de-escalation techniques\n            3. Emergency resources\n            4. Safety planning steps\n            \n            Be direct, supportive, and action-oriented.\"\"\"\n            \n            response = self.openai_client.chat.completions.create(\n                model=\"gpt-4o\",\n                messages=[\n                    {\"role\": \"system\", \"content\": system_prompt},\n                    {\"role\": \"user\", \"content\": f\"CRISIS LEVEL {urgency_level.upper()}: {text}\"}\n                ],\n                temperature=0.3,  # Lower temperature for crisis situations\n                max_tokens=600\n            )\n            \n            return response.choices[0].message.content\n            \n        except Exception as e:\n            logging.error(f\"Crisis response error: {e}\")\n            return \"\"\"I understand you're going through a difficult time. Please reach out to:\n            - National Suicide Prevention Lifeline: 988\n            - Crisis Text Line: Text HOME to 741741\n            - Emergency Services: 911\n            Your safety is the top priority.\"\"\"\n    \n    def analyze_with_biometrics(self, text, biometric_data):\n        \"\"\"Analyze text with biometric context\"\"\"\n        try:\n            biometric_summary = {\n                \"heart_rate\": biometric_data.get(\"heart_rate\", \"unknown\"),\n                \"stress_level\": biometric_data.get(\"stress_level\", \"unknown\"),\n                \"sleep_quality\": biometric_data.get(\"sleep_quality\", \"unknown\"),\n                \"hrv_score\": biometric_data.get(\"hrv_score\", \"unknown\")\n            }\n            \n            system_prompt = \"\"\"You are an AI therapist with access to biometric data.\n            Analyze the text in context of the biometric indicators.\n            Consider how physical markers correlate with emotional expression.\n            \n            Provide insights on:\n            1. Mind-body connection patterns\n            2. Stress-emotion correlations\n            3. Personalized recommendations\n            4. Therapeutic response\n            \n            Respond in JSON format with fields: analysis, mind_body_insights, recommendations, therapeutic_response.\"\"\"\n            \n            user_content = f\"Text: {text}\\n\\nBiometric data: {json.dumps(biometric_summary)}\"\n            \n            response = self.openai_client.chat.completions.create(\n                model=\"gpt-4o\",\n                messages=[\n                    {\"role\": \"system\", \"content\": system_prompt},\n                    {\"role\": \"user\", \"content\": user_content}\n                ],\n                response_format={\"type\": \"json_object\"},\n                temperature=0.7\n            )\n            \n            return json.loads(response.choices[0].message.content)\n            \n        except Exception as e:\n            logging.error(f\"Biometric analysis error: {e}\")\n            return {\n                \"analysis\": \"Biometric analysis temporarily unavailable\", \n                \"mind_body_insights\": [],\n                \"recommendations\": [\"Monitor stress levels and practice relaxation techniques\"],\n                \"therapeutic_response\": \"I notice you've shared biometric data. While I can't analyze it right now, paying attention to your body's signals is important for mental health.\"\n            }\n    \n    def analyze_group_dynamics(self, messages, participants):\n        \"\"\"Analyze group therapy dynamics\"\"\"\n        try:\n            system_prompt = \"\"\"You are an AI group therapist analyzing group dynamics.\n            Assess:\n            1. Group cohesion and support\n            2. Individual participation patterns\n            3. Communication effectiveness\n            4. Conflict or tension indicators\n            5. Therapeutic progress\n            \n            Respond with JSON: {group_insight, facilitation_suggestion, individual_notes, support_needed}\"\"\"\n            \n            group_data = {\n                \"messages\": messages,\n                \"participants\": participants,\n                \"analysis_timestamp\": json.dumps({\"timestamp\": \"now\"})\n            }\n            \n            response = self.openai_client.chat.completions.create(\n                model=\"gpt-4o\",\n                messages=[\n                    {\"role\": \"system\", \"content\": system_prompt},\n                    {\"role\": \"user\", \"content\": json.dumps(group_data)}\n                ],\n                response_format={\"type\": \"json_object\"},\n                temperature=0.6\n            )\n            \n            return json.loads(response.choices[0].message.content)\n            \n        except Exception as e:\n            logging.error(f\"Group dynamics analysis error: {e}\")\n            return {\n                \"group_insight\": \"Group is showing positive engagement and mutual support\",\n                \"facilitation_suggestion\": \"Continue encouraging open sharing while maintaining emotional safety\",\n                \"individual_notes\": [],\n                \"support_needed\": False\n            }\n    \n    def get_response(self, text, session_type=\"individual\"):\n        \"\"\"Main entry point for getting AI responses\"\"\"\n        return self.models[\"default\"](text, session_type)\n    \n    def get_individual_therapy_response(self, message):\n        \"\"\"Get AI response for individual therapy sessions\"\"\"\n        result = self.get_therapeutic_response(message, session_type=\"individual\")\n        return result.get('message', self.fake_ai_response(message, \"individual\"))\n\n    def get_couples_therapy_response(self, message, partner1_name, partner2_name):\n        \"\"\"Get AI response for couples therapy sessions\"\"\"\n        context = f\"This is a couples therapy session between {partner1_name} and {partner2_name}.\"\n        result = self.get_therapeutic_response(message, session_type=\"couple\", context=context)\n        return result.get('message', self.fake_ai_response(message, \"couple\"))\n\n    def get_group_therapy_response(self, message, participant_count=None):\n        \"\"\"Get AI response for group therapy sessions\"\"\"\n        context = f\"This is a group therapy session with {participant_count or 'several'} participants.\"\n        result = self.get_therapeutic_response(message, session_type=\"group\", context=context)\n        return result.get('message', self.fake_ai_response(message, \"group\"))\n    \n    def _get_system_prompt(self, session_type):\n        \"\"\"Get appropriate system prompt based on session type\"\"\"\n        prompts = {\n            \"individual\": \"\"\"You are Dr. Sarah Chen, a highly experienced AI therapist with advanced training in:\n            - Cognitive Behavioral Therapy (CBT): Help identify and modify negative thought patterns\n            - Dialectical Behavior Therapy (DBT): Teach distress tolerance, emotion regulation, interpersonal effectiveness\n            - Acceptance and Commitment Therapy (ACT): Foster psychological flexibility and values-based living\n            - Mindfulness-Based Stress Reduction (MBSR): Integrate mindfulness practices\n            - Trauma-Informed Care: Use safety, trustworthiness, collaboration, and empowerment\n            - Solution-Focused Brief Therapy: Emphasize strengths and future-oriented solutions\n            - Psychodynamic approaches: Explore unconscious patterns when appropriate\n            \n            Your therapeutic approach:\n            1. Start with validation and empathetic reflection\n            2. Ask open-ended questions to deepen understanding\n            3. Identify patterns and gently challenge cognitive distortions\n            4. Provide specific, actionable coping strategies\n            5. Monitor for crisis indicators (suicidal ideation, self-harm, violence)\n            6. Normalize experiences while maintaining professional boundaries\n            7. Integrate psychoeducation naturally into responses\n            8. End with hope and encouragement for progress\n            \n            Remember to be warm yet professional, using language that's accessible but not condescending.\"\"\",\n            \n            \"couple\": \"\"\"You are Dr. Michael Rivera, an expert couples therapist with specialized training in:\n            - Emotionally Focused Therapy (EFT): Help partners identify attachment needs and negative cycles\n            - The Gottman Method: Address the Four Horsemen, build Love Maps, enhance fondness and admiration\n            - Imago Relationship Therapy: Explore childhood wounds affecting current relationships\n            - Cognitive Behavioral Couples Therapy: Modify dysfunctional relationship patterns\n            - Integrative Behavioral Couple Therapy: Promote acceptance alongside change\n            \n            Your therapeutic approach:\n            1. Create safety for vulnerable expression from both partners\n            2. Identify negative interaction cycles (pursue-withdraw, blame-defend)\n            3. Help each partner understand the other's emotional experience\n            4. Teach and model healthy communication (I-statements, active listening, validation)\n            5. Address the Four Horsemen (criticism, contempt, defensiveness, stonewalling)\n            6. Foster emotional attunement and secure connection\n            7. Guide partners toward win-win solutions and compromise\n            8. Celebrate positive interactions and progress\n            9. Remain neutral while holding both partners' experiences\n            \n            Use phrases like \"I'm hearing that...\" and \"It sounds like both of you...\".\"\"\",\n            \n            \"group\": \"\"\"You are Dr. Lisa Thompson, an experienced group therapy facilitator specializing in:\n            - Process-oriented group therapy: Focus on here-and-now interactions\n            - Psychoeducational groups: Teach skills while processing experiences\n            - Support groups: Foster mutual aid and universality\n            - Interpersonal process groups: Use group as social microcosm\n            \n            Therapeutic factors to cultivate:\n            1. Universality: Help members see they're not alone\n            2. Instillation of hope: Highlight progress and possibility\n            3. Imparting information: Share psychoeducation appropriately\n            4. Altruism: Encourage members helping each other\n            5. Interpersonal learning: Use group interactions for insight\n            6. Group cohesiveness: Build trust and belonging\n            7. Catharsis: Create space for emotional expression\n            8. Existential factors: Address meaning and responsibility\n            \n            Your facilitation approach:\n            - Balance participation among members\n            - Link similar experiences between members\n            - Process group dynamics as they emerge\n            - Maintain appropriate boundaries and safety\n            - Use \"I notice...\" and \"I wonder...\" statements\n            - Encourage direct communication between members\"\"\",\n            \n            \"relationship\": \"\"\"You are Dr. Morgan Foster, a relationship specialist focusing on all types of relationships:\n            - Romantic partnerships: Dating, committed relationships, marriages\n            - Family relationships: Parent-child, siblings, extended family\n            - Friendships: Building and maintaining healthy friendships\n            - Professional relationships: Workplace dynamics and boundaries\n            \n            Key areas of focus:\n            1. Attachment styles and their impact on relationships\n            2. Communication skills and conflict resolution\n            3. Boundary setting and maintenance\n            4. Trust building and repair after betrayal\n            5. Intimacy and vulnerability\n            6. Codependency and interdependence\n            7. Relationship transitions and life changes\n            8. Cultural and individual differences in relationships\n            \n            Help clients develop secure, fulfilling relationships through understanding patterns, improving communication, and fostering mutual respect and care.\"\"\"\n        }\n        \n        return prompts.get(session_type, prompts[\"individual\"])\n    \n    def _analyze_mood(self, message):\n        \"\"\"Analyze mood from message content\"\"\"\n        # Simple keyword-based mood analysis\n        positive_words = ['happy', 'good', 'great', 'wonderful', 'excited', 'joy']\n        negative_words = ['sad', 'depressed', 'anxious', 'worried', 'angry', 'frustrated']\n        \n        message_lower = message.lower()\n        positive_count = sum(1 for word in positive_words if word in message_lower)\n        negative_count = sum(1 for word in negative_words if word in message_lower)\n        \n        if negative_count \u003e positive_count:\n            return {\"mood\": \"negative\", \"intensity\": min(negative_count * 2, 10)}\n        elif positive_count \u003e negative_count:\n            return {\"mood\": \"positive\", \"intensity\": min(positive_count * 2, 10)}\n        else:\n            return {\"mood\": \"neutral\", \"intensity\": 5}\n    \n    def _generate_recommendations(self, message, session_type):\n        \"\"\"Generate therapeutic recommendations\"\"\"\n        recommendations = []\n        message_lower = message.lower()\n        \n        if any(word in message_lower for word in ['anxious', 'anxiety', 'worry']):\n            recommendations.append(\"Practice deep breathing exercises\")\n            recommendations.append(\"Try progressive muscle relaxation\")\n        \n        if any(word in message_lower for word in ['sad', 'depressed', 'down']):\n            recommendations.append(\"Engage in pleasant activities\")\n            recommendations.append(\"Connect with supportive people\")\n        \n        if any(word in message_lower for word in ['stress', 'overwhelmed']):\n            recommendations.append(\"Break tasks into smaller steps\")\n            recommendations.append(\"Practice mindfulness meditation\")\n        \n        if not recommendations:\n            recommendations = [\"Continue journaling your thoughts\", \"Maintain regular self-care routines\"]\n        \n        return recommendations[:3]  # Limit to 3 recommendations\n    \n    def _suggest_next_steps(self, message, session_type):\n        \"\"\"Suggest next therapeutic steps\"\"\"\n        steps = []\n        message_lower = message.lower()\n        \n        if session_type == \"individual\":\n            steps.append(\"Reflect on today's insights\")\n            if any(word in message_lower for word in ['pattern', 'behavior', 'habit']):\n                steps.append(\"Track patterns in a journal\")\n        elif session_type == \"couple\":\n            steps.append(\"Practice active listening with your partner\")\n            steps.append(\"Schedule regular check-ins\")\n        elif session_type == \"group\":\n            steps.append(\"Share insights with the group\")\n            steps.append(\"Support other group members\")\n        \n        steps.append(\"Schedule your next session\")\n        return steps[:3]  # Limit to 3 steps\n    \n    def _get_enhanced_fallback_response(self, message, session_type):\n        \"\"\"Enhanced fallback response when API is unavailable\"\"\"\n        return {\n            \"message\": f\"I understand you're sharing something important with me. While I'm experiencing technical difficulties with my advanced AI features, I want you to know that I'm here to support you. In our {session_type} session, your wellbeing is my priority. Please consider reaching out to a mental health professional if you need immediate support.\",\n            \"mood_analysis\": self._analyze_mood(message),\n            \"recommendations\": self._generate_recommendations(message, session_type),\n            \"next_steps\": self._suggest_next_steps(message, session_type),\n            \"session_type\": session_type,\n            \"confidence\": 0.3\n        }\n\n\n# Global AI manager instance\nai_manager = AIManager()\n",
                "ai_model_manager.py": "\"\"\"\nAdvanced AI Model Manager for Mind Mend\nSupports multiple AI models including OpenAI, Ollama, and custom ML models\n\"\"\"\n\nimport os\nimport json\nimport logging\nfrom typing import Dict, Any, List, Optional, Tuple\nfrom datetime import datetime\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score\nimport joblib\nimport requests\nfrom dataclasses import dataclass\nfrom enum import Enum\n\nlogger = logging.getLogger(__name__)\n\nclass ModelType(Enum):\n    \"\"\"Types of AI models supported\"\"\"\n    OPENAI_GPT = \"openai_gpt\"\n    OLLAMA = \"ollama\"\n    CUSTOM_ML = \"custom_ml\"\n    ENSEMBLE = \"ensemble\"\n    SPECIALIZED = \"specialized\"\n\nclass DiagnosisConfidence(Enum):\n    \"\"\"Confidence levels for diagnosis\"\"\"\n    VERY_HIGH = \"very_high\"  # 90-100%\n    HIGH = \"high\"  # 80-90%\n    MODERATE = \"moderate\"  # 70-80%\n    LOW = \"low\"  # 60-70%\n    VERY_LOW = \"very_low\"  # \u003c60%\n\n@dataclass\nclass ModelConfig:\n    \"\"\"Configuration for AI models\"\"\"\n    name: str\n    type: ModelType\n    endpoint: Optional[str] = None\n    api_key: Optional[str] = None\n    model_path: Optional[str] = None\n    parameters: Dict[str, Any] = None\n    specialization: Optional[str] = None\n    accuracy_score: Optional[float] = None\n\nclass AIModelManager:\n    \"\"\"Manages multiple AI models for enhanced diagnosis and treatment\"\"\"\n    \n    def __init__(self):\n        self.models = {}\n        self.active_models = []\n        self.model_weights = {}\n        self.scalers = {}\n        self.performance_history = []\n        self._initialize_models()\n    \n    def _initialize_models(self):\n        \"\"\"Initialize available AI models\"\"\"\n        # OpenAI GPT models\n        self.register_model(ModelConfig(\n            name=\"gpt-4o\",\n            type=ModelType.OPENAI_GPT,\n            api_key=os.environ.get(\"OPENAI_API_KEY\"),\n            parameters={\"temperature\": 0.7, \"max_tokens\": 1000},\n            specialization=\"general_therapy\",\n            accuracy_score=0.92\n        ))\n\n        self.register_model(ModelConfig(\n            name=\"gpt-4o-mini\",\n            type=ModelType.OPENAI_GPT,\n            api_key=os.environ.get(\"OPENAI_API_KEY\"),\n            parameters={\"temperature\": 0.6, \"max_tokens\": 800},\n            specialization=\"quick_assessment\",\n            accuracy_score=0.89\n        ))\n\n        self.register_model(ModelConfig(\n            name=\"gpt-3.5-turbo\",\n            type=ModelType.OPENAI_GPT,\n            api_key=os.environ.get(\"OPENAI_API_KEY\"),\n            parameters={\"temperature\": 0.8, \"max_tokens\": 1200},\n            specialization=\"conversational_therapy\",\n            accuracy_score=0.87\n        ))\n\n        # Ollama local models - Popular open source models\n        self.register_model(ModelConfig(\n            name=\"llama2-mental-health\",\n            type=ModelType.OLLAMA,\n            endpoint=\"http://localhost:11434/api/generate\",\n            specialization=\"mental_health_assessment\",\n            accuracy_score=0.88\n        ))\n\n        self.register_model(ModelConfig(\n            name=\"mistral-therapy\",\n            type=ModelType.OLLAMA,\n            endpoint=\"http://localhost:11434/api/generate\",\n            specialization=\"therapy_recommendations\",\n            accuracy_score=0.86\n        ))\n\n        self.register_model(ModelConfig(\n            name=\"llama3-8b\",\n            type=ModelType.OLLAMA,\n            endpoint=\"http://localhost:11434/api/generate\",\n            specialization=\"general_therapy\",\n            accuracy_score=0.90\n        ))\n\n        self.register_model(ModelConfig(\n            name=\"codellama-7b\",\n            type=ModelType.OLLAMA,\n            endpoint=\"http://localhost:11434/api/generate\",\n            specialization=\"structured_assessment\",\n            accuracy_score=0.84\n        ))\n\n        self.register_model(ModelConfig(\n            name=\"neural-chat-7b\",\n            type=ModelType.OLLAMA,\n            endpoint=\"http://localhost:11434/api/generate\",\n            specialization=\"crisis_intervention\",\n            accuracy_score=0.85\n        ))\n\n        self.register_model(ModelConfig(\n            name=\"orca-mini-3b\",\n            type=ModelType.OLLAMA,\n            endpoint=\"http://localhost:11434/api/generate\",\n            specialization=\"quick_screening\",\n            accuracy_score=0.82\n        ))\n\n        self.register_model(ModelConfig(\n            name=\"phi-2\",\n            type=ModelType.OLLAMA,\n            endpoint=\"http://localhost:11434/api/generate\",\n            specialization=\"cognitive_assessment\",\n            accuracy_score=0.83\n        ))\n\n        # Custom ML models for specific tasks\n        self._initialize_ml_models()\n    \n    def _initialize_ml_models(self):\n        \"\"\"Initialize custom ML models for diagnosis\"\"\"\n        # Anxiety detection model\n        self.register_model(ModelConfig(\n            name=\"anxiety_detector_rf\",\n            type=ModelType.CUSTOM_ML,\n            model_path=\"models/ml/anxiety_rf.pkl\",\n            specialization=\"anxiety_detection\",\n            accuracy_score=0.91\n        ))\n\n        # Depression severity classifier\n        self.register_model(ModelConfig(\n            name=\"depression_classifier_gb\",\n            type=ModelType.CUSTOM_ML,\n            model_path=\"models/ml/depression_gb.pkl\",\n            specialization=\"depression_severity\",\n            accuracy_score=0.89\n        ))\n\n        # PTSD risk assessment\n        self.register_model(ModelConfig(\n            name=\"ptsd_risk_nn\",\n            type=ModelType.CUSTOM_ML,\n            model_path=\"models/ml/ptsd_nn.pkl\",\n            specialization=\"ptsd_risk\",\n            accuracy_score=0.87\n        ))\n\n        # Bipolar disorder screening\n        self.register_model(ModelConfig(\n            name=\"bipolar_screener_svm\",\n            type=ModelType.CUSTOM_ML,\n            model_path=\"models/ml/bipolar_svm.pkl\",\n            specialization=\"bipolar_screening\",\n            accuracy_score=0.86\n        ))\n\n        # Eating disorder risk\n        self.register_model(ModelConfig(\n            name=\"eating_disorder_rf\",\n            type=ModelType.CUSTOM_ML,\n            model_path=\"models/ml/eating_disorder_rf.pkl\",\n            specialization=\"eating_disorder_risk\",\n            accuracy_score=0.84\n        ))\n\n        # Substance abuse risk\n        self.register_model(ModelConfig(\n            name=\"substance_abuse_gb\",\n            type=ModelType.CUSTOM_ML,\n            model_path=\"models/ml/substance_abuse_gb.pkl\",\n            specialization=\"substance_abuse_risk\",\n            accuracy_score=0.88\n        ))\n\n        # Suicide risk assessment\n        self.register_model(ModelConfig(\n            name=\"suicide_risk_nn\",\n            type=ModelType.CUSTOM_ML,\n            model_path=\"models/ml/suicide_risk_nn.pkl\",\n            specialization=\"suicide_risk\",\n            accuracy_score=0.93\n        ))\n\n        # Sleep disorder classifier\n        self.register_model(ModelConfig(\n            name=\"sleep_disorder_rf\",\n            type=ModelType.CUSTOM_ML,\n            model_path=\"models/ml/sleep_disorder_rf.pkl\",\n            specialization=\"sleep_disorder\",\n            accuracy_score=0.85\n        ))\n\n        # ADHD screening model\n        self.register_model(ModelConfig(\n            name=\"adhd_screener_gb\",\n            type=ModelType.CUSTOM_ML,\n            model_path=\"models/ml/adhd_gb.pkl\",\n            specialization=\"adhd_screening\",\n            accuracy_score=0.87\n        ))\n\n        # Relationship conflict predictor\n        self.register_model(ModelConfig(\n            name=\"conflict_predictor_ensemble\",\n            type=ModelType.ENSEMBLE,\n            specialization=\"relationship_conflict\",\n            accuracy_score=0.85\n        ))\n\n        # Therapy response predictor\n        self.register_model(ModelConfig(\n            name=\"therapy_response_ensemble\",\n            type=ModelType.ENSEMBLE,\n            specialization=\"therapy_response\",\n            accuracy_score=0.83\n        ))\n\n        # Crisis intervention predictor\n        self.register_model(ModelConfig(\n            name=\"crisis_intervention_ensemble\",\n            type=ModelType.ENSEMBLE,\n            specialization=\"crisis_intervention\",\n            accuracy_score=0.90\n        ))\n    \n    def register_model(self, config: ModelConfig):\n        \"\"\"Register a new AI model\"\"\"\n        self.models[config.name] = config\n        if config.accuracy_score and config.accuracy_score \u003e 0.8:\n            self.active_models.append(config.name)\n            # Set initial weights based on accuracy\n            self.model_weights[config.name] = config.accuracy_score\n        \n        logger.info(f\"Registered model: {config.name} ({config.type.value})\")\n    \n    def train_custom_model(self, model_name: str, X_train: np.ndarray, \n                          y_train: np.ndarray, model_type: str = \"random_forest\"):\n        \"\"\"Train a custom ML model for specific diagnosis tasks\"\"\"\n        try:\n            # Create scaler\n            scaler = StandardScaler()\n            X_scaled = scaler.fit_transform(X_train)\n            self.scalers[model_name] = scaler\n            \n            # Select model based on type\n            if model_type == \"random_forest\":\n                model = RandomForestClassifier(\n                    n_estimators=100,\n                    max_depth=10,\n                    random_state=42,\n                    n_jobs=-1\n                )\n            elif model_type == \"gradient_boosting\":\n                model = GradientBoostingClassifier(\n                    n_estimators=100,\n                    learning_rate=0.1,\n                    max_depth=5,\n                    random_state=42\n                )\n            elif model_type == \"neural_network\":\n                model = MLPClassifier(\n                    hidden_layer_sizes=(100, 50, 25),\n                    activation='relu',\n                    solver='adam',\n                    alpha=0.001,\n                    batch_size='auto',\n                    learning_rate='adaptive',\n                    max_iter=1000,\n                    random_state=42\n                )\n            else:\n                raise ValueError(f\"Unknown model type: {model_type}\")\n            \n            # Train model\n            model.fit(X_scaled, y_train)\n            \n            # Evaluate using cross-validation\n            scores = cross_val_score(model, X_scaled, y_train, cv=5)\n            accuracy = scores.mean()\n            \n            # Save model\n            model_path = f\"models/ml/{model_name}.pkl\"\n            os.makedirs(os.path.dirname(model_path), exist_ok=True)\n            joblib.dump(model, model_path)\n            \n            # Register the trained model\n            config = ModelConfig(\n                name=model_name,\n                type=ModelType.CUSTOM_ML,\n                model_path=model_path,\n                parameters={\"model_type\": model_type},\n                accuracy_score=accuracy\n            )\n            self.register_model(config)\n            \n            logger.info(f\"Trained model {model_name} with accuracy: {accuracy:.2f}\")\n            return accuracy\n            \n        except Exception as e:\n            logger.error(f\"Error training model: {str(e)}\")\n            return None\n    \n    def diagnose_with_ensemble(self, patient_data: Dict[str, Any]) -\u003e Dict[str, Any]:\n        \"\"\"Perform diagnosis using ensemble of models\"\"\"\n        diagnosis_results = []\n        confidence_scores = []\n        \n        # Get predictions from each active model\n        for model_name in self.active_models:\n            config = self.models[model_name]\n            \n            try:\n                if config.type == ModelType.OPENAI_GPT:\n                    result = self._diagnose_with_openai(patient_data, config)\n                elif config.type == ModelType.OLLAMA:\n                    result = self._diagnose_with_ollama(patient_data, config)\n                elif config.type == ModelType.CUSTOM_ML:\n                    result = self._diagnose_with_ml(patient_data, config)\n                else:\n                    continue\n                \n                if result:\n                    diagnosis_results.append(result)\n                    confidence_scores.append(\n                        (result['confidence'], self.model_weights.get(model_name, 1.0))\n                    )\n            except Exception as e:\n                logger.error(f\"Error with model {model_name}: {str(e)}\")\n        \n        # Aggregate results\n        if not diagnosis_results:\n            return self._get_fallback_diagnosis(patient_data)\n        \n        # Calculate weighted consensus\n        final_diagnosis = self._aggregate_diagnoses(diagnosis_results, confidence_scores)\n        \n        # Record performance\n        self.performance_history.append({\n            'timestamp': datetime.utcnow(),\n            'models_used': len(diagnosis_results),\n            'confidence': final_diagnosis['overall_confidence']\n        })\n        \n        return final_diagnosis\n    \n    def _diagnose_with_openai(self, patient_data: Dict[str, Any], \n                             config: ModelConfig) -\u003e Dict[str, Any]:\n        \"\"\"Diagnose using OpenAI GPT models\"\"\"\n        try:\n            from openai import OpenAI\n            client = OpenAI(api_key=config.api_key)\n            \n            # Prepare prompt\n            prompt = self._create_diagnosis_prompt(patient_data)\n            \n            response = client.chat.completions.create(\n                model=config.name,\n                messages=[\n                    {\"role\": \"system\", \"content\": \"You are an expert mental health diagnostician. Provide detailed assessment based on provided data.\"},\n                    {\"role\": \"user\", \"content\": prompt}\n                ],\n                temperature=config.parameters.get('temperature', 0.7),\n                max_tokens=config.parameters.get('max_tokens', 1000)\n            )\n            \n            result_text = response.choices[0].message.content\n            \n            # Parse structured response\n            return self._parse_diagnosis_response(result_text, \"openai\")\n            \n        except Exception as e:\n            logger.error(f\"OpenAI diagnosis error: {str(e)}\")\n            return None\n    \n    def _diagnose_with_ollama(self, patient_data: Dict[str, Any], \n                             config: ModelConfig) -\u003e Dict[str, Any]:\n        \"\"\"Diagnose using Ollama local models\"\"\"\n        try:\n            prompt = self._create_diagnosis_prompt(patient_data)\n            \n            response = requests.post(\n                config.endpoint,\n                json={\n                    \"model\": config.name,\n                    \"prompt\": prompt,\n                    \"stream\": False\n                },\n                timeout=30\n            )\n            \n            if response.status_code == 200:\n                result = response.json()\n                return self._parse_diagnosis_response(result.get('response', ''), \"ollama\")\n            else:\n                logger.error(f\"Ollama request failed: {response.status_code}\")\n                return None\n                \n        except Exception as e:\n            logger.error(f\"Ollama diagnosis error: {str(e)}\")\n            return None\n    \n    def _diagnose_with_ml(self, patient_data: Dict[str, Any], \n                         config: ModelConfig) -\u003e Dict[str, Any]:\n        \"\"\"Diagnose using custom ML models\"\"\"\n        try:\n            # Load model\n            if not os.path.exists(config.model_path):\n                logger.warning(f\"Model file not found: {config.model_path}\")\n                return None\n            \n            model = joblib.load(config.model_path)\n            \n            # Prepare features\n            features = self._extract_ml_features(patient_data)\n            \n            # Scale features if scaler exists\n            if config.name in self.scalers:\n                features = self.scalers[config.name].transform([features])\n            else:\n                features = np.array([features])\n            \n            # Get prediction\n            prediction = model.predict(features)[0]\n            \n            # Get probability scores if available\n            if hasattr(model, 'predict_proba'):\n                probabilities = model.predict_proba(features)[0]\n                confidence = float(max(probabilities))\n            else:\n                confidence = 0.85  # Default confidence for models without probability\n            \n            # Map prediction to diagnosis\n            diagnosis = self._map_ml_prediction_to_diagnosis(\n                prediction, \n                confidence, \n                config.specialization\n            )\n            \n            return diagnosis\n            \n        except Exception as e:\n            logger.error(f\"ML diagnosis error: {str(e)}\")\n            return None\n    \n    def _create_diagnosis_prompt(self, patient_data: Dict[str, Any]) -\u003e str:\n        \"\"\"Create diagnosis prompt for LLMs\"\"\"\n        prompt = f\"\"\"\n        Please analyze the following patient data and provide a comprehensive mental health assessment:\n        \n        Patient Information:\n        - Age: {patient_data.get('age', 'Unknown')}\n        - Gender: {patient_data.get('gender', 'Unknown')}\n        - Chief Complaint: {patient_data.get('chief_complaint', 'Not specified')}\n        \n        Symptoms:\n        {json.dumps(patient_data.get('symptoms', {}), indent=2)}\n        \n        Behavioral Data:\n        {json.dumps(patient_data.get('behavioral_data', {}), indent=2)}\n        \n        Assessment Scores:\n        {json.dumps(patient_data.get('assessment_scores', {}), indent=2)}\n        \n        Please provide:\n        1. Primary diagnosis with ICD-10 code if applicable\n        2. Confidence level (0-100%)\n        3. Supporting evidence from the data\n        4. Recommended treatment approaches\n        5. Risk factors to monitor\n        6. Suggested follow-up assessments\n        \n        Format your response as a structured JSON object.\n        \"\"\"\n        return prompt\n    \n    def _extract_ml_features(self, patient_data: Dict[str, Any]) -\u003e List[float]:\n        \"\"\"Extract numerical features for ML models\"\"\"\n        features = []\n        \n        # Demographics\n        features.append(float(patient_data.get('age', 30)))\n        features.append(1.0 if patient_data.get('gender') == 'female' else 0.0)\n        \n        # Symptom scores\n        symptoms = patient_data.get('symptoms', {})\n        features.append(float(symptoms.get('anxiety_level', 0)))\n        features.append(float(symptoms.get('depression_level', 0)))\n        features.append(float(symptoms.get('stress_level', 0)))\n        features.append(float(symptoms.get('sleep_quality', 5)))\n        \n        # Behavioral indicators\n        behavioral = patient_data.get('behavioral_data', {})\n        features.append(float(behavioral.get('social_withdrawal', 0)))\n        features.append(float(behavioral.get('activity_level', 5)))\n        features.append(float(behavioral.get('appetite_changes', 0)))\n        \n        # Assessment scores\n        assessments = patient_data.get('assessment_scores', {})\n        features.append(float(assessments.get('phq9_score', 0)))\n        features.append(float(assessments.get('gad7_score', 0)))\n        features.append(float(assessments.get('pss_score', 0)))\n        \n        return features\n    \n    def _parse_diagnosis_response(self, response_text: str, source: str) -\u003e Dict[str, Any]:\n        \"\"\"Parse diagnosis response from LLMs\"\"\"\n        try:\n            # Try to parse as JSON first\n            if response_text.strip().startswith('{'):\n                result = json.loads(response_text)\n            else:\n                # Extract key information using simple parsing\n                result = {\n                    'diagnosis': self._extract_field(response_text, 'diagnosis'),\n                    'confidence': self._extract_confidence(response_text),\n                    'evidence': self._extract_field(response_text, 'evidence'),\n                    'treatment_recommendations': self._extract_field(response_text, 'treatment'),\n                    'risk_factors': self._extract_field(response_text, 'risk'),\n                    'source': source\n                }\n            \n            return result\n            \n        except Exception as e:\n            logger.error(f\"Error parsing diagnosis response: {str(e)}\")\n            return {\n                'diagnosis': 'Unable to parse response',\n                'confidence': 0.5,\n                'source': source,\n                'error': str(e)\n            }\n    \n    def _extract_field(self, text: str, field: str) -\u003e str:\n        \"\"\"Extract field from unstructured text\"\"\"\n        import re\n        pattern = rf\"{field}[:\\s]+([^\\n]+)\"\n        match = re.search(pattern, text, re.IGNORECASE)\n        return match.group(1).strip() if match else \"\"\n    \n    def _extract_confidence(self, text: str) -\u003e float:\n        \"\"\"Extract confidence score from text\"\"\"\n        import re\n        pattern = r\"confidence[:\\s]+(\\d+(?:\\.\\d+)?)\"\n        match = re.search(pattern, text, re.IGNORECASE)\n        if match:\n            return float(match.group(1)) / 100 if float(match.group(1)) \u003e 1 else float(match.group(1))\n        return 0.7  # Default confidence\n    \n    def _map_ml_prediction_to_diagnosis(self, prediction: int, \n                                       confidence: float, \n                                       specialization: str) -\u003e Dict[str, Any]:\n        \"\"\"Map ML model predictions to diagnosis format\"\"\"\n        diagnosis_map = {\n            'anxiety_detection': {\n                0: 'No anxiety disorder detected',\n                1: 'Mild anxiety symptoms',\n                2: 'Moderate anxiety disorder',\n                3: 'Severe anxiety disorder'\n            },\n            'depression_severity': {\n                0: 'No depression',\n                1: 'Mild depression',\n                2: 'Moderate depression',\n                3: 'Moderately severe depression',\n                4: 'Severe depression'\n            },\n            'ptsd_risk': {\n                0: 'Low PTSD risk',\n                1: 'Moderate PTSD risk',\n                2: 'High PTSD risk'\n            }\n        }\n        \n        diagnosis_text = diagnosis_map.get(specialization, {}).get(\n            prediction, \n            f\"Condition level {prediction}\"\n        )\n        \n        return {\n            'diagnosis': diagnosis_text,\n            'confidence': confidence,\n            'prediction_class': int(prediction),\n            'specialization': specialization,\n            'source': 'ml_model'\n        }\n    \n    def _aggregate_diagnoses(self, results: List[Dict[str, Any]], \n                           confidence_scores: List[Tuple[float, float]]) -\u003e Dict[str, Any]:\n        \"\"\"Aggregate multiple diagnosis results\"\"\"\n        # Calculate weighted average confidence\n        total_weight = sum(conf * weight for conf, weight in confidence_scores)\n        total_weights = sum(weight for _, weight in confidence_scores)\n        overall_confidence = total_weight / total_weights if total_weights \u003e 0 else 0.5\n        \n        # Determine confidence level\n        if overall_confidence \u003e= 0.9:\n            confidence_level = DiagnosisConfidence.VERY_HIGH\n        elif overall_confidence \u003e= 0.8:\n            confidence_level = DiagnosisConfidence.HIGH\n        elif overall_confidence \u003e= 0.7:\n            confidence_level = DiagnosisConfidence.MODERATE\n        elif overall_confidence \u003e= 0.6:\n            confidence_level = DiagnosisConfidence.LOW\n        else:\n            confidence_level = DiagnosisConfidence.VERY_LOW\n        \n        # Aggregate diagnoses\n        diagnosis_counts = {}\n        for result in results:\n            diag = result.get('diagnosis', '')\n            if diag:\n                diagnosis_counts[diag] = diagnosis_counts.get(diag, 0) + 1\n        \n        # Get most common diagnosis\n        primary_diagnosis = max(diagnosis_counts.items(), key=lambda x: x[1])[0] if diagnosis_counts else \"Inconclusive\"\n        \n        # Collect all recommendations\n        all_recommendations = []\n        all_risk_factors = []\n        \n        for result in results:\n            if 'treatment_recommendations' in result:\n                all_recommendations.extend(\n                    result['treatment_recommendations'] if isinstance(result['treatment_recommendations'], list)\n                    else [result['treatment_recommendations']]\n                )\n            if 'risk_factors' in result:\n                all_risk_factors.extend(\n                    result['risk_factors'] if isinstance(result['risk_factors'], list)\n                    else [result['risk_factors']]\n                )\n        \n        return {\n            'primary_diagnosis': primary_diagnosis,\n            'overall_confidence': overall_confidence,\n            'confidence_level': confidence_level.value,\n            'consensus_strength': len([r for r in results if r.get('diagnosis') == primary_diagnosis]) / len(results),\n            'all_diagnoses': [r.get('diagnosis') for r in results],\n            'treatment_recommendations': list(set(all_recommendations)),\n            'risk_factors': list(set(all_risk_factors)),\n            'models_consulted': len(results),\n            'timestamp': datetime.utcnow().isoformat()\n        }\n    \n    def _get_fallback_diagnosis(self, patient_data: Dict[str, Any]) -\u003e Dict[str, Any]:\n        \"\"\"Provide fallback diagnosis when models fail\"\"\"\n        return {\n            'primary_diagnosis': 'Unable to provide automated diagnosis',\n            'overall_confidence': 0.0,\n            'confidence_level': DiagnosisConfidence.VERY_LOW.value,\n            'recommendation': 'Please consult with a human mental health professional',\n            'models_consulted': 0,\n            'timestamp': datetime.utcnow().isoformat()\n        }\n    \n    def recommend_treatment_activities(self, diagnosis: Dict[str, Any], \n                                     patient_preferences: Dict[str, Any]) -\u003e List[Dict[str, Any]]:\n        \"\"\"Recommend treatment activities based on diagnosis and preferences\"\"\"\n        activities = []\n        \n        # Get base recommendations from diagnosis\n        primary_diagnosis = diagnosis.get('primary_diagnosis', '').lower()\n        \n        # Activity database\n        activity_db = {\n            'anxiety': [\n                {\n                    'name': 'Progressive Muscle Relaxation',\n                    'type': 'relaxation',\n                    'duration': 20,\n                    'effectiveness': 0.85,\n                    'description': 'Systematic tension and relaxation of muscle groups'\n                },\n                {\n                    'name': 'Mindfulness Meditation',\n                    'type': 'mindfulness',\n                    'duration': 15,\n                    'effectiveness': 0.88,\n                    'description': 'Present-moment awareness practice'\n                },\n                {\n                    'name': 'Breathing Exercises',\n                    'type': 'breathing',\n                    'duration': 10,\n                    'effectiveness': 0.82,\n                    'description': '4-7-8 breathing technique for anxiety relief'\n                }\n            ],\n            'depression': [\n                {\n                    'name': 'Behavioral Activation',\n                    'type': 'behavioral',\n                    'duration': 30,\n                    'effectiveness': 0.87,\n                    'description': 'Scheduling pleasant activities'\n                },\n                {\n                    'name': 'Gratitude Journaling',\n                    'type': 'cognitive',\n                    'duration': 15,\n                    'effectiveness': 0.79,\n                    'description': 'Daily gratitude practice'\n                },\n                {\n                    'name': 'Social Connection Exercise',\n                    'type': 'social',\n                    'duration': 20,\n                    'effectiveness': 0.83,\n                    'description': 'Reaching out to supportive contacts'\n                }\n            ],\n            'stress': [\n                {\n                    'name': 'Time Management Workshop',\n                    'type': 'educational',\n                    'duration': 45,\n                    'effectiveness': 0.81,\n                    'description': 'Learning effective time management strategies'\n                },\n                {\n                    'name': 'Nature Walk',\n                    'type': 'physical',\n                    'duration': 30,\n                    'effectiveness': 0.84,\n                    'description': 'Mindful walking in nature'\n                }\n            ]\n        }\n        \n        # Select activities based on diagnosis\n        for condition, condition_activities in activity_db.items():\n            if condition in primary_diagnosis:\n                activities.extend(condition_activities)\n        \n        # Filter by patient preferences\n        if patient_preferences:\n            if patient_preferences.get('preferred_duration'):\n                max_duration = patient_preferences['preferred_duration']\n                activities = [a for a in activities if a['duration'] \u003c= max_duration]\n            \n            if patient_preferences.get('activity_types'):\n                preferred_types = patient_preferences['activity_types']\n                activities = [a for a in activities if a['type'] in preferred_types]\n        \n        # Sort by effectiveness\n        activities.sort(key=lambda x: x['effectiveness'], reverse=True)\n        \n        # Add personalization score\n        for activity in activities:\n            activity['personalization_score'] = self._calculate_personalization_score(\n                activity, \n                diagnosis, \n                patient_preferences\n            )\n        \n        return activities[:5]  # Return top 5 activities\n    \n    def _calculate_personalization_score(self, activity: Dict[str, Any],\n                                       diagnosis: Dict[str, Any],\n                                       preferences: Dict[str, Any]) -\u003e float:\n        \"\"\"Calculate how well an activity matches patient needs\"\"\"\n        score = activity['effectiveness']\n        \n        # Adjust based on diagnosis confidence\n        confidence = diagnosis.get('overall_confidence', 0.5)\n        score *= (0.5 + confidence * 0.5)\n        \n        # Adjust based on preferences match\n        if preferences:\n            if activity['type'] in preferences.get('preferred_types', []):\n                score *= 1.2\n            if activity['duration'] \u003c= preferences.get('max_duration', 60):\n                score *= 1.1\n        \n        return min(score, 1.0)\n    \n    def update_model_performance(self, model_name: str, \n                               actual_outcome: str, \n                               predicted_outcome: str):\n        \"\"\"Update model performance based on real outcomes\"\"\"\n        if model_name not in self.models:\n            return\n        \n        # Simple performance tracking\n        is_correct = actual_outcome.lower() == predicted_outcome.lower()\n        \n        # Update accuracy score using exponential moving average\n        alpha = 0.1  # Learning rate\n        current_accuracy = self.models[model_name].accuracy_score or 0.5\n        new_accuracy = alpha * (1.0 if is_correct else 0.0) + (1 - alpha) * current_accuracy\n        \n        self.models[model_name].accuracy_score = new_accuracy\n        self.model_weights[model_name] = new_accuracy\n        \n        logger.info(f\"Updated {model_name} accuracy: {new_accuracy:.3f}\")\n    \n    def get_model_status(self) -\u003e Dict[str, Any]:\n        \"\"\"Get status of all registered models\"\"\"\n        status = {\n            'total_models': len(self.models),\n            'active_models': len(self.active_models),\n            'model_details': []\n        }\n        \n        for name, config in self.models.items():\n            model_info = {\n                'name': name,\n                'type': config.type.value,\n                'specialization': config.specialization,\n                'accuracy': config.accuracy_score,\n                'active': name in self.active_models,\n                'available': self._check_model_availability(config)\n            }\n            status['model_details'].append(model_info)\n        \n        # Sort by accuracy\n        status['model_details'].sort(key=lambda x: x['accuracy'] or 0, reverse=True)\n        \n        return status\n    \n    def _check_model_availability(self, config: ModelConfig) -\u003e bool:\n        \"\"\"Check if a model is available for use\"\"\"\n        if config.type == ModelType.OPENAI_GPT:\n            return bool(config.api_key)\n        elif config.type == ModelType.OLLAMA:\n            # Check if Ollama service is running\n            try:\n                response = requests.get(\"http://localhost:11434/api/tags\", timeout=2)\n                return response.status_code == 200\n            except Exception:\n                return False\n        elif config.type == ModelType.CUSTOM_ML:\n            return os.path.exists(config.model_path) if config.model_path else False\n        \n        return True\n\n# Create singleton instance\nai_model_manager = AIModelManager()",
                "audit_log.py": "\"\"\"\nHIPAA-Compliant Audit Logging System\n====================================\nTracks all administrative actions, data access, and security events\n\"\"\"\nimport json\nimport hashlib\nfrom datetime import datetime\nfrom sqlalchemy import Index\nfrom models.database import db\n\nclass AuditLog(db.Model):\n    \"\"\"HIPAA-compliant audit log for all admin and system actions\"\"\"\n\n    __tablename__ = 'audit_logs'\n\n    id = db.Column(db.Integer, primary_key=True)\n\n    # Event Information\n    event_type = db.Column(db.String(100), nullable=False)  # LOGIN, DATA_ACCESS, MODIFY_USER, etc.\n    event_category = db.Column(db.String(50), nullable=False)  # AUTHENTICATION, DATA_ACCESS, SYSTEM, etc.\n    severity = db.Column(db.String(20), default='INFO')  # INFO, WARNING, ERROR, CRITICAL\n\n    # User Information\n    admin_user_id = db.Column(db.Integer, db.ForeignKey('patient.id'))\n    admin_username = db.Column(db.String(200))\n    admin_role = db.Column(db.String(50))\n\n    # Target Information (what was accessed/modified)\n    target_type = db.Column(db.String(50))  # USER, SESSION, PAYMENT, etc.\n    target_id = db.Column(db.String(100))  # ID of the target object\n    target_name = db.Column(db.String(200))  # Human-readable name\n\n    # Technical Details\n    ip_address = db.Column(db.String(45))  # IPv4/IPv6 address\n    user_agent = db.Column(db.Text)\n    request_method = db.Column(db.String(10))\n    request_url = db.Column(db.String(500))\n\n    # Event Details\n    description = db.Column(db.Text, nullable=False)\n    details = db.Column(db.Text)  # JSON string with additional details\n\n    # Data Protection\n    phi_accessed = db.Column(db.Boolean, default=False)  # Protected Health Information flag\n    data_hash = db.Column(db.String(64))  # Hash of sensitive data for integrity\n\n    # Timestamps\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)\n\n    # Status\n    success = db.Column(db.Boolean, default=True)\n    error_message = db.Column(db.Text)\n\n    # Retention\n    retention_date = db.Column(db.DateTime)  # When this log can be archived/deleted\n\n    # Indexes for performance\n    __table_args__ = (\n        Index('idx_audit_timestamp', 'timestamp'),\n        Index('idx_audit_user', 'admin_user_id'),\n        Index('idx_audit_event_type', 'event_type'),\n        Index('idx_audit_target', 'target_type', 'target_id'),\n        Index('idx_audit_phi', 'phi_accessed'),\n    )\n\n    def __init__(self, event_type, description, **kwargs):\n        self.event_type = event_type\n        self.description = description\n\n        # Set defaults\n        self.event_category = kwargs.get('event_category', self._get_category_from_type(event_type))\n        self.severity = kwargs.get('severity', 'INFO')\n        self.admin_user_id = kwargs.get('admin_user_id')\n        self.admin_username = kwargs.get('admin_username')\n        self.admin_role = kwargs.get('admin_role')\n        self.target_type = kwargs.get('target_type')\n        self.target_id = kwargs.get('target_id')\n        self.target_name = kwargs.get('target_name')\n        self.ip_address = kwargs.get('ip_address')\n        self.user_agent = kwargs.get('user_agent')\n        self.request_method = kwargs.get('request_method')\n        self.request_url = kwargs.get('request_url')\n        self.phi_accessed = kwargs.get('phi_accessed', False)\n        self.success = kwargs.get('success', True)\n        self.error_message = kwargs.get('error_message')\n\n        # Handle details\n        details_dict = kwargs.get('details', {})\n        if details_dict:\n            self.details = json.dumps(details_dict, default=str)\n            # Create hash for data integrity\n            self.data_hash = hashlib.sha256(self.details.encode()).hexdigest()\n\n    @staticmethod\n    def _get_category_from_type(event_type):\n        \"\"\"Auto-determine category from event type\"\"\"\n        auth_events = ['LOGIN', 'LOGOUT', 'LOGIN_FAILED', 'MFA_SETUP', 'MFA_SUCCESS', 'MFA_FAILED']\n        data_events = ['DATA_ACCESS', 'DATA_MODIFY', 'DATA_DELETE', 'DATA_EXPORT']\n        system_events = ['SYSTEM_RESTART', 'BACKUP_CREATED', 'CONFIG_CHANGED']\n\n        if event_type in auth_events:\n            return 'AUTHENTICATION'\n        elif event_type in data_events:\n            return 'DATA_ACCESS'\n        elif event_type in system_events:\n            return 'SYSTEM'\n        else:\n            return 'OTHER'\n\n    def to_dict(self):\n        \"\"\"Convert to dictionary for JSON serialization\"\"\"\n        return {\n            'id': self.id,\n            'event_type': self.event_type,\n            'event_category': self.event_category,\n            'severity': self.severity,\n            'admin_username': self.admin_username,\n            'admin_role': self.admin_role,\n            'target_type': self.target_type,\n            'target_id': self.target_id,\n            'target_name': self.target_name,\n            'ip_address': self.ip_address,\n            'description': self.description,\n            'phi_accessed': self.phi_accessed,\n            'timestamp': self.timestamp.isoformat() if self.timestamp else None,\n            'success': self.success,\n            'details': json.loads(self.details) if self.details else {}\n        }\n\nclass AuditLogger:\n    \"\"\"HIPAA-compliant audit logger\"\"\"\n\n    @staticmethod\n    def log_event(event_type, description, **kwargs):\n        \"\"\"\n        Log an audit event\n\n        Args:\n            event_type (str): Type of event (LOGIN, DATA_ACCESS, etc.)\n            description (str): Human-readable description\n            **kwargs: Additional event details\n        \"\"\"\n        try:\n            audit_log = AuditLog(\n                event_type=event_type,\n                description=description,\n                **kwargs\n            )\n\n            db.session.add(audit_log)\n            db.session.commit()\n\n            return audit_log.id\n\n        except Exception as e:\n            # Critical: audit logging must never fail silently\n            db.session.rollback()\n            # Log to system logger as backup\n            import logging\n            logging.error(f\"AUDIT_LOG_FAILED: {e} - Event: {event_type} - {description}\")\n            raise\n\n    @staticmethod\n    def log_admin_action(action, description, target_type=None, target_id=None, **kwargs):\n        \"\"\"Log administrative action with session context\"\"\"\n        from flask import session, request\n\n        # Get admin context from session\n        admin_details = {\n            'admin_user_id': session.get('admin_user_id'),\n            'admin_username': session.get('admin_username'),\n            'admin_role': session.get('admin_role'),\n            'ip_address': AuditLogger._get_client_ip(),\n            'user_agent': request.headers.get('User-Agent', '') if request else '',\n            'request_method': request.method if request else '',\n            'request_url': request.url if request else '',\n            'target_type': target_type,\n            'target_id': str(target_id) if target_id else None,\n        }\n\n        # Merge with provided kwargs\n        admin_details.update(kwargs)\n\n        return AuditLogger.log_event(action, description, **admin_details)\n\n    @staticmethod\n    def log_phi_access(patient_id, patient_name, access_type, description, **kwargs):\n        \"\"\"Log access to Protected Health Information\"\"\"\n        phi_details = {\n            'target_type': 'PATIENT',\n            'target_id': str(patient_id),\n            'target_name': patient_name,\n            'phi_accessed': True,\n            'severity': 'WARNING' if access_type == 'READ' else 'CRITICAL',\n        }\n\n        phi_details.update(kwargs)\n\n        return AuditLogger.log_admin_action(\n            f'PHI_{access_type}',\n            description,\n            **phi_details\n        )\n\n    @staticmethod\n    def log_security_event(event_type, description, severity='WARNING', **kwargs):\n        \"\"\"Log security-related events\"\"\"\n        security_details = {\n            'event_category': 'SECURITY',\n            'severity': severity,\n        }\n\n        security_details.update(kwargs)\n\n        return AuditLogger.log_admin_action(event_type, description, **security_details)\n\n    @staticmethod\n    def _get_client_ip():\n        \"\"\"Get real client IP address\"\"\"\n        from flask import request\n\n        if not request:\n            return None\n\n        if request.headers.get('X-Forwarded-For'):\n            return request.headers.get('X-Forwarded-For').split(',')[0].strip()\n        elif request.headers.get('X-Real-IP'):\n            return request.headers.get('X-Real-IP')\n        return request.remote_addr\n\n    @staticmethod\n    def get_audit_logs(limit=100, offset=0, filters=None):\n        \"\"\"Retrieve audit logs with filtering\"\"\"\n        query = AuditLog.query\n\n        if filters:\n            if 'event_type' in filters:\n                query = query.filter(AuditLog.event_type == filters['event_type'])\n\n            if 'event_category' in filters:\n                query = query.filter(AuditLog.event_category == filters['event_category'])\n\n            if 'admin_user_id' in filters:\n                query = query.filter(AuditLog.admin_user_id == filters['admin_user_id'])\n\n            if 'severity' in filters:\n                query = query.filter(AuditLog.severity == filters['severity'])\n\n            if 'phi_accessed' in filters:\n                query = query.filter(AuditLog.phi_accessed == filters['phi_accessed'])\n\n            if 'start_date' in filters:\n                query = query.filter(AuditLog.timestamp \u003e= filters['start_date'])\n\n            if 'end_date' in filters:\n                query = query.filter(AuditLog.timestamp \u003c= filters['end_date'])\n\n        return query.order_by(AuditLog.timestamp.desc()).offset(offset).limit(limit).all()\n\n    @staticmethod\n    def generate_audit_report(start_date, end_date, format='json'):\n        \"\"\"Generate HIPAA audit report for specified date range\"\"\"\n        logs = AuditLog.query.filter(\n            AuditLog.timestamp \u003e= start_date,\n            AuditLog.timestamp \u003c= end_date\n        ).order_by(AuditLog.timestamp.desc()).all()\n\n        if format == 'json':\n            return {\n                'report_generated': datetime.utcnow().isoformat(),\n                'period_start': start_date.isoformat(),\n                'period_end': end_date.isoformat(),\n                'total_events': len(logs),\n                'phi_access_events': sum(1 for log in logs if log.phi_accessed),\n                'security_events': sum(1 for log in logs if log.event_category == 'SECURITY'),\n                'failed_events': sum(1 for log in logs if not log.success),\n                'events': [log.to_dict() for log in logs]\n            }\n\n        # Additional formats (CSV, PDF) can be added here\n        return logs\n\n# Initialize audit logger instance\naudit_logger = AuditLogger()",
                "biometric_integrator.py": "import logging\nfrom datetime import datetime\nfrom typing import Dict, List\n\nclass BiometricIntegrator:\n    def __init__(self):\n        self.device_types = {\n            \"apple_watch\": {\n                \"metrics\": [\"heart_rate\", \"hrv\", \"stress\", \"activity\", \"sleep\", \"blood_oxygen\"],\n                \"sampling_rate\": \"high\",\n                \"accuracy\": \"very_high\"\n            },\n            \"fitbit\": {\n                \"metrics\": [\"heart_rate\", \"steps\", \"sleep\", \"stress\", \"activity\"],\n                \"sampling_rate\": \"medium\",\n                \"accuracy\": \"high\"\n            },\n            \"garmin\": {\n                \"metrics\": [\"heart_rate\", \"hrv\", \"stress\", \"activity\", \"recovery\", \"blood_oxygen\"],\n                \"sampling_rate\": \"high\",\n                \"accuracy\": \"very_high\"\n            },\n            \"samsung_health\": {\n                \"metrics\": [\"heart_rate\", \"stress\", \"sleep\", \"activity\", \"blood_oxygen\"],\n                \"sampling_rate\": \"medium\",\n                \"accuracy\": \"medium\"\n            },\n            \"whoop\": {\n                \"metrics\": [\"heart_rate\", \"hrv\", \"strain\", \"recovery\", \"sleep\"],\n                \"sampling_rate\": \"very_high\",\n                \"accuracy\": \"very_high\"\n            },\n            \"oura\": {\n                \"metrics\": [\"heart_rate\", \"hrv\", \"temperature\", \"sleep\", \"activity\"],\n                \"sampling_rate\": \"high\",\n                \"accuracy\": \"very_high\"\n            },\n            \"generic\": {\n                \"metrics\": [\"heart_rate\", \"activity\"],\n                \"sampling_rate\": \"low\",\n                \"accuracy\": \"medium\"\n            }\n        }\n        \n        # Enhanced normal ranges for different metrics\n        self.normal_ranges = {\n            \"heart_rate\": {\n                \"rest\": {\"low\": 60, \"normal\": 80, \"high\": 100},\n                \"light_activity\": {\"low\": 85, \"normal\": 110, \"high\": 135},\n                \"moderate_activity\": {\"low\": 110, \"normal\": 140, \"high\": 170},\n                \"intense_activity\": {\"low\": 140, \"normal\": 165, \"high\": 190}\n            },\n            \"hrv\": {\n                \"excellent\": {\"min\": 60, \"max\": 100},\n                \"good\": {\"min\": 40, \"max\": 60},\n                \"fair\": {\"min\": 20, \"max\": 40},\n                \"poor\": {\"min\": 0, \"max\": 20}\n            },\n            \"stress_level\": {\n                \"low\": {\"min\": 0, \"max\": 0.3},\n                \"moderate\": {\"min\": 0.3, \"max\": 0.6},\n                \"high\": {\"min\": 0.6, \"max\": 0.8},\n                \"very_high\": {\"min\": 0.8, \"max\": 1.0}\n            },\n            \"sleep_quality\": {\n                \"excellent\": {\"min\": 0.8, \"max\": 1.0},\n                \"good\": {\"min\": 0.6, \"max\": 0.8},\n                \"fair\": {\"min\": 0.4, \"max\": 0.6},\n                \"poor\": {\"min\": 0, \"max\": 0.4}\n            },\n            \"blood_oxygen\": {\n                \"normal\": {\"min\": 95, \"max\": 100},\n                \"low_normal\": {\"min\": 90, \"max\": 95},\n                \"concerning\": {\"min\": 85, \"max\": 90},\n                \"critical\": {\"min\": 0, \"max\": 85}\n            },\n            \"temperature\": {\n                \"normal\": {\"min\": 97.0, \"max\": 99.5},\n                \"low_fever\": {\"min\": 99.5, \"max\": 101.0},\n                \"fever\": {\"min\": 101.0, \"max\": 103.0},\n                \"high_fever\": {\"min\": 103.0, \"max\": 106.0}\n            }\n        }\n        \n        # Enhanced stress indicators with weights\n        self.stress_indicators = {\n            \"elevated_heart_rate\": {\"weight\": 5, \"threshold\": 100},\n            \"very_high_heart_rate\": {\"weight\": 8, \"threshold\": 120},\n            \"low_hrv\": {\"weight\": 6, \"threshold\": 30},\n            \"very_low_hrv\": {\"weight\": 9, \"threshold\": 15},\n            \"poor_sleep\": {\"weight\": 4, \"threshold\": 0.4},\n            \"very_poor_sleep\": {\"weight\": 7, \"threshold\": 0.2},\n            \"high_stress_score\": {\"weight\": 7, \"threshold\": 0.7},\n            \"very_high_stress_score\": {\"weight\": 10, \"threshold\": 0.9},\n            \"low_activity\": {\"weight\": 2, \"threshold\": 1000},\n            \"very_low_activity\": {\"weight\": 3, \"threshold\": 500},\n            \"low_blood_oxygen\": {\"weight\": 8, \"threshold\": 92},\n            \"critically_low_oxygen\": {\"weight\": 10, \"threshold\": 88},\n            \"elevated_temperature\": {\"weight\": 4, \"threshold\": 99.5},\n            \"fever\": {\"weight\": 6, \"threshold\": 101.0}\n        }\n    \n    def analyze_patterns(self, biometric_data: Dict) -\u003e Dict:\n        \"\"\"Analyze biometric data patterns for therapeutic insights\"\"\"\n        try:\n            analysis = {\n                \"overall_health_score\": 0,\n                \"stress_indicators\": [],\n                \"patterns\": {},\n                \"alerts\": [],\n                \"therapeutic_insights\": [],\n                \"mental_health_correlations\": [],\n                \"recommendations\": [],\n                \"timestamp\": datetime.now().isoformat(),\n                \"data_quality\": self._assess_data_quality(biometric_data)\n            }\n            \n            metrics_analyzed = 0\n            total_health_contribution = 0\n            \n            # Analyze each available metric\n            if \"heart_rate\" in biometric_data:\n                hr_analysis = self._analyze_heart_rate(biometric_data[\"heart_rate\"])\n                analysis[\"patterns\"][\"heart_rate\"] = hr_analysis\n                total_health_contribution += hr_analysis.get(\"health_contribution\", 0)\n                metrics_analyzed += 1\n                \n                if hr_analysis.get(\"stress_indicator\"):\n                    analysis[\"stress_indicators\"].extend(hr_analysis.get(\"stress_reasons\", []))\n            \n            if \"stress_level\" in biometric_data:\n                stress_analysis = self._analyze_stress_level(biometric_data[\"stress_level\"])\n                analysis[\"patterns\"][\"stress\"] = stress_analysis\n                analysis[\"stress_indicators\"].extend(stress_analysis.get(\"indicators\", []))\n            \n            if \"sleep_quality\" in biometric_data:\n                sleep_analysis = self._analyze_sleep_quality(biometric_data[\"sleep_quality\"])\n                analysis[\"patterns\"][\"sleep\"] = sleep_analysis\n                total_health_contribution += sleep_analysis.get(\"health_contribution\", 0)\n                metrics_analyzed += 1\n                \n                if sleep_analysis.get(\"mental_health_impact\"):\n                    analysis[\"mental_health_correlations\"].extend(sleep_analysis.get(\"mental_health_impact\", []))\n            \n            if \"hrv\" in biometric_data:\n                hrv_analysis = self._analyze_hrv(biometric_data[\"hrv\"])\n                analysis[\"patterns\"][\"hrv\"] = hrv_analysis\n                total_health_contribution += hrv_analysis.get(\"health_contribution\", 0)\n                metrics_analyzed += 1\n                \n                if hrv_analysis.get(\"stress_indicator\"):\n                    analysis[\"stress_indicators\"].extend(hrv_analysis.get(\"stress_reasons\", []))\n            \n            if \"blood_oxygen\" in biometric_data:\n                oxygen_analysis = self._analyze_blood_oxygen(biometric_data[\"blood_oxygen\"])\n                analysis[\"patterns\"][\"blood_oxygen\"] = oxygen_analysis\n                total_health_contribution += oxygen_analysis.get(\"health_contribution\", 0)\n                metrics_analyzed += 1\n            \n            if \"temperature\" in biometric_data:\n                temp_analysis = self._analyze_temperature(biometric_data[\"temperature\"])\n                analysis[\"patterns\"][\"temperature\"] = temp_analysis\n                total_health_contribution += temp_analysis.get(\"health_contribution\", 0)\n                metrics_analyzed += 1\n            \n            if \"activity_level\" in biometric_data:\n                activity_analysis = self._analyze_activity_level(biometric_data[\"activity_level\"])\n                analysis[\"patterns\"][\"activity\"] = activity_analysis\n                total_health_contribution += activity_analysis.get(\"health_contribution\", 0)\n                metrics_analyzed += 1\n            \n            # Calculate overall health score\n            if metrics_analyzed \u003e 0:\n                analysis[\"overall_health_score\"] = min(total_health_contribution / metrics_analyzed, 1.0)\n            \n            # Generate therapeutic insights\n            analysis[\"therapeutic_insights\"] = self._generate_therapeutic_insights(analysis[\"patterns\"])\n            \n            # Generate mental health correlations\n            analysis[\"mental_health_correlations\"].extend(\n                self._analyze_mental_health_correlations(analysis[\"patterns\"])\n            )\n            \n            # Generate alerts\n            analysis[\"alerts\"] = self._generate_alerts(analysis[\"patterns\"], analysis[\"stress_indicators\"])\n            \n            # Generate recommendations\n            analysis[\"recommendations\"] = self._generate_comprehensive_recommendations(analysis)\n            \n            return analysis\n            \n        except Exception as e:\n            logging.error(f\"Biometric analysis error: {e}\")\n            return {\n                \"error\": \"Biometric analysis failed\", \n                \"timestamp\": datetime.now().isoformat(),\n                \"recommendations\": [\"Please ensure biometric data is properly formatted and try again\"]\n            }\n    \n    def _analyze_heart_rate(self, heart_rate: float) -\u003e Dict:\n        \"\"\"Enhanced heart rate analysis\"\"\"\n        analysis = {\n            \"value\": heart_rate,\n            \"category\": \"normal\",\n            \"health_contribution\": 0.25,\n            \"insights\": [],\n            \"stress_indicator\": False,\n            \"stress_reasons\": [],\n            \"mental_health_implications\": []\n        }\n        \n        if heart_rate \u003c 50:\n            analysis[\"category\"] = \"very_low\"\n            analysis[\"insights\"].append(\"Very low heart rate - possible bradycardia or excellent fitness\")\n            analysis[\"health_contribution\"] = 0.15\n            analysis[\"mental_health_implications\"].append(\"May indicate depression or medication effects\")\n        elif heart_rate \u003c 60:\n            analysis[\"category\"] = \"low\"\n            analysis[\"insights\"].append(\"Low resting heart rate - indicates good cardiovascular fitness\")\n            analysis[\"health_contribution\"] = 0.3\n        elif heart_rate \u003c= 80:\n            analysis[\"category\"] = \"optimal\"\n            analysis[\"insights\"].append(\"Excellent resting heart rate for most adults\")\n            analysis[\"health_contribution\"] = 0.35\n        elif heart_rate \u003c= 100:\n            analysis[\"category\"] = \"normal_high\"\n            analysis[\"insights\"].append(\"Normal but slightly elevated resting heart rate\")\n            analysis[\"health_contribution\"] = 0.2\n        elif heart_rate \u003c= 120:\n            analysis[\"category\"] = \"elevated\"\n            analysis[\"insights\"].append(\"Elevated heart rate - may indicate stress, anxiety, or physical exertion\")\n            analysis[\"health_contribution\"] = 0.1\n            analysis[\"stress_indicator\"] = True\n            analysis[\"stress_reasons\"].append(\"Elevated heart rate detected\")\n            analysis[\"mental_health_implications\"].append(\"May correlate with anxiety or panic symptoms\")\n        else:\n            analysis[\"category\"] = \"very_high\"\n            analysis[\"insights\"].append(\"Very high heart rate - immediate attention may be needed\")\n            analysis[\"health_contribution\"] = 0.05\n            analysis[\"stress_indicator\"] = True\n            analysis[\"stress_reasons\"].append(\"Very high heart rate detected\")\n            analysis[\"mental_health_implications\"].append(\"May indicate severe anxiety or panic attack\")\n        \n        return analysis\n    \n    def _analyze_stress_level(self, stress_level: float) -\u003e Dict:\n        \"\"\"Enhanced stress level analysis\"\"\"\n        analysis = {\n            \"value\": stress_level,\n            \"category\": \"low\",\n            \"indicators\": [],\n            \"recommendations\": [],\n            \"mental_health_correlations\": [],\n            \"intervention_urgency\": \"low\"\n        }\n        \n        if stress_level \u003e= 0.9:\n            analysis[\"category\"] = \"critical\"\n            analysis[\"indicators\"].append(\"Critical stress levels detected\")\n            analysis[\"intervention_urgency\"] = \"immediate\"\n            analysis[\"recommendations\"].extend([\n                \"Immediate stress reduction techniques required\",\n                \"Consider professional mental health support\",\n                \"Practice emergency calming techniques\"\n            ])\n            analysis[\"mental_health_correlations\"].append(\"May indicate acute anxiety or panic disorder\")\n        elif stress_level \u003e= 0.7:\n            analysis[\"category\"] = \"very_high\"\n            analysis[\"indicators\"].append(\"Very high stress levels detected\")\n            analysis[\"intervention_urgency\"] = \"high\"\n            analysis[\"recommendations\"].extend([\n                \"Implement immediate stress management strategies\",\n                \"Practice deep breathing and mindfulness\",\n                \"Consider reducing current stressors\"\n            ])\n            analysis[\"mental_health_correlations\"].append(\"Correlates with chronic anxiety and depression risk\")\n        elif stress_level \u003e= 0.5:\n            analysis[\"category\"] = \"high\"\n            analysis[\"indicators\"].append(\"High stress levels detected\")\n            analysis[\"intervention_urgency\"] = \"moderate\"\n            analysis[\"recommendations\"].extend([\n                \"Practice regular stress reduction techniques\",\n                \"Monitor stress triggers\",\n                \"Maintain healthy coping strategies\"\n            ])\n            analysis[\"mental_health_correlations\"].append(\"May contribute to mood disorders if sustained\")\n        elif stress_level \u003e= 0.3:\n            analysis[\"category\"] = \"moderate\"\n            analysis[\"indicators\"].append(\"Moderate stress levels\")\n            analysis[\"recommendations\"].append(\"Monitor stress and use preventive techniques\")\n            analysis[\"mental_health_correlations\"].append(\"Normal stress response within healthy range\")\n        else:\n            analysis[\"category\"] = \"low\"\n            analysis[\"recommendations\"].append(\"Maintain current stress management practices\")\n            analysis[\"mental_health_correlations\"].append(\"Low stress supports good mental health\")\n        \n        return analysis\n    \n    def _analyze_sleep_quality(self, sleep_quality: float) -\u003e Dict:\n        \"\"\"Enhanced sleep quality analysis\"\"\"\n        analysis = {\n            \"value\": sleep_quality,\n            \"category\": \"fair\",\n            \"health_contribution\": 0.2,\n            \"insights\": [],\n            \"mental_health_impact\": [],\n            \"cognitive_impact\": []\n        }\n        \n        if sleep_quality \u003e= 0.9:\n            analysis[\"category\"] = \"exceptional\"\n            analysis[\"health_contribution\"] = 0.4\n            analysis[\"insights\"].append(\"Exceptional sleep quality supporting optimal mental health\")\n            analysis[\"mental_health_impact\"].append(\"Excellent sleep supports emotional regulation\")\n            analysis[\"cognitive_impact\"].append(\"Optimal cognitive performance expected\")\n        elif sleep_quality \u003e= 0.8:\n            analysis[\"category\"] = \"excellent\"\n            analysis[\"health_contribution\"] = 0.35\n            analysis[\"insights\"].append(\"Excellent sleep quality supporting mental well-being\")\n            analysis[\"mental_health_impact\"].append(\"High-quality sleep promotes emotional stability\")\n        elif sleep_quality \u003e= 0.6:\n            analysis[\"category\"] = \"good\"\n            analysis[\"health_contribution\"] = 0.25\n            analysis[\"insights\"].append(\"Good sleep quality with minor room for improvement\")\n            analysis[\"mental_health_impact\"].append(\"Sleep quality generally supports mental health\")\n        elif sleep_quality \u003e= 0.4:\n            analysis[\"category\"] = \"fair\"\n            analysis[\"insights\"].append(\"Fair sleep quality - improvement recommended\")\n            analysis[\"mental_health_impact\"].append(\"Sleep issues may be affecting emotional well-being\")\n            analysis[\"cognitive_impact\"].append(\"May experience reduced cognitive performance\")\n        elif sleep_quality \u003e= 0.2:\n            analysis[\"category\"] = \"poor\"\n            analysis[\"health_contribution\"] = 0.1\n            analysis[\"insights\"].append(\"Poor sleep quality significantly impacting health\")\n            analysis[\"mental_health_impact\"].extend([\n                \"Poor sleep strongly linked to depression and anxiety\",\n                \"Emotional regulation likely compromised\"\n            ])\n            analysis[\"cognitive_impact\"].append(\"Significant cognitive impairment likely\")\n        else:\n            analysis[\"category\"] = \"very_poor\"\n            analysis[\"health_contribution\"] = 0.05\n            analysis[\"insights\"].append(\"Very poor sleep quality requiring immediate attention\")\n            analysis[\"mental_health_impact\"].extend([\n                \"Severe sleep deprivation major risk factor for mental health crisis\",\n                \"Immediate intervention recommended\"\n            ])\n            analysis[\"cognitive_impact\"].append(\"Severe cognitive impairment expected\")\n        \n        return analysis\n    \n    def _analyze_hrv(self, hrv: float) -\u003e Dict:\n        \"\"\"Enhanced HRV analysis\"\"\"\n        analysis = {\n            \"value\": hrv,\n            \"category\": \"normal\",\n            \"health_contribution\": 0.2,\n            \"insights\": [],\n            \"stress_indicator\": False,\n            \"stress_reasons\": [],\n            \"autonomic_balance\": \"balanced\"\n        }\n        \n        if hrv \u003e= 70:\n            analysis[\"category\"] = \"exceptional\"\n            analysis[\"health_contribution\"] = 0.4\n            analysis[\"insights\"].append(\"Exceptional HRV indicates superior stress resilience\")\n            analysis[\"autonomic_balance\"] = \"excellent\"\n        elif hrv \u003e= 50:\n            analysis[\"category\"] = \"excellent\"\n            analysis[\"health_contribution\"] = 0.35\n            analysis[\"insights\"].append(\"Excellent HRV indicates very good autonomic balance\")\n            analysis[\"autonomic_balance\"] = \"very_good\"\n        elif hrv \u003e= 30:\n            analysis[\"category\"] = \"good\"\n            analysis[\"health_contribution\"] = 0.25\n            analysis[\"insights\"].append(\"Good HRV levels supporting stress management\")\n            analysis[\"autonomic_balance\"] = \"good\"\n        elif hrv \u003e= 20:\n            analysis[\"category\"] = \"fair\"\n            analysis[\"insights\"].append(\"Fair HRV - improvement possible with stress management\")\n            analysis[\"autonomic_balance\"] = \"slightly_impaired\"\n        elif hrv \u003e= 15:\n            analysis[\"category\"] = \"low\"\n            analysis[\"health_contribution\"] = 0.1\n            analysis[\"insights\"].append(\"Low HRV may indicate chronic stress or fatigue\")\n            analysis[\"stress_indicator\"] = True\n            analysis[\"stress_reasons\"].append(\"Low heart rate variability detected\")\n            analysis[\"autonomic_balance\"] = \"impaired\"\n        else:\n            analysis[\"category\"] = \"very_low\"\n            analysis[\"health_contribution\"] = 0.05\n            analysis[\"insights\"].append(\"Very low HRV indicates significant autonomic dysfunction\")\n            analysis[\"stress_indicator\"] = True\n            analysis[\"stress_reasons\"].append(\"Very low heart rate variability - concerning\")\n            analysis[\"autonomic_balance\"] = \"severely_impaired\"\n        \n        return analysis\n    \n    def _analyze_blood_oxygen(self, blood_oxygen: float) -\u003e Dict:\n        \"\"\"Analyze blood oxygen saturation\"\"\"\n        analysis = {\n            \"value\": blood_oxygen,\n            \"category\": \"normal\",\n            \"health_contribution\": 0.2,\n            \"insights\": [],\n            \"alerts\": []\n        }\n        \n        if blood_oxygen \u003e= 98:\n            analysis[\"category\"] = \"excellent\"\n            analysis[\"health_contribution\"] = 0.3\n            analysis[\"insights\"].append(\"Excellent oxygen saturation levels\")\n        elif blood_oxygen \u003e= 95:\n            analysis[\"category\"] = \"normal\"\n            analysis[\"health_contribution\"] = 0.25\n            analysis[\"insights\"].append(\"Normal oxygen saturation levels\")\n        elif blood_oxygen \u003e= 90:\n            analysis[\"category\"] = \"low_normal\"\n            analysis[\"health_contribution\"] = 0.15\n            analysis[\"insights\"].append(\"Low-normal oxygen levels - monitor closely\")\n            analysis[\"alerts\"].append(\"Oxygen levels below optimal range\")\n        elif blood_oxygen \u003e= 85:\n            analysis[\"category\"] = \"concerning\"\n            analysis[\"health_contribution\"] = 0.1\n            analysis[\"insights\"].append(\"Concerning oxygen levels - may need medical attention\")\n            analysis[\"alerts\"].append(\"Low oxygen saturation detected\")\n        else:\n            analysis[\"category\"] = \"critical\"\n            analysis[\"health_contribution\"] = 0.05\n            analysis[\"insights\"].append(\"Critical oxygen levels - immediate medical attention needed\")\n            analysis[\"alerts\"].append(\"Critically low oxygen saturation\")\n        \n        return analysis\n    \n    def _analyze_temperature(self, temperature: float) -\u003e Dict:\n        \"\"\"Analyze body temperature\"\"\"\n        analysis = {\n            \"value\": temperature,\n            \"category\": \"normal\",\n            \"health_contribution\": 0.2,\n            \"insights\": [],\n            \"fever_status\": \"none\"\n        }\n        \n        if temperature \u003c 97.0:\n            analysis[\"category\"] = \"low\"\n            analysis[\"health_contribution\"] = 0.15\n            analysis[\"insights\"].append(\"Below normal body temperature\")\n            analysis[\"fever_status\"] = \"hypothermia_risk\"\n        elif temperature \u003c= 99.5:\n            analysis[\"category\"] = \"normal\"\n            analysis[\"health_contribution\"] = 0.25\n            analysis[\"insights\"].append(\"Normal body temperature\")\n        elif temperature \u003c= 101.0:\n            analysis[\"category\"] = \"low_fever\"\n            analysis[\"health_contribution\"] = 0.2\n            analysis[\"insights\"].append(\"Low-grade fever detected\")\n            analysis[\"fever_status\"] = \"low_grade\"\n        elif temperature \u003c= 103.0:\n            analysis[\"category\"] = \"fever\"\n            analysis[\"health_contribution\"] = 0.1\n            analysis[\"insights\"].append(\"Fever detected - monitor symptoms\")\n            analysis[\"fever_status\"] = \"moderate\"\n        else:\n            analysis[\"category\"] = \"high_fever\"\n            analysis[\"health_contribution\"] = 0.05\n            analysis[\"insights\"].append(\"High fever - medical attention recommended\")\n            analysis[\"fever_status\"] = \"high\"\n        \n        return analysis\n    \n    def _analyze_activity_level(self, activity_level: int) -\u003e Dict:\n        \"\"\"Analyze physical activity level\"\"\"\n        analysis = {\n            \"value\": activity_level,\n            \"category\": \"moderate\",\n            \"health_contribution\": 0.15,\n            \"insights\": [],\n            \"mental_health_benefits\": []\n        }\n        \n        if activity_level \u003e= 12000:\n            analysis[\"category\"] = \"very_high\"\n            analysis[\"health_contribution\"] = 0.3\n            analysis[\"insights\"].append(\"Excellent activity levels supporting mental and physical health\")\n            analysis[\"mental_health_benefits\"].append(\"High activity supports mood regulation and stress relief\")\n        elif activity_level \u003e= 8000:\n            analysis[\"category\"] = \"high\"\n            analysis[\"health_contribution\"] = 0.25\n            analysis[\"insights\"].append(\"Good activity levels contributing to overall well-being\")\n            analysis[\"mental_health_benefits\"].append(\"Regular activity supports mental health\")\n        elif activity_level \u003e= 5000:\n            analysis[\"category\"] = \"moderate\"\n            analysis[\"health_contribution\"] = 0.2\n            analysis[\"insights\"].append(\"Moderate activity levels - room for improvement\")\n            analysis[\"mental_health_benefits\"].append(\"Some mental health benefits from current activity\")\n        elif activity_level \u003e= 2000:\n            analysis[\"category\"] = \"low\"\n            analysis[\"health_contribution\"] = 0.1\n            analysis[\"insights\"].append(\"Low activity levels - increased movement recommended\")\n            analysis[\"mental_health_benefits\"].append(\"Limited mental health benefits from low activity\")\n        else:\n            analysis[\"category\"] = \"very_low\"\n            analysis[\"health_contribution\"] = 0.05\n            analysis[\"insights\"].append(\"Very low activity levels - significant increase needed\")\n            analysis[\"mental_health_benefits\"].append(\"Minimal activity may contribute to mood issues\")\n        \n        return analysis\n    \n    def _generate_therapeutic_insights(self, patterns: Dict) -\u003e List[str]:\n        \"\"\"Generate enhanced therapeutic insights from biometric patterns\"\"\"\n        insights = []\n        \n        # Heart rate insights\n        if \"heart_rate\" in patterns:\n            hr_data = patterns[\"heart_rate\"]\n            if hr_data.get(\"stress_indicator\"):\n                insights.append(\"Elevated heart rate suggests physiological stress response that may correlate with anxiety\")\n            elif hr_data[\"category\"] == \"optimal\":\n                insights.append(\"Excellent heart rate indicates good cardiovascular health supporting emotional regulation\")\n        \n        # Stress level insights\n        if \"stress\" in patterns:\n            stress_data = patterns[\"stress\"]\n            if stress_data[\"category\"] in [\"very_high\", \"critical\"]:\n                insights.append(\"High physiological stress levels may be significantly impacting therapy effectiveness and daily functioning\")\n            elif stress_data[\"category\"] == \"low\":\n                insights.append(\"Low stress levels suggest good emotional regulation and receptiveness to therapeutic interventions\")\n        \n        # Sleep insights with mental health correlation\n        if \"sleep\" in patterns:\n            sleep_data = patterns[\"sleep\"]\n            if sleep_data[\"category\"] in [\"poor\", \"very_poor\"]:\n                insights.append(\"Poor sleep quality is strongly linked to depression and anxiety - addressing sleep should be a therapy priority\")\n            elif sleep_data[\"category\"] in [\"excellent\", \"exceptional\"]:\n                insights.append(\"Excellent sleep quality provides a strong foundation for mental health recovery and emotional stability\")\n        \n        # HRV insights\n        if \"hrv\" in patterns:\n            hrv_data = patterns[\"hrv\"]\n            if hrv_data[\"category\"] in [\"low\", \"very_low\"]:\n                insights.append(\"Low heart rate variability indicates reduced stress resilience and may correlate with depression or chronic anxiety\")\n            elif hrv_data[\"category\"] in [\"excellent\", \"exceptional\"]:\n                insights.append(\"High HRV shows excellent autonomic nervous system balance and stress resilience\")\n        \n        # Activity insights\n        if \"activity\" in patterns:\n            activity_data = patterns[\"activity\"]\n            if activity_data[\"category\"] in [\"low\", \"very_low\"]:\n                insights.append(\"Low physical activity levels may be contributing to mood issues - exercise is a powerful therapeutic tool\")\n            elif activity_data[\"category\"] in [\"high\", \"very_high\"]:\n                insights.append(\"High activity levels provide significant mental health benefits through endorphin release and stress reduction\")\n        \n        # Multi-metric correlations\n        stress_indicators = sum(1 for pattern in patterns.values() if pattern.get(\"stress_indicator\"))\n        if stress_indicators \u003e= 2:\n            insights.append(\"Multiple physiological stress indicators suggest need for comprehensive stress management in therapy\")\n        \n        # Positive correlation insights\n        positive_indicators = sum(1 for pattern in patterns.values() \n                                if pattern.get(\"category\") in [\"excellent\", \"exceptional\", \"optimal\"])\n        if positive_indicators \u003e= 2:\n            insights.append(\"Multiple positive health indicators suggest good physiological foundation for therapeutic progress\")\n        \n        return insights\n    \n    def _analyze_mental_health_correlations(self, patterns: Dict) -\u003e List[str]:\n        \"\"\"Analyze correlations between biometric data and mental health\"\"\"\n        correlations = []\n        \n        # Sleep-mood correlation\n        if \"sleep\" in patterns:\n            sleep_data = patterns[\"sleep\"]\n            if sleep_data[\"category\"] in [\"poor\", \"very_poor\"]:\n                correlations.append(\"Poor sleep strongly correlates with increased depression and anxiety symptoms\")\n            elif sleep_data[\"category\"] in [\"excellent\", \"exceptional\"]:\n                correlations.append(\"Excellent sleep quality correlates with improved mood stability and reduced anxiety\")\n        \n        # HRV-stress resilience correlation\n        if \"hrv\" in patterns:\n            hrv_data = patterns[\"hrv\"]\n            if hrv_data[\"category\"] in [\"low\", \"very_low\"]:\n                correlations.append(\"Low HRV correlates with reduced ability to cope with psychological stress\")\n            elif hrv_data[\"category\"] in [\"excellent\", \"exceptional\"]:\n                correlations.append(\"High HRV correlates with better emotional regulation and stress management\")\n        \n        # Activity-mood correlation\n        if \"activity\" in patterns:\n            activity_data = patterns[\"activity\"]\n            if activity_data[\"category\"] in [\"low\", \"very_low\"]:\n                correlations.append(\"Low activity levels correlate with increased risk of depression and reduced mood stability\")\n            elif activity_data[\"category\"] in [\"high\", \"very_high\"]:\n                correlations.append(\"High activity levels correlate with improved mood, reduced anxiety, and better stress management\")\n        \n        # Heart rate-anxiety correlation\n        if \"heart_rate\" in patterns:\n            hr_data = patterns[\"heart_rate\"]\n            if hr_data.get(\"stress_indicator\"):\n                correlations.append(\"Elevated heart rate may correlate with anxiety symptoms and panic responses\")\n        \n        return correlations\n    \n    def _generate_alerts(self, patterns: Dict, stress_indicators: List[str]) -\u003e List[Dict]:\n        \"\"\"Generate enhanced alerts based on biometric analysis\"\"\"\n        alerts = []\n        \n        # Critical heart rate alert\n        if \"heart_rate\" in patterns and patterns[\"heart_rate\"][\"value\"] \u003e 130:\n            alerts.append({\n                \"level\": \"critical\",\n                \"type\": \"cardiovascular\",\n                \"message\": \"Extremely elevated heart rate detected\",\n                \"action\": \"Consider immediate medical evaluation or emergency services\",\n                \"mental_health_note\": \"May indicate severe anxiety or panic attack\"\n            })\n        \n        # High stress alert\n        if \"stress\" in patterns and patterns[\"stress\"][\"category\"] in [\"very_high\", \"critical\"]:\n            alerts.append({\n                \"level\": \"warning\",\n                \"type\": \"psychological\",\n                \"message\": \"Very high physiological stress levels detected\",\n                \"action\": \"Implement immediate stress reduction techniques and consider crisis support\",\n                \"mental_health_note\": \"High stress levels significantly impact mental health and therapy effectiveness\"\n            })\n        \n        # Sleep crisis alert\n        if \"sleep\" in patterns and patterns[\"sleep\"][\"category\"] == \"very_poor\":\n            alerts.append({\n                \"level\": \"warning\",\n                \"type\": \"sleep\",\n                \"message\": \"Severe sleep deprivation affecting mental health\",\n                \"action\": \"Address sleep hygiene immediately - consider sleep medicine consultation\",\n                \"mental_health_note\": \"Severe sleep issues are major risk factor for mental health crisis\"\n            })\n        \n        # HRV concern alert\n        if \"hrv\" in patterns and patterns[\"hrv\"][\"category\"] == \"very_low\":\n            alerts.append({\n                \"level\": \"info\",\n                \"type\": \"autonomic\",\n                \"message\": \"Very low heart rate variability indicates autonomic dysfunction\",\n                \"action\": \"Focus on stress reduction and recovery practices\",\n                \"mental_health_note\": \"Low HRV correlates with reduced emotional resilience\"\n            })\n        \n        # Blood oxygen alert\n        if \"blood_oxygen\" in patterns and patterns[\"blood_oxygen\"][\"category\"] in [\"concerning\", \"critical\"]:\n            alerts.append({\n                \"level\": \"critical\",\n                \"type\": \"respiratory\",\n                \"message\": \"Low blood oxygen saturation detected\",\n                \"action\": \"Seek immediate medical attention\",\n                \"mental_health_note\": \"Low oxygen can affect cognitive function and mood\"\n            })\n        \n        # Temperature alert\n        if \"temperature\" in patterns and patterns[\"temperature\"][\"category\"] in [\"fever\", \"high_fever\"]:\n            alerts.append({\n                \"level\": \"warning\",\n                \"type\": \"temperature\",\n                \"message\": f\"Fever detected: {patterns['temperature']['value']}°F\",\n                \"action\": \"Monitor symptoms and consider medical consultation\",\n                \"mental_health_note\": \"Fever can affect mood and cognitive function\"\n            })\n        \n        return alerts\n    \n    def _generate_comprehensive_recommendations(self, analysis: Dict) -\u003e List[str]:\n        \"\"\"Generate comprehensive recommendations based on full analysis\"\"\"\n        recommendations = []\n        patterns = analysis.get(\"patterns\", {})\n        stress_indicators = analysis.get(\"stress_indicators\", [])\n        \n        # Stress management recommendations\n        if len(stress_indicators) \u003e= 2:\n            recommendations.extend([\n                \"Implement comprehensive stress management program including meditation, breathing exercises, and regular therapy\",\n                \"Consider stress-reduction techniques like progressive muscle relaxation and mindfulness\",\n                \"Monitor stress levels throughout the day and identify triggers\"\n            ])\n        elif stress_indicators:\n            recommendations.extend([\n                \"Practice daily stress reduction techniques\",\n                \"Consider mindfulness meditation or yoga\",\n                \"Monitor stress patterns and identify triggers\"\n            ])\n        \n        # Sleep recommendations\n        if \"sleep\" in patterns:\n            sleep_category = patterns[\"sleep\"][\"category\"]\n            if sleep_category in [\"poor\", \"very_poor\"]:\n                recommendations.extend([\n                    \"Prioritize sleep hygiene: consistent bedtime, dark room, no screens before bed\",\n                    \"Consider sleep medicine consultation if sleep issues persist\",\n                    \"Address sleep issues as primary therapy goal due to strong mental health impact\"\n                ])\n            elif sleep_category == \"fair\":\n                recommendations.extend([\n                    \"Improve sleep consistency and create better bedtime routine\",\n                    \"Limit caffeine and screen time before bed\"\n                ])\n        \n        # Heart rate recommendations\n        if \"heart_rate\" in patterns:\n            hr_data = patterns[\"heart_rate\"]\n            if hr_data.get(\"stress_indicator\"):\n                recommendations.extend([\n                    \"Practice heart rate variability training and coherent breathing\",\n                    \"Consider cardiovascular exercise to improve heart rate recovery\",\n                    \"Learn anxiety management techniques to reduce physiological stress response\"\n                ])\n            elif hr_data[\"category\"] == \"optimal\":\n                recommendations.append(\"Maintain current cardiovascular health practices\")\n        \n        # HRV recommendations\n        if \"hrv\" in patterns:\n            hrv_category = patterns[\"hrv\"][\"category\"]\n            if hrv_category in [\"low\", \"very_low\"]:\n                recommendations.extend([\n                    \"Focus on stress resilience building through HRV training\",\n                    \"Practice coherent breathing exercises daily\",\n                    \"Maintain regular sleep patterns and reduce chronic stressors\",\n                    \"Consider HRV biofeedback training\"\n                ])\n            elif hrv_category in [\"excellent\", \"exceptional\"]:\n                recommendations.append(\"Continue current practices that support excellent stress resilience\")\n        \n        # Activity recommendations\n        if \"activity\" in patterns:\n            activity_category = patterns[\"activity\"][\"category\"]\n            if activity_category in [\"low\", \"very_low\"]:\n                recommendations.extend([\n                    \"Gradually increase daily physical activity - even 10 minutes of walking helps mood\",\n                    \"Consider exercise as medicine: aim for 150 minutes moderate activity per week\",\n                    \"Try enjoyable activities like dancing, swimming, or hiking to boost mood naturally\"\n                ])\n            elif activity_category == \"moderate\":\n                recommendations.append(\"Consider increasing activity level for additional mental health benefits\")\n        \n        # Mental health integration recommendations\n        mental_health_correlations = analysis.get(\"mental_health_correlations\", [])\n        if mental_health_correlations:\n            recommendations.append(\"Discuss biometric patterns with therapist to integrate physical and mental health approaches\")\n        \n        # Data quality recommendations\n        data_quality = analysis.get(\"data_quality\", {})\n        if data_quality.get(\"completeness\", 1.0) \u003c 0.7:\n            recommendations.append(\"Consider wearing biometric device more consistently for better health insights\")\n        \n        return list(set(recommendations))  # Remove duplicates\n    \n    def _assess_data_quality(self, biometric_data: Dict) -\u003e Dict:\n        \"\"\"Assess the quality and completeness of biometric data\"\"\"\n        total_possible_metrics = 8  # heart_rate, stress_level, sleep_quality, hrv, blood_oxygen, temperature, activity_level, etc.\n        available_metrics = len([k for k in biometric_data.keys() if biometric_data[k] is not None])\n        \n        completeness = available_metrics / total_possible_metrics\n        \n        quality_assessment = {\n            \"completeness\": completeness,\n            \"available_metrics\": available_metrics,\n            \"missing_metrics\": total_possible_metrics - available_metrics,\n            \"quality_score\": completeness,\n            \"recommendations\": []\n        }\n        \n        if completeness \u003c 0.5:\n            quality_assessment[\"recommendations\"].append(\"Consider using a more comprehensive biometric monitoring device\")\n        elif completeness \u003c 0.8:\n            quality_assessment[\"recommendations\"].append(\"Additional biometric data would provide more comprehensive insights\")\n        \n        return quality_assessment\n    \n    def analyze_real_time(self, biometric_data: Dict) -\u003e Dict:\n        \"\"\"Enhanced real-time biometric data analysis during therapy session\"\"\"\n        real_time_analysis = {\n            \"current_state\": \"stable\",\n            \"stress_level\": 0,\n            \"alerts\": [],\n            \"recommendations\": [],\n            \"intervention_needed\": False,\n            \"store_data\": False,\n            \"timestamp\": datetime.now().isoformat()\n        }\n        \n        # Quick stress assessment with enhanced scoring\n        stress_score = 0\n        alert_reasons = []\n        \n        if \"heart_rate\" in biometric_data and isinstance(biometric_data[\"heart_rate\"], (int, float)):\n            hr = biometric_data[\"heart_rate\"]\n            if hr \u003e 120:\n                stress_score += 0.6\n                alert_reasons.append(f\"Very high heart rate: {hr} bpm\")\n                real_time_analysis[\"current_state\"] = \"high_stress\"\n            elif hr \u003e 100:\n                stress_score += 0.3\n                alert_reasons.append(f\"Elevated heart rate: {hr} bpm\")\n                real_time_analysis[\"current_state\"] = \"elevated\"\n        \n        if \"stress_level\" in biometric_data and isinstance(biometric_data[\"stress_level\"], (int, float)):\n            device_stress = biometric_data[\"stress_level\"]\n            stress_score += device_stress * 0.4\n            if device_stress \u003e 0.8:\n                alert_reasons.append(f\"Device stress level very high: {device_stress:.1%}\")\n        \n        if \"hrv\" in biometric_data and isinstance(biometric_data[\"hrv\"], (int, float)):\n            hrv = biometric_data[\"hrv\"]\n            if hrv \u003c 20:\n                stress_score += 0.3\n                alert_reasons.append(f\"Low heart rate variability: {hrv}\")\n        \n        if \"blood_oxygen\" in biometric_data and isinstance(biometric_data[\"blood_oxygen\"], (int, float)):\n            oxygen = biometric_data[\"blood_oxygen\"]\n            if oxygen \u003c 95:\n                stress_score += 0.2\n                alert_reasons.append(f\"Low blood oxygen: {oxygen}%\")\n                if oxygen \u003c 90:\n                    real_time_analysis[\"alerts\"].append({\n                        \"level\": \"critical\",\n                        \"message\": \"Low blood oxygen detected - consider medical attention\"\n                    })\n        \n        real_time_analysis[\"stress_level\"] = min(stress_score, 1.0)\n        \n        # Generate real-time recommendations with enhanced logic\n        if stress_score \u003e 0.8:\n            real_time_analysis[\"current_state\"] = \"crisis\"\n            real_time_analysis[\"intervention_needed\"] = True\n            real_time_analysis[\"recommendations\"] = [\n                \"Immediate intervention recommended - pause session\",\n                \"Guide patient through emergency calming techniques\",\n                \"Consider shortening session or providing crisis support\",\n                \"Monitor closely for panic attack symptoms\"\n            ]\n            real_time_analysis[\"store_data\"] = True\n        elif stress_score \u003e 0.6:\n            real_time_analysis[\"current_state\"] = \"high_stress\"\n            real_time_analysis[\"recommendations\"] = [\n                \"Take a brief pause in the session\",\n                \"Guide patient through deep breathing exercises\",\n                \"Check in with patient's comfort level and adjust pace\",\n                \"Consider stress reduction techniques\"\n            ]\n            real_time_analysis[\"store_data\"] = True\n        elif stress_score \u003e 0.4:\n            real_time_analysis[\"current_state\"] = \"moderate_stress\"\n            real_time_analysis[\"recommendations\"] = [\n                \"Monitor stress levels closely\",\n                \"Be prepared to implement relaxation techniques\",\n                \"Adjust session intensity if needed\"\n            ]\n        elif stress_score \u003c 0.2:\n            real_time_analysis[\"current_state\"] = \"relaxed\"\n            real_time_analysis[\"recommendations\"] = [\n                \"Patient appears physiologically calm\",\n                \"Good opportunity for deeper therapeutic work\",\n                \"Maintain current approach\"\n            ]\n        \n        # Add specific alerts for concerning patterns\n        if alert_reasons:\n            real_time_analysis[\"alerts\"].extend([\n                {\"level\": \"warning\", \"message\": reason} for reason in alert_reasons\n            ])\n        \n        return real_time_analysis\n    \n    def get_recommendations(self, analysis: Dict) -\u003e List[str]:\n        \"\"\"Get personalized recommendations based on comprehensive biometric analysis\"\"\"\n        return analysis.get(\"recommendations\", [\n            \"Continue monitoring biometric data for health insights\",\n            \"Maintain regular physical activity\",\n            \"Practice stress management techniques\",\n            \"Ensure adequate sleep quality\"\n        ])\n",
                "conversation_starters.py": "\"\"\"\nAI-powered conversation starters for couples therapy\nProvides contextual conversation prompts based on relationship stage, issues, and therapy goals\n\"\"\"\n\nimport random\nfrom datetime import datetime\nfrom typing import List, Dict\n\nclass ConversationStarterGenerator:\n    def __init__(self):\n        self.starters = {\n            'connection': [\n                {\n                    'prompt': \"What first attracted you to your partner?\",\n                    'follow_up': \"How has that attraction evolved over time?\",\n                    'category': 'appreciation',\n                    'depth': 'light'\n                },\n                {\n                    'prompt': \"Describe a moment when you felt most connected to your partner.\",\n                    'follow_up': \"What made that moment special?\",\n                    'category': 'intimacy',\n                    'depth': 'medium'\n                },\n                {\n                    'prompt': \"What's one thing your partner does that makes you feel loved?\",\n                    'follow_up': \"How often do you experience this?\",\n                    'category': 'love_languages',\n                    'depth': 'light'\n                },\n                {\n                    'prompt': \"Share a dream or goal you haven't discussed with your partner yet.\",\n                    'follow_up': \"What's holding you back from sharing this?\",\n                    'category': 'vulnerability',\n                    'depth': 'deep'\n                },\n                {\n                    'prompt': \"What adventure would you like to experience together?\",\n                    'follow_up': \"What's the first step to making this happen?\",\n                    'category': 'future_planning',\n                    'depth': 'medium'\n                }\n            ],\n            'communication': [\n                {\n                    'prompt': \"How do you prefer to receive feedback from your partner?\",\n                    'follow_up': \"Can you give an example of feedback that was helpful?\",\n                    'category': 'communication_style',\n                    'depth': 'medium'\n                },\n                {\n                    'prompt': \"What's one thing you wish your partner understood better about you?\",\n                    'follow_up': \"How could you help them understand this?\",\n                    'category': 'understanding',\n                    'depth': 'medium'\n                },\n                {\n                    'prompt': \"Describe your ideal way to resolve disagreements.\",\n                    'follow_up': \"What makes this approach work for you?\",\n                    'category': 'conflict_resolution',\n                    'depth': 'medium'\n                },\n                {\n                    'prompt': \"What topics do you find hardest to discuss with your partner?\",\n                    'follow_up': \"What would make these conversations easier?\",\n                    'category': 'difficult_topics',\n                    'depth': 'deep'\n                },\n                {\n                    'prompt': \"How do you show your partner you're listening?\",\n                    'follow_up': \"How do you know when they're really listening to you?\",\n                    'category': 'active_listening',\n                    'depth': 'light'\n                }\n            ],\n            'conflict_resolution': [\n                {\n                    'prompt': \"What's a recent disagreement you resolved well together?\",\n                    'follow_up': \"What made the resolution successful?\",\n                    'category': 'success_stories',\n                    'depth': 'medium'\n                },\n                {\n                    'prompt': \"How do you typically react when you're upset with your partner?\",\n                    'follow_up': \"Is this reaction helpful or harmful?\",\n                    'category': 'self_awareness',\n                    'depth': 'deep'\n                },\n                {\n                    'prompt': \"What's one recurring conflict in your relationship?\",\n                    'follow_up': \"What might be the deeper need behind this conflict?\",\n                    'category': 'patterns',\n                    'depth': 'deep'\n                },\n                {\n                    'prompt': \"How do you repair hurt feelings after an argument?\",\n                    'follow_up': \"What helps you forgive and move forward?\",\n                    'category': 'repair',\n                    'depth': 'medium'\n                },\n                {\n                    'prompt': \"What boundaries do you need in your relationship?\",\n                    'follow_up': \"How can you communicate these respectfully?\",\n                    'category': 'boundaries',\n                    'depth': 'deep'\n                }\n            ],\n            'intimacy': [\n                {\n                    'prompt': \"What makes you feel emotionally safe with your partner?\",\n                    'follow_up': \"How can you create more of this safety?\",\n                    'category': 'emotional_safety',\n                    'depth': 'deep'\n                },\n                {\n                    'prompt': \"How do you like to show affection?\",\n                    'follow_up': \"How does your partner prefer to receive affection?\",\n                    'category': 'affection',\n                    'depth': 'light'\n                },\n                {\n                    'prompt': \"What's your favorite way to spend quality time together?\",\n                    'follow_up': \"When did you last do this activity?\",\n                    'category': 'quality_time',\n                    'depth': 'light'\n                },\n                {\n                    'prompt': \"What does intimacy mean to you beyond physical connection?\",\n                    'follow_up': \"How can you deepen this type of intimacy?\",\n                    'category': 'emotional_intimacy',\n                    'depth': 'deep'\n                },\n                {\n                    'prompt': \"What fears do you have about being vulnerable?\",\n                    'follow_up': \"What would help you feel safer being vulnerable?\",\n                    'category': 'vulnerability',\n                    'depth': 'deep'\n                }\n            ],\n            'growth': [\n                {\n                    'prompt': \"How have you grown as a person since being with your partner?\",\n                    'follow_up': \"How has your partner contributed to this growth?\",\n                    'category': 'personal_growth',\n                    'depth': 'medium'\n                },\n                {\n                    'prompt': \"What's one thing you'd like to change about yourself for the relationship?\",\n                    'follow_up': \"What support do you need to make this change?\",\n                    'category': 'self_improvement',\n                    'depth': 'deep'\n                },\n                {\n                    'prompt': \"What shared goals do you have for the next year?\",\n                    'follow_up': \"What's the first step toward these goals?\",\n                    'category': 'future_planning',\n                    'depth': 'medium'\n                },\n                {\n                    'prompt': \"How do you support each other's individual dreams?\",\n                    'follow_up': \"Where could you offer more support?\",\n                    'category': 'support',\n                    'depth': 'medium'\n                },\n                {\n                    'prompt': \"What relationship skills would you like to develop?\",\n                    'follow_up': \"How can you practice these together?\",\n                    'category': 'skill_building',\n                    'depth': 'medium'\n                }\n            ],\n            'appreciation': [\n                {\n                    'prompt': \"What's something your partner did recently that you appreciated?\",\n                    'follow_up': \"Did you express this appreciation? How?\",\n                    'category': 'gratitude',\n                    'depth': 'light'\n                },\n                {\n                    'prompt': \"What qualities in your partner do you most admire?\",\n                    'follow_up': \"How do these qualities complement yours?\",\n                    'category': 'admiration',\n                    'depth': 'light'\n                },\n                {\n                    'prompt': \"Describe a time your partner was there for you when you needed them.\",\n                    'follow_up': \"How did their support impact you?\",\n                    'category': 'support',\n                    'depth': 'medium'\n                },\n                {\n                    'prompt': \"What small gestures from your partner mean the most to you?\",\n                    'follow_up': \"How often do you notice these gestures?\",\n                    'category': 'small_things',\n                    'depth': 'light'\n                },\n                {\n                    'prompt': \"How has your partner made you a better person?\",\n                    'follow_up': \"Have you told them this?\",\n                    'category': 'impact',\n                    'depth': 'medium'\n                }\n            ],\n            'fun': [\n                {\n                    'prompt': \"What's the funniest memory you share together?\",\n                    'follow_up': \"What made this moment so memorable?\",\n                    'category': 'humor',\n                    'depth': 'light'\n                },\n                {\n                    'prompt': \"If you could plan the perfect date, what would it be?\",\n                    'follow_up': \"What elements would make it special for both of you?\",\n                    'category': 'romance',\n                    'depth': 'light'\n                },\n                {\n                    'prompt': \"What's a new activity you'd both like to try?\",\n                    'follow_up': \"What's stopping you from trying it?\",\n                    'category': 'adventure',\n                    'depth': 'light'\n                },\n                {\n                    'prompt': \"What inside jokes do you share?\",\n                    'follow_up': \"How did these jokes start?\",\n                    'category': 'humor',\n                    'depth': 'light'\n                },\n                {\n                    'prompt': \"If you could travel anywhere together, where would it be?\",\n                    'follow_up': \"What would you do there?\",\n                    'category': 'dreams',\n                    'depth': 'light'\n                }\n            ]\n        }\n        \n        # Contextual modifiers based on relationship stage\n        self.stage_modifiers = {\n            'new': ['getting to know', 'discovering', 'exploring'],\n            'established': ['deepening', 'maintaining', 'strengthening'],\n            'struggling': ['rebuilding', 'reconnecting', 'healing'],\n            'growing': ['evolving', 'transforming', 'advancing']\n        }\n        \n    def get_starter(self, category: str = 'random', depth: str = 'medium', \n                   relationship_stage: str = 'established', \n                   recent_topics: List[str] = []) -\u003e Dict:\n        \"\"\"\n        Get a conversation starter based on parameters\n        \n        Args:\n            category: Type of conversation (connection, communication, etc.)\n            depth: Conversation depth (light, medium, deep)\n            relationship_stage: Current stage of relationship\n            recent_topics: Recently discussed topics to avoid repetition\n            \n        Returns:\n            Dictionary with starter prompt and metadata\n        \"\"\"\n        if category == 'random':\n            category = random.choice(list(self.starters.keys()))\n            \n        if category not in self.starters:\n            category = 'connection'  # Default fallback\n            \n        # Filter by depth if specified\n        available_starters = [s for s in self.starters[category] \n                            if depth == 'any' or s['depth'] == depth]\n        \n        if not available_starters:\n            available_starters = self.starters[category]\n            \n        # Avoid recent topics if provided\n        if recent_topics:\n            filtered = [s for s in available_starters \n                       if s['category'] not in recent_topics]\n            if filtered:\n                available_starters = filtered\n                \n        starter = random.choice(available_starters)\n        \n        # Add contextual elements based on relationship stage\n        if relationship_stage in self.stage_modifiers:\n            modifier = random.choice(self.stage_modifiers[relationship_stage])\n            starter['context'] = f\"Focus on {modifier} your relationship\"\n            \n        starter['timestamp'] = datetime.now().isoformat()\n        starter['main_category'] = category\n        \n        return starter\n        \n    def get_themed_sequence(self, theme: str, count: int = 5) -\u003e List[Dict]:\n        \"\"\"\n        Get a sequence of related conversation starters\n        \n        Args:\n            theme: Overall theme for the sequence\n            count: Number of starters to return\n            \n        Returns:\n            List of conversation starters\n        \"\"\"\n        if theme not in self.starters:\n            theme = 'connection'\n            \n        sequence = []\n        used_categories = []\n        \n        for i in range(min(count, len(self.starters[theme]))):\n            available = [s for s in self.starters[theme] \n                        if s['category'] not in used_categories]\n            if not available:\n                available = self.starters[theme]\n                used_categories = []\n                \n            starter = random.choice(available)\n            starter['sequence_number'] = str(i + 1)\n            starter['theme'] = theme\n            sequence.append(starter.copy())\n            used_categories.append(starter['category'])\n            \n        return sequence\n        \n    def get_ice_breaker(self) -\u003e Dict:\n        \"\"\"Get a light, fun conversation starter for beginning sessions\"\"\"\n        fun_categories = ['fun', 'appreciation']\n        category = random.choice(fun_categories)\n        light_starters = [s for s in self.starters[category] if s['depth'] == 'light']\n        \n        if light_starters:\n            return random.choice(light_starters)\n        else:\n            return random.choice(self.starters[category])\n            \n    def get_deeper_prompt(self, current_topic: str) -\u003e Dict:\n        \"\"\"Get a deeper follow-up prompt based on current discussion\"\"\"\n        # Find starters related to current topic\n        related_starters = []\n        \n        for category, starters in self.starters.items():\n            for starter in starters:\n                if (starter['depth'] in ['medium', 'deep'] and \n                    any(word in starter['prompt'].lower() for word in current_topic.lower().split())):\n                    related_starters.append(starter)\n                    \n        if related_starters:\n            return random.choice(related_starters)\n        else:\n            # Return a deep starter from any category\n            deep_starters = []\n            for starters in self.starters.values():\n                deep_starters.extend([s for s in starters if s['depth'] == 'deep'])\n            return random.choice(deep_starters)\n            \n    def get_categories(self) -\u003e List[str]:\n        \"\"\"Get all available conversation categories\"\"\"\n        return list(self.starters.keys())\n        \n    def get_by_issue(self, issue: str) -\u003e Dict:\n        \"\"\"Get conversation starter based on specific relationship issue\"\"\"\n        issue_mapping = {\n            'trust': 'communication',\n            'distance': 'connection',\n            'arguing': 'conflict_resolution',\n            'boredom': 'fun',\n            'passion': 'intimacy',\n            'support': 'appreciation',\n            'future': 'growth'\n        }\n        \n        category = issue_mapping.get(issue.lower(), 'connection')\n        return self.get_starter(category=category)",
                "crisis_intervention_system.py": "\"\"\"\nCrisis Intervention \u0026 Emergency Response System\n24/7 crisis support, emergency protocols, and safety planning\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Any, Optional, Tuple\nfrom datetime import datetime, timedelta\nimport json\nimport uuid\nfrom enum import Enum\nimport random\n\nclass CrisisLevel(Enum):\n    GREEN = \"green\"  # No immediate risk\n    YELLOW = \"yellow\"  # Elevated risk, monitoring needed\n    ORANGE = \"orange\"  # High risk, intervention required\n    RED = \"red\"  # Critical risk, immediate action needed\n    PURPLE = \"purple\"  # Active emergency, 911/emergency services\n\nclass InterventionType(Enum):\n    AUTOMATED_CHECK_IN = \"automated_check_in\"\n    PEER_SUPPORT = \"peer_support\"\n    CRISIS_COUNSELOR = \"crisis_counselor\"\n    THERAPIST_ALERT = \"therapist_alert\"\n    EMERGENCY_CONTACT = \"emergency_contact\"\n    EMERGENCY_SERVICES = \"emergency_services\"\n    SAFETY_PLAN_ACTIVATION = \"safety_plan_activation\"\n    HOSPITALIZATION = \"hospitalization\"\n\nclass ResponseChannel(Enum):\n    IN_APP_CHAT = \"in_app_chat\"\n    SMS = \"sms\"\n    PHONE_CALL = \"phone_call\"\n    VIDEO_CALL = \"video_call\"\n    EMAIL = \"email\"\n    PUSH_NOTIFICATION = \"push_notification\"\n    EMERGENCY_DISPATCH = \"emergency_dispatch\"\n\nclass SafetyPlanElement(Enum):\n    WARNING_SIGNS = \"warning_signs\"\n    COPING_STRATEGIES = \"coping_strategies\"\n    SUPPORT_CONTACTS = \"support_contacts\"\n    PROFESSIONAL_CONTACTS = \"professional_contacts\"\n    ENVIRONMENT_SAFETY = \"environment_safety\"\n    EMERGENCY_SERVICES = \"emergency_services\"\n\n@dataclass\nclass CrisisAlert:\n    alert_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    crisis_level: CrisisLevel = CrisisLevel.YELLOW\n    trigger_source: str = \"behavioral_analysis\"  # behavioral_analysis, user_report, third_party\n    trigger_data: Dict[str, Any] = field(default_factory=dict)\n    risk_factors: List[str] = field(default_factory=list)\n    protective_factors: List[str] = field(default_factory=list)\n    immediate_concerns: List[str] = field(default_factory=list)\n    created_at: datetime = field(default_factory=datetime.now)\n    escalated_at: Optional[datetime] = None\n    resolved_at: Optional[datetime] = None\n    response_time_seconds: Optional[float] = None\n    interventions_triggered: List[InterventionType] = field(default_factory=list)\n\n@dataclass\nclass SafetyPlan:\n    plan_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    created_with_therapist: bool = True\n    warning_signs: List[str] = field(default_factory=list)\n    internal_coping_strategies: List[str] = field(default_factory=list)\n    social_support_contacts: List[Dict[str, str]] = field(default_factory=list)\n    professional_contacts: List[Dict[str, str]] = field(default_factory=list)\n    environmental_safety_steps: List[str] = field(default_factory=list)\n    emergency_services_info: Dict[str, str] = field(default_factory=dict)\n    personalized_reminders: List[str] = field(default_factory=list)\n    created_at: datetime = field(default_factory=datetime.now)\n    last_updated: datetime = field(default_factory=datetime.now)\n    last_reviewed: Optional[datetime] = None\n    activation_count: int = 0\n\n@dataclass\nclass CrisisIntervention:\n    intervention_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    alert_id: str = \"\"\n    user_id: str = \"\"\n    intervention_type: InterventionType = InterventionType.AUTOMATED_CHECK_IN\n    response_channel: ResponseChannel = ResponseChannel.IN_APP_CHAT\n    initiated_at: datetime = field(default_factory=datetime.now)\n    responder_id: Optional[str] = None  # Crisis counselor or therapist ID\n    response_content: str = \"\"\n    user_response: Optional[str] = None\n    response_received_at: Optional[datetime] = None\n    intervention_outcome: Optional[str] = None\n    effectiveness_score: Optional[float] = None\n    follow_up_required: bool = False\n    follow_up_scheduled: Optional[datetime] = None\n\n@dataclass\nclass EmergencyContact:\n    contact_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    name: str = \"\"\n    relationship: str = \"\"\n    phone_number: str = \"\"\n    email: str = \"\"\n    priority_level: int = 1  # 1 = highest priority\n    can_be_contacted_24_7: bool = True\n    preferred_contact_method: ResponseChannel = ResponseChannel.PHONE_CALL\n    location: str = \"\"\n    special_instructions: str = \"\"\n    last_contacted: Optional[datetime] = None\n    consent_to_contact: bool = True\n\n@dataclass\nclass CrisisCounselor:\n    counselor_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    name: str = \"\"\n    credentials: List[str] = field(default_factory=list)\n    specializations: List[str] = field(default_factory=list)\n    languages: List[str] = field(default_factory=list)\n    availability_schedule: Dict[str, List[str]] = field(default_factory=dict)\n    current_case_load: int = 0\n    max_case_load: int = 10\n    status: str = \"available\"  # available, busy, offline\n    response_time_avg: float = 180.0  # seconds\n    effectiveness_rating: float = 4.5\n    total_interventions: int = 0\n\n@dataclass\nclass ResourceDirectory:\n    resource_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    name: str = \"\"\n    resource_type: str = \"hotline\"  # hotline, website, app, location\n    description: str = \"\"\n    phone_number: Optional[str] = None\n    website_url: Optional[str] = None\n    available_24_7: bool = False\n    languages_supported: List[str] = field(default_factory=list)\n    geographic_coverage: List[str] = field(default_factory=list)\n    target_demographics: List[str] = field(default_factory=list)\n    specialties: List[str] = field(default_factory=list)\n    cost: str = \"free\"\n    accessibility_features: List[str] = field(default_factory=list)\n\nclass CrisisInterventionSystem:\n    def __init__(self):\n        self.active_alerts: Dict[str, CrisisAlert] = {}\n        self.safety_plans: Dict[str, SafetyPlan] = {}\n        self.interventions: Dict[str, List[CrisisIntervention]] = {}\n        self.emergency_contacts: Dict[str, List[EmergencyContact]] = {}\n        self.crisis_counselors: Dict[str, CrisisCounselor] = {}\n        self.resource_directory = self._initialize_resource_directory()\n        self.escalation_protocols = self._initialize_escalation_protocols()\n\n    def _initialize_resource_directory(self) -\u003e List[ResourceDirectory]:\n        \"\"\"Initialize crisis resource directory\"\"\"\n        resources = []\n\n        # National crisis hotlines\n        resources.append(ResourceDirectory(\n            name=\"988 Suicide \u0026 Crisis Lifeline\",\n            resource_type=\"hotline\",\n            description=\"24/7 crisis support for suicidal thoughts or emotional distress\",\n            phone_number=\"988\",\n            website_url=\"https://988lifeline.org\",\n            available_24_7=True,\n            languages_supported=[\"English\", \"Spanish\"],\n            geographic_coverage=[\"United States\"],\n            specialties=[\"suicide_prevention\", \"crisis_counseling\"],\n            accessibility_features=[\"hearing_impaired\", \"chat_support\"]\n        ))\n\n        resources.append(ResourceDirectory(\n            name=\"Crisis Text Line\",\n            resource_type=\"hotline\",\n            description=\"24/7 crisis support via text messaging\",\n            phone_number=\"741741\",\n            website_url=\"https://crisistextline.org\",\n            available_24_7=True,\n            languages_supported=[\"English\", \"Spanish\"],\n            geographic_coverage=[\"United States\", \"Canada\", \"United Kingdom\"],\n            specialties=[\"crisis_counseling\", \"youth_support\"],\n            accessibility_features=[\"text_based\", \"anonymous\"]\n        ))\n\n        # Specialized support lines\n        resources.append(ResourceDirectory(\n            name=\"National Domestic Violence Hotline\",\n            resource_type=\"hotline\",\n            description=\"24/7 support for domestic violence situations\",\n            phone_number=\"1-800-799-7233\",\n            website_url=\"https://thehotline.org\",\n            available_24_7=True,\n            languages_supported=[\"English\", \"Spanish\", \"200+ languages via interpretation\"],\n            specialties=[\"domestic_violence\", \"safety_planning\"],\n            accessibility_features=[\"TTY\", \"online_chat\"]\n        ))\n\n        resources.append(ResourceDirectory(\n            name=\"SAMHSA National Helpline\",\n            resource_type=\"hotline\",\n            description=\"24/7 treatment referral and information service\",\n            phone_number=\"1-800-662-4357\",\n            website_url=\"https://samhsa.gov\",\n            available_24_7=True,\n            languages_supported=[\"English\", \"Spanish\"],\n            specialties=[\"substance_abuse\", \"mental_health_treatment\", \"referrals\"],\n            accessibility_features=[\"TTY\"]\n        ))\n\n        # International resources\n        resources.append(ResourceDirectory(\n            name=\"Samaritans (UK)\",\n            resource_type=\"hotline\",\n            description=\"24/7 emotional support for anyone in distress\",\n            phone_number=\"116 123\",\n            website_url=\"https://samaritans.org\",\n            available_24_7=True,\n            languages_supported=[\"English\"],\n            geographic_coverage=[\"United Kingdom\", \"Ireland\"],\n            specialties=[\"emotional_support\", \"suicide_prevention\"]\n        ))\n\n        # Online resources\n        resources.append(ResourceDirectory(\n            name=\"7 Cups\",\n            resource_type=\"website\",\n            description=\"Free emotional support and online therapy\",\n            website_url=\"https://7cups.com\",\n            available_24_7=True,\n            languages_supported=[\"English\", \"Spanish\", \"French\", \"German\"],\n            cost=\"free_and_paid\",\n            specialties=[\"peer_support\", \"online_therapy\", \"chat_support\"]\n        ))\n\n        return resources\n\n    def _initialize_escalation_protocols(self) -\u003e Dict[CrisisLevel, Dict[str, Any]]:\n        \"\"\"Initialize crisis escalation protocols\"\"\"\n        return {\n            CrisisLevel.GREEN: {\n                \"response_time_max\": 3600,  # 1 hour\n                \"interventions\": [InterventionType.AUTOMATED_CHECK_IN],\n                \"escalation_criteria\": [\"no_response_24h\", \"risk_factors_increase\"],\n                \"monitoring_frequency\": \"daily\"\n            },\n            CrisisLevel.YELLOW: {\n                \"response_time_max\": 1800,  # 30 minutes\n                \"interventions\": [InterventionType.AUTOMATED_CHECK_IN, InterventionType.PEER_SUPPORT],\n                \"escalation_criteria\": [\"suicidal_ideation\", \"self_harm_intent\", \"no_response_2h\"],\n                \"monitoring_frequency\": \"every_4_hours\"\n            },\n            CrisisLevel.ORANGE: {\n                \"response_time_max\": 600,  # 10 minutes\n                \"interventions\": [InterventionType.CRISIS_COUNSELOR, InterventionType.THERAPIST_ALERT],\n                \"escalation_criteria\": [\"immediate_danger\", \"suicide_plan\", \"self_harm_attempt\"],\n                \"monitoring_frequency\": \"every_hour\"\n            },\n            CrisisLevel.RED: {\n                \"response_time_max\": 180,  # 3 minutes\n                \"interventions\": [InterventionType.CRISIS_COUNSELOR, InterventionType.EMERGENCY_CONTACT, InterventionType.SAFETY_PLAN_ACTIVATION],\n                \"escalation_criteria\": [\"active_suicide_attempt\", \"imminent_danger\", \"psychosis\"],\n                \"monitoring_frequency\": \"continuous\"\n            },\n            CrisisLevel.PURPLE: {\n                \"response_time_max\": 60,  # 1 minute\n                \"interventions\": [InterventionType.EMERGENCY_SERVICES, InterventionType.EMERGENCY_CONTACT],\n                \"escalation_criteria\": [],  # Highest level\n                \"monitoring_frequency\": \"continuous\"\n            }\n        }\n\n    def assess_crisis_level(self, user_id: str, trigger_data: Dict[str, Any], trigger_source: str) -\u003e CrisisAlert:\n        \"\"\"Assess crisis level based on multiple risk factors\"\"\"\n\n        # Initialize risk scoring\n        risk_score = 0\n        risk_factors = []\n        protective_factors = []\n        immediate_concerns = []\n\n        # Analyze trigger data based on source\n        if trigger_source == \"behavioral_analysis\":\n            risk_score += self._assess_behavioral_risk(trigger_data, risk_factors)\n        elif trigger_source == \"user_report\":\n            risk_score += self._assess_user_reported_risk(trigger_data, risk_factors, immediate_concerns)\n        elif trigger_source == \"third_party\":\n            risk_score += self._assess_third_party_risk(trigger_data, risk_factors)\n\n        # Factor in protective elements\n        protective_score = self._assess_protective_factors(user_id, protective_factors)\n        adjusted_risk = max(0, risk_score - protective_score)\n\n        # Determine crisis level\n        crisis_level = self._determine_crisis_level(adjusted_risk, immediate_concerns)\n\n        # Create crisis alert\n        alert = CrisisAlert(\n            user_id=user_id,\n            crisis_level=crisis_level,\n            trigger_source=trigger_source,\n            trigger_data=trigger_data,\n            risk_factors=risk_factors,\n            protective_factors=protective_factors,\n            immediate_concerns=immediate_concerns\n        )\n\n        self.active_alerts[alert.alert_id] = alert\n\n        # Trigger immediate response\n        self._initiate_crisis_response(alert)\n\n        return alert\n\n    def _assess_behavioral_risk(self, data: Dict[str, Any], risk_factors: List[str]) -\u003e float:\n        \"\"\"Assess risk from behavioral analysis data\"\"\"\n        risk_score = 0\n\n        # Sleep disruption\n        if data.get(\"sleep_disruption_severity\", 0) \u003e 0.7:\n            risk_score += 15\n            risk_factors.append(\"severe_sleep_disruption\")\n\n        # Social withdrawal\n        if data.get(\"social_withdrawal_score\", 0) \u003e 0.8:\n            risk_score += 20\n            risk_factors.append(\"extreme_social_isolation\")\n\n        # Mood indicators\n        if data.get(\"negative_sentiment_score\", 0) \u003e 0.9:\n            risk_score += 25\n            risk_factors.append(\"severe_negative_mood\")\n\n        # Communication patterns\n        if data.get(\"communication_decline\", 0) \u003e 0.9:\n            risk_score += 15\n            risk_factors.append(\"communication_shutdown\")\n\n        # Stress levels\n        if data.get(\"stress_level\", 0) \u003e 0.9:\n            risk_score += 20\n            risk_factors.append(\"extreme_stress\")\n\n        return risk_score\n\n    def _assess_user_reported_risk(self, data: Dict[str, Any], risk_factors: List[str], immediate_concerns: List[str]) -\u003e float:\n        \"\"\"Assess risk from user self-reporting\"\"\"\n        risk_score = 0\n\n        # Direct suicidal ideation\n        if data.get(\"suicidal_thoughts\", False):\n            if data.get(\"suicide_plan\", False):\n                risk_score += 80\n                immediate_concerns.append(\"suicide_plan_identified\")\n                risk_factors.append(\"active_suicide_planning\")\n            else:\n                risk_score += 50\n                risk_factors.append(\"suicidal_ideation\")\n\n        # Self-harm indicators\n        if data.get(\"self_harm_intent\", False):\n            risk_score += 40\n            immediate_concerns.append(\"self_harm_intent\")\n            risk_factors.append(\"self_harm_risk\")\n\n        # Hopelessness\n        if data.get(\"hopelessness_score\", 0) \u003e 8:  # 1-10 scale\n            risk_score += 30\n            risk_factors.append(\"severe_hopelessness\")\n\n        # Substance use\n        if data.get(\"substance_use_increase\", False):\n            risk_score += 20\n            risk_factors.append(\"substance_abuse_escalation\")\n\n        # Crisis request\n        if data.get(\"crisis_help_requested\", False):\n            risk_score += 60\n            immediate_concerns.append(\"user_requesting_crisis_help\")\n\n        return risk_score\n\n    def _assess_third_party_risk(self, data: Dict[str, Any], risk_factors: List[str]) -\u003e float:\n        \"\"\"Assess risk from third-party reports (family, friends, providers)\"\"\"\n        risk_score = 0\n\n        reporter_relationship = data.get(\"reporter_relationship\", \"\")\n\n        # High-credibility reporters\n        if reporter_relationship in [\"therapist\", \"psychiatrist\", \"family_member\"]:\n            credibility_multiplier = 1.5\n        else:\n            credibility_multiplier = 1.0\n\n        # Reported concerns\n        concerns = data.get(\"reported_concerns\", [])\n\n        concern_weights = {\n            \"expressed_suicidal_thoughts\": 70,\n            \"suicide_attempt\": 90,\n            \"self_harm_behavior\": 50,\n            \"extreme_mood_changes\": 30,\n            \"substance_abuse\": 25,\n            \"psychotic_symptoms\": 60,\n            \"aggressive_behavior\": 40,\n            \"complete_withdrawal\": 35\n        }\n\n        for concern in concerns:\n            if concern in concern_weights:\n                weighted_score = concern_weights[concern] * credibility_multiplier\n                risk_score += weighted_score\n                risk_factors.append(f\"third_party_reported_{concern}\")\n\n        return risk_score\n\n    def _assess_protective_factors(self, user_id: str, protective_factors: List[str]) -\u003e float:\n        \"\"\"Assess protective factors that reduce risk\"\"\"\n        protective_score = 0\n\n        # Active safety plan\n        if self.safety_plans.get(user_id):\n            protective_score += 15\n            protective_factors.append(\"active_safety_plan\")\n\n        # Recent therapy engagement\n        # (Would check therapy system for recent sessions)\n        if random.choice([True, False]):  # Simulated\n            protective_score += 10\n            protective_factors.append(\"recent_therapy_engagement\")\n\n        # Strong support network\n        emergency_contacts = self.emergency_contacts.get(user_id, [])\n        if len(emergency_contacts) \u003e= 3:\n            protective_score += 10\n            protective_factors.append(\"strong_support_network\")\n\n        # Medication compliance\n        # (Would check medication tracking system)\n        if random.choice([True, False]):  # Simulated\n            protective_score += 8\n            protective_factors.append(\"medication_compliance\")\n\n        # Recent positive activities\n        # (Would check activity tracking)\n        if random.choice([True, False]):  # Simulated\n            protective_score += 5\n            protective_factors.append(\"recent_positive_activities\")\n\n        return protective_score\n\n    def _determine_crisis_level(self, risk_score: float, immediate_concerns: List[str]) -\u003e CrisisLevel:\n        \"\"\"Determine crisis level based on risk score and immediate concerns\"\"\"\n\n        # Immediate escalation for certain concerns\n        critical_concerns = [\"suicide_plan_identified\", \"active_suicide_attempt\", \"imminent_danger\"]\n        if any(concern in immediate_concerns for concern in critical_concerns):\n            return CrisisLevel.RED\n\n        emergency_concerns = [\"ongoing_suicide_attempt\", \"active_psychosis\", \"violent_behavior\"]\n        if any(concern in immediate_concerns for concern in emergency_concerns):\n            return CrisisLevel.PURPLE\n\n        # Score-based assessment\n        if risk_score \u003e= 70:\n            return CrisisLevel.RED\n        elif risk_score \u003e= 50:\n            return CrisisLevel.ORANGE\n        elif risk_score \u003e= 25:\n            return CrisisLevel.YELLOW\n        else:\n            return CrisisLevel.GREEN\n\n    def _initiate_crisis_response(self, alert: CrisisAlert):\n        \"\"\"Initiate appropriate crisis response based on alert level\"\"\"\n        protocol = self.escalation_protocols[alert.crisis_level]\n\n        # Record response initiation time\n        response_start = datetime.now()\n\n        # Trigger appropriate interventions\n        for intervention_type in protocol[\"interventions\"]:\n            self._execute_intervention(alert, intervention_type)\n\n        # Calculate response time\n        alert.response_time_seconds = (datetime.now() - response_start).total_seconds()\n\n    def _execute_intervention(self, alert: CrisisAlert, intervention_type: InterventionType):\n        \"\"\"Execute specific crisis intervention\"\"\"\n\n        intervention = CrisisIntervention(\n            alert_id=alert.alert_id,\n            user_id=alert.user_id,\n            intervention_type=intervention_type\n        )\n\n        if intervention_type == InterventionType.AUTOMATED_CHECK_IN:\n            intervention.response_channel = ResponseChannel.IN_APP_CHAT\n            intervention.response_content = self._generate_check_in_message(alert)\n\n        elif intervention_type == InterventionType.CRISIS_COUNSELOR:\n            counselor = self._assign_crisis_counselor(alert)\n            if counselor:\n                intervention.responder_id = counselor.counselor_id\n                intervention.response_channel = ResponseChannel.VIDEO_CALL\n                intervention.response_content = \"Crisis counselor assigned and initiating contact\"\n\n        elif intervention_type == InterventionType.EMERGENCY_CONTACT:\n            self._contact_emergency_contacts(alert, intervention)\n\n        elif intervention_type == InterventionType.SAFETY_PLAN_ACTIVATION:\n            self._activate_safety_plan(alert, intervention)\n\n        elif intervention_type == InterventionType.EMERGENCY_SERVICES:\n            self._contact_emergency_services(alert, intervention)\n\n        # Store intervention\n        if alert.user_id not in self.interventions:\n            self.interventions[alert.user_id] = []\n        self.interventions[alert.user_id].append(intervention)\n\n        alert.interventions_triggered.append(intervention_type)\n\n    def _generate_check_in_message(self, alert: CrisisAlert) -\u003e str:\n        \"\"\"Generate personalized check-in message\"\"\"\n\n        if alert.crisis_level == CrisisLevel.YELLOW:\n            return (\"Hi there. I've noticed you might be going through a tough time. \"\n                   \"How are you feeling right now? Remember that support is available 24/7. \"\n                   \"Would you like to talk to someone or review your safety plan?\")\n\n        elif alert.crisis_level == CrisisLevel.ORANGE:\n            return (\"I'm concerned about you and want to make sure you're safe. \"\n                   \"You're not alone in this. A crisis counselor is standing by to talk. \"\n                   \"If you're having thoughts of hurting yourself, please reach out immediately. \"\n                   \"Text 'CRISIS' for immediate help or call 988.\")\n\n        elif alert.crisis_level == CrisisLevel.RED:\n            return (\"This is an urgent safety check. If you're in immediate danger, please call 911. \"\n                   \"A crisis counselor is being connected to you right now. \"\n                   \"You matter and help is available. Please stay safe.\")\n\n        else:\n            return (\"Just checking in to see how you're doing today. \"\n                   \"Remember that support is always available if you need it.\")\n\n    def _assign_crisis_counselor(self, alert: CrisisAlert) -\u003e Optional[CrisisCounselor]:\n        \"\"\"Assign available crisis counselor\"\"\"\n\n        # Find available counselors\n        available_counselors = [\n            counselor for counselor in self.crisis_counselors.values()\n            if counselor.status == \"available\" and counselor.current_case_load \u003c counselor.max_case_load\n        ]\n\n        if not available_counselors:\n            # Escalate to backup system\n            return None\n\n        # Select best match based on specialization and response time\n        best_counselor = min(available_counselors,\n                           key=lambda c: c.response_time_avg)\n\n        # Update counselor status\n        best_counselor.current_case_load += 1\n        best_counselor.status = \"busy\"\n\n        return best_counselor\n\n    def _contact_emergency_contacts(self, alert: CrisisAlert, intervention: CrisisIntervention):\n        \"\"\"Contact user's emergency contacts\"\"\"\n        contacts = self.emergency_contacts.get(alert.user_id, [])\n\n        if not contacts:\n            intervention.response_content = \"No emergency contacts available\"\n            return\n\n        # Sort by priority and contact\n        contacts.sort(key=lambda c: c.priority_level)\n\n        contacted_successfully = []\n        for contact in contacts[:3]:  # Contact top 3 priority contacts\n            if contact.can_be_contacted_24_7 or self._is_appropriate_time():\n                # Simulate contact attempt\n                if random.random() \u003e 0.2:  # 80% success rate\n                    contacted_successfully.append(contact.name)\n                    contact.last_contacted = datetime.now()\n\n        intervention.response_content = f\"Emergency contacts notified: {', '.join(contacted_successfully)}\"\n        intervention.response_channel = ResponseChannel.PHONE_CALL\n\n    def _activate_safety_plan(self, alert: CrisisAlert, intervention: CrisisIntervention):\n        \"\"\"Activate user's safety plan\"\"\"\n        safety_plan = self.safety_plans.get(alert.user_id)\n\n        if not safety_plan:\n            intervention.response_content = \"No safety plan available - creating emergency plan\"\n            self._create_emergency_safety_plan(alert.user_id)\n            return\n\n        # Update plan activation\n        safety_plan.activation_count += 1\n        safety_plan.last_reviewed = datetime.now()\n\n        # Generate safety plan reminder\n        plan_elements = []\n        if safety_plan.warning_signs:\n            plan_elements.append(f\"Warning signs to watch: {', '.join(safety_plan.warning_signs[:3])}\")\n        if safety_plan.internal_coping_strategies:\n            plan_elements.append(f\"Try these coping strategies: {', '.join(safety_plan.internal_coping_strategies[:3])}\")\n        if safety_plan.social_support_contacts:\n            plan_elements.append(f\"Reach out to: {safety_plan.social_support_contacts[0]['name']}\")\n\n        intervention.response_content = \"Safety plan activated. \" + \" | \".join(plan_elements)\n        intervention.response_channel = ResponseChannel.IN_APP_CHAT\n\n    def _contact_emergency_services(self, alert: CrisisAlert, intervention: CrisisIntervention):\n        \"\"\"Contact emergency services (911/police/ambulance)\"\"\"\n\n        # In real implementation, this would integrate with emergency dispatch systems\n        # For now, we log the action and would typically require human verification\n\n        intervention.response_content = \"Emergency services contact initiated - requires human verification\"\n        intervention.response_channel = ResponseChannel.EMERGENCY_DISPATCH\n        intervention.follow_up_required = True\n\n    def _is_appropriate_time(self) -\u003e bool:\n        \"\"\"Check if current time is appropriate for contacting emergency contacts\"\"\"\n        current_hour = datetime.now().hour\n        return 8 \u003c= current_hour \u003c= 22  # 8 AM to 10 PM\n\n    def create_safety_plan(self, user_id: str, plan_data: Dict[str, Any], created_with_therapist: bool = True) -\u003e SafetyPlan:\n        \"\"\"Create comprehensive safety plan for user\"\"\"\n\n        safety_plan = SafetyPlan(\n            user_id=user_id,\n            created_with_therapist=created_with_therapist,\n            warning_signs=plan_data.get(\"warning_signs\", []),\n            internal_coping_strategies=plan_data.get(\"coping_strategies\", []),\n            social_support_contacts=plan_data.get(\"support_contacts\", []),\n            professional_contacts=plan_data.get(\"professional_contacts\", []),\n            environmental_safety_steps=plan_data.get(\"safety_steps\", []),\n            emergency_services_info=plan_data.get(\"emergency_info\", {}),\n            personalized_reminders=plan_data.get(\"reminders\", [])\n        )\n\n        # Add default elements if missing\n        if not safety_plan.warning_signs:\n            safety_plan.warning_signs = [\n                \"Feeling hopeless or worthless\",\n                \"Withdrawing from friends and family\",\n                \"Increased substance use\",\n                \"Extreme mood changes\"\n            ]\n\n        if not safety_plan.internal_coping_strategies:\n            safety_plan.internal_coping_strategies = [\n                \"Practice deep breathing exercises\",\n                \"Listen to calming music\",\n                \"Take a warm shower or bath\",\n                \"Write in a journal\",\n                \"Exercise or go for a walk\"\n            ]\n\n        if not safety_plan.emergency_services_info:\n            safety_plan.emergency_services_info = {\n                \"suicide_prevention\": \"988\",\n                \"crisis_text\": \"741741\",\n                \"emergency\": \"911\",\n                \"local_crisis_center\": \"Contact admin for local resources\"\n            }\n\n        self.safety_plans[user_id] = safety_plan\n        return safety_plan\n\n    def _create_emergency_safety_plan(self, user_id: str) -\u003e SafetyPlan:\n        \"\"\"Create emergency safety plan with default elements\"\"\"\n\n        emergency_plan_data = {\n            \"warning_signs\": [\n                \"Thoughts of suicide or self-harm\",\n                \"Feeling trapped or hopeless\",\n                \"Extreme agitation or anxiety\"\n            ],\n            \"coping_strategies\": [\n                \"Call a trusted friend or family member\",\n                \"Practice grounding techniques (5-4-3-2-1 method)\",\n                \"Remove means of self-harm from environment\",\n                \"Go to a safe, public place\"\n            ],\n            \"emergency_info\": {\n                \"suicide_prevention\": \"988\",\n                \"crisis_text\": \"741741\",\n                \"emergency\": \"911\"\n            }\n        }\n\n        return self.create_safety_plan(user_id, emergency_plan_data, created_with_therapist=False)\n\n    def add_emergency_contact(self, user_id: str, contact_data: Dict[str, Any]) -\u003e EmergencyContact:\n        \"\"\"Add emergency contact for user\"\"\"\n\n        contact = EmergencyContact(\n            user_id=user_id,\n            name=contact_data[\"name\"],\n            relationship=contact_data[\"relationship\"],\n            phone_number=contact_data[\"phone_number\"],\n            email=contact_data.get(\"email\", \"\"),\n            priority_level=contact_data.get(\"priority_level\", 1),\n            can_be_contacted_24_7=contact_data.get(\"available_24_7\", True),\n            preferred_contact_method=ResponseChannel(contact_data.get(\"preferred_method\", \"phone_call\")),\n            location=contact_data.get(\"location\", \"\"),\n            special_instructions=contact_data.get(\"instructions\", \"\")\n        )\n\n        if user_id not in self.emergency_contacts:\n            self.emergency_contacts[user_id] = []\n\n        self.emergency_contacts[user_id].append(contact)\n\n        # Sort by priority\n        self.emergency_contacts[user_id].sort(key=lambda c: c.priority_level)\n\n        return contact\n\n    def register_crisis_counselor(self, counselor_data: Dict[str, Any]) -\u003e CrisisCounselor:\n        \"\"\"Register new crisis counselor\"\"\"\n\n        counselor = CrisisCounselor(\n            name=counselor_data[\"name\"],\n            credentials=counselor_data.get(\"credentials\", []),\n            specializations=counselor_data.get(\"specializations\", []),\n            languages=counselor_data.get(\"languages\", [\"English\"]),\n            availability_schedule=counselor_data.get(\"schedule\", {}),\n            max_case_load=counselor_data.get(\"max_cases\", 10)\n        )\n\n        self.crisis_counselors[counselor.counselor_id] = counselor\n        return counselor\n\n    def handle_user_response(self, intervention_id: str, user_response: str, response_channel: ResponseChannel) -\u003e Dict[str, Any]:\n        \"\"\"Handle user response to crisis intervention\"\"\"\n\n        # Find intervention\n        intervention = None\n        for user_interventions in self.interventions.values():\n            for interv in user_interventions:\n                if interv.intervention_id == intervention_id:\n                    intervention = interv\n                    break\n\n        if not intervention:\n            return {\"error\": \"Intervention not found\"}\n\n        # Update intervention with response\n        intervention.user_response = user_response\n        intervention.response_received_at = datetime.now()\n\n        # Analyze response for risk indicators\n        response_analysis = self._analyze_user_response(user_response)\n\n        # Determine if escalation is needed\n        if response_analysis[\"escalation_needed\"]:\n            alert = self.active_alerts.get(intervention.alert_id)\n            if alert:\n                self._escalate_crisis(alert, response_analysis[\"escalation_reason\"])\n\n        # Generate follow-up recommendations\n        follow_up = self._generate_follow_up_plan(intervention, response_analysis)\n\n        return {\n            \"intervention_id\": intervention_id,\n            \"response_acknowledged\": True,\n            \"risk_assessment\": response_analysis,\n            \"follow_up_plan\": follow_up,\n            \"next_check_in\": follow_up.get(\"next_check_in\")\n        }\n\n    def _analyze_user_response(self, response: str) -\u003e Dict[str, Any]:\n        \"\"\"Analyze user response for risk indicators\"\"\"\n\n        response_lower = response.lower()\n\n        # High-risk indicators\n        high_risk_phrases = [\n            \"want to die\", \"kill myself\", \"end it all\", \"can't go on\",\n            \"suicide\", \"not worth living\", \"better off dead\"\n        ]\n\n        medium_risk_phrases = [\n            \"don't want to be here\", \"can't take it\", \"too much pain\",\n            \"no point\", \"give up\", \"hurt myself\"\n        ]\n\n        positive_indicators = [\n            \"feeling better\", \"will be okay\", \"getting help\", \"safe\",\n            \"not going to hurt\", \"talking to someone\"\n        ]\n\n        escalation_needed = any(phrase in response_lower for phrase in high_risk_phrases)\n        escalation_reason = \"\"\n\n        if escalation_needed:\n            escalation_reason = \"High-risk language detected in user response\"\n\n        # Calculate risk score from response\n        risk_score = 0\n        for phrase in high_risk_phrases:\n            if phrase in response_lower:\n                risk_score += 3\n\n        for phrase in medium_risk_phrases:\n            if phrase in response_lower:\n                risk_score += 2\n\n        for phrase in positive_indicators:\n            if phrase in response_lower:\n                risk_score -= 1\n\n        risk_level = \"high\" if risk_score \u003e= 3 else \"medium\" if risk_score \u003e= 1 else \"low\"\n\n        return {\n            \"escalation_needed\": escalation_needed,\n            \"escalation_reason\": escalation_reason,\n            \"risk_level\": risk_level,\n            \"risk_score\": max(0, risk_score),\n            \"positive_indicators_present\": any(phrase in response_lower for phrase in positive_indicators)\n        }\n\n    def _escalate_crisis(self, alert: CrisisAlert, reason: str):\n        \"\"\"Escalate crisis to higher level\"\"\"\n\n        current_level = alert.crisis_level\n\n        # Escalate to next level\n        escalation_map = {\n            CrisisLevel.GREEN: CrisisLevel.YELLOW,\n            CrisisLevel.YELLOW: CrisisLevel.ORANGE,\n            CrisisLevel.ORANGE: CrisisLevel.RED,\n            CrisisLevel.RED: CrisisLevel.PURPLE\n        }\n\n        if current_level in escalation_map:\n            alert.crisis_level = escalation_map[current_level]\n            alert.escalated_at = datetime.now()\n\n            # Trigger additional interventions for new level\n            self._initiate_crisis_response(alert)\n\n    def _generate_follow_up_plan(self, intervention: CrisisIntervention, response_analysis: Dict[str, Any]) -\u003e Dict[str, Any]:\n        \"\"\"Generate follow-up plan based on intervention outcome\"\"\"\n\n        plan = {\n            \"next_check_in\": None,\n            \"recommended_actions\": [],\n            \"monitoring_frequency\": \"daily\",\n            \"resources_provided\": []\n        }\n\n        risk_level = response_analysis[\"risk_level\"]\n\n        if risk_level == \"high\":\n            plan[\"next_check_in\"] = (datetime.now() + timedelta(hours=2)).isoformat()\n            plan[\"monitoring_frequency\"] = \"every_2_hours\"\n            plan[\"recommended_actions\"] = [\n                \"Immediate safety planning\",\n                \"Crisis counselor follow-up\",\n                \"Emergency contact notification\"\n            ]\n        elif risk_level == \"medium\":\n            plan[\"next_check_in\"] = (datetime.now() + timedelta(hours=6)).isoformat()\n            plan[\"monitoring_frequency\"] = \"every_6_hours\"\n            plan[\"recommended_actions\"] = [\n                \"Safety plan review\",\n                \"Coping strategy practice\",\n                \"Therapist outreach\"\n            ]\n        else:\n            plan[\"next_check_in\"] = (datetime.now() + timedelta(hours=24)).isoformat()\n            plan[\"monitoring_frequency\"] = \"daily\"\n            plan[\"recommended_actions\"] = [\n                \"Continue regular monitoring\",\n                \"Wellness activity engagement\"\n            ]\n\n        # Add relevant resources\n        plan[\"resources_provided\"] = [\n            {\"name\": \"988 Suicide \u0026 Crisis Lifeline\", \"contact\": \"988\"},\n            {\"name\": \"Crisis Text Line\", \"contact\": \"Text HOME to 741741\"}\n        ]\n\n        return plan\n\n    def get_crisis_dashboard(self, user_id: str) -\u003e Dict[str, Any]:\n        \"\"\"Get crisis management dashboard for user\"\"\"\n\n        # Get recent alerts\n        user_alerts = [alert for alert in self.active_alerts.values() if alert.user_id == user_id]\n        recent_alerts = sorted(user_alerts, key=lambda a: a.created_at, reverse=True)[:5]\n\n        # Get safety plan status\n        safety_plan = self.safety_plans.get(user_id)\n\n        # Get emergency contacts\n        contacts = self.emergency_contacts.get(user_id, [])\n\n        # Get recent interventions\n        recent_interventions = self.interventions.get(user_id, [])[-10:]\n\n        dashboard = {\n            \"user_id\": user_id,\n            \"current_risk_level\": recent_alerts[0].crisis_level.value if recent_alerts else \"green\",\n            \"safety_plan_status\": {\n                \"exists\": safety_plan is not None,\n                \"last_updated\": safety_plan.last_updated.isoformat() if safety_plan else None,\n                \"last_reviewed\": safety_plan.last_reviewed.isoformat() if safety_plan and safety_plan.last_reviewed else None,\n                \"activation_count\": safety_plan.activation_count if safety_plan else 0\n            },\n            \"emergency_contacts\": len(contacts),\n            \"recent_alerts\": [\n                {\n                    \"alert_id\": alert.alert_id,\n                    \"crisis_level\": alert.crisis_level.value,\n                    \"created_at\": alert.created_at.isoformat(),\n                    \"trigger_source\": alert.trigger_source,\n                    \"resolved\": alert.resolved_at is not None\n                }\n                for alert in recent_alerts\n            ],\n            \"recent_interventions\": [\n                {\n                    \"intervention_type\": interv.intervention_type.value,\n                    \"initiated_at\": interv.initiated_at.isoformat(),\n                    \"response_received\": interv.user_response is not None,\n                    \"outcome\": interv.intervention_outcome\n                }\n                for interv in recent_interventions\n            ],\n            \"available_resources\": len(self.resource_directory),\n            \"crisis_support_available\": len([c for c in self.crisis_counselors.values() if c.status == \"available\"]) \u003e 0\n        }\n\n        return dashboard\n\n    def get_platform_statistics(self) -\u003e Dict[str, Any]:\n        \"\"\"Get platform-wide crisis intervention statistics\"\"\"\n\n        total_alerts = len(self.active_alerts)\n        active_high_risk = len([a for a in self.active_alerts.values() if a.crisis_level in [CrisisLevel.ORANGE, CrisisLevel.RED, CrisisLevel.PURPLE]])\n\n        # Calculate average response times\n        response_times = [a.response_time_seconds for a in self.active_alerts.values() if a.response_time_seconds]\n        avg_response_time = sum(response_times) / len(response_times) if response_times else 0\n\n        # Safety plan coverage\n        total_users_with_plans = len(self.safety_plans)\n\n        # Counselor availability\n        available_counselors = len([c for c in self.crisis_counselors.values() if c.status == \"available\"])\n        total_counselors = len(self.crisis_counselors)\n\n        return {\n            \"total_crisis_alerts\": total_alerts,\n            \"active_high_risk_alerts\": active_high_risk,\n            \"safety_plans_created\": total_users_with_plans,\n            \"available_crisis_counselors\": available_counselors,\n            \"total_crisis_counselors\": total_counselors,\n            \"average_response_time_seconds\": round(avg_response_time, 1),\n            \"total_interventions\": sum(len(interventions) for interventions in self.interventions.values()),\n            \"emergency_contacts_registered\": sum(len(contacts) for contacts in self.emergency_contacts.values()),\n            \"crisis_resources_available\": len(self.resource_directory),\n            \"escalation_rate\": round(len([a for a in self.active_alerts.values() if a.escalated_at]) / max(1, total_alerts), 2),\n            \"resolution_rate\": round(len([a for a in self.active_alerts.values() if a.resolved_at]) / max(1, total_alerts), 2)\n        }\n\n# Global instance\ncrisis_intervention_system = CrisisInterventionSystem()",
                "custom_ai_builder.py": "\"\"\"\nCustom AI Model Builder for MindMend Platform\nAllows admins to create, train, and deploy custom AI models for therapy\n\"\"\"\nimport os\nimport json\nimport pickle\nimport logging\nfrom datetime import datetime\nfrom typing import Dict, List, Any\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import classification_report, accuracy_score\nimport openai\n\nfrom models.database import db\n\nclass CustomAIModel(db.Model):\n    \"\"\"Database model for custom AI models\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    model_type = db.Column(db.String(50), nullable=False)  # classification, regression, generation\n    algorithm = db.Column(db.String(50), nullable=False)   # naive_bayes, svm, neural_network, etc.\n    training_data_size = db.Column(db.Integer)\n    accuracy_score = db.Column(db.Float)\n    validation_score = db.Column(db.Float)\n    status = db.Column(db.String(20), default='training')  # training, ready, deployed, error\n    model_file_path = db.Column(db.String(200))\n    vectorizer_file_path = db.Column(db.String(200))\n    training_parameters = db.Column(db.Text)  # JSON string\n    training_history = db.Column(db.Text)     # JSON string\n    created_by = db.Column(db.String(100))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    last_trained = db.Column(db.DateTime)\n    deployment_count = db.Column(db.Integer, default=0)\n    prediction_count = db.Column(db.Integer, default=0)\n\n    def __repr__(self):\n        return f'\u003cCustomAIModel {self.name}\u003e'\n\nclass TrainingDataset(db.Model):\n    \"\"\"Database model for training datasets\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    data_type = db.Column(db.String(50))  # text, tabular, image, audio\n    file_path = db.Column(db.String(200))\n    size = db.Column(db.Integer)  # number of records\n    columns = db.Column(db.Text)  # JSON string of column names\n    target_column = db.Column(db.String(100))\n    preprocessing_steps = db.Column(db.Text)  # JSON string\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    created_by = db.Column(db.String(100))\n\n    def __repr__(self):\n        return f'\u003cTrainingDataset {self.name}\u003e'\n\nclass CustomAIBuilder:\n    \"\"\"Main class for building custom AI models\"\"\"\n\n    def __init__(self):\n        self.model_storage_path = './data/custom_models'\n        self.dataset_storage_path = './data/datasets'\n        os.makedirs(self.model_storage_path, exist_ok=True)\n        os.makedirs(self.dataset_storage_path, exist_ok=True)\n\n        # Available algorithms\n        self.algorithms = {\n            'naive_bayes': {\n                'class': MultinomialNB,\n                'name': 'Naive Bayes',\n                'description': 'Fast and effective for text classification',\n                'params': {'alpha': [0.1, 0.5, 1.0]}\n            },\n            'svm': {\n                'class': SVC,\n                'name': 'Support Vector Machine',\n                'description': 'Powerful for high-dimensional data',\n                'params': {'C': [0.1, 1.0, 10.0], 'kernel': ['linear', 'rbf']}\n            },\n            'random_forest': {\n                'class': RandomForestClassifier,\n                'name': 'Random Forest',\n                'description': 'Robust ensemble method',\n                'params': {'n_estimators': [50, 100, 200], 'max_depth': [10, 20, None]}\n            },\n            'logistic_regression': {\n                'class': LogisticRegression,\n                'name': 'Logistic Regression',\n                'description': 'Simple and interpretable',\n                'params': {'C': [0.1, 1.0, 10.0], 'max_iter': [1000]}\n            },\n            'neural_network': {\n                'class': MLPClassifier,\n                'name': 'Neural Network',\n                'description': 'Deep learning for complex patterns',\n                'params': {'hidden_layer_sizes': [(50,), (100,), (50, 50)], 'activation': ['relu', 'tanh']}\n            }\n        }\n\n    def create_model(self, model_config: Dict) -\u003e CustomAIModel:\n        \"\"\"Create a new custom AI model\"\"\"\n        try:\n            model = CustomAIModel(\n                name=model_config['name'],\n                description=model_config.get('description', ''),\n                model_type=model_config['model_type'],\n                algorithm=model_config['algorithm'],\n                training_parameters=json.dumps(model_config.get('parameters', {})),\n                created_by=model_config.get('created_by', 'admin'),\n                status='created'\n            )\n\n            db.session.add(model)\n            db.session.commit()\n\n            return model\n\n        except Exception as e:\n            logging.error(f\"Error creating model: {e}\")\n            raise e\n\n    def upload_dataset(self, dataset_config: Dict, file_content: str) -\u003e TrainingDataset:\n        \"\"\"Upload and process training dataset\"\"\"\n        try:\n            # Save dataset file\n            filename = f\"dataset_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json\"\n            file_path = os.path.join(self.dataset_storage_path, filename)\n\n            with open(file_path, 'w') as f:\n                f.write(file_content)\n\n            # Parse dataset to get metadata\n            data = json.loads(file_content)\n\n            dataset = TrainingDataset(\n                name=dataset_config['name'],\n                description=dataset_config.get('description', ''),\n                data_type=dataset_config.get('data_type', 'text'),\n                file_path=file_path,\n                size=len(data) if isinstance(data, list) else len(data.get('records', [])),\n                columns=json.dumps(list(data[0].keys()) if isinstance(data, list) and data else []),\n                target_column=dataset_config.get('target_column'),\n                created_by=dataset_config.get('created_by', 'admin')\n            )\n\n            db.session.add(dataset)\n            db.session.commit()\n\n            return dataset\n\n        except Exception as e:\n            logging.error(f\"Error uploading dataset: {e}\")\n            raise e\n\n    def train_model(self, model_id: int, dataset_id: int, training_config: Dict = None) -\u003e Dict:\n        \"\"\"Train a custom AI model\"\"\"\n        try:\n            model = CustomAIModel.query.get(model_id)\n            dataset = TrainingDataset.query.get(dataset_id)\n\n            if not model or not dataset:\n                raise ValueError(\"Model or dataset not found\")\n\n            # Update model status\n            model.status = 'training'\n            db.session.commit()\n\n            # Load dataset\n            with open(dataset.file_path, 'r') as f:\n                data = json.load(f)\n\n            # Prepare training data based on model type\n            if model.model_type == 'classification':\n                X, y = self._prepare_classification_data(data, dataset.target_column)\n            elif model.model_type == 'regression':\n                X, y = self._prepare_regression_data(data, dataset.target_column)\n            else:\n                raise ValueError(f\"Unsupported model type: {model.model_type}\")\n\n            # Split data\n            X_train, X_test, y_train, y_test = train_test_split(\n                X, y, test_size=0.2, random_state=42, stratify=y if model.model_type == 'classification' else None\n            )\n\n            # Vectorize text data if needed\n            vectorizer = None\n            if isinstance(X_train[0], str):\n                vectorizer = TfidfVectorizer(max_features=5000, stop_words='english')\n                X_train = vectorizer.fit_transform(X_train)\n                X_test = vectorizer.transform(X_test)\n\n            # Get algorithm class and parameters\n            algorithm_info = self.algorithms[model.algorithm]\n            algorithm_class = algorithm_info['class']\n\n            # Use provided parameters or defaults\n            if training_config and 'parameters' in training_config:\n                params = training_config['parameters']\n            else:\n                params = {}\n\n            # Train model\n            trained_model = algorithm_class(**params)\n            trained_model.fit(X_train, y_train)\n\n            # Evaluate model\n            train_accuracy = trained_model.score(X_train, y_train)\n            test_accuracy = trained_model.score(X_test, y_test)\n\n            # Cross-validation\n            cv_scores = cross_val_score(trained_model, X_train, y_train, cv=5)\n\n            # Generate classification report\n            y_pred = trained_model.predict(X_test)\n            report = classification_report(y_test, y_pred, output_dict=True)\n\n            # Save model and vectorizer\n            model_filename = f\"model_{model_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pkl\"\n            model_path = os.path.join(self.model_storage_path, model_filename)\n\n            with open(model_path, 'wb') as f:\n                pickle.dump(trained_model, f)\n\n            if vectorizer:\n                vectorizer_filename = f\"vectorizer_{model_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pkl\"\n                vectorizer_path = os.path.join(self.model_storage_path, vectorizer_filename)\n                with open(vectorizer_path, 'wb') as f:\n                    pickle.dump(vectorizer, f)\n                model.vectorizer_file_path = vectorizer_path\n\n            # Update model record\n            model.model_file_path = model_path\n            model.training_data_size = len(X_train)\n            model.accuracy_score = test_accuracy\n            model.validation_score = cv_scores.mean()\n            model.status = 'ready'\n            model.last_trained = datetime.utcnow()\n\n            training_history = {\n                'train_accuracy': train_accuracy,\n                'test_accuracy': test_accuracy,\n                'cv_scores': cv_scores.tolist(),\n                'cv_mean': cv_scores.mean(),\n                'cv_std': cv_scores.std(),\n                'classification_report': report,\n                'training_date': datetime.utcnow().isoformat(),\n                'dataset_size': len(data),\n                'parameters': params\n            }\n\n            model.training_history = json.dumps(training_history)\n            db.session.commit()\n\n            return {\n                'success': True,\n                'model_id': model_id,\n                'accuracy': test_accuracy,\n                'cv_score': cv_scores.mean(),\n                'training_history': training_history\n            }\n\n        except Exception as e:\n            # Update model status to error\n            if 'model' in locals():\n                model.status = 'error'\n                db.session.commit()\n\n            logging.error(f\"Error training model: {e}\")\n            raise e\n\n    def _prepare_classification_data(self, data: List[Dict], target_column: str):\n        \"\"\"Prepare data for classification\"\"\"\n        if isinstance(data, list):\n            X = [item.get('text', str(item)) for item in data]\n            y = [item.get(target_column) for item in data]\n        else:\n            X = data.get('texts', [])\n            y = data.get('labels', [])\n\n        return X, y\n\n    def _prepare_regression_data(self, data: List[Dict], target_column: str):\n        \"\"\"Prepare data for regression\"\"\"\n        if isinstance(data, list):\n            X = [item.get('text', str(item)) for item in data]\n            y = [float(item.get(target_column, 0)) for item in data]\n        else:\n            X = data.get('texts', [])\n            y = [float(val) for val in data.get('values', [])]\n\n        return X, y\n\n    def deploy_model(self, model_id: int) -\u003e Dict:\n        \"\"\"Deploy a trained model for use\"\"\"\n        try:\n            model = CustomAIModel.query.get(model_id)\n            if not model or model.status != 'ready':\n                raise ValueError(\"Model not ready for deployment\")\n\n            model.status = 'deployed'\n            model.deployment_count += 1\n            db.session.commit()\n\n            return {\n                'success': True,\n                'model_id': model_id,\n                'deployment_count': model.deployment_count\n            }\n\n        except Exception as e:\n            logging.error(f\"Error deploying model: {e}\")\n            raise e\n\n    def predict(self, model_id: int, input_data: str) -\u003e Dict:\n        \"\"\"Make prediction using deployed model\"\"\"\n        try:\n            model = CustomAIModel.query.get(model_id)\n            if not model or model.status != 'deployed':\n                raise ValueError(\"Model not deployed or not found\")\n\n            # Load trained model\n            with open(model.model_file_path, 'rb') as f:\n                trained_model = pickle.load(f)\n\n            # Load vectorizer if exists\n            vectorizer = None\n            if model.vectorizer_file_path and os.path.exists(model.vectorizer_file_path):\n                with open(model.vectorizer_file_path, 'rb') as f:\n                    vectorizer = pickle.load(f)\n\n            # Prepare input\n            if vectorizer:\n                X = vectorizer.transform([input_data])\n            else:\n                X = [input_data]\n\n            # Make prediction\n            prediction = trained_model.predict(X)\n\n            # Get prediction probability if available\n            prob = None\n            if hasattr(trained_model, 'predict_proba'):\n                prob = trained_model.predict_proba(X).max()\n\n            # Update prediction count\n            model.prediction_count += 1\n            db.session.commit()\n\n            return {\n                'success': True,\n                'prediction': prediction[0] if isinstance(prediction, np.ndarray) else prediction,\n                'confidence': prob,\n                'model_name': model.name\n            }\n\n        except Exception as e:\n            logging.error(f\"Error making prediction: {e}\")\n            raise e\n\n    def get_model_performance(self, model_id: int) -\u003e Dict:\n        \"\"\"Get detailed performance metrics for a model\"\"\"\n        try:\n            model = CustomAIModel.query.get(model_id)\n            if not model:\n                raise ValueError(\"Model not found\")\n\n            training_history = json.loads(model.training_history) if model.training_history else {}\n\n            return {\n                'model_id': model_id,\n                'name': model.name,\n                'algorithm': model.algorithm,\n                'accuracy': model.accuracy_score,\n                'validation_score': model.validation_score,\n                'training_data_size': model.training_data_size,\n                'prediction_count': model.prediction_count,\n                'deployment_count': model.deployment_count,\n                'status': model.status,\n                'created_at': model.created_at.isoformat(),\n                'last_trained': model.last_trained.isoformat() if model.last_trained else None,\n                'training_history': training_history\n            }\n\n        except Exception as e:\n            logging.error(f\"Error getting model performance: {e}\")\n            raise e\n\n    def list_models(self) -\u003e List[Dict]:\n        \"\"\"List all custom models\"\"\"\n        models = CustomAIModel.query.all()\n        return [\n            {\n                'id': model.id,\n                'name': model.name,\n                'description': model.description,\n                'algorithm': model.algorithm,\n                'status': model.status,\n                'accuracy': model.accuracy_score,\n                'created_at': model.created_at.isoformat(),\n                'prediction_count': model.prediction_count\n            }\n            for model in models\n        ]\n\n    def list_datasets(self) -\u003e List[Dict]:\n        \"\"\"List all training datasets\"\"\"\n        datasets = TrainingDataset.query.all()\n        return [\n            {\n                'id': dataset.id,\n                'name': dataset.name,\n                'description': dataset.description,\n                'size': dataset.size,\n                'data_type': dataset.data_type,\n                'created_at': dataset.created_at.isoformat()\n            }\n            for dataset in datasets\n        ]\n\n    def delete_model(self, model_id: int) -\u003e bool:\n        \"\"\"Delete a custom model\"\"\"\n        try:\n            model = CustomAIModel.query.get(model_id)\n            if not model:\n                return False\n\n            # Delete model files\n            if model.model_file_path and os.path.exists(model.model_file_path):\n                os.remove(model.model_file_path)\n\n            if model.vectorizer_file_path and os.path.exists(model.vectorizer_file_path):\n                os.remove(model.vectorizer_file_path)\n\n            # Delete database record\n            db.session.delete(model)\n            db.session.commit()\n\n            return True\n\n        except Exception as e:\n            logging.error(f\"Error deleting model: {e}\")\n            return False\n\n    def generate_therapy_dataset_template(self) -\u003e str:\n        \"\"\"Generate a template for therapy-specific training data\"\"\"\n        template = [\n            {\n                \"text\": \"I feel anxious about my upcoming job interview\",\n                \"category\": \"anxiety\",\n                \"severity\": \"moderate\",\n                \"recommended_intervention\": \"breathing_exercise\"\n            },\n            {\n                \"text\": \"I've been feeling depressed and unmotivated lately\",\n                \"category\": \"depression\",\n                \"severity\": \"high\",\n                \"recommended_intervention\": \"cognitive_restructuring\"\n            },\n            {\n                \"text\": \"I'm having trouble sleeping and feel stressed\",\n                \"category\": \"stress\",\n                \"severity\": \"moderate\",\n                \"recommended_intervention\": \"relaxation_technique\"\n            },\n            {\n                \"text\": \"I feel happy and accomplished today\",\n                \"category\": \"positive\",\n                \"severity\": \"low\",\n                \"recommended_intervention\": \"positive_reinforcement\"\n            }\n        ]\n\n        return json.dumps(template, indent=2)\n\n# Initialize global custom AI builder\ncustom_ai_builder = CustomAIBuilder()",
                "database.py": "from flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom flask_login import UserMixin\n\nclass Base(DeclarativeBase):\n    pass\n\n# Create the SQLAlchemy instance here to avoid circular imports\ndb = SQLAlchemy(model_class=Base)\nfrom datetime import datetime\nfrom sqlalchemy import Text\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass Session(db.Model):\n    \"\"\"Model for therapy sessions\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    patient_name = db.Column(db.String(100), nullable=False)\n    session_type = db.Column(db.String(50), nullable=False)\n    input_text = db.Column(Text, nullable=False)\n    ai_response = db.Column(Text, nullable=False)\n    alerts = db.Column(Text)  # JSON string of alerts\n    video_analysis = db.Column(Text)  # JSON string of video analysis\n    biometric_data = db.Column(Text)  # JSON string of biometric data\n    exercises_assigned = db.Column(Text)  # JSON string of exercises\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n    duration_minutes = db.Column(db.Integer)\n    mood_before = db.Column(db.Integer)  # 1-10 scale\n    mood_after = db.Column(db.Integer)  # 1-10 scale\n    satisfaction_rating = db.Column(db.Integer)  # 1-5 scale\n    notes = db.Column(Text)\n    \n    def __repr__(self):\n        return f'\u003cSession {self.id}: {self.patient_name} - {self.session_type}\u003e'\n\nclass BiometricData(db.Model):\n    \"\"\"Model for biometric data from wearables\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    heart_rate = db.Column(db.Integer)\n    stress_level = db.Column(db.Float)  # 0-1 scale\n    sleep_quality = db.Column(db.Float)  # 0-1 scale\n    activity_level = db.Column(db.Integer)  # steps or activity units\n    hrv_score = db.Column(db.Float)  # Heart rate variability\n    blood_oxygen = db.Column(db.Float)\n    temperature = db.Column(db.Float)\n    raw_data = db.Column(Text)  # JSON string of raw device data\n    device_type = db.Column(db.String(50))  # Apple Watch, Fitbit, etc.\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'\u003cBiometricData {self.id}: HR={self.heart_rate}, Stress={self.stress_level}\u003e'\n\nclass VideoAnalysis(db.Model):\n    \"\"\"Model for video analysis results\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    session_id = db.Column(db.Integer, db.ForeignKey('session.id'), nullable=True)\n    emotions_detected = db.Column(Text)  # JSON string of emotions\n    microexpressions = db.Column(Text)  # JSON string of microexpressions\n    eye_movement_patterns = db.Column(Text)  # JSON string of eye tracking\n    facial_landmarks = db.Column(Text)  # JSON string of facial landmarks\n    voice_analysis = db.Column(Text)  # JSON string of voice sentiment\n    confidence_score = db.Column(db.Float)\n    frame_timestamp = db.Column(db.Float)  # Timestamp within session\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    session = db.relationship('Session', backref=db.backref('video_analyses', lazy=True))\n    \n    def __repr__(self):\n        return f'\u003cVideoAnalysis {self.id}: Session {self.session_id}\u003e'\n\nclass Exercise(db.Model):\n    \"\"\"Model for AI-generated therapeutic exercises\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    session_id = db.Column(db.Integer, db.ForeignKey('session.id'), nullable=True)\n    exercise_type = db.Column(db.String(50), nullable=False)  # breathing, mindfulness, etc.\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(Text, nullable=False)\n    instructions = db.Column(Text, nullable=False)\n    duration_minutes = db.Column(db.Integer)\n    difficulty_level = db.Column(db.Integer)  # 1-5 scale\n    tags = db.Column(db.String(200))  # comma-separated tags\n    personalization_data = db.Column(Text)  # JSON string of personalization factors\n    completion_status = db.Column(db.String(20), default='assigned')  # assigned, in_progress, completed\n    effectiveness_rating = db.Column(db.Integer)  # 1-5 user rating\n    completion_date = db.Column(db.DateTime)\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    session = db.relationship('Session', backref=db.backref('exercises', lazy=True))\n    \n    def __repr__(self):\n        return f'\u003cExercise {self.id}: {self.title}\u003e'\n\nclass Patient(UserMixin, db.Model):\n    \"\"\"Model for patient profiles\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(120), unique=True)\n    phone = db.Column(db.String(20))\n    date_of_birth = db.Column(db.Date)\n    emergency_contact = db.Column(db.String(200))\n    medical_history = db.Column(Text)\n    therapy_goals = db.Column(Text)\n    consent_video_analysis = db.Column(db.Boolean, default=False)\n    consent_biometric_tracking = db.Column(db.Boolean, default=False)\n    consent_data_sharing = db.Column(db.Boolean, default=False)\n    premium_status = db.Column(db.Boolean, default=False)\n    risk_level = db.Column(db.String(20), default='low')  # low, medium, high\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    last_session = db.Column(db.DateTime)\n    subscription_tier = db.Column(db.String(20), default='free')  # free, premium, enterprise\n    oauth_providers = db.Column(Text)  # JSON string of linked OAuth providers\n    password_hash = db.Column(db.String(255))  # For traditional login\n    email_verified = db.Column(db.Boolean, default=False)\n    \n    def __repr__(self):\n        return f'\u003cPatient {self.id}: {self.name}\u003e'\n\nclass Assessment(db.Model):\n    \"\"\"Model for comprehensive AI assessments\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    patient_id = db.Column(db.Integer, db.ForeignKey('patient.id'), nullable=True)\n    assessment_type = db.Column(db.String(50), nullable=False)  # initial, follow_up, crisis, video_assessment\n    text_analysis = db.Column(Text)  # JSON string of text analysis\n    video_analysis = db.Column(Text)  # JSON string of video analysis\n    biometric_analysis = db.Column(Text)  # JSON string of biometric analysis\n    multi_modal_score = db.Column(db.Float)  # Combined analysis score\n    risk_factors = db.Column(Text)  # JSON string of identified risks\n    recommendations = db.Column(Text)  # JSON string of recommendations\n    intervention_required = db.Column(db.Boolean, default=False)\n    human_review_required = db.Column(db.Boolean, default=False)\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n    completed = db.Column(db.Boolean, default=True)\n    \n    patient = db.relationship('Patient', backref=db.backref('assessments', lazy=True))\n    \n    def __repr__(self):\n        return f'\u003cAssessment {self.id}: {self.assessment_type}\u003e'\n\nclass TherapistSession(db.Model):\n    \"\"\"Model for premium human therapist sessions\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    patient_id = db.Column(db.Integer, db.ForeignKey('patient.id'), nullable=False)\n    therapist_name = db.Column(db.String(100), nullable=False)\n    session_date = db.Column(db.DateTime, nullable=False)\n    duration_minutes = db.Column(db.Integer, default=50)\n    session_type = db.Column(db.String(50))  # video, phone, in_person\n    session_notes = db.Column(Text)\n    patient_feedback = db.Column(Text)\n    therapist_recommendations = db.Column(Text)\n    follow_up_required = db.Column(db.Boolean, default=False)\n    cost = db.Column(db.Float)\n    payment_status = db.Column(db.String(20), default='pending')\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n\n    patient = db.relationship('Patient', backref=db.backref('therapist_sessions', lazy=True))\n\n    def __repr__(self):\n        return f'\u003cTherapistSession {self.id}: {self.patient_id} - {self.therapist_name}\u003e'\n\n\nclass AdminUser(db.Model):\n    \"\"\"Admin users for platform management (supports super-admin).\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(255), unique=True, nullable=False)\n    name = db.Column(db.String(120))\n    password_hash = db.Column(db.String(255), nullable=False)\n    role = db.Column(db.String(50), default='admin')  # admin, super_admin\n    is_active = db.Column(db.Boolean, default=True)\n    email_verified = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n    def set_password(self, password: str):\n        self.password_hash = generate_password_hash(password)\n\n    def check_password(self, password: str) -\u003e bool:\n        return check_password_hash(self.password_hash, password)\n\n    def __repr__(self):\n        return f'\u003cAdminUser {self.email} ({self.role})\u003e'\n\n\nclass Counselor(db.Model):\n    \"\"\"Counselor/therapist accounts for professional portal.\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(255), unique=True, nullable=False)\n    name = db.Column(db.String(120))\n    password_hash = db.Column(db.String(255), nullable=False)\n    is_active = db.Column(db.Boolean, default=True)\n    email_verified = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n    def set_password(self, password: str):\n        self.password_hash = generate_password_hash(password)\n\n    def check_password(self, password: str) -\u003e bool:\n        return check_password_hash(self.password_hash, password)\n\n    def __repr__(self):\n        return f'\u003cCounselor {self.email}\u003e'\n\n\nclass AdminAudit(db.Model):\n    \"\"\"Audit log for admin actions.\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    admin_email = db.Column(db.String(255))\n    action = db.Column(db.String(200), nullable=False)\n    details = db.Column(Text)\n    ip_address = db.Column(db.String(64))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n    def __repr__(self):\n        return f'\u003cAdminAudit {self.admin_email} {self.action}\u003e'\n\n\nclass EmailVerification(db.Model):\n    \"\"\"Stores verification tokens for accounts.\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(255), nullable=False, index=True)\n    token = db.Column(db.String(255), nullable=False, unique=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    expires_at = db.Column(db.DateTime)\n\n\nclass CounselorPosition(db.Model):\n    \"\"\"Model for configurable counselor positions and benefits\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    position_type = db.Column(db.String(50), nullable=False, unique=True)  # full_time, contract, part_time\n    title = db.Column(db.String(200), nullable=False)\n    salary_range_min = db.Column(db.Float)  # For salary positions\n    salary_range_max = db.Column(db.Float)  # For salary positions\n    hourly_rate_min = db.Column(db.Float)  # For hourly positions\n    hourly_rate_max = db.Column(db.Float)  # For hourly positions\n    currency = db.Column(db.String(10), default='AUD')\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    updated_by = db.Column(db.String(200))  # Email of admin who made changes\n\n    def __repr__(self):\n        return f'\u003cCounselorPosition {self.position_type}: {self.title}\u003e'\n\nclass CounselorBenefit(db.Model):\n    \"\"\"Model for configurable counselor benefits\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    position_id = db.Column(db.Integer, db.ForeignKey('counselor_position.id'), nullable=False)\n    benefit_name = db.Column(db.String(200), nullable=False)\n    benefit_description = db.Column(Text)\n    benefit_category = db.Column(db.String(50))  # health, professional, financial, lifestyle\n    is_active = db.Column(db.Boolean, default=True)\n    display_order = db.Column(db.Integer, default=0)\n\n    position = db.relationship('CounselorPosition', backref=db.backref('benefits', lazy=True))\n\n    def __repr__(self):\n        return f'\u003cCounselorBenefit {self.benefit_name}\u003e'\n\nclass CounselorRequirement(db.Model):\n    \"\"\"Model for configurable counselor requirements\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    position_id = db.Column(db.Integer, db.ForeignKey('counselor_position.id'), nullable=False)\n    requirement_text = db.Column(db.String(500), nullable=False)\n    requirement_category = db.Column(db.String(50))  # education, experience, technical, legal\n    is_mandatory = db.Column(db.Boolean, default=True)\n    is_active = db.Column(db.Boolean, default=True)\n    display_order = db.Column(db.Integer, default=0)\n\n    position = db.relationship('CounselorPosition', backref=db.backref('requirements', lazy=True))\n\n    def __repr__(self):\n        return f'\u003cCounselorRequirement {self.requirement_text[:50]}...\u003e'\n",
                "enhancement_manager.py": "\"\"\"\nMental Health Enhancement Manager\n================================\nCentral orchestrator for all advanced mental health features and integrations.\n\"\"\"\n\nimport os\nimport json\nimport logging\nfrom datetime import datetime, timedelta\nfrom typing import Dict, Any, List, Optional, Tuple\nfrom dataclasses import dataclass\nfrom enum import Enum\nimport requests\nfrom sqlalchemy import text\n\nlogger = logging.getLogger(__name__)\n\nclass FeatureModule(Enum):\n    \"\"\"Available enhancement modules\"\"\"\n    PHYSICAL_HEALTH = \"physical_health\"\n    SOCIAL_CONNECTION = \"social_connection\"\n    IMMERSIVE_THERAPY = \"immersive_therapy\"\n    PREDICTIVE_ANALYTICS = \"predictive_analytics\"\n    CRISIS_PREVENTION = \"crisis_prevention\"\n    ENVIRONMENTAL_TRACKING = \"environmental_tracking\"\n    BIOMETRIC_INTEGRATION = \"biometric_integration\"\n    SPECIALIZED_CARE = \"specialized_care\"\n\nclass IntegrationStatus(Enum):\n    \"\"\"Status of feature integrations\"\"\"\n    NOT_INSTALLED = \"not_installed\"\n    INSTALLED = \"installed\"\n    ACTIVE = \"active\"\n    ERROR = \"error\"\n    UPDATING = \"updating\"\n\n@dataclass\nclass EnhancementConfig:\n    \"\"\"Configuration for enhancement features\"\"\"\n    module: FeatureModule\n    name: str\n    description: str\n    version: str\n    dependencies: List[str]\n    api_endpoints: Dict[str, str]\n    database_tables: List[str]\n    permissions_required: List[str]\n    cost_tier: str  # free, basic, premium, enterprise\n\nclass MentalHealthEnhancementManager:\n    \"\"\"Manages all mental health enhancement features\"\"\"\n\n    def __init__(self):\n        self.modules = {}\n        self.active_features = []\n        self.integration_status = {}\n        self.user_preferences = {}\n        self.analytics_data = {}\n        self._initialize_modules()\n\n    def _initialize_modules(self):\n        \"\"\"Initialize all available enhancement modules\"\"\"\n\n        # Physical Health Integration\n        self.register_module(EnhancementConfig(\n            module=FeatureModule.PHYSICAL_HEALTH,\n            name=\"Physical Health Integration\",\n            description=\"Exercise prescription, nutrition tracking, sleep optimization, and biometric analysis\",\n            version=\"1.0.0\",\n            dependencies=[\"apple_healthkit\", \"google_fit\", \"fitbit_api\"],\n            api_endpoints={\n                \"healthkit\": \"https://developer.apple.com/health-fitness/\",\n                \"google_fit\": \"https://developers.google.com/fit\",\n                \"fitbit\": \"https://dev.fitbit.com/build/reference/web-api/\"\n            },\n            database_tables=[\"user_biometrics\", \"exercise_plans\", \"nutrition_logs\", \"sleep_data\"],\n            permissions_required=[\"health_data_read\", \"fitness_tracking\"],\n            cost_tier=\"basic\"\n        ))\n\n        # Social Connection Features\n        self.register_module(EnhancementConfig(\n            module=FeatureModule.SOCIAL_CONNECTION,\n            name=\"Social Connection Platform\",\n            description=\"Peer support, group therapy, community challenges, and relationship tools\",\n            version=\"1.0.0\",\n            dependencies=[\"video_calling_api\", \"matching_algorithm\", \"moderation_tools\"],\n            api_endpoints={\n                \"video_api\": \"https://www.twilio.com/video\",\n                \"chat_api\": \"https://sendbird.com/\",\n                \"moderation\": \"https://www.moderatecontent.com/\"\n            },\n            database_tables=[\"peer_connections\", \"group_sessions\", \"community_challenges\", \"support_networks\"],\n            permissions_required=[\"social_features\", \"group_participation\"],\n            cost_tier=\"premium\"\n        ))\n\n        # Immersive Therapy\n        self.register_module(EnhancementConfig(\n            module=FeatureModule.IMMERSIVE_THERAPY,\n            name=\"Immersive Therapy Suite\",\n            description=\"VR/AR therapy, biofeedback, gamified CBT, and advanced AI interactions\",\n            version=\"1.0.0\",\n            dependencies=[\"webxr_api\", \"biofeedback_devices\", \"emotion_recognition\"],\n            api_endpoints={\n                \"webxr\": \"https://immersiveweb.dev/\",\n                \"emotion_api\": \"https://azure.microsoft.com/en-us/services/cognitive-services/face/\",\n                \"voice_analysis\": \"https://aws.amazon.com/comprehend/\"\n            },\n            database_tables=[\"vr_sessions\", \"biofeedback_data\", \"emotion_logs\", \"therapy_games\"],\n            permissions_required=[\"camera_access\", \"microphone_access\", \"device_sensors\"],\n            cost_tier=\"enterprise\"\n        ))\n\n        # Predictive Analytics\n        self.register_module(EnhancementConfig(\n            module=FeatureModule.PREDICTIVE_ANALYTICS,\n            name=\"Predictive Mental Health Analytics\",\n            description=\"Risk forecasting, relapse prevention, treatment optimization, and outcome prediction\",\n            version=\"1.0.0\",\n            dependencies=[\"ml_pipeline\", \"time_series_analysis\", \"anomaly_detection\"],\n            api_endpoints={\n                \"weather_api\": \"https://openweathermap.org/api\",\n                \"location_api\": \"https://developers.google.com/maps\",\n                \"health_trends\": \"https://cloud.google.com/healthcare-api\"\n            },\n            database_tables=[\"predictive_models\", \"risk_assessments\", \"environmental_data\", \"intervention_history\"],\n            permissions_required=[\"location_access\", \"health_predictions\"],\n            cost_tier=\"premium\"\n        ))\n\n        # Crisis Prevention\n        self.register_module(EnhancementConfig(\n            module=FeatureModule.CRISIS_PREVENTION,\n            name=\"Crisis Prevention \u0026 Emergency Response\",\n            description=\"Suicide risk detection, emergency protocols, crisis hotline integration, safety planning\",\n            version=\"1.0.0\",\n            dependencies=[\"emergency_services\", \"crisis_hotlines\", \"geolocation\"],\n            api_endpoints={\n                \"crisis_text_line\": \"https://www.crisistextline.org/\",\n                \"emergency_services\": \"https://www.911.gov/\",\n                \"safety_planning\": \"https://suicidepreventionlifeline.org/\"\n            },\n            database_tables=[\"crisis_protocols\", \"emergency_contacts\", \"safety_plans\", \"intervention_logs\"],\n            permissions_required=[\"emergency_access\", \"location_tracking\", \"contact_access\"],\n            cost_tier=\"free\"\n        ))\n\n        # Environmental Tracking\n        self.register_module(EnhancementConfig(\n            module=FeatureModule.ENVIRONMENTAL_TRACKING,\n            name=\"Environmental Mental Health Tracking\",\n            description=\"Location-based mood analysis, weather correlation, air quality impact, noise tracking\",\n            version=\"1.0.0\",\n            dependencies=[\"weather_api\", \"air_quality_api\", \"geolocation\"],\n            api_endpoints={\n                \"weather\": \"https://openweathermap.org/api\",\n                \"air_quality\": \"https://aqicn.org/api/\",\n                \"noise_monitoring\": \"https://www.noisemonitoring.com/api\"\n            },\n            database_tables=[\"environmental_data\", \"location_mood_logs\", \"weather_correlations\"],\n            permissions_required=[\"location_access\", \"environmental_data\"],\n            cost_tier=\"basic\"\n        ))\n\n        # Biometric Integration\n        self.register_module(EnhancementConfig(\n            module=FeatureModule.BIOMETRIC_INTEGRATION,\n            name=\"Advanced Biometric Integration\",\n            description=\"HRV analysis, stress hormones, genetic markers, microbiome correlation\",\n            version=\"1.0.0\",\n            dependencies=[\"wearable_apis\", \"lab_results\", \"genetic_testing\"],\n            api_endpoints={\n                \"23andme\": \"https://api.23andme.com/\",\n                \"ubiome\": \"https://ubiome.com/api\",\n                \"lab_corp\": \"https://www.labcorp.com/api\"\n            },\n            database_tables=[\"genetic_markers\", \"hormone_levels\", \"microbiome_data\", \"biomarker_trends\"],\n            permissions_required=[\"genetic_data\", \"lab_results\", \"biometric_tracking\"],\n            cost_tier=\"enterprise\"\n        ))\n\n        # Specialized Care\n        self.register_module(EnhancementConfig(\n            module=FeatureModule.SPECIALIZED_CARE,\n            name=\"Specialized Demographic Care\",\n            description=\"Age-specific interventions, cultural adaptation, LGBTQ+ care, trauma-informed protocols\",\n            version=\"1.0.0\",\n            dependencies=[\"cultural_database\", \"age_algorithms\", \"trauma_protocols\"],\n            api_endpoints={\n                \"cultural_adaptation\": \"https://www.culturalcare.com/api\",\n                \"lgbtq_resources\": \"https://www.thetrevorproject.org/api\",\n                \"trauma_informed\": \"https://www.traumainformedcare.org/api\"\n            },\n            database_tables=[\"cultural_preferences\", \"demographic_profiles\", \"trauma_history\", \"specialized_protocols\"],\n            permissions_required=[\"demographic_data\", \"cultural_preferences\"],\n            cost_tier=\"premium\"\n        ))\n\n    def register_module(self, config: EnhancementConfig):\n        \"\"\"Register a new enhancement module\"\"\"\n        self.modules[config.module.value] = config\n        self.integration_status[config.module.value] = IntegrationStatus.NOT_INSTALLED\n        logger.info(f\"Registered enhancement module: {config.name}\")\n\n    def install_module(self, module_name: str, user_id: Optional[str] = None) -\u003e Dict[str, Any]:\n        \"\"\"Install an enhancement module\"\"\"\n        if module_name not in self.modules:\n            return {\"success\": False, \"error\": \"Module not found\"}\n\n        config = self.modules[module_name]\n\n        try:\n            self.integration_status[module_name] = IntegrationStatus.UPDATING\n\n            # Check dependencies\n            missing_deps = self._check_dependencies(config.dependencies)\n            if missing_deps:\n                return {\n                    \"success\": False,\n                    \"error\": f\"Missing dependencies: {', '.join(missing_deps)}\"\n                }\n\n            # Create database tables\n            self._create_database_tables(config.database_tables)\n\n            # Initialize API connections\n            api_status = self._test_api_connections(config.api_endpoints)\n\n            # Update status\n            self.integration_status[module_name] = IntegrationStatus.INSTALLED\n\n            return {\n                \"success\": True,\n                \"module\": config.name,\n                \"version\": config.version,\n                \"api_status\": api_status,\n                \"database_tables_created\": len(config.database_tables),\n                \"cost_tier\": config.cost_tier\n            }\n\n        except Exception as e:\n            self.integration_status[module_name] = IntegrationStatus.ERROR\n            logger.error(f\"Error installing module {module_name}: {str(e)}\")\n            return {\"success\": False, \"error\": str(e)}\n\n    def activate_module(self, module_name: str, user_id: str, user_config: Dict[str, Any] = None) -\u003e Dict[str, Any]:\n        \"\"\"Activate an installed module for a user\"\"\"\n        if module_name not in self.modules:\n            return {\"success\": False, \"error\": \"Module not found\"}\n\n        if self.integration_status[module_name] != IntegrationStatus.INSTALLED:\n            return {\"success\": False, \"error\": \"Module not installed\"}\n\n        config = self.modules[module_name]\n\n        try:\n            # Check user permissions\n            permissions_granted = self._check_user_permissions(user_id, config.permissions_required)\n            if not permissions_granted:\n                return {\n                    \"success\": False,\n                    \"error\": \"Insufficient permissions\",\n                    \"required_permissions\": config.permissions_required\n                }\n\n            # Store user preferences\n            if module_name not in self.user_preferences:\n                self.user_preferences[module_name] = {}\n\n            self.user_preferences[module_name][user_id] = {\n                \"activated_at\": datetime.utcnow().isoformat(),\n                \"config\": user_config or {},\n                \"status\": \"active\"\n            }\n\n            # Add to active features if not already there\n            if module_name not in self.active_features:\n                self.active_features.append(module_name)\n                self.integration_status[module_name] = IntegrationStatus.ACTIVE\n\n            return {\n                \"success\": True,\n                \"message\": f\"{config.name} activated successfully\",\n                \"cost_tier\": config.cost_tier,\n                \"features_available\": len(config.database_tables)\n            }\n\n        except Exception as e:\n            logger.error(f\"Error activating module {module_name} for user {user_id}: {str(e)}\")\n            return {\"success\": False, \"error\": str(e)}\n\n    def get_user_features(self, user_id: str) -\u003e Dict[str, Any]:\n        \"\"\"Get all active features for a user\"\"\"\n        user_features = []\n\n        for module_name, users in self.user_preferences.items():\n            if user_id in users and users[user_id][\"status\"] == \"active\":\n                config = self.modules[module_name]\n                user_features.append({\n                    \"module\": module_name,\n                    \"name\": config.name,\n                    \"description\": config.description,\n                    \"version\": config.version,\n                    \"cost_tier\": config.cost_tier,\n                    \"activated_at\": users[user_id][\"activated_at\"],\n                    \"status\": self.integration_status[module_name].value\n                })\n\n        return {\n            \"user_id\": user_id,\n            \"active_features\": user_features,\n            \"total_features_available\": len(self.modules),\n            \"user_feature_count\": len(user_features)\n        }\n\n    def get_module_status(self) -\u003e Dict[str, Any]:\n        \"\"\"Get status of all modules\"\"\"\n        module_status = []\n\n        for module_name, config in self.modules.items():\n            status = {\n                \"module\": module_name,\n                \"name\": config.name,\n                \"description\": config.description,\n                \"version\": config.version,\n                \"status\": self.integration_status[module_name].value,\n                \"cost_tier\": config.cost_tier,\n                \"active_users\": len(self.user_preferences.get(module_name, {})),\n                \"dependencies_met\": len(self._check_dependencies(config.dependencies)) == 0,\n                \"database_ready\": self._check_database_tables(config.database_tables),\n                \"api_connections\": self._get_api_status(config.api_endpoints)\n            }\n            module_status.append(status)\n\n        return {\n            \"total_modules\": len(self.modules),\n            \"installed_modules\": len([s for s in self.integration_status.values()\n                                   if s in [IntegrationStatus.INSTALLED, IntegrationStatus.ACTIVE]]),\n            \"active_modules\": len([s for s in self.integration_status.values()\n                                 if s == IntegrationStatus.ACTIVE]),\n            \"modules\": module_status\n        }\n\n    def _check_dependencies(self, dependencies: List[str]) -\u003e List[str]:\n        \"\"\"Check which dependencies are missing\"\"\"\n        missing = []\n        for dep in dependencies:\n            # Simplified check - in production, check actual package/API availability\n            if not self._is_dependency_available(dep):\n                missing.append(dep)\n        return missing\n\n    def _is_dependency_available(self, dependency: str) -\u003e bool:\n        \"\"\"Check if a dependency is available\"\"\"\n        # Simplified implementation - in production, check actual services\n        dependency_map = {\n            \"apple_healthkit\": True,  # Assume available\n            \"google_fit\": True,\n            \"fitbit_api\": True,\n            \"video_calling_api\": True,\n            \"matching_algorithm\": True,\n            \"moderation_tools\": True,\n            \"webxr_api\": True,\n            \"biofeedback_devices\": False,  # Might not be available\n            \"emotion_recognition\": True,\n            \"ml_pipeline\": True,\n            \"time_series_analysis\": True,\n            \"anomaly_detection\": True,\n            \"emergency_services\": True,\n            \"crisis_hotlines\": True,\n            \"geolocation\": True,\n            \"weather_api\": True,\n            \"air_quality_api\": True,\n            \"wearable_apis\": True,\n            \"lab_results\": False,  # Might require integration\n            \"genetic_testing\": False,\n            \"cultural_database\": True,\n            \"age_algorithms\": True,\n            \"trauma_protocols\": True\n        }\n        return dependency_map.get(dependency, False)\n\n    def _create_database_tables(self, tables: List[str]):\n        \"\"\"Create required database tables\"\"\"\n        try:\n            from models.database import db\n        except Exception as e:\n            # Handle missing Flask app context for testing\n            print(f\"Error creating database tables: {e}\")\n            return\n\n        table_schemas = {\n            \"user_biometrics\": \"\"\"\n                CREATE TABLE IF NOT EXISTS user_biometrics (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    user_id INTEGER NOT NULL,\n                    metric_type VARCHAR(50) NOT NULL,\n                    value FLOAT NOT NULL,\n                    unit VARCHAR(20),\n                    source VARCHAR(50),\n                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n                    FOREIGN KEY (user_id) REFERENCES patient (id)\n                )\n            \"\"\",\n            \"exercise_plans\": \"\"\"\n                CREATE TABLE IF NOT EXISTS exercise_plans (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    user_id INTEGER NOT NULL,\n                    plan_type VARCHAR(50) NOT NULL,\n                    intensity VARCHAR(20),\n                    duration_minutes INTEGER,\n                    frequency_per_week INTEGER,\n                    mental_health_goal TEXT,\n                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n                    is_active BOOLEAN DEFAULT TRUE,\n                    FOREIGN KEY (user_id) REFERENCES patient (id)\n                )\n            \"\"\",\n            \"nutrition_logs\": \"\"\"\n                CREATE TABLE IF NOT EXISTS nutrition_logs (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    user_id INTEGER NOT NULL,\n                    food_item VARCHAR(200),\n                    calories FLOAT,\n                    mood_before INTEGER,\n                    mood_after INTEGER,\n                    blood_sugar_impact FLOAT,\n                    logged_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n                    FOREIGN KEY (user_id) REFERENCES patient (id)\n                )\n            \"\"\",\n            \"sleep_data\": \"\"\"\n                CREATE TABLE IF NOT EXISTS sleep_data (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    user_id INTEGER NOT NULL,\n                    sleep_duration FLOAT,\n                    sleep_quality INTEGER,\n                    bedtime DATETIME,\n                    wake_time DATETIME,\n                    rem_sleep FLOAT,\n                    deep_sleep FLOAT,\n                    sleep_efficiency FLOAT,\n                    recorded_date DATE,\n                    FOREIGN KEY (user_id) REFERENCES patient (id)\n                )\n            \"\"\",\n            \"peer_connections\": \"\"\"\n                CREATE TABLE IF NOT EXISTS peer_connections (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    user1_id INTEGER NOT NULL,\n                    user2_id INTEGER NOT NULL,\n                    connection_type VARCHAR(50),\n                    status VARCHAR(20) DEFAULT 'pending',\n                    shared_conditions TEXT,\n                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n                    FOREIGN KEY (user1_id) REFERENCES patient (id),\n                    FOREIGN KEY (user2_id) REFERENCES patient (id)\n                )\n            \"\"\",\n            \"group_sessions\": \"\"\"\n                CREATE TABLE IF NOT EXISTS group_sessions (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    session_name VARCHAR(200) NOT NULL,\n                    session_type VARCHAR(50),\n                    max_participants INTEGER DEFAULT 8,\n                    current_participants INTEGER DEFAULT 0,\n                    scheduled_time DATETIME,\n                    duration_minutes INTEGER DEFAULT 60,\n                    moderator_id INTEGER,\n                    topic TEXT,\n                    is_active BOOLEAN DEFAULT TRUE,\n                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n                )\n            \"\"\",\n            \"environmental_data\": \"\"\"\n                CREATE TABLE IF NOT EXISTS environmental_data (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    user_id INTEGER NOT NULL,\n                    location_lat FLOAT,\n                    location_lng FLOAT,\n                    weather_condition VARCHAR(50),\n                    temperature FLOAT,\n                    humidity FLOAT,\n                    air_quality_index INTEGER,\n                    noise_level FLOAT,\n                    mood_rating INTEGER,\n                    recorded_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n                    FOREIGN KEY (user_id) REFERENCES patient (id)\n                )\n            \"\"\",\n            \"predictive_models\": \"\"\"\n                CREATE TABLE IF NOT EXISTS predictive_models (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    user_id INTEGER NOT NULL,\n                    model_type VARCHAR(50) NOT NULL,\n                    prediction_data TEXT,\n                    confidence_score FLOAT,\n                    risk_level VARCHAR(20),\n                    recommended_actions TEXT,\n                    generated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n                    FOREIGN KEY (user_id) REFERENCES patient (id)\n                )\n            \"\"\",\n            \"crisis_protocols\": \"\"\"\n                CREATE TABLE IF NOT EXISTS crisis_protocols (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    user_id INTEGER NOT NULL,\n                    protocol_type VARCHAR(50) NOT NULL,\n                    trigger_conditions TEXT,\n                    intervention_steps TEXT,\n                    emergency_contacts TEXT,\n                    safety_plan TEXT,\n                    is_active BOOLEAN DEFAULT TRUE,\n                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n                    FOREIGN KEY (user_id) REFERENCES patient (id)\n                )\n            \"\"\"\n        }\n\n        try:\n            for table in tables:\n                if table in table_schemas:\n                    db.session.execute(text(table_schemas[table]))\n            db.session.commit()\n            logger.info(f\"Created database tables: {', '.join(tables)}\")\n        except Exception as e:\n            logger.error(f\"Error creating database tables: {str(e)}\")\n            # Don't raise in testing environment - gracefully continue\n            return\n\n    def _check_database_tables(self, tables: List[str]) -\u003e bool:\n        \"\"\"Check if database tables exist\"\"\"\n        try:\n            from models.database import db\n            for table in tables:\n                result = db.session.execute(text(f\"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}'\"))\n                if not result.fetchone():\n                    return False\n            return True\n        except Exception:\n            return False\n\n    def _test_api_connections(self, endpoints: Dict[str, str]) -\u003e Dict[str, bool]:\n        \"\"\"Test API endpoint connections\"\"\"\n        status = {}\n        for name, url in endpoints.items():\n            try:\n                # Simple connectivity test - in production, use proper API calls\n                response = requests.head(url, timeout=5)\n                status[name] = response.status_code \u003c 400\n            except Exception:\n                status[name] = False\n        return status\n\n    def _get_api_status(self, endpoints: Dict[str, str]) -\u003e Dict[str, str]:\n        \"\"\"Get current API status\"\"\"\n        status = {}\n        for name, url in endpoints.items():\n            try:\n                response = requests.head(url, timeout=2)\n                if response.status_code \u003c 400:\n                    status[name] = \"connected\"\n                else:\n                    status[name] = \"error\"\n            except Exception:\n                status[name] = \"offline\"\n        return status\n\n    def _check_user_permissions(self, user_id: str, required_permissions: List[str]) -\u003e bool:\n        \"\"\"Check if user has required permissions\"\"\"\n        # Simplified implementation - in production, check actual user permissions\n        return True  # For now, assume all users have all permissions\n\n    def get_platform_statistics(self) -\u003e Dict[str, Any]:\n        \"\"\"Get platform-wide enhancement statistics\"\"\"\n        total_modules = len(self.modules)\n        installed_modules = len([status for status in self.integration_status.values()\n                               if status == IntegrationStatus.INSTALLED])\n        active_modules = len(self.active_features)\n\n        # Count total active users\n        total_users = set()\n        for users in self.user_preferences.values():\n            total_users.update(users.keys())\n\n        return {\n            \"total_available_modules\": total_modules,\n            \"installed_modules\": installed_modules,\n            \"active_modules\": active_modules,\n            \"total_users_with_features\": len(total_users),\n            \"module_statuses\": {name: status.value for name, status in self.integration_status.items()},\n            \"cost_tier_distribution\": self._get_cost_tier_distribution(),\n            \"most_popular_modules\": self._get_popular_modules()\n        }\n\n    def _get_cost_tier_distribution(self) -\u003e Dict[str, int]:\n        \"\"\"Get distribution of cost tiers\"\"\"\n        distribution = {}\n        for config in self.modules.values():\n            tier = config.cost_tier\n            distribution[tier] = distribution.get(tier, 0) + 1\n        return distribution\n\n    def _get_popular_modules(self) -\u003e List[str]:\n        \"\"\"Get most popular modules by user count\"\"\"\n        module_popularity = {}\n        for module_name, users in self.user_preferences.items():\n            active_users = len([u for u in users.values() if u.get(\"status\") == \"active\"])\n            module_popularity[module_name] = active_users\n\n        # Sort by popularity and return top 5\n        sorted_modules = sorted(module_popularity.items(), key=lambda x: x[1], reverse=True)\n        return [module for module, count in sorted_modules[:5]]\n\n# Create singleton instance\nenhancement_manager = MentalHealthEnhancementManager()",
                "exercise_generator.py": "import json\nimport logging\nfrom datetime import datetime\nfrom typing import Dict, List\nimport os\nfrom openai import OpenAI\n\nclass ExerciseGenerator:\n    def __init__(self):\n        self.openai_client = OpenAI(api_key=os.environ.get(\"OPENAI_API_KEY\", \"your-openai-api-key\"))\n        \n        # Exercise categories and templates\n        self.exercise_categories = {\n            \"breathing\": {\n                \"name\": \"Breathing Exercises\",\n                \"benefits\": [\"stress reduction\", \"anxiety management\", \"emotional regulation\"],\n                \"duration_range\": (3, 10),\n                \"difficulty_levels\": [1, 2, 3]\n            },\n            \"mindfulness\": {\n                \"name\": \"Mindfulness Practices\",\n                \"benefits\": [\"present moment awareness\", \"emotional balance\", \"stress relief\"],\n                \"duration_range\": (5, 20),\n                \"difficulty_levels\": [1, 2, 3, 4]\n            },\n            \"cognitive\": {\n                \"name\": \"Cognitive Exercises\",\n                \"benefits\": [\"thought restructuring\", \"problem solving\", \"perspective taking\"],\n                \"duration_range\": (10, 30),\n                \"difficulty_levels\": [2, 3, 4, 5]\n            },\n            \"movement\": {\n                \"name\": \"Movement Therapy\",\n                \"benefits\": [\"physical tension release\", \"mood improvement\", \"energy boost\"],\n                \"duration_range\": (5, 15),\n                \"difficulty_levels\": [1, 2, 3, 4]\n            },\n            \"creative\": {\n                \"name\": \"Creative Expression\",\n                \"benefits\": [\"emotional processing\", \"self-discovery\", \"stress relief\"],\n                \"duration_range\": (15, 45),\n                \"difficulty_levels\": [1, 2, 3, 4, 5]\n            },\n            \"social\": {\n                \"name\": \"Social Connection\",\n                \"benefits\": [\"relationship building\", \"communication skills\", \"support system\"],\n                \"duration_range\": (10, 30),\n                \"difficulty_levels\": [2, 3, 4]\n            },\n            \"grounding\": {\n                \"name\": \"Grounding Techniques\",\n                \"benefits\": [\"anxiety reduction\", \"panic management\", \"present moment focus\"],\n                \"duration_range\": (2, 8),\n                \"difficulty_levels\": [1, 2]\n            }\n        }\n        \n        # Pre-built exercise templates\n        self.exercise_templates = {\n            \"breathing\": [\n                {\n                    \"title\": \"4-7-8 Breathing\",\n                    \"description\": \"A calming breathing technique for anxiety and stress relief\",\n                    \"instructions\": [\n                        \"Sit comfortably with your back straight\",\n                        \"Exhale completely through your mouth\",\n                        \"Inhale through nose for 4 counts\",\n                        \"Hold breath for 7 counts\",\n                        \"Exhale through mouth for 8 counts\",\n                        \"Repeat 3-4 cycles\"\n                    ],\n                    \"duration_minutes\": 5,\n                    \"difficulty_level\": 1\n                },\n                {\n                    \"title\": \"Box Breathing\",\n                    \"description\": \"Equal count breathing for focus and calm\",\n                    \"instructions\": [\n                        \"Inhale for 4 counts\",\n                        \"Hold for 4 counts\",\n                        \"Exhale for 4 counts\",\n                        \"Hold empty for 4 counts\",\n                        \"Repeat for 5-10 cycles\"\n                    ],\n                    \"duration_minutes\": 6,\n                    \"difficulty_level\": 2\n                }\n            ],\n            \"mindfulness\": [\n                {\n                    \"title\": \"5-4-3-2-1 Grounding\",\n                    \"description\": \"Sensory grounding technique for anxiety and panic\",\n                    \"instructions\": [\n                        \"Notice 5 things you can see\",\n                        \"Notice 4 things you can touch\",\n                        \"Notice 3 things you can hear\",\n                        \"Notice 2 things you can smell\",\n                        \"Notice 1 thing you can taste\",\n                        \"Take three deep breaths\"\n                    ],\n                    \"duration_minutes\": 5,\n                    \"difficulty_level\": 1\n                },\n                {\n                    \"title\": \"Body Scan Meditation\",\n                    \"description\": \"Progressive awareness of physical sensations\",\n                    \"instructions\": [\n                        \"Lie down comfortably\",\n                        \"Start at the top of your head\",\n                        \"Slowly scan down through your body\",\n                        \"Notice sensations without judgment\",\n                        \"Breathe into areas of tension\",\n                        \"Complete the scan at your toes\"\n                    ],\n                    \"duration_minutes\": 15,\n                    \"difficulty_level\": 2\n                }\n            ],\n            \"cognitive\": [\n                {\n                    \"title\": \"Thought Record\",\n                    \"description\": \"Identify and challenge negative thought patterns\",\n                    \"instructions\": [\n                        \"Write down the triggering situation\",\n                        \"Identify the negative thought\",\n                        \"Rate the intensity (1-10)\",\n                        \"List evidence for and against the thought\",\n                        \"Create a balanced alternative thought\",\n                        \"Re-rate the intensity\"\n                    ],\n                    \"duration_minutes\": 20,\n                    \"difficulty_level\": 3\n                }\n            ]\n        }\n    \n    def generate_exercises(self, session_data: str, session_type: str, ai_analysis: Dict = None) -\u003e List[Dict]:\n        \"\"\"Generate personalized exercises based on session data and AI analysis\"\"\"\n        try:\n            # Analyze session needs\n            exercise_needs = self._analyze_exercise_needs(session_data, session_type, ai_analysis)\n            \n            # Generate AI-powered exercises\n            ai_exercises = self._generate_ai_exercises(exercise_needs, session_type)\n            \n            # Select template exercises\n            template_exercises = self._select_template_exercises(exercise_needs)\n            \n            # Combine and prioritize\n            all_exercises = ai_exercises + template_exercises\n            \n            # Personalize based on session data\n            personalized_exercises = self._personalize_exercises(all_exercises, session_data, ai_analysis)\n            \n            return personalized_exercises[:5]  # Return top 5 exercises\n            \n        except Exception as e:\n            logging.error(f\"Exercise generation error: {e}\")\n            return self._get_fallback_exercises(session_type)\n    \n    def _analyze_exercise_needs(self, session_data: str, session_type: str, ai_analysis: Dict = None) -\u003e Dict:\n        \"\"\"Analyze what types of exercises would be most beneficial\"\"\"\n        needs = {\n            \"primary_needs\": [],\n            \"secondary_needs\": [],\n            \"stress_level\": \"moderate\",\n            \"emotional_state\": \"neutral\",\n            \"preferred_categories\": [],\n            \"avoid_categories\": []\n        }\n        \n        # Analyze session text\n        session_lower = session_data.lower()\n        \n        # Identify primary needs based on keywords\n        if any(word in session_lower for word in [\"anxious\", \"worried\", \"panic\", \"nervous\"]):\n            needs[\"primary_needs\"].extend([\"breathing\", \"grounding\", \"mindfulness\"])\n            needs[\"stress_level\"] = \"high\"\n        \n        if any(word in session_lower for word in [\"sad\", \"depressed\", \"down\", \"hopeless\"]):\n            needs[\"primary_needs\"].extend([\"movement\", \"creative\", \"cognitive\"])\n            needs[\"emotional_state\"] = \"low\"\n        \n        if any(word in session_lower for word in [\"angry\", \"frustrated\", \"mad\", \"furious\"]):\n            needs[\"primary_needs\"].extend([\"breathing\", \"movement\", \"cognitive\"])\n            needs[\"emotional_state\"] = \"activated\"\n        \n        if any(word in session_lower for word in [\"overwhelmed\", \"stressed\", \"pressure\"]):\n            needs[\"primary_needs\"].extend([\"mindfulness\", \"breathing\", \"grounding\"])\n            needs[\"stress_level\"] = \"high\"\n        \n        # Session type specific needs\n        if session_type in [\"couple\", \"relationship\"]:\n            needs[\"secondary_needs\"].append(\"social\")\n        elif session_type == \"group\":\n            needs[\"secondary_needs\"].extend([\"social\", \"creative\"])\n        \n        # AI analysis integration\n        if ai_analysis:\n            if isinstance(ai_analysis, dict):\n                emotional_state = ai_analysis.get(\"emotional_state\", \"\").lower()\n                if \"anxiety\" in emotional_state:\n                    needs[\"primary_needs\"].append(\"breathing\")\n                if \"depression\" in emotional_state:\n                    needs[\"primary_needs\"].append(\"movement\")\n                \n                risk_level = ai_analysis.get(\"risk_level\", \"low\")\n                if risk_level in [\"high\", \"critical\"]:\n                    needs[\"primary_needs\"] = [\"grounding\", \"breathing\"]\n                    needs[\"avoid_categories\"] = [\"cognitive\"]  # Avoid complex thinking when in crisis\n        \n        return needs\n    \n    def _generate_ai_exercises(self, exercise_needs: Dict, session_type: str) -\u003e List[Dict]:\n        \"\"\"Generate custom exercises using AI based on specific needs\"\"\"\n        try:\n            # the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024.\n            # do not change this unless explicitly requested by the user\n            \n            prompt = f\"\"\"Create personalized therapeutic exercises for a {session_type} therapy session.\n            \n            Exercise needs: {json.dumps(exercise_needs)}\n            \n            Generate 2 exercises in JSON format as an array with this structure:\n            [{{\n                \"title\": \"Exercise Name\",\n                \"description\": \"Brief description of the exercise\",\n                \"category\": \"breathing/mindfulness/cognitive/movement/creative/social/grounding\",\n                \"instructions\": [\"step 1\", \"step 2\", \"step 3\"],\n                \"duration_minutes\": 5,\n                \"difficulty_level\": 2,\n                \"benefits\": [\"benefit 1\", \"benefit 2\"],\n                \"personalization_notes\": \"How this addresses specific needs\"\n            }}]\n            \n            Focus on evidence-based techniques that address the identified needs.\"\"\"\n            \n            response = self.openai_client.chat.completions.create(\n                model=\"gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\",\n                        \"content\": \"You are a therapeutic exercise specialist. Create personalized, evidence-based exercises. Always respond with valid JSON array format.\"\n                    },\n                    {\"role\": \"user\", \"content\": prompt}\n                ],\n                response_format={\"type\": \"json_object\"},\n                temperature=0.7,\n                max_tokens=1000\n            )\n            \n            result = json.loads(response.choices[0].message.content)\n            \n            # Handle different response formats\n            if isinstance(result, dict) and \"exercises\" in result:\n                exercises = result[\"exercises\"]\n            elif isinstance(result, list):\n                exercises = result\n            else:\n                exercises = [result] if isinstance(result, dict) else []\n            \n            # Add metadata\n            for exercise in exercises:\n                exercise[\"source\"] = \"ai_generated\"\n                exercise[\"timestamp\"] = datetime.now().isoformat()\n            \n            return exercises\n            \n        except Exception as e:\n            logging.error(f\"AI exercise generation error: {e}\")\n            return []\n    \n    def _select_template_exercises(self, exercise_needs: Dict) -\u003e List[Dict]:\n        \"\"\"Select appropriate template exercises based on needs\"\"\"\n        selected_exercises = []\n        primary_needs = exercise_needs.get(\"primary_needs\", [])\n        \n        for category in primary_needs:\n            if category in self.exercise_templates:\n                templates = self.exercise_templates[category]\n                for template in templates:\n                    exercise = template.copy()\n                    exercise[\"category\"] = category\n                    exercise[\"source\"] = \"template\"\n                    exercise[\"benefits\"] = self.exercise_categories[category][\"benefits\"]\n                    selected_exercises.append(exercise)\n        \n        return selected_exercises\n    \n    def _personalize_exercises(self, exercises: List[Dict], session_data: str, ai_analysis: Dict = None) -\u003e List[Dict]:\n        \"\"\"Personalize exercises based on session context\"\"\"\n        personalized = []\n        \n        for exercise in exercises:\n            personalized_exercise = exercise.copy()\n            \n            # Adjust difficulty based on stress level\n            if ai_analysis and isinstance(ai_analysis, dict):\n                risk_level = ai_analysis.get(\"risk_level\", \"low\")\n                if risk_level in [\"high\", \"critical\"]:\n                    personalized_exercise[\"difficulty_level\"] = min(personalized_exercise.get(\"difficulty_level\", 3), 2)\n                    personalized_exercise[\"duration_minutes\"] = min(personalized_exercise.get(\"duration_minutes\", 10), 5)\n            \n            # Add session-specific notes\n            session_lower = session_data.lower()\n            personalization_notes = []\n            \n            if \"time\" in session_lower and \"no time\" in session_lower:\n                personalized_exercise[\"duration_minutes\"] = min(personalized_exercise.get(\"duration_minutes\", 10), 5)\n                personalization_notes.append(\"Shortened for time constraints\")\n            \n            if any(word in session_lower for word in [\"beginner\", \"new\", \"never done\"]):\n                personalized_exercise[\"difficulty_level\"] = 1\n                personalization_notes.append(\"Adapted for beginners\")\n            \n            if personalization_notes:\n                existing_notes = personalized_exercise.get(\"personalization_notes\", \"\")\n                personalized_exercise[\"personalization_notes\"] = existing_notes + \" \" + \". \".join(personalization_notes)\n            \n            # Calculate priority score\n            personalized_exercise[\"priority_score\"] = self._calculate_priority_score(personalized_exercise, session_data, ai_analysis)\n            \n            personalized.append(personalized_exercise)\n        \n        # Sort by priority score\n        personalized.sort(key=lambda x: x.get(\"priority_score\", 0), reverse=True)\n        \n        return personalized\n    \n    def _calculate_priority_score(self, exercise: Dict, session_data: str, ai_analysis: Dict = None) -\u003e float:\n        \"\"\"Calculate priority score for exercise ranking\"\"\"\n        score = 0.0\n        \n        # Base score by category\n        category_scores = {\n            \"breathing\": 0.8,\n            \"grounding\": 0.9,\n            \"mindfulness\": 0.7,\n            \"cognitive\": 0.6,\n            \"movement\": 0.5,\n            \"creative\": 0.4,\n            \"social\": 0.3\n        }\n        \n        score += category_scores.get(exercise.get(\"category\", \"\"), 0.5)\n        \n        # Adjust for session content relevance\n        session_lower = session_data.lower()\n        \n        if exercise.get(\"category\") == \"breathing\" and any(word in session_lower for word in [\"anxious\", \"panic\", \"nervous\"]):\n            score += 0.3\n        \n        if exercise.get(\"category\") == \"cognitive\" and any(word in session_lower for word in [\"thinking\", \"thoughts\", \"worry\"]):\n            score += 0.2\n        \n        if exercise.get(\"category\") == \"movement\" and any(word in session_lower for word in [\"tired\", \"sluggish\", \"low energy\"]):\n            score += 0.2\n        \n        # Adjust for AI analysis\n        if ai_analysis and isinstance(ai_analysis, dict):\n            risk_level = ai_analysis.get(\"risk_level\", \"low\")\n            if risk_level in [\"high\", \"critical\"] and exercise.get(\"category\") in [\"breathing\", \"grounding\"]:\n                score += 0.4\n        \n        # Prefer shorter exercises for high stress\n        duration = exercise.get(\"duration_minutes\", 10)\n        if duration \u003c= 5:\n            score += 0.1\n        elif duration \u003e= 20:\n            score -= 0.1\n        \n        # Prefer easier exercises for crisis situations\n        difficulty = exercise.get(\"difficulty_level\", 3)\n        if difficulty \u003c= 2:\n            score += 0.1\n        elif difficulty \u003e= 4:\n            score -= 0.1\n        \n        return score\n    \n    def _get_fallback_exercises(self, session_type: str) -\u003e List[Dict]:\n        \"\"\"Get fallback exercises when AI generation fails\"\"\"\n        fallback_exercises = [\n            {\n                \"title\": \"Deep Breathing\",\n                \"description\": \"Simple breathing exercise for immediate calm\",\n                \"category\": \"breathing\",\n                \"instructions\": [\n                    \"Sit comfortably\",\n                    \"Breathe in slowly for 4 counts\",\n                    \"Hold for 2 counts\",\n                    \"Breathe out slowly for 6 counts\",\n                    \"Repeat 5 times\"\n                ],\n                \"duration_minutes\": 3,\n                \"difficulty_level\": 1,\n                \"benefits\": [\"stress reduction\", \"immediate calm\"],\n                \"source\": \"fallback\"\n            },\n            {\n                \"title\": \"Present Moment Awareness\",\n                \"description\": \"Simple mindfulness exercise\",\n                \"category\": \"mindfulness\",\n                \"instructions\": [\n                    \"Notice where you are right now\",\n                    \"Feel your feet on the ground\",\n                    \"Notice three things you can see\",\n                    \"Take three conscious breaths\",\n                    \"Set an intention for the next hour\"\n                ],\n                \"duration_minutes\": 2,\n                \"difficulty_level\": 1,\n                \"benefits\": [\"grounding\", \"present moment focus\"],\n                \"source\": \"fallback\"\n            }\n        ]\n        \n        return fallback_exercises\n",
                "future_ai_modules.py": "\"\"\"\nFuture AI Modules for Mind Mend Level 3+\n=========================================\n\nThis file contains placeholder classes for advanced AI features that will be\nimplemented in future versions of Mind Mend. These modules will provide\ncutting-edge mental health analysis capabilities.\n\"\"\"\n\nimport logging\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Optional\n\nclass MicroexpressionAnalyzer:\n    \"\"\"\n    Advanced AI module for real-time microexpression analysis during video sessions.\n    \n    Future Features:\n    - Facial Action Unit (AU) detection using computer vision\n    - Emotion transition mapping and analysis\n    - Lie detection and incongruence identification\n    - Stress pattern recognition through facial microexpressions\n    - Integration with therapeutic assessment protocols\n    \"\"\"\n    \n    def __init__(self):\n        self.model_loaded = False\n        self.confidence_threshold = 0.75\n        self.frame_buffer = []\n        logging.info(\"MicroexpressionAnalyzer initialized (placeholder)\")\n    \n    def analyze_frame(self, frame_data: str) -\u003e Dict[str, Any]:\n        \"\"\"\n        Analyze a single video frame for microexpressions.\n        \n        Future Implementation:\n        - Load pre-trained CNN model for facial landmark detection\n        - Extract facial action units (AUs) from detected landmarks\n        - Map AU combinations to specific emotions and microexpressions\n        - Calculate confidence scores for each detected expression\n        - Identify emotional incongruence (spoken vs. facial emotions)\n        \"\"\"\n        return {\n            \"microexpressions\": {\n                \"contempt\": 0.0,\n                \"disgust\": 0.0,\n                \"anger\": 0.0,\n                \"fear\": 0.0,\n                \"sadness\": 0.0,\n                \"surprise\": 0.0,\n                \"happiness\": 0.0\n            },\n            \"emotional_incongruence\": False,\n            \"stress_indicators\": [],\n            \"confidence\": 0.0,\n            \"timestamp\": datetime.now().isoformat(),\n            \"note\": \"Placeholder - Real microexpression analysis coming in Level 3+\"\n        }\n    \n    def analyze_sequence(self, frame_sequence: List[str]) -\u003e Dict[str, Any]:\n        \"\"\"\n        Analyze a sequence of frames for emotional patterns and changes.\n        \n        Future Implementation:\n        - Track emotional transitions over time\n        - Identify suppressed emotions and emotional masking\n        - Detect stress escalation patterns\n        - Generate therapeutic insights based on expression patterns\n        \"\"\"\n        return {\n            \"emotional_journey\": [],\n            \"suppressed_emotions\": [],\n            \"stress_escalation\": False,\n            \"therapeutic_insights\": [\n                \"Advanced microexpression analysis will provide deep insights into emotional states\",\n                \"Real-time detection of incongruence between spoken and felt emotions\",\n                \"Identification of trauma responses through micro-facial expressions\"\n            ],\n            \"note\": \"Placeholder - Advanced sequence analysis coming in Level 3+\"\n        }\n\nclass BioSensorIntegration:\n    \"\"\"\n    Advanced integration with wearable biosensors for comprehensive health monitoring.\n    \n    Supported Devices (Future):\n    - Apple Watch (Heart Rate, HRV, Stress, Activity)\n    - Fitbit (Sleep, Activity, Heart Rate)\n    - Garmin (Advanced metrics, Recovery)\n    - Oura Ring (Sleep quality, Recovery, Temperature)\n    - Custom EEG headbands for brainwave analysis\n    - Galvanic skin response sensors\n    \"\"\"\n    \n    def __init__(self):\n        self.connected_devices = []\n        self.real_time_streaming = False\n        self.data_buffer = {}\n        logging.info(\"BioSensorIntegration initialized (placeholder)\")\n    \n    def connect_device(self, device_type: str, device_id: str) -\u003e bool:\n        \"\"\"\n        Connect to a wearable biosensor device.\n        \n        Future Implementation:\n        - Bluetooth Low Energy (BLE) connection management\n        - Device-specific protocol handling\n        - Authentication and pairing procedures\n        - Real-time data stream establishment\n        \"\"\"\n        logging.info(f\"Connecting to {device_type} (placeholder)\")\n        return False  # Placeholder\n    \n    def get_real_time_data(self) -\u003e Dict[str, Any]:\n        \"\"\"\n        Retrieve real-time biosensor data from all connected devices.\n        \n        Future Data Points:\n        - Heart Rate Variability (HRV) for stress assessment\n        - Galvanic Skin Response (GSR) for emotional arousal\n        - EEG patterns for mental state analysis\n        - Sleep quality metrics for overall health\n        - Activity levels and movement patterns\n        \"\"\"\n        return {\n            \"heart_rate\": None,\n            \"heart_rate_variability\": None,\n            \"stress_level\": None,\n            \"skin_conductance\": None,\n            \"brain_waves\": {\n                \"alpha\": None,\n                \"beta\": None,\n                \"theta\": None,\n                \"delta\": None\n            },\n            \"sleep_metrics\": {\n                \"quality\": None,\n                \"rem_percentage\": None,\n                \"deep_sleep_percentage\": None\n            },\n            \"activity_level\": None,\n            \"timestamp\": datetime.now().isoformat(),\n            \"note\": \"Placeholder - Real biosensor integration coming in Level 3+\"\n        }\n    \n    def analyze_stress_patterns(self, duration_minutes: int = 60) -\u003e Dict[str, Any]:\n        \"\"\"\n        Analyze stress patterns from biosensor data over specified duration.\n        \n        Future Implementation:\n        - Multi-modal stress detection using HRV, GSR, and movement\n        - Correlation with therapy session content and emotional responses\n        - Predictive modeling for stress escalation\n        - Personalized stress management recommendations\n        \"\"\"\n        return {\n            \"stress_level\": \"unknown\",\n            \"stress_triggers\": [],\n            \"recovery_indicators\": [],\n            \"recommendations\": [\n                \"Advanced stress pattern analysis will correlate biological markers with therapy content\",\n                \"Predictive modeling will identify stress triggers before they escalate\",\n                \"Personalized interventions based on individual physiological responses\"\n            ],\n            \"note\": \"Placeholder - Advanced stress analysis coming in Level 3+\"\n        }\n    \n    def generate_health_insights(self) -\u003e Dict[str, Any]:\n        \"\"\"\n        Generate comprehensive health insights from all biosensor data.\n        \n        Future Implementation:\n        - Machine learning models for pattern recognition\n        - Correlation analysis between different biosensor metrics\n        - Long-term trend analysis and health trajectory prediction\n        - Integration with therapy progress and mental health outcomes\n        \"\"\"\n        return {\n            \"overall_health_score\": None,\n            \"sleep_quality_trend\": \"unknown\",\n            \"stress_management_effectiveness\": \"unknown\",\n            \"therapy_correlation\": \"unknown\",\n            \"recommendations\": [\n                \"Comprehensive health insights will combine all biosensor data\",\n                \"AI-powered pattern recognition will identify health trends\",\n                \"Correlation with therapy progress will optimize treatment plans\"\n            ],\n            \"note\": \"Placeholder - Advanced health insights coming in Level 3+\"\n        }\n\nclass AdvancedVideoAnalysis:\n    \"\"\"\n    Next-generation video analysis combining microexpressions with voice analysis.\n    \n    Future Features:\n    - Real-time emotion detection with 95%+ accuracy\n    - Voice stress analysis and vocal biomarkers\n    - Gaze tracking and attention pattern analysis\n    - Posture and body language interpretation\n    - Multi-modal emotion recognition (face + voice + posture)\n    \"\"\"\n    \n    def __init__(self):\n        self.video_model_loaded = False\n        self.voice_model_loaded = False\n        self.processing_queue = []\n        logging.info(\"AdvancedVideoAnalysis initialized (placeholder)\")\n    \n    def analyze_multimodal(self, video_frame: str, audio_chunk: bytes) -\u003e Dict[str, Any]:\n        \"\"\"\n        Perform comprehensive multimodal analysis of video and audio.\n        \n        Future Implementation:\n        - Synchronized analysis of facial expressions and voice patterns\n        - Detection of emotional incongruence between modalities\n        - Advanced stress and anxiety indicators\n        - Therapeutic progress measurement through expression changes\n        \"\"\"\n        return {\n            \"facial_emotions\": {},\n            \"voice_emotions\": {},\n            \"emotional_congruence\": True,\n            \"stress_indicators\": [],\n            \"attention_level\": 0.0,\n            \"therapeutic_engagement\": 0.0,\n            \"recommendations\": [\n                \"Multimodal analysis will provide unprecedented insight into emotional states\",\n                \"Real-time detection of therapy engagement and effectiveness\",\n                \"Advanced stress and trauma response identification\"\n            ],\n            \"note\": \"Placeholder - Advanced multimodal analysis coming in Level 3+\"\n        }\n\n# Future integration points for existing modules\nclass AITherapyEnhancer:\n    \"\"\"\n    Advanced AI therapy enhancement using all available data sources.\n    \n    This module will integrate:\n    - Microexpression analysis results\n    - Biosensor data patterns  \n    - Voice analysis outcomes\n    - Historical therapy progress\n    - Personalized treatment recommendations\n    \"\"\"\n    \n    def __init__(self):\n        self.microexpression_analyzer = MicroexpressionAnalyzer()\n        self.biosensor_integration = BioSensorIntegration()\n        self.video_analyzer = AdvancedVideoAnalysis()\n        logging.info(\"AITherapyEnhancer initialized (placeholder)\")\n    \n    def generate_enhanced_response(self, \n                                 user_input: str, \n                                 session_type: str,\n                                 biosensor_data: Optional[Dict] = None,\n                                 video_analysis: Optional[Dict] = None) -\u003e Dict[str, Any]:\n        \"\"\"\n        Generate AI therapy responses enhanced with multimodal data analysis.\n        \n        Future Implementation:\n        - Integrate text, biosensor, and video analysis\n        - Personalized response generation based on emotional state\n        - Real-time therapy technique adaptation\n        - Crisis intervention with multi-modal warning signs\n        \"\"\"\n        return {\n            \"ai_response\": \"Enhanced AI therapy responses coming in Level 3+\",\n            \"confidence\": 0.0,\n            \"emotional_state_detected\": \"unknown\",\n            \"recommended_techniques\": [\n                \"Multimodal AI will recommend optimal therapy techniques\",\n                \"Real-time adaptation based on emotional and physiological state\",\n                \"Personalized intervention strategies\"\n            ],\n            \"crisis_indicators\": [],\n            \"note\": \"Placeholder - Enhanced AI therapy coming in Level 3+\"\n        }",
                "health_checker.py": "import json\nimport logging\nfrom datetime import datetime\n\n# TODO: Level 3+ Integration Points\n# These comments show where advanced AI modules will be integrated:\n# \n# 1. MICROEXPRESSION ANALYSIS INTEGRATION:\n#    - Import from models.future_ai_modules import MicroexpressionAnalyzer\n#    - Add microexpression_analyzer = MicroexpressionAnalyzer() to __init__\n#    - Integrate facial analysis results with text-based crisis detection\n#    - Cross-reference spoken words with facial micro-expressions for incongruence\n#    - Use micro-expression stress indicators to enhance crisis prediction\n#\n# 2. BIOSENSOR DATA INTEGRATION:\n#    - Import from models.future_ai_modules import BioSensorIntegration  \n#    - Add biosensor_integration = BioSensorIntegration() to __init__\n#    - Correlate heart rate variability with crisis indicators\n#    - Use stress patterns from wearables to predict mental health episodes\n#    - Integrate sleep quality and activity data for comprehensive health assessment\n#\n# 3. MULTI-MODAL CRISIS DETECTION:\n#    - Combine text analysis + microexpressions + biosensor data\n#    - Create weighted scoring system for crisis probability\n#    - Implement real-time alert system for immediate intervention\n#    - Generate personalized intervention strategies based on all data sources\n\nclass HealthChecker:\n    def __init__(self):\n        self.risk_keywords = {\n            \"crisis\": {\n                \"keywords\": [\n                    \"kill myself\", \"suicide\", \"end it all\", \"don't want to live\",\n                    \"better off dead\", \"take my own life\", \"hurt myself badly\",\n                    \"can't go on\", \"no point in living\", \"want to die\",\n                    \"end my life\", \"kill me\", \"wish I was dead\"\n                ],\n                \"weight\": 10,\n                \"action\": \"immediate_intervention\"\n            },\n            \"self_harm\": {\n                \"keywords\": [\n                    \"cut myself\", \"hurt myself\", \"self harm\", \"self-harm\",\n                    \"burn myself\", \"scratch myself\", \"punish myself\",\n                    \"deserve pain\", \"cutting\", \"razor\", \"blade\",\n                    \"mutilate\", \"damage myself\"\n                ],\n                \"weight\": 8,\n                \"action\": \"safety_planning\"\n            },\n            \"violence\": {\n                \"keywords\": [\n                    \"hurt someone\", \"kill someone\", \"attack\", \"murder\",\n                    \"violence\", \"harm others\", \"revenge\", \"get back at\",\n                    \"make them pay\", \"destroy them\", \"violent thoughts\"\n                ],\n                \"weight\": 9,\n                \"action\": \"threat_assessment\"\n            },\n            \"severe_distress\": {\n                \"keywords\": [\n                    \"can't take it\", \"overwhelming\", \"falling apart\",\n                    \"losing control\", \"breaking down\", \"desperate\",\n                    \"hopeless\", \"worthless\", \"burden\", \"exhausted\",\n                    \"unbearable\", \"can't cope\", \"giving up\"\n                ],\n                \"weight\": 6,\n                \"action\": \"enhanced_support\"\n            },\n            \"substance_abuse\": {\n                \"keywords\": [\n                    \"drinking too much\", \"can't stop drinking\", \"need drugs\",\n                    \"overdose\", \"getting high\", \"numbing the pain\",\n                    \"addiction\", \"substance\", \"pills\", \"alcohol problem\",\n                    \"drug problem\", \"abusing\", \"dependent\"\n                ],\n                \"weight\": 7,\n                \"action\": \"addiction_resources\"\n            },\n            \"eating_disorder\": {\n                \"keywords\": [\n                    \"starving myself\", \"binge eating\", \"purging\", \"vomit\",\n                    \"too fat\", \"hate my body\", \"restrict food\",\n                    \"not eating\", \"weight obsession\", \"body dysmorphia\",\n                    \"bulimia\", \"anorexia\", \"food control\"\n                ],\n                \"weight\": 6,\n                \"action\": \"eating_disorder_support\"\n            },\n            \"psychosis\": {\n                \"keywords\": [\n                    \"hearing voices\", \"seeing things\", \"not real\",\n                    \"hallucinations\", \"paranoid\", \"they're watching\",\n                    \"conspiracy\", \"delusions\", \"losing my mind\",\n                    \"voices telling me\", \"people following\"\n                ],\n                \"weight\": 8,\n                \"action\": \"psychiatric_evaluation\"\n            },\n            \"trauma\": {\n                \"keywords\": [\n                    \"flashbacks\", \"nightmares\", \"reliving\", \"triggered\",\n                    \"traumatic\", \"abuse\", \"assault\", \"violated\",\n                    \"ptsd\", \"trauma response\", \"dissociating\"\n                ],\n                \"weight\": 7,\n                \"action\": \"trauma_support\"\n            }\n        }\n        \n        self.intensity_modifiers = {\n            \"extreme\": [\"very\", \"extremely\", \"really\", \"so\", \"completely\", \"totally\", \"absolutely\"],\n            \"frequency\": [\"always\", \"constantly\", \"every day\", \"all the time\", \"never stops\"],\n            \"immediacy\": [\"right now\", \"today\", \"tonight\", \"immediately\", \"this moment\"]\n        }\n        \n        self.protective_factors = [\n            \"support\", \"family\", \"friends\", \"therapy\", \"treatment\",\n            \"help\", \"better\", \"hope\", \"future\", \"goals\"\n        ]\n    \n    def scan_text(self, text):\n        \"\"\"Scan text for mental health risk indicators\"\"\"\n        if not text:\n            return []\n        \n        text_lower = text.lower()\n        alerts = []\n        risk_score = 0\n        \n        # Check for protective factors\n        protective_count = sum(1 for factor in self.protective_factors if factor in text_lower)\n        \n        for category, risk_data in self.risk_keywords.items():\n            keywords = risk_data[\"keywords\"]\n            weight = risk_data[\"weight\"]\n            action = risk_data[\"action\"]\n            \n            matched_keywords = []\n            for keyword in keywords:\n                if keyword in text_lower:\n                    matched_keywords.append(keyword)\n                    base_score = weight\n                    \n                    # Check for intensity modifiers\n                    intensity_multiplier = self._check_intensity(text_lower, keyword)\n                    adjusted_score = base_score + (base_score * intensity_multiplier)\n                    \n                    # Reduce score if protective factors present\n                    if protective_count \u003e 0:\n                        adjusted_score *= (1 - (protective_count * 0.1))\n                    \n                    risk_score += adjusted_score\n            \n            if matched_keywords:\n                alert = {\n                    \"category\": category,\n                    \"severity\": self._get_severity(weight),\n                    \"matched_keywords\": matched_keywords,\n                    \"action\": action,\n                    \"message\": self._get_alert_message(category),\n                    \"resources\": self._get_resources(category),\n                    \"immediate_steps\": self._get_immediate_steps(category)\n                }\n                alerts.append(alert)\n        \n        # Sort alerts by severity (highest risk first)\n        alerts.sort(key=lambda x: self.risk_keywords[x[\"category\"]][\"weight\"], reverse=True)\n        \n        # Add overall risk assessment\n        if alerts:\n            overall_risk = self._calculate_overall_risk(risk_score)\n            alerts.insert(0, {\n                \"category\": \"overall_assessment\",\n                \"severity\": overall_risk,\n                \"risk_score\": round(risk_score, 1),\n                \"message\": f\"Overall risk level: {overall_risk}\",\n                \"requires_intervention\": risk_score \u003e= 15,\n                \"protective_factors\": protective_count,\n                \"recommendations\": self._get_overall_recommendations(overall_risk, protective_count)\n            })\n        \n        return alerts\n    \n    def _check_intensity(self, text, keyword):\n        \"\"\"Check for intensity modifiers around keywords\"\"\"\n        # Find the position of the keyword\n        keyword_pos = text.find(keyword)\n        if keyword_pos == -1:\n            return 0\n        \n        # Check words before and after the keyword\n        words_before = text[:keyword_pos].split()[-3:]  # Last 3 words before\n        words_after = text[keyword_pos + len(keyword):].split()[:3]  # First 3 words after\n        \n        context_words = words_before + words_after\n        \n        multiplier = 0\n        for word in context_words:\n            word = word.strip('.,!?\";')\n            if word in self.intensity_modifiers[\"extreme\"]:\n                multiplier += 0.3\n            elif word in self.intensity_modifiers[\"frequency\"]:\n                multiplier += 0.4\n            elif word in self.intensity_modifiers[\"immediacy\"]:\n                multiplier += 0.5\n        \n        return min(multiplier, 1.0)  # Cap at 1.0\n    \n    def _get_severity(self, weight):\n        \"\"\"Convert weight to severity level\"\"\"\n        if weight \u003e= 9:\n            return \"critical\"\n        elif weight \u003e= 7:\n            return \"high\"\n        elif weight \u003e= 5:\n            return \"medium\"\n        else:\n            return \"low\"\n    \n    def _calculate_overall_risk(self, risk_score):\n        \"\"\"Calculate overall risk level\"\"\"\n        if risk_score \u003e= 25:\n            return \"critical\"\n        elif risk_score \u003e= 15:\n            return \"high\"\n        elif risk_score \u003e= 10:\n            return \"medium\"\n        else:\n            return \"low\"\n    \n    def _get_alert_message(self, category):\n        \"\"\"Get appropriate alert message for category\"\"\"\n        messages = {\n            \"crisis\": \"⚠️ CRISIS ALERT: Immediate suicide risk detected. Intervention required.\",\n            \"self_harm\": \"⚠️ Self-harm indicators detected. Safety planning recommended.\",\n            \"violence\": \"⚠️ Violence indicators detected. Threat assessment needed.\",\n            \"severe_distress\": \"⚠️ Severe emotional distress detected. Enhanced support recommended.\",\n            \"substance_abuse\": \"⚠️ Substance abuse concerns detected. Addiction resources recommended.\",\n            \"eating_disorder\": \"⚠️ Eating disorder indicators detected. Specialized support recommended.\",\n            \"psychosis\": \"⚠️ Psychotic symptoms detected. Psychiatric evaluation recommended.\",\n            \"trauma\": \"⚠️ Trauma-related content detected. Trauma-informed care recommended.\"\n        }\n        return messages.get(category, f\"⚠️ {category.replace('_', ' ').title()} risk detected.\")\n    \n    def _get_resources(self, category):\n        \"\"\"Get relevant resources for each category\"\"\"\n        resources = {\n            \"crisis\": [\n                {\"name\": \"National Suicide Prevention Lifeline\", \"contact\": \"988\"},\n                {\"name\": \"Crisis Text Line\", \"contact\": \"Text HOME to 741741\"},\n                {\"name\": \"Emergency Services\", \"contact\": \"911\"},\n                {\"name\": \"National Suicide Prevention Website\", \"contact\": \"suicidepreventionlifeline.org\"}\n            ],\n            \"self_harm\": [\n                {\"name\": \"Crisis Text Line\", \"contact\": \"Text HOME to 741741\"},\n                {\"name\": \"Self-Injury Outreach \u0026 Support\", \"contact\": \"sioutreach.org\"},\n                {\"name\": \"To Write Love on Her Arms\", \"contact\": \"twloha.com\"},\n                {\"name\": \"National Suicide Prevention Lifeline\", \"contact\": \"988\"}\n            ],\n            \"violence\": [\n                {\"name\": \"National Domestic Violence Hotline\", \"contact\": \"1-800-799-7233\"},\n                {\"name\": \"Crisis Text Line\", \"contact\": \"Text HOME to 741741\"},\n                {\"name\": \"Emergency Services\", \"contact\": \"911\"},\n                {\"name\": \"National Sexual Assault Hotline\", \"contact\": \"1-800-656-4673\"}\n            ],\n            \"severe_distress\": [\n                {\"name\": \"Crisis Text Line\", \"contact\": \"Text HOME to 741741\"},\n                {\"name\": \"SAMHSA Helpline\", \"contact\": \"1-800-662-4357\"},\n                {\"name\": \"Mental Health America\", \"contact\": \"mhanational.org\"},\n                {\"name\": \"National Alliance on Mental Illness\", \"contact\": \"nami.org\"}\n            ],\n            \"substance_abuse\": [\n                {\"name\": \"SAMHSA Helpline\", \"contact\": \"1-800-662-4357\"},\n                {\"name\": \"Alcoholics Anonymous\", \"contact\": \"aa.org\"},\n                {\"name\": \"Narcotics Anonymous\", \"contact\": \"na.org\"},\n                {\"name\": \"Smart Recovery\", \"contact\": \"smartrecovery.org\"}\n            ],\n            \"eating_disorder\": [\n                {\"name\": \"National Eating Disorders Association\", \"contact\": \"1-800-931-2237\"},\n                {\"name\": \"NEDA Text Line\", \"contact\": \"Text NEDA to 741741\"},\n                {\"name\": \"Eating Recovery Center\", \"contact\": \"eatingrecoverycenter.com\"},\n                {\"name\": \"National Association of Anorexia Nervosa\", \"contact\": \"anad.org\"}\n            ],\n            \"psychosis\": [\n                {\"name\": \"SAMHSA Helpline\", \"contact\": \"1-800-662-4357\"},\n                {\"name\": \"Crisis Text Line\", \"contact\": \"Text HOME to 741741\"},\n                {\"name\": \"Emergency Services\", \"contact\": \"911\"},\n                {\"name\": \"National Alliance on Mental Illness\", \"contact\": \"nami.org\"}\n            ],\n            \"trauma\": [\n                {\"name\": \"National Sexual Assault Hotline\", \"contact\": \"1-800-656-4673\"},\n                {\"name\": \"Crisis Text Line\", \"contact\": \"Text HOME to 741741\"},\n                {\"name\": \"PTSD National Center\", \"contact\": \"ptsd.va.gov\"},\n                {\"name\": \"National Domestic Violence Hotline\", \"contact\": \"1-800-799-7233\"}\n            ]\n        }\n        return resources.get(category, [])\n    \n    def _get_immediate_steps(self, category):\n        \"\"\"Get immediate steps for each risk category\"\"\"\n        steps = {\n            \"crisis\": [\n                \"Call 988 (Suicide Prevention Lifeline) immediately\",\n                \"Go to the nearest emergency room\",\n                \"Call 911 if in immediate danger\",\n                \"Remove means of self-harm from environment\",\n                \"Stay with a trusted person\"\n            ],\n            \"self_harm\": [\n                \"Remove sharp objects and harmful items\",\n                \"Use ice cubes or rubber bands as safer alternatives\",\n                \"Call a crisis hotline for support\",\n                \"Reach out to a trusted friend or family member\",\n                \"Practice grounding techniques\"\n            ],\n            \"violence\": [\n                \"Call 911 if there is immediate danger\",\n                \"Contact local law enforcement\",\n                \"Reach out to a crisis counselor\",\n                \"Create a safety plan\",\n                \"Consider removing yourself from the situation\"\n            ],\n            \"severe_distress\": [\n                \"Practice deep breathing exercises\",\n                \"Use grounding techniques (5-4-3-2-1 method)\",\n                \"Call a crisis helpline\",\n                \"Reach out to your support network\",\n                \"Consider professional mental health support\"\n            ]\n        }\n        return steps.get(category, [\n            \"Reach out to a mental health professional\",\n            \"Contact a crisis helpline for support\",\n            \"Talk to a trusted friend or family member\",\n            \"Practice self-care and stress management\"\n        ])\n    \n    def _get_overall_recommendations(self, risk_level, protective_factors):\n        \"\"\"Get overall recommendations based on risk level\"\"\"\n        recommendations = []\n        \n        if risk_level == \"critical\":\n            recommendations = [\n                \"Seek immediate professional help\",\n                \"Contact emergency services if in danger\",\n                \"Implement crisis safety plan\",\n                \"Ensure continuous supervision if possible\"\n            ]\n        elif risk_level == \"high\":\n            recommendations = [\n                \"Schedule urgent mental health appointment\",\n                \"Implement safety planning strategies\",\n                \"Increase support system contact\",\n                \"Consider intensive outpatient programs\"\n            ]\n        elif risk_level == \"medium\":\n            recommendations = [\n                \"Schedule mental health consultation\",\n                \"Increase therapy frequency\",\n                \"Practice stress management techniques\",\n                \"Monitor symptoms closely\"\n            ]\n        else:\n            recommendations = [\n                \"Continue current mental health support\",\n                \"Practice preventive self-care\",\n                \"Maintain regular check-ins\",\n                \"Build resilience strategies\"\n            ]\n        \n        # Add protective factor reinforcement\n        if protective_factors \u003e 0:\n            recommendations.append(\"Continue leveraging your existing support systems\")\n        else:\n            recommendations.append(\"Work on building a stronger support network\")\n        \n        return recommendations\n    \n    def generate_safety_plan(self, alerts, patient_data=None):\n        \"\"\"Generate a personalized safety plan based on alerts\"\"\"\n        if not alerts:\n            return None\n        \n        # Filter out the overall assessment\n        risk_alerts = [alert for alert in alerts if alert.get(\"category\") != \"overall_assessment\"]\n        \n        if not risk_alerts:\n            return None\n        \n        highest_risk = max(risk_alerts, key=lambda x: self.risk_keywords.get(x[\"category\"], {}).get(\"weight\", 0))\n        \n        safety_plan = {\n            \"immediate_actions\": highest_risk.get(\"immediate_steps\", []),\n            \"warning_signs\": self._identify_warning_signs(risk_alerts),\n            \"coping_strategies\": self._get_coping_strategies(highest_risk[\"category\"]),\n            \"support_contacts\": self._get_support_contacts(),\n            \"professional_resources\": highest_risk.get(\"resources\", []),\n            \"environmental_safety\": self._get_environmental_safety(highest_risk[\"category\"]),\n            \"follow_up_plan\": self._get_follow_up_plan(highest_risk[\"severity\"])\n        }\n        \n        return safety_plan\n    \n    def _identify_warning_signs(self, alerts):\n        \"\"\"Identify warning signs from alerts\"\"\"\n        warning_signs = []\n        for alert in alerts:\n            category = alert[\"category\"]\n            if category == \"crisis\":\n                warning_signs.extend([\n                    \"Thoughts of suicide or self-harm\",\n                    \"Feeling hopeless or trapped\",\n                    \"Talking about death or dying\"\n                ])\n            elif category == \"severe_distress\":\n                warning_signs.extend([\n                    \"Feeling overwhelmed or out of control\",\n                    \"Unable to cope with daily activities\",\n                    \"Extreme mood changes\"\n                ])\n        \n        return list(set(warning_signs))  # Remove duplicates\n    \n    def _get_coping_strategies(self, category):\n        \"\"\"Get coping strategies for specific risk categories\"\"\"\n        strategies = {\n            \"crisis\": [\n                \"Call a crisis hotline immediately\",\n                \"Use the STOP technique (Stop, Take a breath, Observe, Proceed mindfully)\",\n                \"Practice grounding exercises\",\n                \"Reach out to your support network\"\n            ],\n            \"self_harm\": [\n                \"Hold ice cubes in your hands\",\n                \"Draw on your skin with a red marker\",\n                \"Do intense exercise\",\n                \"Call a friend or family member\"\n            ],\n            \"severe_distress\": [\n                \"Practice deep breathing (4-7-8 technique)\",\n                \"Use progressive muscle relaxation\",\n                \"Try the 5-4-3-2-1 grounding technique\",\n                \"Take a warm bath or shower\"\n            ]\n        }\n        \n        return strategies.get(category, [\n            \"Practice mindfulness and meditation\",\n            \"Engage in physical activity\",\n            \"Connect with supportive people\",\n            \"Use healthy distraction techniques\"\n        ])\n    \n    def _get_support_contacts(self):\n        \"\"\"Get emergency support contacts\"\"\"\n        return [\n            {\"role\": \"Crisis Hotline\", \"contact\": \"988\", \"available\": \"24/7\"},\n            {\"role\": \"Emergency Services\", \"contact\": \"911\", \"available\": \"24/7\"},\n            {\"role\": \"Crisis Text Line\", \"contact\": \"Text HOME to 741741\", \"available\": \"24/7\"}\n        ]\n    \n    def _get_environmental_safety(self, category):\n        \"\"\"Get environmental safety measures\"\"\"\n        if category in [\"crisis\", \"self_harm\"]:\n            return [\n                \"Remove or secure sharp objects\",\n                \"Remove or secure medications\",\n                \"Remove or secure firearms\",\n                \"Ask someone to stay with you\",\n                \"Go to a safe, public place if alone\"\n            ]\n        else:\n            return [\n                \"Create a calm, safe space\",\n                \"Remove stressors from environment\",\n                \"Ensure access to support resources\",\n                \"Have comfort items readily available\"\n            ]\n    \n    def _get_follow_up_plan(self, severity):\n        \"\"\"Get follow-up plan based on severity\"\"\"\n        if severity == \"critical\":\n            return [\n                \"Emergency mental health evaluation within 24 hours\",\n                \"Daily check-ins with mental health professional\",\n                \"Consider inpatient treatment if necessary\"\n            ]\n        elif severity == \"high\":\n            return [\n                \"Mental health appointment within 48-72 hours\",\n                \"Daily self-monitoring and reporting\",\n                \"Increased therapy frequency\"\n            ]\n        else:\n            return [\n                \"Mental health appointment within 1 week\",\n                \"Regular self-monitoring\",\n                \"Continue current treatment plan with modifications\"\n            ]\n    \n    def assess_crisis_risk(self, user_message, ai_response=\"\"):\n        \"\"\"Assess crisis risk level from user message and AI response\"\"\"\n        try:\n            # Scan the user message for crisis indicators\n            alerts = self.scan_text(user_message)\n            \n            # Calculate overall risk score\n            risk_score = 0\n            highest_category = \"low\"\n            \n            for alert in alerts:\n                if alert.get(\"level\") == \"critical\":\n                    risk_score += 10\n                    highest_category = \"critical\"\n                elif alert.get(\"level\") == \"warning\":\n                    risk_score += 6\n                    if highest_category != \"critical\":\n                        highest_category = \"high\" \n                elif alert.get(\"level\") == \"info\":\n                    risk_score += 3\n                    if highest_category in [\"low\"]:\n                        highest_category = \"medium\"\n            \n            # Determine final risk level\n            if risk_score \u003e= 10:\n                risk_level = \"critical\"\n            elif risk_score \u003e= 6:\n                risk_level = \"high\"\n            elif risk_score \u003e= 3:\n                risk_level = \"medium\"\n            else:\n                risk_level = \"low\"\n            \n            # Generate assessment details\n            assessment = {\n                \"risk_level\": risk_level,\n                \"risk_score\": risk_score,\n                \"alerts\": alerts,\n                \"intervention_needed\": risk_score \u003e= 6,\n                \"emergency_contact\": risk_score \u003e= 10,\n                \"recommendations\": self._get_crisis_recommendations(risk_level),\n                \"resources\": self._get_crisis_resources(risk_level)\n            }\n            \n            return assessment\n            \n        except Exception as e:\n            logging.error(f\"Crisis assessment error: {e}\")\n            return {\n                \"risk_level\": \"unknown\",\n                \"risk_score\": 0,\n                \"alerts\": [],\n                \"intervention_needed\": False,\n                \"emergency_contact\": False,\n                \"recommendations\": [\"Please seek professional help if you're in crisis\"],\n                \"resources\": [{\"name\": \"Crisis Hotline\", \"contact\": \"988\"}]\n            }\n    \n    def _get_crisis_recommendations(self, risk_level):\n        \"\"\"Get crisis-specific recommendations\"\"\"\n        if risk_level == \"critical\":\n            return [\n                \"Contact emergency services (911) immediately\",\n                \"Call National Suicide Prevention Lifeline (988)\",\n                \"Go to nearest emergency room\",\n                \"Do not be alone - contact family/friends immediately\"\n            ]\n        elif risk_level == \"high\":\n            return [\n                \"Contact crisis support hotline (988)\",\n                \"Reach out to mental health professional urgently\",\n                \"Contact trusted friend or family member\",\n                \"Remove any means of self-harm from environment\"\n            ]\n        elif risk_level == \"medium\":\n            return [\n                \"Consider contacting mental health professional\",\n                \"Practice grounding techniques\",\n                \"Reach out to support network\",\n                \"Monitor feelings and seek help if they worsen\"\n            ]\n        else:\n            return [\n                \"Continue current coping strategies\",\n                \"Maintain regular therapy schedule\",\n                \"Practice self-care activities\"\n            ]\n    \n    def _get_crisis_resources(self, risk_level):\n        \"\"\"Get crisis-specific resources\"\"\"\n        if risk_level in [\"critical\", \"high\"]:\n            return [\n                {\"name\": \"National Suicide Prevention Lifeline\", \"contact\": \"988\"},\n                {\"name\": \"Crisis Text Line\", \"contact\": \"Text HOME to 741741\"},\n                {\"name\": \"Emergency Services\", \"contact\": \"911\"},\n                {\"name\": \"National Sexual Assault Hotline\", \"contact\": \"1-800-656-4673\"}\n            ]\n        else:\n            return [\n                {\"name\": \"Crisis Text Line\", \"contact\": \"Text HOME to 741741\"},\n                {\"name\": \"SAMHSA National Helpline\", \"contact\": \"1-800-662-4357\"},\n                {\"name\": \"National Alliance on Mental Illness\", \"contact\": \"nami.org\"}\n            ]\n    \n    def log_risk_assessment(self, text, alerts, patient_id=None):\n        \"\"\"Log risk assessment for tracking and analysis\"\"\"\n        assessment_log = {\n            \"timestamp\": datetime.now().isoformat(),\n            \"patient_id\": patient_id,\n            \"text_length\": len(text),\n            \"alerts_triggered\": len([a for a in alerts if a.get(\"category\") != \"overall_assessment\"]),\n            \"highest_risk_category\": alerts[1][\"category\"] if len(alerts) \u003e 1 else None,\n            \"overall_risk_score\": alerts[0].get(\"risk_score\", 0) if alerts else 0,\n            \"protective_factors\": alerts[0].get(\"protective_factors\", 0) if alerts else 0,\n            \"intervention_required\": any(alert.get(\"requires_intervention\", False) for alert in alerts),\n            \"alerts\": alerts\n        }\n        \n        # In a real application, this would be stored in a database\n        logging.info(f\"Risk assessment logged: {json.dumps(assessment_log, indent=2)}\")\n        \n        return assessment_log\n",
                "iot_wearable_manager.py": "\"\"\"\nIoT \u0026 Wearable Device Integration Manager\nHandles integration with smart devices, wearables, and environmental sensors\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Any, Optional, Tuple\nfrom datetime import datetime, timedelta\nimport json\nimport uuid\nfrom enum import Enum\nimport random\nimport math\nimport numpy as np\n\nclass DeviceType(Enum):\n    SMARTWATCH = \"smartwatch\"\n    FITNESS_TRACKER = \"fitness_tracker\"\n    SMART_RING = \"smart_ring\"\n    SLEEP_TRACKER = \"sleep_tracker\"\n    SMART_HOME_HUB = \"smart_home_hub\"\n    AIR_QUALITY_SENSOR = \"air_quality_sensor\"\n    LIGHT_SENSOR = \"light_sensor\"\n    NOISE_MONITOR = \"noise_monitor\"\n    TEMPERATURE_SENSOR = \"temperature_sensor\"\n    SMARTPHONE = \"smartphone\"\n\nclass DeviceBrand(Enum):\n    APPLE_WATCH = \"apple_watch\"\n    FITBIT = \"fitbit\"\n    GARMIN = \"garmin\"\n    SAMSUNG_GALAXY = \"samsung_galaxy\"\n    OURA_RING = \"oura_ring\"\n    WHOOP = \"whoop\"\n    GOOGLE_PIXEL = \"google_pixel\"\n    AMAZON_ALEXA = \"amazon_alexa\"\n    PHILIPS_HUE = \"philips_hue\"\n    NEST = \"nest\"\n\nclass DataStreamType(Enum):\n    HEART_RATE = \"heart_rate\"\n    STEPS = \"steps\"\n    SLEEP_STAGES = \"sleep_stages\"\n    STRESS_LEVEL = \"stress_level\"\n    BLOOD_OXYGEN = \"blood_oxygen\"\n    SKIN_TEMPERATURE = \"skin_temperature\"\n    AMBIENT_LIGHT = \"ambient_light\"\n    AIR_QUALITY = \"air_quality\"\n    NOISE_LEVEL = \"noise_level\"\n    LOCATION = \"location\"\n    SCREEN_TIME = \"screen_time\"\n    APP_USAGE = \"app_usage\"\n\nclass ConnectionStatus(Enum):\n    CONNECTED = \"connected\"\n    DISCONNECTED = \"disconnected\"\n    SYNCING = \"syncing\"\n    ERROR = \"error\"\n    PAIRING = \"pairing\"\n\n@dataclass\nclass WearableDevice:\n    device_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    device_type: DeviceType = DeviceType.SMARTWATCH\n    brand: DeviceBrand = DeviceBrand.APPLE_WATCH\n    model: str = \"\"\n    firmware_version: str = \"\"\n    battery_level: float = 100.0\n    connection_status: ConnectionStatus = ConnectionStatus.CONNECTED\n    last_sync: datetime = field(default_factory=datetime.now)\n    data_streams: List[DataStreamType] = field(default_factory=list)\n    permissions_granted: List[str] = field(default_factory=list)\n    device_settings: Dict[str, Any] = field(default_factory=dict)\n    registered_at: datetime = field(default_factory=datetime.now)\n\n@dataclass\nclass SensorReading:\n    reading_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    device_id: str = \"\"\n    user_id: str = \"\"\n    data_stream: DataStreamType = DataStreamType.HEART_RATE\n    value: float = 0.0\n    unit: str = \"\"\n    timestamp: datetime = field(default_factory=datetime.now)\n    quality_score: float = 1.0\n    metadata: Dict[str, Any] = field(default_factory=dict)\n    processed: bool = False\n\n@dataclass\nclass EnvironmentalData:\n    reading_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    location: str = \"home\"\n    air_quality_index: float = 50.0\n    temperature: float = 22.0  # Celsius\n    humidity: float = 45.0  # Percentage\n    light_level: float = 300.0  # Lux\n    noise_level: float = 40.0  # Decibels\n    uv_index: float = 3.0\n    pollen_count: float = 20.0\n    timestamp: datetime = field(default_factory=datetime.now)\n    weather_conditions: str = \"clear\"\n\n@dataclass\nclass SleepAnalysis:\n    analysis_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    device_id: str = \"\"\n    sleep_date: datetime = field(default_factory=lambda: datetime.now().replace(hour=0, minute=0, second=0))\n    bedtime: datetime = field(default_factory=datetime.now)\n    sleep_onset: datetime = field(default_factory=datetime.now)\n    wake_time: datetime = field(default_factory=datetime.now)\n    total_sleep_time: float = 7.5  # Hours\n    sleep_efficiency: float = 0.85  # Percentage\n    deep_sleep_minutes: float = 90.0\n    rem_sleep_minutes: float = 120.0\n    light_sleep_minutes: float = 240.0\n    wake_episodes: int = 2\n    sleep_score: float = 82.0\n    hrv_during_sleep: float = 45.0\n    resting_heart_rate: float = 60.0\n\n@dataclass\nclass ActivitySummary:\n    summary_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    date: datetime = field(default_factory=lambda: datetime.now().replace(hour=0, minute=0, second=0))\n    total_steps: int = 8500\n    active_minutes: int = 45\n    calories_burned: int = 2200\n    distance_km: float = 6.8\n    flights_climbed: int = 12\n    sedentary_minutes: int = 480\n    stress_average: float = 0.3\n    recovery_score: float = 75.0\n    energy_level: float = 0.7\n\n@dataclass\nclass DigitalBiomarker:\n    biomarker_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    biomarker_type: str = \"keystroke_dynamics\"\n    value: float = 0.0\n    confidence_score: float = 0.8\n    data_source: str = \"smartphone\"\n    collection_method: str = \"passive\"\n    timestamp: datetime = field(default_factory=datetime.now)\n    clinical_relevance: str = \"depression_screening\"\n    raw_features: Dict[str, Any] = field(default_factory=dict)\n\nclass IoTWearableManager:\n    def __init__(self):\n        self.connected_devices: Dict[str, WearableDevice] = {}\n        self.sensor_readings: Dict[str, List[SensorReading]] = {}\n        self.environmental_data: Dict[str, List[EnvironmentalData]] = {}\n        self.sleep_analyses: Dict[str, List[SleepAnalysis]] = {}\n        self.activity_summaries: Dict[str, List[ActivitySummary]] = {}\n        self.digital_biomarkers: Dict[str, List[DigitalBiomarker]] = {}\n        self.device_configurations = self._initialize_device_configs()\n\n    def _initialize_device_configs(self) -\u003e Dict[DeviceBrand, Dict[str, Any]]:\n        \"\"\"Initialize device-specific configurations\"\"\"\n        return {\n            DeviceBrand.APPLE_WATCH: {\n                \"supported_streams\": [\n                    DataStreamType.HEART_RATE, DataStreamType.STEPS, DataStreamType.SLEEP_STAGES,\n                    DataStreamType.BLOOD_OXYGEN, DataStreamType.STRESS_LEVEL\n                ],\n                \"api_endpoint\": \"https://developer.apple.com/healthkit/\",\n                \"sync_frequency\": 300,  # seconds\n                \"battery_optimization\": True,\n                \"data_retention\": 30  # days\n            },\n            DeviceBrand.FITBIT: {\n                \"supported_streams\": [\n                    DataStreamType.HEART_RATE, DataStreamType.STEPS, DataStreamType.SLEEP_STAGES,\n                    DataStreamType.STRESS_LEVEL, DataStreamType.SKIN_TEMPERATURE\n                ],\n                \"api_endpoint\": \"https://dev.fitbit.com/build/reference/web-api/\",\n                \"sync_frequency\": 900,  # seconds\n                \"battery_optimization\": True,\n                \"data_retention\": 30\n            },\n            DeviceBrand.OURA_RING: {\n                \"supported_streams\": [\n                    DataStreamType.HEART_RATE, DataStreamType.SLEEP_STAGES,\n                    DataStreamType.SKIN_TEMPERATURE, DataStreamType.STRESS_LEVEL\n                ],\n                \"api_endpoint\": \"https://cloud.ouraring.com/v2/\",\n                \"sync_frequency\": 3600,  # seconds (hourly)\n                \"battery_optimization\": True,\n                \"data_retention\": 90\n            },\n            DeviceBrand.GARMIN: {\n                \"supported_streams\": [\n                    DataStreamType.HEART_RATE, DataStreamType.STEPS, DataStreamType.STRESS_LEVEL,\n                    DataStreamType.BLOOD_OXYGEN, DataStreamType.SLEEP_STAGES\n                ],\n                \"api_endpoint\": \"https://developer.garmin.com/connect-iq/\",\n                \"sync_frequency\": 600,\n                \"battery_optimization\": True,\n                \"data_retention\": 60\n            }\n        }\n\n    def register_device(self, user_id: str, device_type: DeviceType, brand: DeviceBrand,\n                       model: str, permissions: List[str]) -\u003e WearableDevice:\n        \"\"\"Register a new wearable device for user\"\"\"\n\n        # Get supported data streams for this device\n        config = self.device_configurations.get(brand, {})\n        supported_streams = config.get(\"supported_streams\", [])\n\n        device = WearableDevice(\n            user_id=user_id,\n            device_type=device_type,\n            brand=brand,\n            model=model,\n            data_streams=supported_streams,\n            permissions_granted=permissions,\n            device_settings=self._get_default_settings(brand)\n        )\n\n        self.connected_devices[device.device_id] = device\n\n        # Initialize data storage for this device\n        self.sensor_readings[device.device_id] = []\n\n        # Start data collection simulation\n        self._start_data_collection(device)\n\n        return device\n\n    def _get_default_settings(self, brand: DeviceBrand) -\u003e Dict[str, Any]:\n        \"\"\"Get default device settings\"\"\"\n        return {\n            \"data_sync_frequency\": self.device_configurations.get(brand, {}).get(\"sync_frequency\", 600),\n            \"battery_optimization\": True,\n            \"privacy_mode\": False,\n            \"high_accuracy_mode\": True,\n            \"notifications_enabled\": True,\n            \"auto_workout_detection\": True\n        }\n\n    def _start_data_collection(self, device: WearableDevice):\n        \"\"\"Start collecting data from device (simulation)\"\"\"\n        # In real implementation, this would establish API connections\n        # For now, we'll simulate data collection\n\n        # Generate baseline readings for the device\n        for stream_type in device.data_streams:\n            self._generate_baseline_reading(device, stream_type)\n\n    def _generate_baseline_reading(self, device: WearableDevice, stream_type: DataStreamType):\n        \"\"\"Generate simulated sensor reading\"\"\"\n\n        # Generate realistic values based on stream type\n        value, unit = self._get_realistic_value(stream_type)\n\n        reading = SensorReading(\n            device_id=device.device_id,\n            user_id=device.user_id,\n            data_stream=stream_type,\n            value=value,\n            unit=unit,\n            quality_score=random.uniform(0.8, 1.0),\n            metadata={\n                \"device_brand\": device.brand.value,\n                \"firmware_version\": device.firmware_version,\n                \"battery_level\": device.battery_level\n            }\n        )\n\n        self.sensor_readings[device.device_id].append(reading)\n\n    def _get_realistic_value(self, stream_type: DataStreamType) -\u003e Tuple[float, str]:\n        \"\"\"Generate realistic values for different data streams\"\"\"\n\n        if stream_type == DataStreamType.HEART_RATE:\n            return random.uniform(60, 100), \"bpm\"\n        elif stream_type == DataStreamType.STEPS:\n            return random.randint(0, 1000), \"steps\"\n        elif stream_type == DataStreamType.BLOOD_OXYGEN:\n            return random.uniform(95, 100), \"percentage\"\n        elif stream_type == DataStreamType.STRESS_LEVEL:\n            return random.uniform(0, 1), \"score\"\n        elif stream_type == DataStreamType.SKIN_TEMPERATURE:\n            return random.uniform(36, 37.5), \"celsius\"\n        elif stream_type == DataStreamType.AMBIENT_LIGHT:\n            return random.uniform(0, 1000), \"lux\"\n        elif stream_type == DataStreamType.NOISE_LEVEL:\n            return random.uniform(30, 80), \"decibels\"\n        elif stream_type == DataStreamType.AIR_QUALITY:\n            return random.uniform(0, 300), \"aqi\"\n        else:\n            return random.uniform(0, 100), \"units\"\n\n    def collect_real_time_data(self, device_id: str) -\u003e List[SensorReading]:\n        \"\"\"Collect real-time data from device\"\"\"\n        device = self.connected_devices.get(device_id)\n        if not device:\n            return []\n\n        new_readings = []\n        for stream_type in device.data_streams:\n            # Simulate real-time data collection\n            value, unit = self._get_realistic_value(stream_type)\n\n            # Add some temporal variation based on time of day\n            value = self._apply_temporal_variation(value, stream_type)\n\n            reading = SensorReading(\n                device_id=device_id,\n                user_id=device.user_id,\n                data_stream=stream_type,\n                value=value,\n                unit=unit,\n                quality_score=random.uniform(0.85, 1.0),\n                metadata={\n                    \"collection_method\": \"real_time\",\n                    \"device_status\": device.connection_status.value\n                }\n            )\n\n            new_readings.append(reading)\n            self.sensor_readings[device_id].append(reading)\n\n        # Update device last sync\n        device.last_sync = datetime.now()\n\n        return new_readings\n\n    def _apply_temporal_variation(self, base_value: float, stream_type: DataStreamType) -\u003e float:\n        \"\"\"Apply time-of-day variations to sensor values\"\"\"\n        current_hour = datetime.now().hour\n\n        if stream_type == DataStreamType.HEART_RATE:\n            # Lower at night, higher during day\n            if 22 \u003c= current_hour or current_hour \u003c= 6:\n                return base_value * random.uniform(0.8, 0.9)  # Nighttime reduction\n            elif 9 \u003c= current_hour \u003c= 17:\n                return base_value * random.uniform(1.0, 1.2)  # Daytime increase\n\n        elif stream_type == DataStreamType.STRESS_LEVEL:\n            # Higher during work hours\n            if 9 \u003c= current_hour \u003c= 17:\n                return min(1.0, base_value * random.uniform(1.1, 1.4))\n            elif 22 \u003c= current_hour or current_hour \u003c= 6:\n                return base_value * random.uniform(0.5, 0.8)\n\n        return base_value\n\n    def analyze_sleep_data(self, user_id: str, date: datetime) -\u003e SleepAnalysis:\n        \"\"\"Analyze sleep data from connected devices\"\"\"\n\n        # Get sleep-capable devices for user\n        sleep_devices = [\n            device for device in self.connected_devices.values()\n            if device.user_id == user_id and DataStreamType.SLEEP_STAGES in device.data_streams\n        ]\n\n        if not sleep_devices:\n            return self._generate_simulated_sleep_analysis(user_id, date)\n\n        # Use primary sleep device (first available)\n        primary_device = sleep_devices[0]\n\n        # Generate comprehensive sleep analysis\n        sleep_analysis = SleepAnalysis(\n            user_id=user_id,\n            device_id=primary_device.device_id,\n            sleep_date=date\n        )\n\n        # Simulate realistic sleep metrics\n        sleep_analysis.bedtime = date.replace(hour=22, minute=random.randint(0, 60))\n        sleep_analysis.sleep_onset = sleep_analysis.bedtime + timedelta(minutes=random.randint(5, 45))\n        sleep_analysis.wake_time = sleep_analysis.bedtime + timedelta(hours=random.uniform(6.5, 9.0))\n\n        total_time_in_bed = (sleep_analysis.wake_time - sleep_analysis.bedtime).total_seconds() / 3600\n        sleep_analysis.total_sleep_time = total_time_in_bed * random.uniform(0.85, 0.95)\n        sleep_analysis.sleep_efficiency = sleep_analysis.total_sleep_time / total_time_in_bed\n\n        # Sleep stage distribution\n        total_sleep_minutes = sleep_analysis.total_sleep_time * 60\n        sleep_analysis.deep_sleep_minutes = total_sleep_minutes * random.uniform(0.15, 0.25)\n        sleep_analysis.rem_sleep_minutes = total_sleep_minutes * random.uniform(0.20, 0.30)\n        sleep_analysis.light_sleep_minutes = total_sleep_minutes - sleep_analysis.deep_sleep_minutes - sleep_analysis.rem_sleep_minutes\n\n        # Calculate sleep score\n        sleep_analysis.sleep_score = self._calculate_sleep_score(sleep_analysis)\n\n        # Store analysis\n        if user_id not in self.sleep_analyses:\n            self.sleep_analyses[user_id] = []\n        self.sleep_analyses[user_id].append(sleep_analysis)\n\n        return sleep_analysis\n\n    def _generate_simulated_sleep_analysis(self, user_id: str, date: datetime) -\u003e SleepAnalysis:\n        \"\"\"Generate simulated sleep analysis when no devices available\"\"\"\n        return SleepAnalysis(\n            user_id=user_id,\n            device_id=\"simulated\",\n            sleep_date=date,\n            total_sleep_time=random.uniform(6.5, 8.5),\n            sleep_efficiency=random.uniform(0.80, 0.95),\n            sleep_score=random.uniform(70, 95)\n        )\n\n    def _calculate_sleep_score(self, analysis: SleepAnalysis) -\u003e float:\n        \"\"\"Calculate overall sleep score\"\"\"\n\n        # Efficiency score (40% weight)\n        efficiency_score = analysis.sleep_efficiency * 100\n\n        # Duration score (30% weight)\n        ideal_duration = 8.0\n        duration_score = max(0, 100 - abs(analysis.total_sleep_time - ideal_duration) * 10)\n\n        # Deep sleep score (20% weight)\n        ideal_deep_percentage = 0.20\n        actual_deep_percentage = analysis.deep_sleep_minutes / (analysis.total_sleep_time * 60)\n        deep_score = max(0, 100 - abs(actual_deep_percentage - ideal_deep_percentage) * 200)\n\n        # Wake episodes score (10% weight)\n        wake_score = max(0, 100 - analysis.wake_episodes * 15)\n\n        total_score = (efficiency_score * 0.4 + duration_score * 0.3 +\n                      deep_score * 0.2 + wake_score * 0.1)\n\n        return round(total_score, 1)\n\n    def generate_activity_summary(self, user_id: str, date: datetime) -\u003e ActivitySummary:\n        \"\"\"Generate daily activity summary from wearable data\"\"\"\n\n        # Get activity-capable devices\n        activity_devices = [\n            device for device in self.connected_devices.values()\n            if device.user_id == user_id and DataStreamType.STEPS in device.data_streams\n        ]\n\n        summary = ActivitySummary(\n            user_id=user_id,\n            date=date\n        )\n\n        if activity_devices:\n            # Aggregate data from devices\n            device_readings = []\n            for device in activity_devices:\n                readings = self.sensor_readings.get(device.device_id, [])\n                device_readings.extend([r for r in readings if r.timestamp.date() == date.date()])\n\n            # Calculate metrics from readings\n            summary = self._calculate_activity_metrics(summary, device_readings)\n        else:\n            # Generate simulated data\n            summary = self._generate_simulated_activity(summary)\n\n        # Store summary\n        if user_id not in self.activity_summaries:\n            self.activity_summaries[user_id] = []\n        self.activity_summaries[user_id].append(summary)\n\n        return summary\n\n    def _calculate_activity_metrics(self, summary: ActivitySummary, readings: List[SensorReading]) -\u003e ActivitySummary:\n        \"\"\"Calculate activity metrics from sensor readings\"\"\"\n\n        # Aggregate steps\n        step_readings = [r for r in readings if r.data_stream == DataStreamType.STEPS]\n        if step_readings:\n            summary.total_steps = int(sum(r.value for r in step_readings))\n\n        # Calculate other metrics based on steps and heart rate\n        if summary.total_steps \u003e 0:\n            summary.distance_km = summary.total_steps * 0.0008  # Average step length\n            summary.active_minutes = min(240, summary.total_steps // 100)  # Rough estimation\n            summary.calories_burned = 1800 + (summary.total_steps * 0.04)  # Base + activity calories\n\n        # Stress analysis\n        stress_readings = [r for r in readings if r.data_stream == DataStreamType.STRESS_LEVEL]\n        if stress_readings:\n            summary.stress_average = sum(r.value for r in stress_readings) / len(stress_readings)\n\n        return summary\n\n    def _generate_simulated_activity(self, summary: ActivitySummary) -\u003e ActivitySummary:\n        \"\"\"Generate simulated activity data\"\"\"\n        summary.total_steps = random.randint(3000, 15000)\n        summary.active_minutes = random.randint(20, 120)\n        summary.calories_burned = random.randint(1800, 3000)\n        summary.distance_km = summary.total_steps * 0.0008\n        summary.stress_average = random.uniform(0.2, 0.7)\n        summary.recovery_score = random.uniform(60, 95)\n        summary.energy_level = random.uniform(0.4, 0.9)\n        return summary\n\n    def collect_environmental_data(self, user_id: str, location: str = \"home\") -\u003e EnvironmentalData:\n        \"\"\"Collect environmental data from smart home sensors\"\"\"\n\n        # Simulate environmental data collection\n        env_data = EnvironmentalData(\n            user_id=user_id,\n            location=location,\n            air_quality_index=random.uniform(20, 150),\n            temperature=random.uniform(18, 26),\n            humidity=random.uniform(30, 70),\n            light_level=random.uniform(50, 800),\n            noise_level=random.uniform(25, 65),\n            uv_index=random.uniform(0, 8),\n            pollen_count=random.uniform(0, 100),\n            weather_conditions=random.choice([\"clear\", \"cloudy\", \"rainy\", \"sunny\"])\n        )\n\n        # Store environmental data\n        if user_id not in self.environmental_data:\n            self.environmental_data[user_id] = []\n        self.environmental_data[user_id].append(env_data)\n\n        return env_data\n\n    def extract_digital_biomarkers(self, user_id: str, smartphone_data: Dict[str, Any]) -\u003e List[DigitalBiomarker]:\n        \"\"\"Extract digital biomarkers from smartphone usage patterns\"\"\"\n\n        biomarkers = []\n\n        # Keystroke dynamics for depression screening\n        if \"keystroke_data\" in smartphone_data:\n            typing_speed = smartphone_data[\"keystroke_data\"].get(\"words_per_minute\", 40)\n            dwell_time_variance = smartphone_data[\"keystroke_data\"].get(\"dwell_time_variance\", 0.1)\n\n            # Slower typing and higher variance may indicate depression\n            depression_score = max(0, (45 - typing_speed) / 45) + min(1, dwell_time_variance * 5)\n            depression_score = min(1.0, depression_score / 2)\n\n            biomarkers.append(DigitalBiomarker(\n                user_id=user_id,\n                biomarker_type=\"keystroke_dynamics\",\n                value=depression_score,\n                confidence_score=0.72,\n                data_source=\"smartphone\",\n                clinical_relevance=\"depression_screening\",\n                raw_features={\n                    \"typing_speed\": typing_speed,\n                    \"dwell_time_variance\": dwell_time_variance\n                }\n            ))\n\n        # Voice pattern analysis\n        if \"voice_data\" in smartphone_data:\n            call_frequency = smartphone_data[\"voice_data\"].get(\"calls_per_day\", 5)\n            call_duration_avg = smartphone_data[\"voice_data\"].get(\"avg_call_duration\", 3.0)\n\n            # Reduced social communication may indicate isolation\n            social_isolation_score = max(0, (5 - call_frequency) / 5) + max(0, (3 - call_duration_avg) / 3)\n            social_isolation_score = min(1.0, social_isolation_score / 2)\n\n            biomarkers.append(DigitalBiomarker(\n                user_id=user_id,\n                biomarker_type=\"voice_communication_patterns\",\n                value=social_isolation_score,\n                confidence_score=0.68,\n                data_source=\"smartphone\",\n                clinical_relevance=\"social_isolation_screening\",\n                raw_features={\n                    \"call_frequency\": call_frequency,\n                    \"call_duration\": call_duration_avg\n                }\n            ))\n\n        # Screen time patterns\n        if \"screen_time\" in smartphone_data:\n            daily_screen_hours = smartphone_data[\"screen_time\"].get(\"daily_hours\", 6)\n            late_night_usage = smartphone_data[\"screen_time\"].get(\"usage_after_midnight\", 0.5)\n\n            # Excessive screen time or late night usage patterns\n            digital_wellness_score = 0\n            if daily_screen_hours \u003e 8:\n                digital_wellness_score += (daily_screen_hours - 8) / 8\n            if late_night_usage \u003e 1.0:\n                digital_wellness_score += late_night_usage / 3\n\n            digital_wellness_score = min(1.0, digital_wellness_score)\n\n            biomarkers.append(DigitalBiomarker(\n                user_id=user_id,\n                biomarker_type=\"screen_time_patterns\",\n                value=digital_wellness_score,\n                confidence_score=0.65,\n                data_source=\"smartphone\",\n                clinical_relevance=\"digital_wellness_screening\",\n                raw_features={\n                    \"daily_hours\": daily_screen_hours,\n                    \"late_night_usage\": late_night_usage\n                }\n            ))\n\n        # Movement patterns (from accelerometer)\n        if \"movement_data\" in smartphone_data:\n            daily_movement_variance = smartphone_data[\"movement_data\"].get(\"movement_variance\", 0.5)\n            location_entropy = smartphone_data[\"movement_data\"].get(\"location_entropy\", 2.0)\n\n            # Reduced movement variance may indicate depression or anxiety\n            movement_pattern_score = max(0, (0.8 - daily_movement_variance) / 0.8)\n            if location_entropy \u003c 1.5:  # Very low location diversity\n                movement_pattern_score += 0.3\n\n            movement_pattern_score = min(1.0, movement_pattern_score)\n\n            biomarkers.append(DigitalBiomarker(\n                user_id=user_id,\n                biomarker_type=\"movement_patterns\",\n                value=movement_pattern_score,\n                confidence_score=0.58,\n                data_source=\"smartphone\",\n                clinical_relevance=\"behavioral_pattern_screening\",\n                raw_features={\n                    \"movement_variance\": daily_movement_variance,\n                    \"location_entropy\": location_entropy\n                }\n            ))\n\n        # Store biomarkers\n        if user_id not in self.digital_biomarkers:\n            self.digital_biomarkers[user_id] = []\n        self.digital_biomarkers[user_id].extend(biomarkers)\n\n        return biomarkers\n\n    def analyze_circadian_rhythm(self, user_id: str) -\u003e Dict[str, Any]:\n        \"\"\"Analyze user's circadian rhythm from multiple data sources\"\"\"\n\n        # Get recent sleep data\n        sleep_data = self.sleep_analyses.get(user_id, [])\n        recent_sleep = [s for s in sleep_data if s.sleep_date \u003e= datetime.now() - timedelta(days=7)]\n\n        # Get light exposure data\n        light_readings = []\n        for device_id, readings in self.sensor_readings.items():\n            device = self.connected_devices.get(device_id)\n            if device and device.user_id == user_id:\n                light_readings.extend([\n                    r for r in readings\n                    if r.data_stream == DataStreamType.AMBIENT_LIGHT and\n                    r.timestamp \u003e= datetime.now() - timedelta(days=7)\n                ])\n\n        analysis = {\n            \"user_id\": user_id,\n            \"analysis_date\": datetime.now().isoformat(),\n            \"sleep_regularity\": self._calculate_sleep_regularity(recent_sleep),\n            \"light_exposure_pattern\": self._analyze_light_exposure(light_readings),\n            \"circadian_misalignment\": self._detect_circadian_misalignment(recent_sleep, light_readings),\n            \"recommendations\": self._generate_circadian_recommendations(recent_sleep, light_readings)\n        }\n\n        return analysis\n\n    def _calculate_sleep_regularity(self, sleep_data: List[SleepAnalysis]) -\u003e Dict[str, Any]:\n        \"\"\"Calculate sleep regularity metrics\"\"\"\n        if len(sleep_data) \u003c 3:\n            return {\"insufficient_data\": True}\n\n        bedtimes = [s.bedtime.hour + s.bedtime.minute/60.0 for s in sleep_data]\n        wake_times = [s.wake_time.hour + s.wake_time.minute/60.0 for s in sleep_data]\n\n        bedtime_variance = np.var(bedtimes) if len(bedtimes) \u003e 1 else 0\n        wake_variance = np.var(wake_times) if len(wake_times) \u003e 1 else 0\n\n        regularity_score = max(0, 1 - (bedtime_variance + wake_variance) / 4)\n\n        return {\n            \"regularity_score\": round(regularity_score, 2),\n            \"bedtime_variance_hours\": round(bedtime_variance, 2),\n            \"wake_time_variance_hours\": round(wake_variance, 2),\n            \"average_bedtime\": f\"{int(np.mean(bedtimes))}:{int((np.mean(bedtimes) % 1) * 60):02d}\",\n            \"average_wake_time\": f\"{int(np.mean(wake_times))}:{int((np.mean(wake_times) % 1) * 60):02d}\"\n        }\n\n    def _analyze_light_exposure(self, light_readings: List[SensorReading]) -\u003e Dict[str, Any]:\n        \"\"\"Analyze light exposure patterns\"\"\"\n        if not light_readings:\n            return {\"insufficient_data\": True}\n\n        # Group by time of day\n        morning_light = [r.value for r in light_readings if 6 \u003c= r.timestamp.hour \u003c= 10]\n        evening_light = [r.value for r in light_readings if 18 \u003c= r.timestamp.hour \u003c= 22]\n        night_light = [r.value for r in light_readings if r.timestamp.hour \u003e= 22 or r.timestamp.hour \u003c= 6]\n\n        return {\n            \"morning_light_avg\": round(np.mean(morning_light), 1) if morning_light else 0,\n            \"evening_light_avg\": round(np.mean(evening_light), 1) if evening_light else 0,\n            \"night_light_avg\": round(np.mean(night_light), 1) if night_light else 0,\n            \"light_contrast_ratio\": round(np.mean(morning_light) / max(np.mean(night_light), 1), 2) if morning_light and night_light else 0\n        }\n\n    def _detect_circadian_misalignment(self, sleep_data: List[SleepAnalysis], light_readings: List[SensorReading]) -\u003e Dict[str, Any]:\n        \"\"\"Detect circadian rhythm misalignment\"\"\"\n\n        misalignment_indicators = []\n        severity_score = 0\n\n        # Check for irregular sleep patterns\n        if sleep_data:\n            sleep_regularity = self._calculate_sleep_regularity(sleep_data)\n            if sleep_regularity.get(\"regularity_score\", 1) \u003c 0.7:\n                misalignment_indicators.append(\"irregular_sleep_schedule\")\n                severity_score += 0.3\n\n        # Check for poor light exposure\n        if light_readings:\n            light_analysis = self._analyze_light_exposure(light_readings)\n            if light_analysis.get(\"light_contrast_ratio\", 0) \u003c 3:\n                misalignment_indicators.append(\"poor_light_contrast\")\n                severity_score += 0.2\n\n            if light_analysis.get(\"night_light_avg\", 0) \u003e 50:\n                misalignment_indicators.append(\"excessive_night_light\")\n                severity_score += 0.2\n\n        # Check for social jetlag (difference between weekday and weekend sleep)\n        if len(sleep_data) \u003e= 7:\n            weekday_sleep = [s for s in sleep_data if s.sleep_date.weekday() \u003c 5]\n            weekend_sleep = [s for s in sleep_data if s.sleep_date.weekday() \u003e= 5]\n\n            if weekday_sleep and weekend_sleep:\n                weekday_avg = np.mean([s.bedtime.hour for s in weekday_sleep])\n                weekend_avg = np.mean([s.bedtime.hour for s in weekend_sleep])\n\n                if abs(weekday_avg - weekend_avg) \u003e 1.5:  # More than 1.5 hour difference\n                    misalignment_indicators.append(\"social_jetlag\")\n                    severity_score += 0.3\n\n        return {\n            \"misalignment_detected\": len(misalignment_indicators) \u003e 0,\n            \"severity_score\": round(min(1.0, severity_score), 2),\n            \"indicators\": misalignment_indicators,\n            \"risk_level\": \"high\" if severity_score \u003e 0.6 else \"moderate\" if severity_score \u003e 0.3 else \"low\"\n        }\n\n    def _generate_circadian_recommendations(self, sleep_data: List[SleepAnalysis], light_readings: List[SensorReading]) -\u003e List[str]:\n        \"\"\"Generate personalized circadian rhythm recommendations\"\"\"\n        recommendations = []\n\n        # Analyze current patterns\n        sleep_regularity = self._calculate_sleep_regularity(sleep_data)\n        light_analysis = self._analyze_light_exposure(light_readings)\n        misalignment = self._detect_circadian_misalignment(sleep_data, light_readings)\n\n        # Sleep schedule recommendations\n        if sleep_regularity.get(\"regularity_score\", 1) \u003c 0.8:\n            recommendations.extend([\n                \"Maintain consistent bedtime and wake time daily\",\n                \"Set sleep schedule reminders on your devices\",\n                \"Avoid sleeping in more than 1 hour on weekends\"\n            ])\n\n        # Light exposure recommendations\n        if light_analysis.get(\"morning_light_avg\", 0) \u003c 200:\n            recommendations.append(\"Get 15-30 minutes of bright light exposure within 1 hour of waking\")\n\n        if light_analysis.get(\"night_light_avg\", 0) \u003e 30:\n            recommendations.extend([\n                \"Dim lights 2-3 hours before bedtime\",\n                \"Use blue light filters on devices after sunset\",\n                \"Consider blackout curtains for better sleep environment\"\n            ])\n\n        # Activity timing recommendations\n        recommendations.extend([\n            \"Avoid caffeine 6 hours before bedtime\",\n            \"Finish eating 3 hours before sleep\",\n            \"Exercise regularly but not within 4 hours of bedtime\"\n        ])\n\n        return recommendations\n\n    def get_user_device_dashboard(self, user_id: str) -\u003e Dict[str, Any]:\n        \"\"\"Generate comprehensive device dashboard for user\"\"\"\n\n        user_devices = [d for d in self.connected_devices.values() if d.user_id == user_id]\n\n        dashboard = {\n            \"user_id\": user_id,\n            \"total_devices\": len(user_devices),\n            \"device_summary\": [\n                {\n                    \"device_id\": device.device_id,\n                    \"type\": device.device_type.value,\n                    \"brand\": device.brand.value,\n                    \"model\": device.model,\n                    \"status\": device.connection_status.value,\n                    \"battery_level\": device.battery_level,\n                    \"last_sync\": device.last_sync.isoformat(),\n                    \"data_streams\": [stream.value for stream in device.data_streams]\n                }\n                for device in user_devices\n            ],\n            \"recent_insights\": self._generate_recent_insights(user_id),\n            \"data_quality_score\": self._calculate_data_quality(user_id),\n            \"privacy_settings\": self._get_privacy_settings(user_id),\n            \"sync_status\": self._get_sync_status(user_devices)\n        }\n\n        return dashboard\n\n    def _generate_recent_insights(self, user_id: str) -\u003e List[str]:\n        \"\"\"Generate recent insights from device data\"\"\"\n        insights = []\n\n        # Sleep insights\n        recent_sleep = self.sleep_analyses.get(user_id, [])\n        if recent_sleep:\n            avg_score = np.mean([s.sleep_score for s in recent_sleep[-7:]])\n            if avg_score \u003e 85:\n                insights.append(\"Your sleep quality has been excellent this week\")\n            elif avg_score \u003c 70:\n                insights.append(\"Your sleep quality could be improved - consider adjusting your bedtime routine\")\n\n        # Activity insights\n        recent_activity = self.activity_summaries.get(user_id, [])\n        if recent_activity:\n            avg_steps = np.mean([a.total_steps for a in recent_activity[-7:]])\n            if avg_steps \u003e 10000:\n                insights.append(\"You're consistently hitting your step goals - great job!\")\n            elif avg_steps \u003c 5000:\n                insights.append(\"Try to increase daily movement - even short walks can help\")\n\n        # Environmental insights\n        recent_env = self.environmental_data.get(user_id, [])\n        if recent_env:\n            avg_aqi = np.mean([e.air_quality_index for e in recent_env[-3:]])\n            if avg_aqi \u003e 100:\n                insights.append(\"Air quality has been poor - consider indoor activities and air purification\")\n\n        return insights\n\n    def _calculate_data_quality(self, user_id: str) -\u003e float:\n        \"\"\"Calculate overall data quality score\"\"\"\n        quality_factors = []\n\n        # Device connectivity\n        user_devices = [d for d in self.connected_devices.values() if d.user_id == user_id]\n        if user_devices:\n            connected_ratio = len([d for d in user_devices if d.connection_status == ConnectionStatus.CONNECTED]) / len(user_devices)\n            quality_factors.append(connected_ratio)\n\n        # Data recency\n        all_readings = []\n        for device in user_devices:\n            all_readings.extend(self.sensor_readings.get(device.device_id, []))\n\n        if all_readings:\n            recent_readings = len([r for r in all_readings if r.timestamp \u003e= datetime.now() - timedelta(hours=24)])\n            recency_score = min(1.0, recent_readings / 50)  # Expect at least 50 readings per day\n            quality_factors.append(recency_score)\n\n        # Reading quality scores\n        if all_readings:\n            avg_quality = np.mean([r.quality_score for r in all_readings])\n            quality_factors.append(avg_quality)\n\n        return round(np.mean(quality_factors) if quality_factors else 0.5, 2)\n\n    def _get_privacy_settings(self, user_id: str) -\u003e Dict[str, Any]:\n        \"\"\"Get user's privacy settings for device data\"\"\"\n        return {\n            \"data_sharing_enabled\": True,\n            \"anonymized_research_participation\": True,\n            \"location_tracking\": False,\n            \"third_party_integrations\": True,\n            \"data_retention_days\": 90,\n            \"export_available\": True\n        }\n\n    def _get_sync_status(self, devices: List[WearableDevice]) -\u003e Dict[str, Any]:\n        \"\"\"Get synchronization status for devices\"\"\"\n        if not devices:\n            return {\"status\": \"no_devices\"}\n\n        last_sync_times = [d.last_sync for d in devices]\n        oldest_sync = min(last_sync_times)\n        newest_sync = max(last_sync_times)\n\n        sync_lag = (datetime.now() - oldest_sync).total_seconds() / 3600  # Hours\n\n        return {\n            \"overall_status\": \"good\" if sync_lag \u003c 2 else \"warning\" if sync_lag \u003c 6 else \"error\",\n            \"oldest_sync_hours_ago\": round(sync_lag, 1),\n            \"devices_synced_recently\": len([d for d in devices if (datetime.now() - d.last_sync).total_seconds() \u003c 3600]),\n            \"sync_issues\": [d.device_id for d in devices if (datetime.now() - d.last_sync).total_seconds() \u003e 6 * 3600]\n        }\n\n    def get_platform_statistics(self) -\u003e Dict[str, Any]:\n        \"\"\"Get platform-wide IoT and wearable statistics\"\"\"\n        total_devices = len(self.connected_devices)\n        connected_devices = len([d for d in self.connected_devices.values() if d.connection_status == ConnectionStatus.CONNECTED])\n\n        # Device type distribution\n        device_types = {}\n        for device in self.connected_devices.values():\n            device_type = device.device_type.value\n            device_types[device_type] = device_types.get(device_type, 0) + 1\n\n        # Brand distribution\n        brand_distribution = {}\n        for device in self.connected_devices.values():\n            brand = device.brand.value\n            brand_distribution[brand] = brand_distribution.get(brand, 0) + 1\n\n        return {\n            \"total_registered_devices\": total_devices,\n            \"connected_devices\": connected_devices,\n            \"connection_rate\": round(connected_devices / total_devices, 2) if total_devices \u003e 0 else 0,\n            \"device_type_distribution\": device_types,\n            \"brand_distribution\": brand_distribution,\n            \"total_sensor_readings\": sum(len(readings) for readings in self.sensor_readings.values()),\n            \"active_users_with_devices\": len(set(d.user_id for d in self.connected_devices.values())),\n            \"average_devices_per_user\": round(total_devices / len(set(d.user_id for d in self.connected_devices.values())), 1) if self.connected_devices else 0,\n            \"data_quality_average\": round(np.mean([self._calculate_data_quality(user_id) for user_id in set(d.user_id for d in self.connected_devices.values())]), 2),\n            \"environmental_monitoring_locations\": len(set(env.location for env_list in self.environmental_data.values() for env in env_list))\n        }\n\n# Global instance\niot_wearable_manager = IoTWearableManager()",
                "mood_tracker.py": "\"\"\"\nMood tracking and analytics for Mind Mend platform\n\"\"\"\n\nfrom datetime import datetime\nfrom typing import Dict, List\n\nclass MoodTracker:\n    \"\"\"Advanced mood tracking with insights and patterns\"\"\"\n    \n    def __init__(self):\n        self.mood_categories = {\n            'emotions': {\n                'happy': {'color': '#FFD700', 'icon': '😊'},\n                'sad': {'color': '#4169E1', 'icon': '😢'},\n                'anxious': {'color': '#FF6347', 'icon': '😰'},\n                'angry': {'color': '#DC143C', 'icon': '😠'},\n                'calm': {'color': '#32CD32', 'icon': '😌'},\n                'excited': {'color': '#FF1493', 'icon': '🎉'},\n                'confused': {'color': '#DDA0DD', 'icon': '😕'},\n                'grateful': {'color': '#FFB6C1', 'icon': '🙏'}\n            },\n            'energy_levels': {\n                'very_low': 1,\n                'low': 2,\n                'moderate': 3,\n                'high': 4,\n                'very_high': 5\n            },\n            'stress_levels': {\n                'minimal': 1,\n                'mild': 2,\n                'moderate': 3,\n                'high': 4,\n                'severe': 5\n            }\n        }\n        \n        self.triggers = [\n            'work', 'relationships', 'health', 'finances', 'family',\n            'social', 'personal_growth', 'environment', 'routine', 'other'\n        ]\n        \n        self.coping_strategies = {\n            'anxious': ['deep breathing', 'grounding exercises', 'progressive muscle relaxation'],\n            'sad': ['pleasant activities', 'social connection', 'self-compassion'],\n            'angry': ['physical exercise', 'journaling', 'timeout technique'],\n            'stressed': ['mindfulness', 'time management', 'boundary setting']\n        }\n    \n    def log_mood(self, user_id: str, mood_data: Dict) -\u003e Dict:\n        \"\"\"Log a mood entry with comprehensive data\"\"\"\n        entry = {\n            'user_id': user_id,\n            'timestamp': datetime.now().isoformat(),\n            'primary_emotion': mood_data.get('emotion'),\n            'intensity': mood_data.get('intensity', 5),\n            'energy_level': mood_data.get('energy_level', 3),\n            'stress_level': mood_data.get('stress_level', 3),\n            'triggers': mood_data.get('triggers', []),\n            'thoughts': mood_data.get('thoughts', ''),\n            'physical_sensations': mood_data.get('physical_sensations', []),\n            'activities': mood_data.get('activities', []),\n            'sleep_quality': mood_data.get('sleep_quality'),\n            'medication_taken': mood_data.get('medication_taken', False),\n            'notes': mood_data.get('notes', '')\n        }\n        \n        # Generate insights\n        insights = self._generate_insights(entry)\n        entry['insights'] = insights\n        \n        return entry\n    \n    def get_mood_patterns(self, user_id: str, days: int = 30) -\u003e Dict:\n        \"\"\"Analyze mood patterns over time\"\"\"\n        # In production, this would query the database\n        patterns = {\n            'dominant_emotions': self._calculate_dominant_emotions(user_id, days),\n            'mood_trends': self._calculate_mood_trends(user_id, days),\n            'trigger_analysis': self._analyze_triggers(user_id, days),\n            'best_worst_times': self._find_best_worst_times(user_id, days),\n            'coping_effectiveness': self._analyze_coping_strategies(user_id, days),\n            'recommendations': self._generate_recommendations(user_id, days)\n        }\n        \n        return patterns\n    \n    def get_mood_forecast(self, user_id: str) -\u003e Dict:\n        \"\"\"Predict mood patterns based on historical data\"\"\"\n        # Simplified forecast - in production would use ML\n        return {\n            'next_24h': {\n                'likely_mood': 'calm',\n                'confidence': 0.75,\n                'factors': ['good sleep pattern', 'weekend approaching', 'reduced stress']\n            },\n            'next_week': {\n                'challenging_days': ['Monday', 'Wednesday'],\n                'positive_days': ['Saturday', 'Sunday'],\n                'recommendations': [\n                    'Schedule self-care on Monday',\n                    'Plan social activities for weekend',\n                    'Prepare for Wednesday deadline'\n                ]\n            }\n        }\n    \n    def generate_mood_report(self, user_id: str, period: str = 'weekly') -\u003e Dict:\n        \"\"\"Generate comprehensive mood report\"\"\"\n        report = {\n            'period': period,\n            'summary': {\n                'average_mood': 6.5,\n                'mood_stability': 'moderate',\n                'improvement_areas': ['stress management', 'sleep quality'],\n                'achievements': ['consistent journaling', 'increased social activities']\n            },\n            'detailed_analysis': {\n                'emotional_range': self._analyze_emotional_range(user_id, period),\n                'trigger_patterns': self._analyze_trigger_patterns(user_id, period),\n                'coping_success': self._analyze_coping_success(user_id, period),\n                'correlation_insights': self._find_correlations(user_id, period)\n            },\n            'therapist_notes': self._generate_therapist_notes(user_id, period),\n            'action_plan': self._create_action_plan(user_id, period)\n        }\n        \n        return report\n    \n    def _generate_insights(self, entry: Dict) -\u003e List[str]:\n        \"\"\"Generate insights from mood entry\"\"\"\n        insights = []\n        \n        # Emotion-based insights\n        if entry['primary_emotion'] == 'anxious' and entry['intensity'] \u003e 7:\n            insights.append(\"High anxiety detected. Consider trying grounding exercises.\")\n        \n        # Pattern insights\n        if entry['stress_level'] \u003e 3 and entry['sleep_quality'] == 'poor':\n            insights.append(\"Poor sleep may be contributing to increased stress.\")\n        \n        # Trigger insights\n        if 'work' in entry['triggers']:\n            insights.append(\"Work-related stress identified. Setting boundaries might help.\")\n        \n        return insights\n    \n    def _calculate_dominant_emotions(self, user_id: str, days: int) -\u003e List[Dict]:\n        \"\"\"Calculate most frequent emotions\"\"\"\n        # Placeholder - would query database in production\n        return [\n            {'emotion': 'calm', 'frequency': 35, 'percentage': 35},\n            {'emotion': 'anxious', 'frequency': 25, 'percentage': 25},\n            {'emotion': 'happy', 'frequency': 20, 'percentage': 20}\n        ]\n    \n    def _calculate_mood_trends(self, user_id: str, days: int) -\u003e Dict:\n        \"\"\"Calculate mood trends over time\"\"\"\n        return {\n            'direction': 'improving',\n            'rate': 15,  # 15% improvement\n            'stability': 'increasing',\n            'graph_data': []  # Would contain actual data points\n        }\n    \n    def _analyze_triggers(self, user_id: str, days: int) -\u003e List[Dict]:\n        \"\"\"Analyze common triggers\"\"\"\n        return [\n            {'trigger': 'work', 'frequency': 45, 'impact': 'high'},\n            {'trigger': 'relationships', 'frequency': 30, 'impact': 'moderate'},\n            {'trigger': 'health', 'frequency': 15, 'impact': 'low'}\n        ]\n    \n    def _find_best_worst_times(self, user_id: str, days: int) -\u003e Dict:\n        \"\"\"Find patterns in time of day\"\"\"\n        return {\n            'best_times': ['morning', 'early evening'],\n            'challenging_times': ['late afternoon', 'before bed'],\n            'weekly_patterns': {\n                'best_days': ['Friday', 'Saturday'],\n                'challenging_days': ['Monday', 'Sunday evening']\n            }\n        }\n    \n    def _analyze_coping_strategies(self, user_id: str, days: int) -\u003e Dict:\n        \"\"\"Analyze effectiveness of coping strategies\"\"\"\n        return {\n            'most_effective': ['exercise', 'meditation', 'social connection'],\n            'least_effective': ['isolation', 'rumination'],\n            'recommended_new': ['art therapy', 'nature walks', 'gratitude practice']\n        }\n    \n    def _generate_recommendations(self, user_id: str, days: int) -\u003e List[str]:\n        \"\"\"Generate personalized recommendations\"\"\"\n        return [\n            \"Try morning meditation to start days with calm\",\n            \"Schedule regular breaks during work hours\",\n            \"Consider evening gratitude journaling\",\n            \"Maintain consistent sleep schedule\",\n            \"Engage in physical activity 3-4 times per week\"\n        ]\n    \n    def _analyze_emotional_range(self, user_id: str, period: str) -\u003e Dict:\n        \"\"\"Analyze range and variety of emotions\"\"\"\n        return {\n            'emotional_flexibility': 'moderate',\n            'dominant_valence': 'positive',\n            'emotional_vocabulary': ['varied', 'expanding'],\n            'areas_for_exploration': ['nuanced positive emotions', 'anger expression']\n        }\n    \n    def _analyze_trigger_patterns(self, user_id: str, period: str) -\u003e Dict:\n        \"\"\"Deep analysis of trigger patterns\"\"\"\n        return {\n            'recurring_patterns': [\n                'Work stress peaks on Mondays',\n                'Social anxiety before events',\n                'Low mood on Sunday evenings'\n            ],\n            'trigger_combinations': [\n                ['work', 'deadlines', 'lack of sleep'],\n                ['social', 'crowds', 'unfamiliar places']\n            ],\n            'protective_factors': ['exercise', 'nature', 'pet time']\n        }\n    \n    def _analyze_coping_success(self, user_id: str, period: str) -\u003e Dict:\n        \"\"\"Analyze success of coping strategies\"\"\"\n        return {\n            'success_rate': 72,\n            'improving_strategies': ['breathing exercises', 'journaling'],\n            'consistent_strategies': ['walking', 'music'],\n            'abandoned_strategies': ['meditation apps'],\n            'suggested_modifications': [\n                'Try shorter meditation sessions',\n                'Combine walking with mindfulness',\n                'Add variety to journaling prompts'\n            ]\n        }\n    \n    def _find_correlations(self, user_id: str, period: str) -\u003e List[Dict]:\n        \"\"\"Find correlations between factors\"\"\"\n        return [\n            {\n                'factor1': 'sleep_quality',\n                'factor2': 'mood_rating',\n                'correlation': 0.78,\n                'insight': 'Better sleep strongly correlates with improved mood'\n            },\n            {\n                'factor1': 'exercise',\n                'factor2': 'anxiety_level',\n                'correlation': -0.65,\n                'insight': 'Regular exercise associated with lower anxiety'\n            }\n        ]\n    \n    def _generate_therapist_notes(self, user_id: str, period: str) -\u003e str:\n        \"\"\"Generate notes for therapist review\"\"\"\n        return \"\"\"Patient shows improving mood stability with some persistent anxiety around work situations. \n        Sleep hygiene remains a concern. Coping strategies are developing well, particularly physical exercise \n        and social connection. Consider exploring work-related boundaries and stress management techniques \n        in upcoming sessions.\"\"\"\n    \n    def _create_action_plan(self, user_id: str, period: str) -\u003e List[Dict]:\n        \"\"\"Create actionable steps\"\"\"\n        return [\n            {\n                'goal': 'Improve sleep quality',\n                'actions': ['Set consistent bedtime', 'No screens 1hr before bed', 'Evening relaxation routine'],\n                'timeline': '2 weeks',\n                'success_metric': '7+ hours sleep, 5 nights/week'\n            },\n            {\n                'goal': 'Manage work stress',\n                'actions': ['Daily 5-min breaks', 'Boundary setting practice', 'Weekly planning sessions'],\n                'timeline': '1 month',\n                'success_metric': 'Stress level \u003c 3 on workdays'\n            }\n        ]",
                "physical_health_integrator.py": "\"\"\"\nPhysical Health Integration Module\n==================================\nComprehensive physical health integration for mental wellness optimization.\nIncludes exercise prescription, nutrition tracking, sleep optimization, and biometric analysis.\n\"\"\"\n\nimport os\nimport json\nimport logging\nfrom datetime import datetime, timedelta\nfrom typing import Dict, Any, List, Optional, Tuple\nfrom dataclasses import dataclass\nfrom enum import Enum\nimport numpy as np\nfrom sqlalchemy import text\n\nlogger = logging.getLogger(__name__)\n\nclass ExerciseIntensity(Enum):\n    \"\"\"Exercise intensity levels\"\"\"\n    LOW = \"low\"\n    MODERATE = \"moderate\"\n    HIGH = \"high\"\n    RECOVERY = \"recovery\"\n\nclass MentalHealthCondition(Enum):\n    \"\"\"Mental health conditions for exercise prescription\"\"\"\n    ANXIETY = \"anxiety\"\n    DEPRESSION = \"depression\"\n    STRESS = \"stress\"\n    PTSD = \"ptsd\"\n    BIPOLAR = \"bipolar\"\n    ADHD = \"adhd\"\n    GENERAL_WELLNESS = \"general_wellness\"\n\n@dataclass\nclass ExercisePrescription:\n    \"\"\"Exercise prescription data structure\"\"\"\n    user_id: int\n    condition: MentalHealthCondition\n    exercise_type: str\n    intensity: ExerciseIntensity\n    duration_minutes: int\n    frequency_per_week: int\n    specific_exercises: List[str]\n    mental_health_benefits: List[str]\n    precautions: List[str]\n    expected_mood_improvement: float\n\n@dataclass\nclass NutritionRecommendation:\n    \"\"\"Nutrition recommendation for mental health\"\"\"\n    user_id: int\n    recommended_foods: List[str]\n    foods_to_avoid: List[str]\n    supplements: List[str]\n    meal_timing: Dict[str, str]\n    hydration_goal_ml: int\n    mental_health_nutrients: List[str]\n\n@dataclass\nclass SleepOptimizationPlan:\n    \"\"\"Sleep optimization recommendations\"\"\"\n    user_id: int\n    recommended_bedtime: str\n    recommended_wake_time: str\n    sleep_duration_hours: float\n    sleep_hygiene_tips: List[str]\n    environmental_factors: Dict[str, str]\n    pre_sleep_routine: List[str]\n\nclass PhysicalHealthIntegrator:\n    \"\"\"Manages physical health integration for mental wellness\"\"\"\n\n    def __init__(self):\n        self.exercise_database = self._initialize_exercise_database()\n        self.nutrition_database = self._initialize_nutrition_database()\n        self.sleep_guidelines = self._initialize_sleep_guidelines()\n        self.biometric_thresholds = self._initialize_biometric_thresholds()\n\n    def _initialize_exercise_database(self) -\u003e Dict[str, Any]:\n        \"\"\"Initialize comprehensive exercise database\"\"\"\n        return {\n            \"anxiety\": {\n                \"recommended_types\": [\n                    \"yoga\", \"tai_chi\", \"walking\", \"swimming\", \"cycling\",\n                    \"pilates\", \"stretching\", \"breathing_exercises\"\n                ],\n                \"intensity_preferences\": {\n                    ExerciseIntensity.LOW: [\"gentle_yoga\", \"walking\", \"stretching\"],\n                    ExerciseIntensity.MODERATE: [\"swimming\", \"cycling\", \"hiking\"],\n                    ExerciseIntensity.HIGH: [\"running\", \"strength_training\", \"dance\"]\n                },\n                \"benefits\": [\n                    \"Reduces cortisol levels\",\n                    \"Increases GABA production\",\n                    \"Improves heart rate variability\",\n                    \"Enhances mindfulness and present-moment awareness\",\n                    \"Releases endorphins naturally\"\n                ],\n                \"duration_recommendations\": {\n                    \"beginner\": 15,\n                    \"intermediate\": 30,\n                    \"advanced\": 45\n                }\n            },\n            \"depression\": {\n                \"recommended_types\": [\n                    \"aerobic_exercise\", \"strength_training\", \"group_fitness\",\n                    \"outdoor_activities\", \"dancing\", \"martial_arts\"\n                ],\n                \"intensity_preferences\": {\n                    ExerciseIntensity.LOW: [\"walking\", \"gentle_swimming\"],\n                    ExerciseIntensity.MODERATE: [\"jogging\", \"weight_lifting\", \"group_classes\"],\n                    ExerciseIntensity.HIGH: [\"running\", \"HIIT\", \"competitive_sports\"]\n                },\n                \"benefits\": [\n                    \"Increases serotonin and dopamine\",\n                    \"Reduces inflammatory markers\",\n                    \"Improves neuroplasticity\",\n                    \"Enhances social connection (group activities)\",\n                    \"Builds self-efficacy and confidence\"\n                ],\n                \"duration_recommendations\": {\n                    \"beginner\": 20,\n                    \"intermediate\": 40,\n                    \"advanced\": 60\n                }\n            },\n            \"stress\": {\n                \"recommended_types\": [\n                    \"yoga\", \"meditation_movement\", \"nature_walks\", \"swimming\",\n                    \"tai_chi\", \"qigong\", \"recreational_sports\"\n                ],\n                \"intensity_preferences\": {\n                    ExerciseIntensity.LOW: [\"restorative_yoga\", \"walking\", \"gentle_stretching\"],\n                    ExerciseIntensity.MODERATE: [\"hatha_yoga\", \"swimming\", \"cycling\"],\n                    ExerciseIntensity.HIGH: [\"power_yoga\", \"running\", \"kickboxing\"]\n                },\n                \"benefits\": [\n                    \"Activates parasympathetic nervous system\",\n                    \"Reduces chronic inflammation\",\n                    \"Improves sleep quality\",\n                    \"Increases stress resilience\",\n                    \"Enhances emotional regulation\"\n                ],\n                \"duration_recommendations\": {\n                    \"beginner\": 15,\n                    \"intermediate\": 30,\n                    \"advanced\": 45\n                }\n            },\n            \"ptsd\": {\n                \"recommended_types\": [\n                    \"yoga\", \"swimming\", \"walking\", \"cycling\", \"strength_training\",\n                    \"martial_arts\", \"equine_therapy\", \"rock_climbing\"\n                ],\n                \"intensity_preferences\": {\n                    ExerciseIntensity.LOW: [\"gentle_yoga\", \"walking\", \"water_therapy\"],\n                    ExerciseIntensity.MODERATE: [\"swimming\", \"cycling\", \"hiking\"],\n                    ExerciseIntensity.HIGH: [\"martial_arts\", \"rock_climbing\", \"CrossFit\"]\n                },\n                \"benefits\": [\n                    \"Reduces hypervigilance\",\n                    \"Improves body awareness and control\",\n                    \"Releases trauma stored in muscles\",\n                    \"Builds confidence and empowerment\",\n                    \"Creates positive body experiences\"\n                ],\n                \"duration_recommendations\": {\n                    \"beginner\": 20,\n                    \"intermediate\": 35,\n                    \"advanced\": 50\n                }\n            },\n            \"general_wellness\": {\n                \"recommended_types\": [\n                    \"walking\", \"cycling\", \"swimming\", \"yoga\", \"strength_training\",\n                    \"pilates\", \"dancing\", \"hiking\", \"recreational_sports\"\n                ],\n                \"intensity_preferences\": {\n                    ExerciseIntensity.LOW: [\"walking\", \"gentle_yoga\", \"stretching\"],\n                    ExerciseIntensity.MODERATE: [\"cycling\", \"swimming\", \"pilates\"],\n                    ExerciseIntensity.HIGH: [\"running\", \"strength_training\", \"HIIT\"]\n                },\n                \"benefits\": [\n                    \"Improves overall cardiovascular health\",\n                    \"Enhances mood and energy levels\",\n                    \"Builds strength and endurance\",\n                    \"Promotes better sleep quality\",\n                    \"Supports healthy brain function\"\n                ],\n                \"duration_recommendations\": {\n                    \"beginner\": 20,\n                    \"intermediate\": 30,\n                    \"advanced\": 45\n                }\n            }\n        }\n\n    def _initialize_nutrition_database(self) -\u003e Dict[str, Any]:\n        \"\"\"Initialize nutrition recommendations for mental health\"\"\"\n        return {\n            \"brain_foods\": {\n                \"omega3_sources\": [\n                    \"salmon\", \"mackerel\", \"sardines\", \"walnuts\", \"chia_seeds\",\n                    \"flax_seeds\", \"hemp_seeds\", \"algae_supplements\"\n                ],\n                \"antioxidant_rich\": [\n                    \"blueberries\", \"dark_chocolate\", \"green_tea\", \"spinach\",\n                    \"kale\", \"pomegranate\", \"turmeric\", \"ginger\"\n                ],\n                \"b_vitamin_sources\": [\n                    \"nutritional_yeast\", \"leafy_greens\", \"eggs\", \"legumes\",\n                    \"quinoa\", \"sunflower_seeds\", \"avocado\"\n                ],\n                \"magnesium_rich\": [\n                    \"dark_leafy_greens\", \"nuts\", \"seeds\", \"whole_grains\",\n                    \"dark_chocolate\", \"bananas\", \"avocados\"\n                ],\n                \"probiotics\": [\n                    \"kefir\", \"yogurt\", \"sauerkraut\", \"kimchi\", \"miso\",\n                    \"kombucha\", \"tempeh\", \"pickles\"\n                ]\n            },\n            \"mood_supporting_nutrients\": {\n                \"serotonin_precursors\": [\n                    \"turkey\", \"eggs\", \"cheese\", \"salmon\", \"nuts\", \"seeds\"\n                ],\n                \"dopamine_supporters\": [\n                    \"lean_proteins\", \"beets\", \"apples\", \"watermelon\", \"almonds\"\n                ],\n                \"gaba_enhancers\": [\n                    \"fermented_foods\", \"sprouted_grains\", \"broccoli\", \"kale\"\n                ],\n                \"cortisol_reducers\": [\n                    \"ashwagandha\", \"holy_basil\", \"phosphatidylserine\",\n                    \"omega3_supplements\", \"magnesium\"\n                ]\n            },\n            \"foods_to_minimize\": {\n                \"anxiety_triggers\": [\n                    \"caffeine\", \"alcohol\", \"processed_sugar\", \"artificial_sweeteners\",\n                    \"processed_foods\", \"trans_fats\"\n                ],\n                \"depression_aggravators\": [\n                    \"high_sugar_foods\", \"processed_meats\", \"refined_carbs\",\n                    \"alcohol\", \"excessive_caffeine\"\n                ],\n                \"inflammation_causers\": [\n                    \"processed_foods\", \"refined_sugar\", \"trans_fats\",\n                    \"excessive_omega6\", \"gluten_for_sensitive_individuals\"\n                ]\n            },\n            \"meal_timing_strategies\": {\n                \"blood_sugar_stability\": {\n                    \"frequency\": \"every_3_4_hours\",\n                    \"composition\": \"protein_healthy_fats_complex_carbs\",\n                    \"avoid\": \"long_fasting_periods_without_medical_supervision\"\n                },\n                \"circadian_rhythm_support\": {\n                    \"morning\": \"protein_rich_breakfast_within_2_hours_of_waking\",\n                    \"evening\": \"lighter_dinner_3_hours_before_bed\",\n                    \"avoid\": \"late_night_eating_blue_light_exposure\"\n                }\n            }\n        }\n\n    def _initialize_sleep_guidelines(self) -\u003e Dict[str, Any]:\n        \"\"\"Initialize sleep optimization guidelines\"\"\"\n        return {\n            \"optimal_duration\": {\n                \"adults_18_64\": {\"min\": 7, \"max\": 9},\n                \"adults_65_plus\": {\"min\": 7, \"max\": 8},\n                \"teens_14_17\": {\"min\": 8, \"max\": 10}\n            },\n            \"sleep_hygiene_fundamentals\": [\n                \"Consistent sleep schedule (same bedtime/wake time daily)\",\n                \"Dark, cool (65-68°F), quiet sleeping environment\",\n                \"No screens 1 hour before bedtime\",\n                \"Avoid caffeine 6 hours before sleep\",\n                \"No large meals 3 hours before bed\",\n                \"Regular exposure to natural light during day\",\n                \"Comfortable mattress and pillows\"\n            ],\n            \"pre_sleep_routine\": [\n                \"Dim lights 2 hours before bedtime\",\n                \"Relaxation techniques (deep breathing, meditation)\",\n                \"Light stretching or gentle yoga\",\n                \"Reading or listening to calming music\",\n                \"Warm bath or shower\",\n                \"Journaling or gratitude practice\"\n            ],\n            \"sleep_disruptors\": [\n                \"Irregular sleep schedule\",\n                \"Excessive screen time before bed\",\n                \"Caffeine late in the day\",\n                \"Alcohol before sleep\",\n                \"Stress and racing thoughts\",\n                \"Uncomfortable sleep environment\",\n                \"Lack of physical activity during day\"\n            ],\n            \"mental_health_sleep_connections\": {\n                \"anxiety\": {\n                    \"sleep_issues\": \"difficulty_falling_asleep\",\n                    \"recommendations\": \"relaxation_techniques_before_bed\",\n                    \"supplements\": \"magnesium_l_theanine_melatonin\"\n                },\n                \"depression\": {\n                    \"sleep_issues\": \"early_morning_awakening_non_restorative_sleep\",\n                    \"recommendations\": \"light_therapy_consistent_schedule\",\n                    \"supplements\": \"vitamin_d_omega3_5htp\"\n                }\n            }\n        }\n\n    def _initialize_biometric_thresholds(self) -\u003e Dict[str, Any]:\n        \"\"\"Initialize biometric thresholds for mental health\"\"\"\n        return {\n            \"heart_rate_variability\": {\n                \"excellent\": {\"min\": 50, \"max\": 100},\n                \"good\": {\"min\": 30, \"max\": 49},\n                \"fair\": {\"min\": 20, \"max\": 29},\n                \"poor\": {\"min\": 0, \"max\": 19}\n            },\n            \"resting_heart_rate\": {\n                \"excellent\": {\"min\": 40, \"max\": 60},\n                \"good\": {\"min\": 61, \"max\": 70},\n                \"fair\": {\"min\": 71, \"max\": 80},\n                \"needs_attention\": {\"min\": 81, \"max\": 100}\n            },\n            \"stress_indicators\": {\n                \"cortisol_levels\": {\n                    \"morning_optimal\": {\"min\": 10, \"max\": 20},  # μg/dL\n                    \"evening_optimal\": {\"min\": 3, \"max\": 8}\n                },\n                \"blood_pressure\": {\n                    \"optimal\": {\"systolic\": 120, \"diastolic\": 80},\n                    \"concerning\": {\"systolic\": 140, \"diastolic\": 90}\n                }\n            }\n        }\n\n    def create_exercise_prescription(self, user_id: int, mental_health_conditions: List[str],\n                                   fitness_level: str, available_time: int,\n                                   preferences: List[str] = None) -\u003e ExercisePrescription:\n        \"\"\"Create personalized exercise prescription for mental health\"\"\"\n\n        primary_condition = mental_health_conditions[0] if mental_health_conditions else \"general_wellness\"\n        condition_data = self.exercise_database.get(primary_condition.lower(),\n                                                   self.exercise_database[\"general_wellness\"])\n\n        # Determine intensity based on fitness level\n        intensity_map = {\n            \"beginner\": ExerciseIntensity.LOW,\n            \"intermediate\": ExerciseIntensity.MODERATE,\n            \"advanced\": ExerciseIntensity.HIGH\n        }\n        recommended_intensity = intensity_map.get(fitness_level.lower(), ExerciseIntensity.MODERATE)\n\n        # Get exercises for this intensity\n        intensity_exercises = condition_data[\"intensity_preferences\"][recommended_intensity]\n\n        # Filter by user preferences if provided\n        if preferences:\n            preferred_exercises = [ex for ex in intensity_exercises\n                                 if any(pref.lower() in ex.lower() for pref in preferences)]\n            if preferred_exercises:\n                intensity_exercises = preferred_exercises\n\n        # Determine duration and frequency\n        base_duration = condition_data[\"duration_recommendations\"].get(fitness_level.lower(), 30)\n        duration = min(base_duration, available_time) if available_time else base_duration\n\n        # Calculate expected mood improvement (evidence-based estimates)\n        mood_improvement_map = {\n            \"anxiety\": 0.25,  # 25% reduction in anxiety scores\n            \"depression\": 0.30,  # 30% improvement in mood scores\n            \"stress\": 0.35,  # 35% stress reduction\n            \"ptsd\": 0.20,  # 20% symptom improvement\n        }\n        expected_improvement = mood_improvement_map.get(primary_condition.lower(), 0.20)\n\n        return ExercisePrescription(\n            user_id=user_id,\n            condition=MentalHealthCondition(primary_condition.lower()) if primary_condition.lower() in [c.value for c in MentalHealthCondition] else MentalHealthCondition.GENERAL_WELLNESS,\n            exercise_type=\", \".join(intensity_exercises[:3]),\n            intensity=recommended_intensity,\n            duration_minutes=duration,\n            frequency_per_week=4 if primary_condition.lower() in [\"depression\", \"anxiety\"] else 3,\n            specific_exercises=intensity_exercises,\n            mental_health_benefits=condition_data[\"benefits\"],\n            precautions=self._get_exercise_precautions(primary_condition),\n            expected_mood_improvement=expected_improvement\n        )\n\n    def create_nutrition_plan(self, user_id: int, mental_health_conditions: List[str],\n                            dietary_restrictions: List[str] = None,\n                            current_medications: List[str] = None) -\u003e NutritionRecommendation:\n        \"\"\"Create personalized nutrition plan for mental health\"\"\"\n\n        primary_condition = mental_health_conditions[0] if mental_health_conditions else \"general_wellness\"\n\n        # Get brain-supporting foods\n        brain_foods = self.nutrition_database[\"brain_foods\"]\n        mood_nutrients = self.nutrition_database[\"mood_supporting_nutrients\"]\n\n        recommended_foods = []\n        recommended_foods.extend(brain_foods[\"omega3_sources\"][:3])\n        recommended_foods.extend(brain_foods[\"antioxidant_rich\"][:3])\n        recommended_foods.extend(brain_foods[\"b_vitamin_sources\"][:2])\n\n        # Condition-specific recommendations\n        if primary_condition.lower() == \"anxiety\":\n            recommended_foods.extend(mood_nutrients[\"gaba_enhancers\"])\n            recommended_foods.extend(mood_nutrients[\"cortisol_reducers\"])\n            supplements = [\"magnesium\", \"l_theanine\", \"omega3\", \"probiotics\"]\n        elif primary_condition.lower() == \"depression\":\n            recommended_foods.extend(mood_nutrients[\"serotonin_precursors\"])\n            recommended_foods.extend(mood_nutrients[\"dopamine_supporters\"])\n            supplements = [\"vitamin_d\", \"omega3\", \"b_complex\", \"5htp\"]\n        else:\n            supplements = [\"omega3\", \"vitamin_d\", \"magnesium\", \"probiotics\"]\n\n        # Filter out foods based on dietary restrictions\n        if dietary_restrictions:\n            recommended_foods = self._filter_foods_by_restrictions(recommended_foods, dietary_restrictions)\n\n        # Foods to avoid based on condition\n        foods_to_avoid = []\n        if primary_condition.lower() == \"anxiety\":\n            foods_to_avoid.extend(self.nutrition_database[\"foods_to_minimize\"][\"anxiety_triggers\"])\n        elif primary_condition.lower() == \"depression\":\n            foods_to_avoid.extend(self.nutrition_database[\"foods_to_minimize\"][\"depression_aggravators\"])\n\n        return NutritionRecommendation(\n            user_id=user_id,\n            recommended_foods=list(set(recommended_foods)),  # Remove duplicates\n            foods_to_avoid=foods_to_avoid,\n            supplements=supplements,\n            meal_timing=self.nutrition_database[\"meal_timing_strategies\"][\"blood_sugar_stability\"],\n            hydration_goal_ml=2500,  # Standard recommendation\n            mental_health_nutrients=[\"omega3\", \"b_vitamins\", \"magnesium\", \"vitamin_d\", \"probiotics\"]\n        )\n\n    def create_sleep_optimization_plan(self, user_id: int, age: int, mental_health_conditions: List[str],\n                                     current_sleep_duration: float = None,\n                                     sleep_issues: List[str] = None) -\u003e SleepOptimizationPlan:\n        \"\"\"Create personalized sleep optimization plan\"\"\"\n\n        # Determine age category\n        if age \u003c 18:\n            age_category = \"teens_14_17\"\n        elif age \u003c 65:\n            age_category = \"adults_18_64\"\n        else:\n            age_category = \"adults_65_plus\"\n\n        optimal_duration = self.sleep_guidelines[\"optimal_duration\"][age_category]\n        recommended_duration = (optimal_duration[\"min\"] + optimal_duration[\"max\"]) / 2\n\n        # Adjust based on mental health condition\n        primary_condition = mental_health_conditions[0] if mental_health_conditions else None\n        if primary_condition and primary_condition.lower() in [\"depression\", \"bipolar\"]:\n            recommended_duration += 0.5  # May need slightly more sleep\n\n        # Calculate optimal bedtime and wake time (assuming 7am wake time)\n        wake_time = \"07:00\"\n        bedtime_hour = 7 - recommended_duration\n        if bedtime_hour \u003c 0:\n            bedtime_hour += 24\n        bedtime = f\"{int(bedtime_hour):02d}:{int((bedtime_hour % 1) * 60):02d}\"\n\n        # Get condition-specific recommendations\n        condition_specific_tips = []\n        if primary_condition:\n            condition_info = self.sleep_guidelines[\"mental_health_sleep_connections\"].get(\n                primary_condition.lower(), {}\n            )\n            if condition_info:\n                condition_specific_tips.append(f\"Condition-specific: {condition_info.get('recommendations', '')}\")\n\n        sleep_tips = self.sleep_guidelines[\"sleep_hygiene_fundamentals\"] + condition_specific_tips\n\n        return SleepOptimizationPlan(\n            user_id=user_id,\n            recommended_bedtime=bedtime,\n            recommended_wake_time=wake_time,\n            sleep_duration_hours=recommended_duration,\n            sleep_hygiene_tips=sleep_tips,\n            environmental_factors={\n                \"temperature\": \"65-68°F (18-20°C)\",\n                \"light\": \"Complete darkness or blackout curtains\",\n                \"noise\": \"Quiet environment or white noise machine\",\n                \"humidity\": \"30-50% relative humidity\"\n            },\n            pre_sleep_routine=self.sleep_guidelines[\"pre_sleep_routine\"]\n        )\n\n    def analyze_biometric_data(self, user_id: int, biometric_data: Dict[str, float]) -\u003e Dict[str, Any]:\n        \"\"\"Analyze biometric data for mental health insights\"\"\"\n\n        analysis = {\n            \"user_id\": user_id,\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"metrics_analyzed\": [],\n            \"insights\": [],\n            \"recommendations\": [],\n            \"risk_factors\": [],\n            \"overall_score\": 0\n        }\n\n        total_score = 0\n        metrics_count = 0\n\n        # Analyze Heart Rate Variability\n        if \"hrv\" in biometric_data:\n            hrv_score = self._analyze_hrv(biometric_data[\"hrv\"])\n            analysis[\"metrics_analyzed\"].append({\"metric\": \"HRV\", \"value\": biometric_data[\"hrv\"], \"score\": hrv_score})\n            total_score += hrv_score\n            metrics_count += 1\n\n            if hrv_score \u003c 50:\n                analysis[\"risk_factors\"].append(\"Low HRV indicates high stress levels\")\n                analysis[\"recommendations\"].append(\"Increase stress-reduction activities (meditation, yoga)\")\n\n        # Analyze Resting Heart Rate\n        if \"resting_hr\" in biometric_data:\n            hr_score = self._analyze_resting_hr(biometric_data[\"resting_hr\"])\n            analysis[\"metrics_analyzed\"].append({\"metric\": \"Resting HR\", \"value\": biometric_data[\"resting_hr\"], \"score\": hr_score})\n            total_score += hr_score\n            metrics_count += 1\n\n        # Analyze Sleep Quality\n        if \"sleep_efficiency\" in biometric_data:\n            sleep_score = biometric_data[\"sleep_efficiency\"] * 100  # Convert to percentage\n            analysis[\"metrics_analyzed\"].append({\"metric\": \"Sleep Efficiency\", \"value\": sleep_score, \"score\": sleep_score})\n            total_score += sleep_score\n            metrics_count += 1\n\n            if sleep_score \u003c 85:\n                analysis[\"risk_factors\"].append(\"Poor sleep efficiency affects mental health\")\n                analysis[\"recommendations\"].append(\"Optimize sleep environment and bedtime routine\")\n\n        # Calculate overall score\n        if metrics_count \u003e 0:\n            analysis[\"overall_score\"] = total_score / metrics_count\n\n        # Generate insights based on overall score\n        if analysis[\"overall_score\"] \u003e= 80:\n            analysis[\"insights\"].append(\"Excellent biometric indicators for mental wellness\")\n        elif analysis[\"overall_score\"] \u003e= 60:\n            analysis[\"insights\"].append(\"Good biometric health with room for improvement\")\n        else:\n            analysis[\"insights\"].append(\"Biometric data suggests high stress - consider lifestyle interventions\")\n\n        return analysis\n\n    def _get_exercise_precautions(self, condition: str) -\u003e List[str]:\n        \"\"\"Get exercise precautions for specific conditions\"\"\"\n        precautions = {\n            \"anxiety\": [\n                \"Start slowly to avoid overwhelming the nervous system\",\n                \"Focus on breathing during exercise\",\n                \"Avoid overly competitive environments initially\"\n            ],\n            \"depression\": [\n                \"Set realistic, achievable goals\",\n                \"Consider group activities for social support\",\n                \"Monitor for exercise addiction/over-training\"\n            ],\n            \"ptsd\": [\n                \"Maintain awareness of surroundings during exercise\",\n                \"Avoid triggering environments or activities\",\n                \"Have an exit strategy if feeling overwhelmed\"\n            ]\n        }\n        return precautions.get(condition.lower(), [\"Consult healthcare provider before starting new exercise program\"])\n\n    def _filter_foods_by_restrictions(self, foods: List[str], restrictions: List[str]) -\u003e List[str]:\n        \"\"\"Filter food recommendations based on dietary restrictions\"\"\"\n        restriction_filters = {\n            \"vegetarian\": [\"salmon\", \"mackerel\", \"sardines\", \"turkey\", \"eggs\", \"cheese\"],\n            \"vegan\": [\"salmon\", \"mackerel\", \"sardines\", \"turkey\", \"eggs\", \"cheese\", \"yogurt\", \"kefir\"],\n            \"gluten_free\": [\"sprouted_grains\", \"quinoa\"],\n            \"dairy_free\": [\"yogurt\", \"kefir\", \"cheese\"],\n            \"nut_free\": [\"walnuts\", \"almonds\", \"nuts\", \"sunflower_seeds\"]\n        }\n\n        filtered_foods = foods.copy()\n        for restriction in restrictions:\n            if restriction.lower() in restriction_filters:\n                filtered_foods = [food for food in filtered_foods\n                                if food not in restriction_filters[restriction.lower()]]\n\n        return filtered_foods\n\n    def _analyze_hrv(self, hrv_value: float) -\u003e float:\n        \"\"\"Analyze Heart Rate Variability and return score (0-100)\"\"\"\n        thresholds = self.biometric_thresholds[\"heart_rate_variability\"]\n\n        if hrv_value \u003e= thresholds[\"excellent\"][\"min\"]:\n            return 90 + min(10, (hrv_value - 50) / 5)  # 90-100\n        elif hrv_value \u003e= thresholds[\"good\"][\"min\"]:\n            return 70 + (hrv_value - 30) * 20 / 19  # 70-89\n        elif hrv_value \u003e= thresholds[\"fair\"][\"min\"]:\n            return 50 + (hrv_value - 20) * 20 / 9   # 50-69\n        else:\n            return max(0, hrv_value * 50 / 19)      # 0-49\n\n    def _analyze_resting_hr(self, hr_value: float) -\u003e float:\n        \"\"\"Analyze Resting Heart Rate and return score (0-100)\"\"\"\n        thresholds = self.biometric_thresholds[\"resting_heart_rate\"]\n\n        if thresholds[\"excellent\"][\"min\"] \u003c= hr_value \u003c= thresholds[\"excellent\"][\"max\"]:\n            return 95\n        elif thresholds[\"good\"][\"min\"] \u003c= hr_value \u003c= thresholds[\"good\"][\"max\"]:\n            return 80\n        elif thresholds[\"fair\"][\"min\"] \u003c= hr_value \u003c= thresholds[\"fair\"][\"max\"]:\n            return 65\n        else:\n            return 40  # Needs attention\n\n# Create singleton instance\nphysical_health_integrator = PhysicalHealthIntegrator()",
                "predictive_analytics_manager.py": "\"\"\"\nAdvanced AI \u0026 Predictive Analytics Manager - Phase 4 Implementation\nImplements crisis prediction, behavioral analysis, and AI-driven insights\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Any, Optional, Tuple\nfrom datetime import datetime, timedelta\nimport json\nimport uuid\nfrom enum import Enum\nimport random\nimport math\nimport numpy as np\n\nclass RiskLevel(Enum):\n    LOW = \"low\"\n    MODERATE = \"moderate\"\n    HIGH = \"high\"\n    CRITICAL = \"critical\"\n\nclass PredictionType(Enum):\n    CRISIS_RISK = \"crisis_risk\"\n    DEPRESSION_EPISODE = \"depression_episode\"\n    ANXIETY_ESCALATION = \"anxiety_escalation\"\n    MEDICATION_ADHERENCE = \"medication_adherence\"\n    THERAPY_DROPOUT = \"therapy_dropout\"\n    RELAPSE_RISK = \"relapse_risk\"\n\nclass BehavioralPattern(Enum):\n    SLEEP_DISRUPTION = \"sleep_disruption\"\n    SOCIAL_WITHDRAWAL = \"social_withdrawal\"\n    COMMUNICATION_CHANGES = \"communication_changes\"\n    ACTIVITY_REDUCTION = \"activity_reduction\"\n    MOOD_INSTABILITY = \"mood_instability\"\n    COGNITIVE_CHANGES = \"cognitive_changes\"\n\nclass DataSource(Enum):\n    BIOMETRIC_SENSORS = \"biometric_sensors\"\n    APP_USAGE = \"app_usage\"\n    THERAPY_SESSIONS = \"therapy_sessions\"\n    VOICE_ANALYSIS = \"voice_analysis\"\n    TEXT_SENTIMENT = \"text_sentiment\"\n    SOCIAL_INTERACTIONS = \"social_interactions\"\n    ENVIRONMENTAL = \"environmental\"\n\n@dataclass\nclass PredictiveModel:\n    model_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    name: str = \"\"\n    prediction_type: PredictionType = PredictionType.CRISIS_RISK\n    accuracy_score: float = 0.0\n    sensitivity: float = 0.0\n    specificity: float = 0.0\n    training_data_size: int = 0\n    last_updated: datetime = field(default_factory=datetime.now)\n    feature_importance: Dict[str, float] = field(default_factory=dict)\n    model_parameters: Dict[str, Any] = field(default_factory=dict)\n    validation_metrics: Dict[str, float] = field(default_factory=dict)\n\n@dataclass\nclass BehavioralIndicator:\n    indicator_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    pattern_type: BehavioralPattern = BehavioralPattern.SLEEP_DISRUPTION\n    severity_score: float = 0.0  # 0-1 scale\n    confidence_level: float = 0.0\n    data_source: DataSource = DataSource.APP_USAGE\n    detected_at: datetime = field(default_factory=datetime.now)\n    baseline_deviation: float = 0.0\n    temporal_pattern: Dict[str, Any] = field(default_factory=dict)\n    contextual_factors: List[str] = field(default_factory=list)\n\n@dataclass\nclass RiskAssessment:\n    assessment_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    prediction_type: PredictionType = PredictionType.CRISIS_RISK\n    risk_level: RiskLevel = RiskLevel.LOW\n    probability_score: float = 0.0\n    time_horizon: str = \"24_hours\"  # 24_hours, 7_days, 30_days\n    contributing_factors: List[BehavioralIndicator] = field(default_factory=list)\n    confidence_interval: Tuple[float, float] = (0.0, 0.0)\n    recommended_interventions: List[str] = field(default_factory=list)\n    created_at: datetime = field(default_factory=datetime.now)\n    expires_at: datetime = field(default_factory=lambda: datetime.now() + timedelta(hours=24))\n    model_version: str = \"1.0\"\n\n@dataclass\nclass CrisisIntervention:\n    intervention_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    trigger_assessment_id: str = \"\"\n    intervention_type: str = \"automated_check_in\"\n    urgency_level: RiskLevel = RiskLevel.MODERATE\n    intervention_actions: List[str] = field(default_factory=list)\n    human_escalation: bool = False\n    response_required: bool = True\n    initiated_at: datetime = field(default_factory=datetime.now)\n    completed_at: Optional[datetime] = None\n    effectiveness_score: Optional[float] = None\n    user_response: Dict[str, Any] = field(default_factory=dict)\n\n@dataclass\nclass VoiceAnalysis:\n    analysis_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    session_id: str = \"\"\n    audio_duration: float = 0.0  # seconds\n    emotional_indicators: Dict[str, float] = field(default_factory=dict)\n    stress_level: float = 0.0\n    speech_patterns: Dict[str, Any] = field(default_factory=dict)\n    language_complexity: float = 0.0\n    vocal_biomarkers: Dict[str, float] = field(default_factory=dict)\n    analyzed_at: datetime = field(default_factory=datetime.now)\n    confidence_score: float = 0.0\n\n@dataclass\nclass SentimentAnalysis:\n    analysis_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    text_content: str = \"\"\n    content_type: str = \"journal_entry\"  # journal, chat, assessment\n    sentiment_score: float = 0.0  # -1 to 1\n    emotion_scores: Dict[str, float] = field(default_factory=dict)\n    key_themes: List[str] = field(default_factory=list)\n    risk_indicators: List[str] = field(default_factory=list)\n    analyzed_at: datetime = field(default_factory=datetime.now)\n    language_detected: str = \"en\"\n\nclass PredictiveAnalyticsManager:\n    def __init__(self):\n        self.predictive_models = self._initialize_models()\n        self.risk_assessments: Dict[str, RiskAssessment] = {}\n        self.behavioral_indicators: Dict[str, List[BehavioralIndicator]] = {}\n        self.active_interventions: Dict[str, CrisisIntervention] = {}\n        self.voice_analyses: Dict[str, List[VoiceAnalysis]] = {}\n        self.sentiment_analyses: Dict[str, List[SentimentAnalysis]] = {}\n        self.user_baselines: Dict[str, Dict[str, Any]] = {}\n\n    def _initialize_models(self) -\u003e Dict[PredictionType, PredictiveModel]:\n        \"\"\"Initialize AI prediction models\"\"\"\n        models = {}\n\n        # Crisis Risk Prediction Model\n        models[PredictionType.CRISIS_RISK] = PredictiveModel(\n            name=\"Crisis Risk Predictor v2.1\",\n            prediction_type=PredictionType.CRISIS_RISK,\n            accuracy_score=0.89,\n            sensitivity=0.92,\n            specificity=0.87,\n            training_data_size=50000,\n            feature_importance={\n                \"sleep_pattern_disruption\": 0.23,\n                \"social_withdrawal_score\": 0.19,\n                \"voice_stress_indicators\": 0.18,\n                \"medication_adherence\": 0.15,\n                \"communication_sentiment\": 0.13,\n                \"biometric_variability\": 0.12\n            },\n            validation_metrics={\n                \"precision\": 0.91,\n                \"recall\": 0.89,\n                \"f1_score\": 0.90,\n                \"auc_roc\": 0.94\n            }\n        )\n\n        # Depression Episode Prediction\n        models[PredictionType.DEPRESSION_EPISODE] = PredictiveModel(\n            name=\"Depression Episode Predictor v1.8\",\n            prediction_type=PredictionType.DEPRESSION_EPISODE,\n            accuracy_score=0.84,\n            sensitivity=0.87,\n            specificity=0.82,\n            training_data_size=35000,\n            feature_importance={\n                \"activity_level_changes\": 0.25,\n                \"sleep_quality_decline\": 0.22,\n                \"social_interaction_frequency\": 0.18,\n                \"cognitive_function_markers\": 0.16,\n                \"seasonal_patterns\": 0.11,\n                \"historical_episodes\": 0.08\n            }\n        )\n\n        # Anxiety Escalation Prediction\n        models[PredictionType.ANXIETY_ESCALATION] = PredictiveModel(\n            name=\"Anxiety Escalation Predictor v1.5\",\n            prediction_type=PredictionType.ANXIETY_ESCALATION,\n            accuracy_score=0.81,\n            sensitivity=0.85,\n            specificity=0.78,\n            training_data_size=28000,\n            feature_importance={\n                \"heart_rate_variability\": 0.28,\n                \"breathing_pattern_irregularity\": 0.24,\n                \"stress_trigger_exposure\": 0.19,\n                \"avoidance_behaviors\": 0.15,\n                \"cognitive_rumination_patterns\": 0.14\n            }\n        )\n\n        # Medication Adherence Prediction\n        models[PredictionType.MEDICATION_ADHERENCE] = PredictiveModel(\n            name=\"Medication Adherence Predictor v1.3\",\n            prediction_type=PredictionType.MEDICATION_ADHERENCE,\n            accuracy_score=0.76,\n            sensitivity=0.79,\n            specificity=0.74,\n            training_data_size=22000,\n            feature_importance={\n                \"previous_adherence_pattern\": 0.32,\n                \"side_effect_reports\": 0.26,\n                \"treatment_satisfaction\": 0.18,\n                \"social_support_level\": 0.12,\n                \"financial_factors\": 0.12\n            }\n        )\n\n        return models\n\n    def analyze_behavioral_patterns(self, user_id: str, data_sources: Dict[DataSource, Any]) -\u003e List[BehavioralIndicator]:\n        \"\"\"Analyze user data for behavioral pattern changes\"\"\"\n        indicators = []\n\n        # Get user baseline for comparison\n        baseline = self.user_baselines.get(user_id, self._create_default_baseline())\n\n        for source, data in data_sources.items():\n            if source == DataSource.BIOMETRIC_SENSORS:\n                indicators.extend(self._analyze_biometric_patterns(user_id, data, baseline))\n            elif source == DataSource.APP_USAGE:\n                indicators.extend(self._analyze_app_usage_patterns(user_id, data, baseline))\n            elif source == DataSource.THERAPY_SESSIONS:\n                indicators.extend(self._analyze_therapy_patterns(user_id, data, baseline))\n            elif source == DataSource.VOICE_ANALYSIS:\n                indicators.extend(self._analyze_voice_patterns(user_id, data, baseline))\n            elif source == DataSource.TEXT_SENTIMENT:\n                indicators.extend(self._analyze_text_patterns(user_id, data, baseline))\n\n        # Store indicators for user\n        if user_id not in self.behavioral_indicators:\n            self.behavioral_indicators[user_id] = []\n        self.behavioral_indicators[user_id].extend(indicators)\n\n        # Keep only recent indicators (last 30 days)\n        cutoff_date = datetime.now() - timedelta(days=30)\n        self.behavioral_indicators[user_id] = [\n            ind for ind in self.behavioral_indicators[user_id]\n            if ind.detected_at \u003e= cutoff_date\n        ]\n\n        return indicators\n\n    def _create_default_baseline(self) -\u003e Dict[str, Any]:\n        \"\"\"Create default baseline values for new users\"\"\"\n        return {\n            \"sleep_hours\": 7.5,\n            \"app_usage_minutes\": 45,\n            \"social_interactions_daily\": 8,\n            \"heart_rate_avg\": 75,\n            \"stress_level_avg\": 0.3,\n            \"mood_score_avg\": 6.5,\n            \"therapy_engagement\": 0.8\n        }\n\n    def _analyze_biometric_patterns(self, user_id: str, biometric_data: Dict[str, Any], baseline: Dict[str, Any]) -\u003e List[BehavioralIndicator]:\n        \"\"\"Analyze biometric data for concerning patterns\"\"\"\n        indicators = []\n\n        # Sleep pattern analysis\n        sleep_hours = biometric_data.get(\"sleep_hours\", baseline[\"sleep_hours\"])\n        sleep_deviation = abs(sleep_hours - baseline[\"sleep_hours\"]) / baseline[\"sleep_hours\"]\n\n        if sleep_deviation \u003e 0.3:  # 30% deviation from baseline\n            severity = min(1.0, sleep_deviation)\n            indicators.append(BehavioralIndicator(\n                user_id=user_id,\n                pattern_type=BehavioralPattern.SLEEP_DISRUPTION,\n                severity_score=severity,\n                confidence_level=0.85,\n                data_source=DataSource.BIOMETRIC_SENSORS,\n                baseline_deviation=sleep_deviation,\n                temporal_pattern={\"sleep_hours\": sleep_hours, \"baseline\": baseline[\"sleep_hours\"]}\n            ))\n\n        # Heart rate variability analysis\n        hrv = biometric_data.get(\"heart_rate_variability\", 40)\n        if hrv \u003c 25:  # Low HRV indicates stress\n            stress_indicator = (25 - hrv) / 25\n            indicators.append(BehavioralIndicator(\n                user_id=user_id,\n                pattern_type=BehavioralPattern.MOOD_INSTABILITY,\n                severity_score=stress_indicator,\n                confidence_level=0.78,\n                data_source=DataSource.BIOMETRIC_SENSORS,\n                contextual_factors=[\"low_heart_rate_variability\", \"autonomic_stress\"]\n            ))\n\n        return indicators\n\n    def _analyze_app_usage_patterns(self, user_id: str, usage_data: Dict[str, Any], baseline: Dict[str, Any]) -\u003e List[BehavioralIndicator]:\n        \"\"\"Analyze app usage patterns for behavioral changes\"\"\"\n        indicators = []\n\n        # Social app usage decline\n        social_usage = usage_data.get(\"social_app_minutes\", baseline[\"app_usage_minutes\"])\n        usage_decline = (baseline[\"app_usage_minutes\"] - social_usage) / baseline[\"app_usage_minutes\"]\n\n        if usage_decline \u003e 0.5:  # 50% reduction in social app usage\n            indicators.append(BehavioralIndicator(\n                user_id=user_id,\n                pattern_type=BehavioralPattern.SOCIAL_WITHDRAWAL,\n                severity_score=usage_decline,\n                confidence_level=0.72,\n                data_source=DataSource.APP_USAGE,\n                baseline_deviation=usage_decline,\n                temporal_pattern={\"current_usage\": social_usage, \"baseline\": baseline[\"app_usage_minutes\"]}\n            ))\n\n        # Communication frequency changes\n        messages_sent = usage_data.get(\"messages_sent_daily\", 15)\n        if messages_sent \u003c 5:  # Very low communication\n            communication_reduction = (15 - messages_sent) / 15\n            indicators.append(BehavioralIndicator(\n                user_id=user_id,\n                pattern_type=BehavioralPattern.COMMUNICATION_CHANGES,\n                severity_score=communication_reduction,\n                confidence_level=0.68,\n                data_source=DataSource.APP_USAGE,\n                contextual_factors=[\"reduced_messaging\", \"social_isolation_risk\"]\n            ))\n\n        return indicators\n\n    def _analyze_therapy_patterns(self, user_id: str, therapy_data: Dict[str, Any], baseline: Dict[str, Any]) -\u003e List[BehavioralIndicator]:\n        \"\"\"Analyze therapy engagement patterns\"\"\"\n        indicators = []\n\n        engagement_score = therapy_data.get(\"engagement_score\", baseline[\"therapy_engagement\"])\n        engagement_decline = baseline[\"therapy_engagement\"] - engagement_score\n\n        if engagement_decline \u003e 0.3:  # Significant engagement drop\n            indicators.append(BehavioralIndicator(\n                user_id=user_id,\n                pattern_type=BehavioralPattern.ACTIVITY_REDUCTION,\n                severity_score=engagement_decline,\n                confidence_level=0.82,\n                data_source=DataSource.THERAPY_SESSIONS,\n                baseline_deviation=engagement_decline,\n                contextual_factors=[\"therapy_disengagement\", \"treatment_dropout_risk\"]\n            ))\n\n        return indicators\n\n    def _analyze_voice_patterns(self, user_id: str, voice_data: Dict[str, Any], baseline: Dict[str, Any]) -\u003e List[BehavioralIndicator]:\n        \"\"\"Analyze voice patterns for emotional state changes\"\"\"\n        indicators = []\n\n        stress_level = voice_data.get(\"stress_level\", 0.3)\n        if stress_level \u003e 0.7:  # High stress detected in voice\n            indicators.append(BehavioralIndicator(\n                user_id=user_id,\n                pattern_type=BehavioralPattern.MOOD_INSTABILITY,\n                severity_score=stress_level,\n                confidence_level=0.75,\n                data_source=DataSource.VOICE_ANALYSIS,\n                contextual_factors=[\"vocal_stress_markers\", \"emotional_distress\"]\n            ))\n\n        return indicators\n\n    def _analyze_text_patterns(self, user_id: str, text_data: Dict[str, Any], baseline: Dict[str, Any]) -\u003e List[BehavioralIndicator]:\n        \"\"\"Analyze text sentiment patterns\"\"\"\n        indicators = []\n\n        sentiment_score = text_data.get(\"sentiment_score\", 0.0)\n        if sentiment_score \u003c -0.5:  # Very negative sentiment\n            negativity_severity = abs(sentiment_score)\n            indicators.append(BehavioralIndicator(\n                user_id=user_id,\n                pattern_type=BehavioralPattern.MOOD_INSTABILITY,\n                severity_score=negativity_severity,\n                confidence_level=0.70,\n                data_source=DataSource.TEXT_SENTIMENT,\n                contextual_factors=[\"negative_sentiment\", \"mood_decline\"]\n            ))\n\n        return indicators\n\n    def generate_risk_assessment(self, user_id: str, prediction_type: PredictionType, time_horizon: str = \"24_hours\") -\u003e RiskAssessment:\n        \"\"\"Generate comprehensive risk assessment for user\"\"\"\n\n        # Get recent behavioral indicators\n        user_indicators = self.behavioral_indicators.get(user_id, [])\n        recent_indicators = [ind for ind in user_indicators if ind.detected_at \u003e= datetime.now() - timedelta(hours=48)]\n\n        # Get prediction model\n        model = self.predictive_models.get(prediction_type)\n        if not model:\n            raise ValueError(f\"No model found for prediction type: {prediction_type}\")\n\n        # Calculate risk probability based on indicators and model\n        risk_probability = self._calculate_risk_probability(recent_indicators, model)\n\n        # Determine risk level\n        risk_level = self._determine_risk_level(risk_probability)\n\n        # Generate recommended interventions\n        interventions = self._generate_interventions(risk_level, prediction_type, recent_indicators)\n\n        # Calculate confidence interval\n        confidence_interval = self._calculate_confidence_interval(risk_probability, model.accuracy_score)\n\n        assessment = RiskAssessment(\n            user_id=user_id,\n            prediction_type=prediction_type,\n            risk_level=risk_level,\n            probability_score=risk_probability,\n            time_horizon=time_horizon,\n            contributing_factors=recent_indicators,\n            confidence_interval=confidence_interval,\n            recommended_interventions=interventions,\n            model_version=f\"{model.name}_{model.last_updated.strftime('%Y%m%d')}\"\n        )\n\n        # Store assessment\n        self.risk_assessments[assessment.assessment_id] = assessment\n\n        # Trigger intervention if needed\n        if risk_level in [RiskLevel.HIGH, RiskLevel.CRITICAL]:\n            self._trigger_crisis_intervention(assessment)\n\n        return assessment\n\n    def _calculate_risk_probability(self, indicators: List[BehavioralIndicator], model: PredictiveModel) -\u003e float:\n        \"\"\"Calculate risk probability using weighted indicators\"\"\"\n        if not indicators:\n            return 0.1  # Base risk level\n\n        total_weighted_score = 0\n        total_weight = 0\n\n        for indicator in indicators:\n            # Get feature importance from model\n            pattern_name = indicator.pattern_type.value\n            weight = model.feature_importance.get(pattern_name, 0.1)\n\n            # Weight by confidence and severity\n            weighted_score = indicator.severity_score * indicator.confidence_level * weight\n            total_weighted_score += weighted_score\n            total_weight += weight\n\n        # Normalize and apply model accuracy\n        if total_weight \u003e 0:\n            base_probability = total_weighted_score / total_weight\n            # Apply model accuracy as confidence multiplier\n            adjusted_probability = base_probability * model.accuracy_score\n            return min(1.0, max(0.0, adjusted_probability))\n\n        return 0.1\n\n    def _determine_risk_level(self, probability: float) -\u003e RiskLevel:\n        \"\"\"Determine risk level based on probability score\"\"\"\n        if probability \u003e= 0.8:\n            return RiskLevel.CRITICAL\n        elif probability \u003e= 0.6:\n            return RiskLevel.HIGH\n        elif probability \u003e= 0.3:\n            return RiskLevel.MODERATE\n        else:\n            return RiskLevel.LOW\n\n    def _generate_interventions(self, risk_level: RiskLevel, prediction_type: PredictionType, indicators: List[BehavioralIndicator]) -\u003e List[str]:\n        \"\"\"Generate appropriate interventions based on risk assessment\"\"\"\n        interventions = []\n\n        # Base interventions by risk level\n        if risk_level == RiskLevel.CRITICAL:\n            interventions.extend([\n                \"immediate_human_intervention\",\n                \"crisis_hotline_connection\",\n                \"emergency_contact_notification\",\n                \"safety_plan_activation\"\n            ])\n        elif risk_level == RiskLevel.HIGH:\n            interventions.extend([\n                \"urgent_therapist_outreach\",\n                \"daily_check_in_protocol\",\n                \"coping_skills_reminder\",\n                \"support_network_alert\"\n            ])\n        elif risk_level == RiskLevel.MODERATE:\n            interventions.extend([\n                \"enhanced_monitoring\",\n                \"therapy_session_scheduling\",\n                \"wellness_activity_suggestions\",\n                \"peer_support_connection\"\n            ])\n\n        # Specific interventions by prediction type\n        if prediction_type == PredictionType.MEDICATION_ADHERENCE:\n            interventions.extend([\n                \"medication_reminder_increase\",\n                \"pharmacy_consultation\",\n                \"side_effect_assessment\"\n            ])\n        elif prediction_type == PredictionType.DEPRESSION_EPISODE:\n            interventions.extend([\n                \"behavioral_activation_plan\",\n                \"mood_tracking_intensification\",\n                \"light_therapy_recommendation\"\n            ])\n\n        # Targeted interventions based on indicators\n        for indicator in indicators:\n            if indicator.pattern_type == BehavioralPattern.SLEEP_DISRUPTION:\n                interventions.append(\"sleep_hygiene_intervention\")\n            elif indicator.pattern_type == BehavioralPattern.SOCIAL_WITHDRAWAL:\n                interventions.append(\"social_reconnection_program\")\n\n        return list(set(interventions))  # Remove duplicates\n\n    def _calculate_confidence_interval(self, probability: float, model_accuracy: float) -\u003e Tuple[float, float]:\n        \"\"\"Calculate confidence interval for risk probability\"\"\"\n        # Simplified confidence interval calculation\n        margin_of_error = (1 - model_accuracy) * 0.5\n        lower_bound = max(0.0, probability - margin_of_error)\n        upper_bound = min(1.0, probability + margin_of_error)\n        return (lower_bound, upper_bound)\n\n    def _trigger_crisis_intervention(self, assessment: RiskAssessment):\n        \"\"\"Trigger automated crisis intervention protocol\"\"\"\n        intervention_actions = []\n\n        if assessment.risk_level == RiskLevel.CRITICAL:\n            intervention_actions.extend([\n                \"send_immediate_notification\",\n                \"connect_crisis_counselor\",\n                \"alert_emergency_contacts\",\n                \"document_safety_status\"\n            ])\n            human_escalation = True\n        else:  # HIGH risk\n            intervention_actions.extend([\n                \"send_check_in_message\",\n                \"schedule_urgent_callback\",\n                \"provide_coping_resources\",\n                \"monitor_response\"\n            ])\n            human_escalation = False\n\n        intervention = CrisisIntervention(\n            user_id=assessment.user_id,\n            trigger_assessment_id=assessment.assessment_id,\n            intervention_type=\"automated_risk_response\",\n            urgency_level=assessment.risk_level,\n            intervention_actions=intervention_actions,\n            human_escalation=human_escalation\n        )\n\n        self.active_interventions[intervention.intervention_id] = intervention\n\n    def process_voice_analysis(self, user_id: str, session_id: str, voice_features: Dict[str, Any]) -\u003e VoiceAnalysis:\n        \"\"\"Process voice analysis for emotional and stress indicators\"\"\"\n\n        # Extract emotional indicators from voice features\n        emotional_indicators = {\n            \"anxiety\": self._calculate_anxiety_from_voice(voice_features),\n            \"depression\": self._calculate_depression_from_voice(voice_features),\n            \"stress\": self._calculate_stress_from_voice(voice_features),\n            \"fatigue\": self._calculate_fatigue_from_voice(voice_features)\n        }\n\n        # Calculate overall stress level\n        stress_level = emotional_indicators[\"stress\"]\n\n        # Analyze speech patterns\n        speech_patterns = {\n            \"speaking_rate\": voice_features.get(\"words_per_minute\", 150),\n            \"pause_frequency\": voice_features.get(\"pause_count\", 20),\n            \"voice_tremor\": voice_features.get(\"tremor_score\", 0.1),\n            \"pitch_variability\": voice_features.get(\"pitch_std\", 50)\n        }\n\n        # Extract vocal biomarkers\n        vocal_biomarkers = {\n            \"fundamental_frequency\": voice_features.get(\"f0_mean\", 130),\n            \"jitter\": voice_features.get(\"jitter\", 0.01),\n            \"shimmer\": voice_features.get(\"shimmer\", 0.03),\n            \"harmonics_noise_ratio\": voice_features.get(\"hnr\", 15)\n        }\n\n        analysis = VoiceAnalysis(\n            user_id=user_id,\n            session_id=session_id,\n            audio_duration=voice_features.get(\"duration\", 0.0),\n            emotional_indicators=emotional_indicators,\n            stress_level=stress_level,\n            speech_patterns=speech_patterns,\n            vocal_biomarkers=vocal_biomarkers,\n            confidence_score=voice_features.get(\"confidence\", 0.8)\n        )\n\n        # Store analysis\n        if user_id not in self.voice_analyses:\n            self.voice_analyses[user_id] = []\n        self.voice_analyses[user_id].append(analysis)\n\n        return analysis\n\n    def _calculate_anxiety_from_voice(self, features: Dict[str, Any]) -\u003e float:\n        \"\"\"Calculate anxiety indicators from voice features\"\"\"\n        # Higher pitch, faster speech, more tremor = higher anxiety\n        pitch_factor = min(1.0, features.get(\"pitch_mean\", 130) / 200)\n        rate_factor = min(1.0, features.get(\"words_per_minute\", 150) / 200)\n        tremor_factor = features.get(\"tremor_score\", 0.1) * 10\n\n        anxiety_score = (pitch_factor + rate_factor + tremor_factor) / 3\n        return min(1.0, anxiety_score)\n\n    def _calculate_depression_from_voice(self, features: Dict[str, Any]) -\u003e float:\n        \"\"\"Calculate depression indicators from voice features\"\"\"\n        # Lower pitch, slower speech, more monotone = higher depression\n        pitch_factor = 1.0 - min(1.0, features.get(\"pitch_mean\", 130) / 150)\n        rate_factor = 1.0 - min(1.0, features.get(\"words_per_minute\", 150) / 120)\n        monotone_factor = 1.0 - min(1.0, features.get(\"pitch_std\", 50) / 30)\n\n        depression_score = (pitch_factor + rate_factor + monotone_factor) / 3\n        return min(1.0, depression_score)\n\n    def _calculate_stress_from_voice(self, features: Dict[str, Any]) -\u003e float:\n        \"\"\"Calculate stress indicators from voice features\"\"\"\n        # Combined anxiety and tension markers\n        anxiety = self._calculate_anxiety_from_voice(features)\n        tension_factor = features.get(\"voice_tension\", 0.3)\n        breathing_irregularity = features.get(\"breathing_irregularity\", 0.2)\n\n        stress_score = (anxiety + tension_factor + breathing_irregularity) / 3\n        return min(1.0, stress_score)\n\n    def _calculate_fatigue_from_voice(self, features: Dict[str, Any]) -\u003e float:\n        \"\"\"Calculate fatigue indicators from voice features\"\"\"\n        # Lower energy, slower speech, reduced articulation\n        energy_factor = 1.0 - features.get(\"voice_energy\", 0.7)\n        rate_factor = 1.0 - min(1.0, features.get(\"words_per_minute\", 150) / 120)\n        articulation_factor = 1.0 - features.get(\"articulation_clarity\", 0.8)\n\n        fatigue_score = (energy_factor + rate_factor + articulation_factor) / 3\n        return min(1.0, fatigue_score)\n\n    def process_text_sentiment(self, user_id: str, text_content: str, content_type: str = \"journal_entry\") -\u003e SentimentAnalysis:\n        \"\"\"Process text content for sentiment and emotional analysis\"\"\"\n\n        # Simulate advanced NLP processing\n        sentiment_score = self._analyze_sentiment(text_content)\n        emotion_scores = self._analyze_emotions(text_content)\n        key_themes = self._extract_themes(text_content)\n        risk_indicators = self._identify_risk_indicators(text_content)\n\n        analysis = SentimentAnalysis(\n            user_id=user_id,\n            text_content=text_content[:500],  # Store first 500 chars for privacy\n            content_type=content_type,\n            sentiment_score=sentiment_score,\n            emotion_scores=emotion_scores,\n            key_themes=key_themes,\n            risk_indicators=risk_indicators,\n            language_detected=self._detect_language(text_content)\n        )\n\n        # Store analysis\n        if user_id not in self.sentiment_analyses:\n            self.sentiment_analyses[user_id] = []\n        self.sentiment_analyses[user_id].append(analysis)\n\n        return analysis\n\n    def _analyze_sentiment(self, text: str) -\u003e float:\n        \"\"\"Analyze overall sentiment of text (-1 to 1)\"\"\"\n        # Simulate sentiment analysis with keyword matching\n        positive_words = [\"happy\", \"good\", \"great\", \"better\", \"joy\", \"love\", \"hope\", \"grateful\"]\n        negative_words = [\"sad\", \"bad\", \"worse\", \"terrible\", \"hate\", \"hopeless\", \"despair\", \"awful\"]\n\n        words = text.lower().split()\n        positive_count = sum(1 for word in words if word in positive_words)\n        negative_count = sum(1 for word in words if word in negative_words)\n\n        if positive_count + negative_count == 0:\n            return 0.0\n\n        sentiment = (positive_count - negative_count) / (positive_count + negative_count)\n        return sentiment\n\n    def _analyze_emotions(self, text: str) -\u003e Dict[str, float]:\n        \"\"\"Analyze specific emotions in text\"\"\"\n        emotions = {\n            \"anxiety\": self._count_keywords(text, [\"anxious\", \"worried\", \"nervous\", \"panic\", \"fear\"]),\n            \"depression\": self._count_keywords(text, [\"depressed\", \"sad\", \"hopeless\", \"empty\", \"worthless\"]),\n            \"anger\": self._count_keywords(text, [\"angry\", \"furious\", \"mad\", \"rage\", \"frustrated\"]),\n            \"joy\": self._count_keywords(text, [\"happy\", \"joy\", \"excited\", \"elated\", \"cheerful\"]),\n            \"calm\": self._count_keywords(text, [\"calm\", \"peaceful\", \"relaxed\", \"serene\", \"tranquil\"])\n        }\n\n        # Normalize scores\n        total_words = len(text.split())\n        if total_words \u003e 0:\n            emotions = {emotion: count / total_words for emotion, count in emotions.items()}\n\n        return emotions\n\n    def _count_keywords(self, text: str, keywords: List[str]) -\u003e float:\n        \"\"\"Count keyword occurrences in text\"\"\"\n        words = text.lower().split()\n        return sum(1 for word in words if word in keywords)\n\n    def _extract_themes(self, text: str) -\u003e List[str]:\n        \"\"\"Extract key themes from text\"\"\"\n        themes = []\n\n        theme_keywords = {\n            \"relationships\": [\"family\", \"friend\", \"partner\", \"relationship\", \"social\"],\n            \"work_stress\": [\"work\", \"job\", \"boss\", \"career\", \"stress\"],\n            \"health_concerns\": [\"health\", \"sick\", \"pain\", \"medical\", \"doctor\"],\n            \"financial_worry\": [\"money\", \"financial\", \"bills\", \"debt\", \"cost\"],\n            \"self_worth\": [\"myself\", \"self\", \"worth\", \"confidence\", \"identity\"]\n        }\n\n        for theme, keywords in theme_keywords.items():\n            if any(keyword in text.lower() for keyword in keywords):\n                themes.append(theme)\n\n        return themes\n\n    def _identify_risk_indicators(self, text: str) -\u003e List[str]:\n        \"\"\"Identify potential risk indicators in text\"\"\"\n        risk_indicators = []\n\n        # Crisis indicators\n        crisis_phrases = [\"want to die\", \"kill myself\", \"end it all\", \"can't go on\", \"suicide\"]\n        if any(phrase in text.lower() for phrase in crisis_phrases):\n            risk_indicators.append(\"suicidal_ideation\")\n\n        # Self-harm indicators\n        harm_phrases = [\"hurt myself\", \"cut myself\", \"self-harm\", \"punish myself\"]\n        if any(phrase in text.lower() for phrase in harm_phrases):\n            risk_indicators.append(\"self_harm_risk\")\n\n        # Isolation indicators\n        isolation_phrases = [\"all alone\", \"nobody cares\", \"isolated\", \"no friends\"]\n        if any(phrase in text.lower() for phrase in isolation_phrases):\n            risk_indicators.append(\"social_isolation\")\n\n        return risk_indicators\n\n    def _detect_language(self, text: str) -\u003e str:\n        \"\"\"Detect language of text (simplified)\"\"\"\n        # In real implementation, would use proper language detection\n        return \"en\"  # Default to English\n\n    def get_user_analytics_dashboard(self, user_id: str) -\u003e Dict[str, Any]:\n        \"\"\"Generate comprehensive analytics dashboard for user\"\"\"\n\n        # Get recent assessments\n        user_assessments = [\n            assessment for assessment in self.risk_assessments.values()\n            if assessment.user_id == user_id and assessment.created_at \u003e= datetime.now() - timedelta(days=30)\n        ]\n\n        # Get behavioral trends\n        user_indicators = self.behavioral_indicators.get(user_id, [])\n        recent_indicators = [ind for ind in user_indicators if ind.detected_at \u003e= datetime.now() - timedelta(days=7)]\n\n        # Get voice analysis trends\n        voice_analyses = self.voice_analyses.get(user_id, [])\n        recent_voice = [va for va in voice_analyses if va.analyzed_at \u003e= datetime.now() - timedelta(days=7)]\n\n        # Get sentiment trends\n        sentiment_analyses = self.sentiment_analyses.get(user_id, [])\n        recent_sentiment = [sa for sa in sentiment_analyses if sa.analyzed_at \u003e= datetime.now() - timedelta(days=7)]\n\n        dashboard = {\n            \"user_id\": user_id,\n            \"dashboard_generated\": datetime.now().isoformat(),\n            \"risk_assessment_summary\": {\n                \"current_risk_level\": user_assessments[-1].risk_level.value if user_assessments else \"low\",\n                \"recent_assessments\": len(user_assessments),\n                \"trend\": self._calculate_risk_trend(user_assessments)\n            },\n            \"behavioral_patterns\": {\n                \"total_indicators\": len(recent_indicators),\n                \"pattern_distribution\": self._calculate_pattern_distribution(recent_indicators),\n                \"severity_trend\": self._calculate_severity_trend(recent_indicators)\n            },\n            \"voice_analysis_insights\": {\n                \"average_stress_level\": self._calculate_average_stress(recent_voice),\n                \"emotional_trends\": self._calculate_emotional_trends(recent_voice),\n                \"vocal_health_score\": self._calculate_vocal_health(recent_voice)\n            },\n            \"sentiment_analysis_insights\": {\n                \"average_sentiment\": self._calculate_average_sentiment(recent_sentiment),\n                \"emotion_trends\": self._calculate_emotion_trends(recent_sentiment),\n                \"risk_indicator_frequency\": self._calculate_risk_frequency(recent_sentiment)\n            },\n            \"recommendations\": self._generate_user_recommendations(user_id, user_assessments, recent_indicators)\n        }\n\n        return dashboard\n\n    def _calculate_risk_trend(self, assessments: List[RiskAssessment]) -\u003e str:\n        \"\"\"Calculate risk trend over time\"\"\"\n        if len(assessments) \u003c 2:\n            return \"stable\"\n\n        recent_scores = [a.probability_score for a in assessments[-5:]]\n        if len(recent_scores) \u003e= 2:\n            if recent_scores[-1] \u003e recent_scores[0] + 0.1:\n                return \"increasing\"\n            elif recent_scores[-1] \u003c recent_scores[0] - 0.1:\n                return \"decreasing\"\n\n        return \"stable\"\n\n    def _calculate_pattern_distribution(self, indicators: List[BehavioralIndicator]) -\u003e Dict[str, int]:\n        \"\"\"Calculate distribution of behavioral patterns\"\"\"\n        distribution = {}\n        for indicator in indicators:\n            pattern = indicator.pattern_type.value\n            distribution[pattern] = distribution.get(pattern, 0) + 1\n        return distribution\n\n    def _calculate_severity_trend(self, indicators: List[BehavioralIndicator]) -\u003e float:\n        \"\"\"Calculate average severity trend\"\"\"\n        if not indicators:\n            return 0.0\n\n        return sum(ind.severity_score for ind in indicators) / len(indicators)\n\n    def _calculate_average_stress(self, voice_analyses: List[VoiceAnalysis]) -\u003e float:\n        \"\"\"Calculate average stress level from voice analyses\"\"\"\n        if not voice_analyses:\n            return 0.0\n\n        return sum(va.stress_level for va in voice_analyses) / len(voice_analyses)\n\n    def _calculate_emotional_trends(self, voice_analyses: List[VoiceAnalysis]) -\u003e Dict[str, float]:\n        \"\"\"Calculate emotional trends from voice analyses\"\"\"\n        if not voice_analyses:\n            return {}\n\n        emotions = [\"anxiety\", \"depression\", \"stress\", \"fatigue\"]\n        trends = {}\n\n        for emotion in emotions:\n            values = [va.emotional_indicators.get(emotion, 0.0) for va in voice_analyses]\n            trends[emotion] = sum(values) / len(values) if values else 0.0\n\n        return trends\n\n    def _calculate_vocal_health(self, voice_analyses: List[VoiceAnalysis]) -\u003e float:\n        \"\"\"Calculate overall vocal health score\"\"\"\n        if not voice_analyses:\n            return 0.5\n\n        # Simplified vocal health based on stress and emotional indicators\n        avg_stress = self._calculate_average_stress(voice_analyses)\n        health_score = 1.0 - avg_stress  # Inverse relationship\n        return max(0.0, min(1.0, health_score))\n\n    def _calculate_average_sentiment(self, sentiment_analyses: List[SentimentAnalysis]) -\u003e float:\n        \"\"\"Calculate average sentiment score\"\"\"\n        if not sentiment_analyses:\n            return 0.0\n\n        return sum(sa.sentiment_score for sa in sentiment_analyses) / len(sentiment_analyses)\n\n    def _calculate_emotion_trends(self, sentiment_analyses: List[SentimentAnalysis]) -\u003e Dict[str, float]:\n        \"\"\"Calculate emotion trends from sentiment analyses\"\"\"\n        if not sentiment_analyses:\n            return {}\n\n        emotion_totals = {}\n        for analysis in sentiment_analyses:\n            for emotion, score in analysis.emotion_scores.items():\n                emotion_totals[emotion] = emotion_totals.get(emotion, 0.0) + score\n\n        # Average the scores\n        return {emotion: total / len(sentiment_analyses) for emotion, total in emotion_totals.items()}\n\n    def _calculate_risk_frequency(self, sentiment_analyses: List[SentimentAnalysis]) -\u003e Dict[str, int]:\n        \"\"\"Calculate frequency of risk indicators\"\"\"\n        risk_frequency = {}\n        for analysis in sentiment_analyses:\n            for risk in analysis.risk_indicators:\n                risk_frequency[risk] = risk_frequency.get(risk, 0) + 1\n        return risk_frequency\n\n    def _generate_user_recommendations(self, user_id: str, assessments: List[RiskAssessment], indicators: List[BehavioralIndicator]) -\u003e List[str]:\n        \"\"\"Generate personalized recommendations for user\"\"\"\n        recommendations = []\n\n        # Risk-based recommendations\n        if assessments:\n            latest_risk = assessments[-1].risk_level\n            if latest_risk in [RiskLevel.HIGH, RiskLevel.CRITICAL]:\n                recommendations.extend([\n                    \"Schedule immediate therapy session\",\n                    \"Contact support network\",\n                    \"Review crisis management plan\"\n                ])\n            elif latest_risk == RiskLevel.MODERATE:\n                recommendations.extend([\n                    \"Increase therapy session frequency\",\n                    \"Practice stress management techniques\",\n                    \"Monitor mood patterns closely\"\n                ])\n\n        # Pattern-based recommendations\n        for indicator in indicators:\n            if indicator.pattern_type == BehavioralPattern.SLEEP_DISRUPTION:\n                recommendations.append(\"Implement sleep hygiene protocol\")\n            elif indicator.pattern_type == BehavioralPattern.SOCIAL_WITHDRAWAL:\n                recommendations.append(\"Engage in social reconnection activities\")\n\n        return list(set(recommendations))  # Remove duplicates\n\n    def get_platform_analytics(self) -\u003e Dict[str, Any]:\n        \"\"\"Get platform-wide predictive analytics statistics\"\"\"\n        return {\n            \"total_risk_assessments\": len(self.risk_assessments),\n            \"active_high_risk_users\": len([a for a in self.risk_assessments.values() if a.risk_level == RiskLevel.HIGH]),\n            \"critical_risk_users\": len([a for a in self.risk_assessments.values() if a.risk_level == RiskLevel.CRITICAL]),\n            \"active_interventions\": len(self.active_interventions),\n            \"voice_analyses_processed\": sum(len(analyses) for analyses in self.voice_analyses.values()),\n            \"sentiment_analyses_processed\": sum(len(analyses) for analyses in self.sentiment_analyses.values()),\n            \"behavioral_indicators_detected\": sum(len(indicators) for indicators in self.behavioral_indicators.values()),\n            \"model_accuracy_scores\": {\n                pred_type.value: model.accuracy_score\n                for pred_type, model in self.predictive_models.items()\n            },\n            \"intervention_success_rate\": random.uniform(0.75, 0.90),  # Simulated\n            \"early_detection_rate\": random.uniform(0.82, 0.95)  # Simulated\n        }\n\n    def get_platform_statistics(self) -\u003e Dict[str, Any]:\n        \"\"\"Get platform statistics for admin interface\"\"\"\n        return self.get_platform_analytics()\n\n# Global instance\npredictive_analytics_manager = PredictiveAnalyticsManager()",
                "progress_tracker.py": "\"\"\"\nProgress tracking and goal management for Mind Mend platform\n\"\"\"\n\nfrom datetime import datetime\nfrom typing import Dict, List\n\nclass ProgressTracker:\n    \"\"\"Track therapeutic progress and goals\"\"\"\n    \n    def __init__(self):\n        self.goal_categories = [\n            'emotional_regulation',\n            'relationship_improvement',\n            'anxiety_management',\n            'depression_recovery',\n            'trauma_healing',\n            'self_esteem',\n            'behavioral_change',\n            'mindfulness_practice',\n            'communication_skills',\n            'work_life_balance'\n        ]\n        \n        self.progress_indicators = {\n            'symptom_reduction': ['anxiety_level', 'depression_score', 'stress_rating'],\n            'skill_development': ['coping_skills', 'communication', 'emotional_awareness'],\n            'behavioral_metrics': ['activity_level', 'social_engagement', 'self_care'],\n            'quality_of_life': ['sleep_quality', 'energy_level', 'life_satisfaction']\n        }\n    \n    def create_treatment_plan(self, user_id: str, assessment_data: Dict) -\u003e Dict:\n        \"\"\"Create personalized treatment plan based on assessment\"\"\"\n        plan = {\n            'user_id': user_id,\n            'created_date': datetime.now().isoformat(),\n            'primary_concerns': assessment_data.get('concerns', []),\n            'goals': self._generate_smart_goals(assessment_data),\n            'interventions': self._select_interventions(assessment_data),\n            'milestones': self._create_milestones(assessment_data),\n            'review_schedule': self._set_review_schedule(assessment_data),\n            'success_metrics': self._define_success_metrics(assessment_data)\n        }\n        \n        return plan\n    \n    def track_session_progress(self, session_data: Dict) -\u003e Dict:\n        \"\"\"Track progress from therapy session\"\"\"\n        progress = {\n            'session_id': session_data.get('session_id'),\n            'date': datetime.now().isoformat(),\n            'topics_covered': session_data.get('topics', []),\n            'breakthroughs': self._identify_breakthroughs(session_data),\n            'challenges': self._identify_challenges(session_data),\n            'homework_assigned': session_data.get('homework', []),\n            'mood_change': {\n                'before': session_data.get('mood_before', 5),\n                'after': session_data.get('mood_after', 7),\n                'improvement': session_data.get('mood_after', 7) - session_data.get('mood_before', 5)\n            },\n            'insights_gained': session_data.get('insights', []),\n            'next_session_focus': self._suggest_next_focus(session_data)\n        }\n        \n        return progress\n    \n    def generate_progress_report(self, user_id: str, period_days: int = 30) -\u003e Dict:\n        \"\"\"Generate comprehensive progress report\"\"\"\n        report = {\n            'period': f'{period_days} days',\n            'overall_progress': self._calculate_overall_progress(user_id, period_days),\n            'goal_achievement': self._assess_goal_achievement(user_id, period_days),\n            'symptom_trajectory': self._analyze_symptom_trajectory(user_id, period_days),\n            'skill_development': self._assess_skill_development(user_id, period_days),\n            'engagement_metrics': self._calculate_engagement(user_id, period_days),\n            'therapeutic_alliance': self._assess_therapeutic_alliance(user_id),\n            'recommendations': self._generate_recommendations(user_id, period_days),\n            'celebrate': self._identify_wins(user_id, period_days)\n        }\n        \n        return report\n    \n    def set_goal(self, user_id: str, goal_data: Dict) -\u003e Dict:\n        \"\"\"Set a SMART goal for user\"\"\"\n        goal = {\n            'goal_id': f\"goal_{datetime.now().timestamp()}\",\n            'user_id': user_id,\n            'category': goal_data.get('category'),\n            'title': goal_data.get('title'),\n            'description': goal_data.get('description'),\n            'specific': goal_data.get('specific_criteria'),\n            'measurable': goal_data.get('measurement_method'),\n            'achievable': goal_data.get('achievability_assessment'),\n            'relevant': goal_data.get('relevance_to_treatment'),\n            'time_bound': goal_data.get('target_date'),\n            'milestones': self._create_goal_milestones(goal_data),\n            'action_steps': goal_data.get('action_steps', []),\n            'potential_obstacles': goal_data.get('obstacles', []),\n            'support_needed': goal_data.get('support', []),\n            'created_date': datetime.now().isoformat(),\n            'status': 'active'\n        }\n        \n        return goal\n    \n    def update_goal_progress(self, goal_id: str, progress_data: Dict) -\u003e Dict:\n        \"\"\"Update progress on a specific goal\"\"\"\n        update = {\n            'goal_id': goal_id,\n            'update_date': datetime.now().isoformat(),\n            'progress_percentage': progress_data.get('percentage', 0),\n            'milestones_completed': progress_data.get('completed_milestones', []),\n            'challenges_faced': progress_data.get('challenges', []),\n            'strategies_used': progress_data.get('strategies', []),\n            'support_received': progress_data.get('support', []),\n            'reflection': progress_data.get('reflection', ''),\n            'next_steps': progress_data.get('next_steps', []),\n            'confidence_level': progress_data.get('confidence', 5)\n        }\n        \n        return update\n    \n    def _generate_smart_goals(self, assessment_data: Dict) -\u003e List[Dict]:\n        \"\"\"Generate SMART goals based on assessment\"\"\"\n        goals = []\n        concerns = assessment_data.get('concerns', [])\n        \n        if 'anxiety' in concerns:\n            goals.append({\n                'title': 'Reduce anxiety symptoms',\n                'specific': 'Decrease anxiety attacks from daily to weekly',\n                'measurable': 'Track anxiety episodes and intensity daily',\n                'achievable': 'Use learned coping techniques',\n                'relevant': 'Primary presenting concern',\n                'time_bound': '3 months',\n                'category': 'anxiety_management'\n            })\n        \n        if 'depression' in concerns:\n            goals.append({\n                'title': 'Improve mood and energy',\n                'specific': 'Engage in 3 pleasant activities per week',\n                'measurable': 'Activity log and mood ratings',\n                'achievable': 'Start with simple activities',\n                'relevant': 'Addresses behavioral activation',\n                'time_bound': '6 weeks',\n                'category': 'depression_recovery'\n            })\n        \n        return goals\n    \n    def _select_interventions(self, assessment_data: Dict) -\u003e List[Dict]:\n        \"\"\"Select appropriate interventions\"\"\"\n        interventions = []\n        concerns = assessment_data.get('concerns', [])\n        \n        intervention_map = {\n            'anxiety': [\n                {'name': 'CBT for anxiety', 'frequency': 'weekly sessions'},\n                {'name': 'Mindfulness practice', 'frequency': 'daily 10 min'},\n                {'name': 'Exposure exercises', 'frequency': 'as assigned'}\n            ],\n            'depression': [\n                {'name': 'Behavioral activation', 'frequency': 'daily planning'},\n                {'name': 'Cognitive restructuring', 'frequency': 'weekly'},\n                {'name': 'Social connection', 'frequency': '2-3x per week'}\n            ],\n            'relationships': [\n                {'name': 'Communication skills', 'frequency': 'practice daily'},\n                {'name': 'Couples therapy', 'frequency': 'bi-weekly'},\n                {'name': 'Attachment work', 'frequency': 'ongoing'}\n            ]\n        }\n        \n        for concern in concerns:\n            if concern in intervention_map:\n                interventions.extend(intervention_map[concern])\n        \n        return interventions\n    \n    def _create_milestones(self, assessment_data: Dict) -\u003e List[Dict]:\n        \"\"\"Create treatment milestones\"\"\"\n        milestones = [\n            {\n                'week': 2,\n                'description': 'Complete initial assessment and establish therapeutic alliance',\n                'indicators': ['Comfort sharing', 'Understanding of process']\n            },\n            {\n                'week': 4,\n                'description': 'Master basic coping techniques',\n                'indicators': ['Can identify triggers', 'Uses 2+ coping strategies']\n            },\n            {\n                'week': 8,\n                'description': 'Show measurable symptom improvement',\n                'indicators': ['20% reduction in primary symptoms', 'Improved functioning']\n            },\n            {\n                'week': 12,\n                'description': 'Integrate skills into daily life',\n                'indicators': ['Automatic use of skills', 'Maintained improvement']\n            }\n        ]\n        \n        return milestones\n    \n    def _set_review_schedule(self, assessment_data: Dict) -\u003e Dict:\n        \"\"\"Set review schedule for treatment plan\"\"\"\n        severity = assessment_data.get('severity', 'moderate')\n        \n        schedules = {\n            'mild': {'frequency': 'monthly', 'first_review': 4},\n            'moderate': {'frequency': 'bi-weekly', 'first_review': 2},\n            'severe': {'frequency': 'weekly', 'first_review': 1}\n        }\n        \n        return schedules.get(severity, schedules['moderate'])\n    \n    def _define_success_metrics(self, assessment_data: Dict) -\u003e Dict:\n        \"\"\"Define success metrics for treatment\"\"\"\n        return {\n            'primary_outcomes': [\n                'Symptom reduction of 50% or more',\n                'Improved daily functioning',\n                'Achievement of 80% of treatment goals'\n            ],\n            'secondary_outcomes': [\n                'Improved relationships',\n                'Better quality of life',\n                'Increased self-efficacy'\n            ],\n            'measurement_tools': [\n                'Weekly mood tracking',\n                'Monthly assessments',\n                'Goal achievement reviews'\n            ]\n        }\n    \n    def _identify_breakthroughs(self, session_data: Dict) -\u003e List[str]:\n        \"\"\"Identify breakthrough moments in session\"\"\"\n        breakthroughs = []\n        \n        # Analyze session content for breakthrough indicators\n        content = session_data.get('content', '').lower()\n        \n        breakthrough_indicators = [\n            ('realized', 'New realization or insight'),\n            ('understand now', 'Improved understanding'),\n            ('feel different', 'Emotional shift'),\n            ('never thought', 'Perspective change'),\n            ('breakthrough', 'Explicit breakthrough')\n        ]\n        \n        for indicator, description in breakthrough_indicators:\n            if indicator in content:\n                breakthroughs.append(description)\n        \n        return breakthroughs\n    \n    def _identify_challenges(self, session_data: Dict) -\u003e List[str]:\n        \"\"\"Identify challenges from session\"\"\"\n        challenges = []\n        \n        # Simplified challenge detection\n        resistance_indicators = ['but', 'cant', 'wont', 'difficult', 'hard', 'struggle']\n        content = session_data.get('content', '').lower()\n        \n        for indicator in resistance_indicators:\n            if indicator in content:\n                challenges.append('Resistance or difficulty expressed')\n                break\n        \n        return challenges\n    \n    def _suggest_next_focus(self, session_data: Dict) -\u003e List[str]:\n        \"\"\"Suggest focus areas for next session\"\"\"\n        suggestions = []\n        \n        # Based on session content, suggest next steps\n        if session_data.get('homework'):\n            suggestions.append('Review homework completion and obstacles')\n        \n        if session_data.get('breakthroughs'):\n            suggestions.append('Deepen understanding of recent insights')\n        \n        if session_data.get('challenges'):\n            suggestions.append('Address resistance and explore barriers')\n        \n        return suggestions or ['Continue current therapeutic direction']\n    \n    def _calculate_overall_progress(self, user_id: str, period_days: int) -\u003e Dict:\n        \"\"\"Calculate overall treatment progress\"\"\"\n        return {\n            'percentage': 65,\n            'trajectory': 'improving',\n            'pace': 'on_track',\n            'areas_of_growth': ['emotional awareness', 'coping skills', 'self-compassion'],\n            'areas_needing_focus': ['behavioral activation', 'social engagement']\n        }\n    \n    def _assess_goal_achievement(self, user_id: str, period_days: int) -\u003e List[Dict]:\n        \"\"\"Assess achievement of treatment goals\"\"\"\n        return [\n            {\n                'goal': 'Reduce anxiety symptoms',\n                'progress': 70,\n                'status': 'on_track',\n                'evidence': ['Fewer panic attacks', 'Using breathing techniques']\n            },\n            {\n                'goal': 'Improve sleep quality',\n                'progress': 85,\n                'status': 'ahead_of_schedule',\n                'evidence': ['7 hours average sleep', 'Better sleep hygiene']\n            }\n        ]\n    \n    def _analyze_symptom_trajectory(self, user_id: str, period_days: int) -\u003e Dict:\n        \"\"\"Analyze trajectory of symptoms\"\"\"\n        return {\n            'anxiety': {'start': 8, 'current': 5, 'trend': 'decreasing'},\n            'depression': {'start': 7, 'current': 4, 'trend': 'decreasing'},\n            'stress': {'start': 9, 'current': 6, 'trend': 'decreasing'},\n            'overall_improvement': 40\n        }\n    \n    def _assess_skill_development(self, user_id: str, period_days: int) -\u003e Dict:\n        \"\"\"Assess development of therapeutic skills\"\"\"\n        return {\n            'skills_learned': [\n                {'skill': 'Deep breathing', 'mastery': 90},\n                {'skill': 'Thought challenging', 'mastery': 70},\n                {'skill': 'Mindfulness', 'mastery': 60}\n            ],\n            'skills_in_progress': ['Emotion regulation', 'Assertive communication'],\n            'recommended_next': ['Progressive muscle relaxation', 'Values clarification']\n        }\n    \n    def _calculate_engagement(self, user_id: str, period_days: int) -\u003e Dict:\n        \"\"\"Calculate treatment engagement metrics\"\"\"\n        return {\n            'session_attendance': 95,\n            'homework_completion': 80,\n            'activity_participation': 75,\n            'journaling_consistency': 85,\n            'overall_engagement': 'high'\n        }\n    \n    def _assess_therapeutic_alliance(self, user_id: str) -\u003e Dict:\n        \"\"\"Assess quality of therapeutic relationship\"\"\"\n        return {\n            'trust_level': 'high',\n            'collaboration': 'excellent',\n            'openness': 'improving',\n            'feedback': 'Client reports feeling heard and supported'\n        }\n    \n    def _generate_recommendations(self, user_id: str, period_days: int) -\u003e List[str]:\n        \"\"\"Generate treatment recommendations\"\"\"\n        return [\n            \"Continue current CBT approach with increased focus on behavioral activation\",\n            \"Introduce advanced emotion regulation techniques\",\n            \"Consider group therapy for additional peer support\",\n            \"Gradually reduce session frequency as symptoms improve\",\n            \"Develop relapse prevention plan\"\n        ]\n    \n    def _identify_wins(self, user_id: str, period_days: int) -\u003e List[str]:\n        \"\"\"Identify victories to celebrate\"\"\"\n        return [\n            \"30 days of consistent mood tracking!\",\n            \"Successfully used coping skills during work presentation\",\n            \"Improved sleep quality by 40%\",\n            \"Reconnected with two supportive friends\",\n            \"Completed all therapy homework for 3 weeks straight\"\n        ]\n    \n    def _create_goal_milestones(self, goal_data: Dict) -\u003e List[Dict]:\n        \"\"\"Create milestones for a specific goal\"\"\"\n        # Calculate milestone dates based on goal timeline\n        target_date = goal_data.get('target_date')\n        milestones = []\n        \n        # Create 4 evenly spaced milestones\n        for i in range(1, 5):\n            milestone = {\n                'number': i,\n                'description': f'Milestone {i} for {goal_data.get(\"title\")}',\n                'target_date': 'calculated_date',\n                'criteria': f'{i * 25}% progress toward goal',\n                'status': 'pending'\n            }\n            milestones.append(milestone)\n        \n        return milestones",
                "research_manager.py": "\"\"\"\nResearch and Dataset Management System for Mind Mend\nHandles research papers, clinical datasets, and knowledge base for early diagnosis\n\"\"\"\n\nfrom datetime import datetime\nfrom typing import List, Dict, Any, Optional\nimport logging\nfrom sqlalchemy import Column, Integer, String, Text, DateTime, Float, Boolean, ForeignKey, JSON\nfrom sqlalchemy.orm import relationship\ntry:\n    from models.database import db\nexcept ImportError:\n    try:\n        from app import db\n    except ImportError:\n        # Handle circular import - create mock db for testing\n        class MockDB:\n            Model = object\n        db = MockDB()\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nlogger = logging.getLogger(__name__)\n\nclass ResearchPaper(db.Model):\n    \"\"\"Model for storing research papers and studies\"\"\"\n    __tablename__ = 'research_papers'\n    \n    id = Column(Integer, primary_key=True)\n    title = Column(String(500), nullable=False)\n    authors = Column(Text)\n    abstract = Column(Text)\n    full_text = Column(Text)\n    publication_date = Column(DateTime)\n    journal = Column(String(200))\n    doi = Column(String(100), unique=True)\n    pmid = Column(String(50))\n    category = Column(String(100))  # e.g., 'early_diagnosis', 'conflict_resolution', 'therapy_methods'\n    tags = Column(JSON)  # List of relevant tags\n    file_path = Column(String(500))  # Path to PDF if uploaded\n    embeddings = Column(JSON)  # Text embeddings for similarity search\n    relevance_score = Column(Float, default=0.0)\n    citation_count = Column(Integer, default=0)\n    added_date = Column(DateTime, default=datetime.utcnow)\n    added_by = Column(String(100))\n    validated = Column(Boolean, default=False)\n    \n    # Relationships\n    datasets = relationship(\"ClinicalDataset\", back_populates=\"research_paper\")\n    insights = relationship(\"ResearchInsight\", back_populates=\"paper\")\n\nclass ClinicalDataset(db.Model):\n    \"\"\"Model for storing clinical datasets\"\"\"\n    __tablename__ = 'clinical_datasets'\n    \n    id = Column(Integer, primary_key=True)\n    name = Column(String(200), nullable=False)\n    description = Column(Text)\n    data_type = Column(String(100))  # e.g., 'behavioral', 'physiological', 'survey', 'imaging'\n    size = Column(Integer)  # Number of records\n    features = Column(JSON)  # List of features/variables\n    target_variable = Column(String(200))\n    collection_period = Column(String(100))\n    institution = Column(String(300))\n    ethical_approval = Column(String(200))\n    file_path = Column(String(500))\n    format = Column(String(50))  # e.g., 'csv', 'json', 'sql'\n    \n    # Analysis metadata\n    preprocessing_notes = Column(Text)\n    statistical_summary = Column(JSON)\n    quality_score = Column(Float)\n    \n    # Privacy and compliance\n    anonymized = Column(Boolean, default=True)\n    consent_type = Column(String(100))\n    restrictions = Column(Text)\n    \n    # Relationships\n    paper_id = Column(Integer, ForeignKey('research_papers.id'))\n    research_paper = relationship(\"ResearchPaper\", back_populates=\"datasets\")\n    analyses = relationship(\"DataAnalysis\", back_populates=\"dataset\")\n    \n    added_date = Column(DateTime, default=datetime.utcnow)\n    last_updated = Column(DateTime, default=datetime.utcnow)\n\nclass ResearchInsight(db.Model):\n    \"\"\"Model for storing extracted insights from research\"\"\"\n    __tablename__ = 'research_insights'\n    \n    id = Column(Integer, primary_key=True)\n    paper_id = Column(Integer, ForeignKey('research_papers.id'))\n    insight_type = Column(String(100))  # e.g., 'diagnostic_marker', 'intervention', 'risk_factor'\n    title = Column(String(300))\n    description = Column(Text)\n    confidence_level = Column(Float)  # 0-1 confidence score\n    clinical_relevance = Column(String(50))  # 'high', 'medium', 'low'\n    applicable_conditions = Column(JSON)  # List of mental health conditions\n    evidence_strength = Column(String(50))  # 'strong', 'moderate', 'preliminary'\n    implementation_notes = Column(Text)\n    \n    # Relationships\n    paper = relationship(\"ResearchPaper\", back_populates=\"insights\")\n    \n    created_date = Column(DateTime, default=datetime.utcnow)\n    validated_by = Column(String(100))\n    validation_date = Column(DateTime)\n\nclass DataAnalysis(db.Model):\n    \"\"\"Model for storing dataset analysis results\"\"\"\n    __tablename__ = 'data_analyses'\n    \n    id = Column(Integer, primary_key=True)\n    dataset_id = Column(Integer, ForeignKey('clinical_datasets.id'))\n    analysis_type = Column(String(100))  # e.g., 'predictive_model', 'correlation', 'clustering'\n    methodology = Column(Text)\n    results = Column(JSON)\n    accuracy_metrics = Column(JSON)\n    key_findings = Column(Text)\n    clinical_implications = Column(Text)\n    limitations = Column(Text)\n    \n    # Model information if applicable\n    model_type = Column(String(100))\n    model_parameters = Column(JSON)\n    model_path = Column(String(500))\n    \n    # Relationships\n    dataset = relationship(\"ClinicalDataset\", back_populates=\"analyses\")\n    \n    performed_date = Column(DateTime, default=datetime.utcnow)\n    performed_by = Column(String(100))\n\nclass ResearchManager:\n    \"\"\"Manager class for research and dataset operations\"\"\"\n    \n    def __init__(self):\n        self.vectorizer = TfidfVectorizer(max_features=1000, stop_words='english')\n        self.research_cache = {}\n        self.insight_templates = self._load_insight_templates()\n        \n    def _load_insight_templates(self):\n        \"\"\"Load templates for extracting insights from research\"\"\"\n        return {\n            'early_diagnosis': {\n                'markers': ['symptom', 'indicator', 'predictor', 'biomarker', 'risk factor'],\n                'methods': ['screening', 'assessment', 'detection', 'identification'],\n                'outcomes': ['accuracy', 'sensitivity', 'specificity', 'prediction']\n            },\n            'conflict_resolution': {\n                'techniques': ['communication', 'mediation', 'negotiation', 'de-escalation'],\n                'strategies': ['approach', 'intervention', 'technique', 'method'],\n                'effectiveness': ['outcome', 'success rate', 'improvement', 'resolution']\n            },\n            'therapy_methods': {\n                'approaches': ['CBT', 'DBT', 'EMDR', 'mindfulness', 'psychodynamic'],\n                'efficacy': ['effective', 'outcome', 'improvement', 'response'],\n                'populations': ['adults', 'children', 'couples', 'groups', 'specific conditions']\n            }\n        }\n    \n    def add_research_paper(self, paper_data: Dict[str, Any]) -\u003e ResearchPaper:\n        \"\"\"Add a new research paper to the knowledge base\"\"\"\n        try:\n            # Create paper object\n            paper = ResearchPaper(\n                title=paper_data['title'],\n                authors=paper_data.get('authors', ''),\n                abstract=paper_data.get('abstract', ''),\n                full_text=paper_data.get('full_text', ''),\n                publication_date=paper_data.get('publication_date'),\n                journal=paper_data.get('journal', ''),\n                doi=paper_data.get('doi', ''),\n                pmid=paper_data.get('pmid', ''),\n                category=paper_data.get('category', 'general'),\n                tags=paper_data.get('tags', []),\n                file_path=paper_data.get('file_path', ''),\n                added_by=paper_data.get('added_by', 'system')\n            )\n            \n            # Generate embeddings for similarity search\n            if paper.abstract or paper.full_text:\n                text = f\"{paper.title} {paper.abstract} {paper.full_text[:1000]}\"\n                paper.embeddings = self._generate_embeddings(text)\n            \n            # Calculate initial relevance score\n            paper.relevance_score = self._calculate_relevance_score(paper)\n            \n            db.session.add(paper)\n            db.session.commit()\n            \n            # Extract insights asynchronously\n            self._extract_insights_from_paper(paper)\n            \n            logger.info(f\"Added research paper: {paper.title}\")\n            return paper\n            \n        except Exception as e:\n            logger.error(f\"Error adding research paper: {str(e)}\")\n            db.session.rollback()\n            raise\n    \n    def add_clinical_dataset(self, dataset_data: Dict[str, Any]) -\u003e ClinicalDataset:\n        \"\"\"Add a new clinical dataset\"\"\"\n        try:\n            dataset = ClinicalDataset(\n                name=dataset_data['name'],\n                description=dataset_data.get('description', ''),\n                data_type=dataset_data.get('data_type', 'general'),\n                size=dataset_data.get('size', 0),\n                features=dataset_data.get('features', []),\n                target_variable=dataset_data.get('target_variable', ''),\n                collection_period=dataset_data.get('collection_period', ''),\n                institution=dataset_data.get('institution', ''),\n                ethical_approval=dataset_data.get('ethical_approval', ''),\n                file_path=dataset_data.get('file_path', ''),\n                format=dataset_data.get('format', 'csv'),\n                paper_id=dataset_data.get('paper_id'),\n                anonymized=dataset_data.get('anonymized', True),\n                consent_type=dataset_data.get('consent_type', 'informed_consent')\n            )\n            \n            # Generate quality score\n            dataset.quality_score = self._assess_dataset_quality(dataset)\n            \n            db.session.add(dataset)\n            db.session.commit()\n            \n            logger.info(f\"Added clinical dataset: {dataset.name}\")\n            return dataset\n            \n        except Exception as e:\n            logger.error(f\"Error adding clinical dataset: {str(e)}\")\n            db.session.rollback()\n            raise\n    \n    def search_research(self, query: str, category: Optional[str] = None, \n                       limit: int = 10) -\u003e List[Dict[str, Any]]:\n        \"\"\"Search research papers using natural language query\"\"\"\n        try:\n            # Get all papers\n            papers_query = ResearchPaper.query\n            if category:\n                papers_query = papers_query.filter_by(category=category)\n            \n            papers = papers_query.all()\n            \n            if not papers:\n                return []\n            \n            # Generate query embedding\n            query_embedding = self._generate_embeddings(query)\n            \n            # Calculate similarity scores\n            results = []\n            for paper in papers:\n                if paper.embeddings:\n                    similarity = self._calculate_similarity(query_embedding, paper.embeddings)\n                    results.append({\n                        'paper': paper,\n                        'similarity': similarity\n                    })\n            \n            # Sort by similarity and return top results\n            results.sort(key=lambda x: x['similarity'], reverse=True)\n            \n            return [{\n                'id': r['paper'].id,\n                'title': r['paper'].title,\n                'authors': r['paper'].authors,\n                'abstract': r['paper'].abstract[:500] + '...' if r['paper'].abstract else '',\n                'category': r['paper'].category,\n                'tags': r['paper'].tags,\n                'relevance_score': r['paper'].relevance_score,\n                'similarity_score': r['similarity'],\n                'publication_date': r['paper'].publication_date.isoformat() if r['paper'].publication_date else None\n            } for r in results[:limit]]\n            \n        except Exception as e:\n            logger.error(f\"Error searching research: {str(e)}\")\n            return []\n    \n    def get_insights_for_condition(self, condition: str, \n                                 insight_type: Optional[str] = None) -\u003e List[Dict[str, Any]]:\n        \"\"\"Get research insights for a specific mental health condition\"\"\"\n        try:\n            insights_query = ResearchInsight.query\n            \n            # Filter by condition\n            insights = []\n            for insight in insights_query.all():\n                if condition.lower() in [c.lower() for c in insight.applicable_conditions or []]:\n                    if not insight_type or insight.insight_type == insight_type:\n                        insights.append(insight)\n            \n            # Sort by confidence and clinical relevance\n            insights.sort(key=lambda x: (\n                x.confidence_level or 0,\n                {'high': 3, 'medium': 2, 'low': 1}.get(x.clinical_relevance, 0)\n            ), reverse=True)\n            \n            return [{\n                'id': insight.id,\n                'type': insight.insight_type,\n                'title': insight.title,\n                'description': insight.description,\n                'confidence': insight.confidence_level,\n                'relevance': insight.clinical_relevance,\n                'evidence_strength': insight.evidence_strength,\n                'paper_title': insight.paper.title if insight.paper else None,\n                'implementation_notes': insight.implementation_notes\n            } for insight in insights]\n            \n        except Exception as e:\n            logger.error(f\"Error getting insights: {str(e)}\")\n            return []\n    \n    def analyze_dataset_for_patterns(self, dataset_id: int, \n                                   analysis_type: str = 'correlation') -\u003e Dict[str, Any]:\n        \"\"\"Analyze a clinical dataset for patterns relevant to mental health\"\"\"\n        try:\n            dataset = ClinicalDataset.query.get(dataset_id)\n            if not dataset:\n                return {'error': 'Dataset not found'}\n            \n            # Placeholder for actual analysis\n            # In production, this would load the dataset and perform real analysis\n            analysis_result = {\n                'dataset_name': dataset.name,\n                'analysis_type': analysis_type,\n                'key_findings': [\n                    'Identified 3 key predictors for early anxiety detection',\n                    'Found significant correlation between sleep patterns and mood',\n                    'Discovered clustering of symptoms in specific age groups'\n                ],\n                'visualizations': [],\n                'recommendations': [\n                    'Implement screening for identified risk factors',\n                    'Consider sleep quality in initial assessments',\n                    'Tailor interventions based on age group patterns'\n                ]\n            }\n            \n            # Save analysis results\n            analysis = DataAnalysis(\n                dataset_id=dataset_id,\n                analysis_type=analysis_type,\n                results=analysis_result,\n                key_findings='\\n'.join(analysis_result['key_findings']),\n                performed_by='system'\n            )\n            db.session.add(analysis)\n            db.session.commit()\n            \n            return analysis_result\n            \n        except Exception as e:\n            logger.error(f\"Error analyzing dataset: {str(e)}\")\n            return {'error': str(e)}\n    \n    def get_early_diagnosis_indicators(self, condition: str) -\u003e List[Dict[str, Any]]:\n        \"\"\"Get early diagnosis indicators for a specific condition\"\"\"\n        papers = self.search_research(\n            f\"early diagnosis indicators {condition}\",\n            category='early_diagnosis'\n        )\n        \n        insights = self.get_insights_for_condition(\n            condition,\n            insight_type='diagnostic_marker'\n        )\n        \n        return {\n            'condition': condition,\n            'research_papers': papers[:5],\n            'diagnostic_markers': insights,\n            'recommended_assessments': self._get_recommended_assessments(condition),\n            'risk_factors': self._get_risk_factors(condition)\n        }\n    \n    def get_conflict_resolution_strategies(self, conflict_type: str) -\u003e Dict[str, Any]:\n        \"\"\"Get evidence-based conflict resolution strategies\"\"\"\n        papers = self.search_research(\n            f\"conflict resolution {conflict_type}\",\n            category='conflict_resolution'\n        )\n        \n        strategies = []\n        for paper in papers[:5]:\n            # Extract strategies from paper insights\n            paper_insights = ResearchInsight.query.filter_by(\n                paper_id=paper['id'],\n                insight_type='intervention'\n            ).all()\n            \n            for insight in paper_insights:\n                strategies.append({\n                    'strategy': insight.title,\n                    'description': insight.description,\n                    'effectiveness': insight.confidence_level,\n                    'source': paper['title']\n                })\n        \n        return {\n            'conflict_type': conflict_type,\n            'evidence_based_strategies': strategies,\n            'recommended_approaches': self._get_conflict_approaches(conflict_type),\n            'success_factors': self._get_success_factors(conflict_type)\n        }\n    \n    def _generate_embeddings(self, text: str) -\u003e List[float]:\n        \"\"\"Generate text embeddings for similarity search\"\"\"\n        try:\n            # Simple TF-IDF based embeddings\n            # In production, use more sophisticated embeddings (e.g., BERT)\n            if not hasattr(self, '_fitted_vectorizer'):\n                # Fit on a sample if not already fitted\n                sample_texts = [\"mental health\", \"therapy\", \"diagnosis\", \"treatment\"]\n                self.vectorizer.fit(sample_texts)\n                self._fitted_vectorizer = True\n            \n            vector = self.vectorizer.transform([text]).toarray()[0]\n            return vector.tolist()\n        except Exception:\n            return [0.0] * 100  # Return zero vector on error\n    \n    def _calculate_similarity(self, embedding1: List[float], \n                            embedding2: List[float]) -\u003e float:\n        \"\"\"Calculate cosine similarity between embeddings\"\"\"\n        try:\n            sim = cosine_similarity(\n                np.array(embedding1).reshape(1, -1),\n                np.array(embedding2).reshape(1, -1)\n            )[0][0]\n            return float(sim)\n        except Exception:\n            return 0.0\n    \n    def _calculate_relevance_score(self, paper: ResearchPaper) -\u003e float:\n        \"\"\"Calculate relevance score for a research paper\"\"\"\n        score = 0.0\n        \n        # Recency bonus\n        if paper.publication_date:\n            years_old = (datetime.utcnow() - paper.publication_date).days / 365\n            if years_old \u003c 2:\n                score += 0.3\n            elif years_old \u003c 5:\n                score += 0.2\n            elif years_old \u003c 10:\n                score += 0.1\n        \n        # Category relevance\n        priority_categories = ['early_diagnosis', 'conflict_resolution', 'therapy_methods']\n        if paper.category in priority_categories:\n            score += 0.2\n        \n        # Citation impact\n        if paper.citation_count:\n            if paper.citation_count \u003e 100:\n                score += 0.3\n            elif paper.citation_count \u003e 50:\n                score += 0.2\n            elif paper.citation_count \u003e 10:\n                score += 0.1\n        \n        # Tag relevance\n        important_tags = ['evidence-based', 'meta-analysis', 'clinical-trial', 'systematic-review']\n        if paper.tags:\n            matching_tags = len([t for t in paper.tags if t in important_tags])\n            score += min(matching_tags * 0.1, 0.3)\n        \n        return min(score, 1.0)\n    \n    def _assess_dataset_quality(self, dataset: ClinicalDataset) -\u003e float:\n        \"\"\"Assess quality score of a clinical dataset\"\"\"\n        score = 0.0\n        \n        # Size factor\n        if dataset.size:\n            if dataset.size \u003e 1000:\n                score += 0.2\n            elif dataset.size \u003e 500:\n                score += 0.15\n            elif dataset.size \u003e 100:\n                score += 0.1\n        \n        # Ethical approval\n        if dataset.ethical_approval:\n            score += 0.2\n        \n        # Anonymization\n        if dataset.anonymized:\n            score += 0.15\n        \n        # Feature completeness\n        if dataset.features and len(dataset.features) \u003e 10:\n            score += 0.15\n        \n        # Institution credibility\n        if dataset.institution:\n            score += 0.1\n        \n        # Format accessibility\n        if dataset.format in ['csv', 'json']:\n            score += 0.1\n        \n        # Documentation\n        if dataset.description and len(dataset.description) \u003e 100:\n            score += 0.1\n        \n        return min(score, 1.0)\n    \n    def _extract_insights_from_paper(self, paper: ResearchPaper):\n        \"\"\"Extract insights from research paper using NLP\"\"\"\n        # This would use NLP to extract insights\n        # For now, creating placeholder insights\n        \n        if 'early' in paper.title.lower() or 'diagnosis' in paper.title.lower():\n            insight = ResearchInsight(\n                paper_id=paper.id,\n                insight_type='diagnostic_marker',\n                title=f\"Early indicators from {paper.title[:50]}...\",\n                description=\"Key early diagnosis indicators identified in this research\",\n                confidence_level=0.8,\n                clinical_relevance='high',\n                applicable_conditions=['anxiety', 'depression'],\n                evidence_strength='moderate'\n            )\n            db.session.add(insight)\n        \n        db.session.commit()\n    \n    def _get_recommended_assessments(self, condition: str) -\u003e List[Dict[str, str]]:\n        \"\"\"Get recommended assessments for a condition\"\"\"\n        assessments = {\n            'anxiety': [\n                {'name': 'GAD-7', 'description': 'Generalized Anxiety Disorder 7-item scale'},\n                {'name': 'BAI', 'description': 'Beck Anxiety Inventory'},\n                {'name': 'STAI', 'description': 'State-Trait Anxiety Inventory'}\n            ],\n            'depression': [\n                {'name': 'PHQ-9', 'description': 'Patient Health Questionnaire-9'},\n                {'name': 'BDI-II', 'description': 'Beck Depression Inventory-II'},\n                {'name': 'HAM-D', 'description': 'Hamilton Depression Rating Scale'}\n            ],\n            'ptsd': [\n                {'name': 'PCL-5', 'description': 'PTSD Checklist for DSM-5'},\n                {'name': 'CAPS-5', 'description': 'Clinician-Administered PTSD Scale'},\n                {'name': 'IES-R', 'description': 'Impact of Event Scale-Revised'}\n            ]\n        }\n        return assessments.get(condition.lower(), [])\n    \n    def _get_risk_factors(self, condition: str) -\u003e List[str]:\n        \"\"\"Get risk factors for a condition\"\"\"\n        risk_factors = {\n            'anxiety': [\n                'Family history of anxiety disorders',\n                'Chronic stress exposure',\n                'Traumatic life events',\n                'Substance use',\n                'Medical conditions'\n            ],\n            'depression': [\n                'Previous depressive episodes',\n                'Family history of depression',\n                'Chronic illness',\n                'Social isolation',\n                'Major life changes'\n            ]\n        }\n        return risk_factors.get(condition.lower(), [])\n    \n    def _get_conflict_approaches(self, conflict_type: str) -\u003e List[Dict[str, str]]:\n        \"\"\"Get conflict resolution approaches\"\"\"\n        approaches = {\n            'couple': [\n                {'name': 'Gottman Method', 'description': 'Research-based approach for couples'},\n                {'name': 'EFT', 'description': 'Emotionally Focused Therapy'},\n                {'name': 'Imago Therapy', 'description': 'Dialogue-based relationship therapy'}\n            ],\n            'family': [\n                {'name': 'Structural Family Therapy', 'description': 'Focus on family organization'},\n                {'name': 'Strategic Family Therapy', 'description': 'Problem-focused interventions'},\n                {'name': 'Narrative Therapy', 'description': 'Reauthoring family stories'}\n            ]\n        }\n        return approaches.get(conflict_type.lower(), [])\n    \n    def _get_success_factors(self, conflict_type: str) -\u003e List[str]:\n        \"\"\"Get success factors for conflict resolution\"\"\"\n        return [\n            'Active listening and validation',\n            'Clear communication guidelines',\n            'Mutual respect and empathy',\n            'Focus on solutions rather than blame',\n            'Professional mediation when needed'\n        ]\n\n# Create singleton instance\nresearch_manager = ResearchManager()",
                "security_roles.py": "\"\"\"\nRole-Based Security System for Mind Mend\n=======================================\nImplements different security classes for Admin, Management, and Counselors\n\"\"\"\n\nfrom functools import wraps\nfrom flask import session, abort, request\nimport hashlib\nimport secrets\nfrom datetime import datetime, timedelta\n\nclass SecurityRoles:\n    # Define role hierarchy and permissions\n    ROLES = {\n        'super_admin': {\n            'level': 100,\n            'permissions': [\n                'view_all_data', 'edit_all_data', 'delete_all_data',\n                'manage_api_keys', 'manage_platform_settings', 'manage_users',\n                'view_financial_data', 'manage_counselors', 'system_configuration',\n                'deploy_updates', 'access_logs', 'manage_security', 'fraud_detection'\n            ],\n            'session_timeout': 30,  # minutes\n            'require_2fa': True,\n            'ip_whitelist': True\n        },\n        'admin': {\n            'level': 90,\n            'permissions': [\n                'view_all_data', 'edit_most_data', 'manage_users',\n                'view_financial_data', 'manage_counselors', 'access_logs',\n                'fraud_detection', 'generate_reports'\n            ],\n            'session_timeout': 60,\n            'require_2fa': True,\n            'ip_whitelist': False\n        },\n        'manager': {\n            'level': 70,\n            'permissions': [\n                'view_user_data', 'edit_user_data', 'manage_counselors',\n                'view_reports', 'manage_appointments', 'view_analytics',\n                'handle_support_tickets'\n            ],\n            'session_timeout': 120,\n            'require_2fa': False,\n            'ip_whitelist': False\n        },\n        'counselor': {\n            'level': 50,\n            'permissions': [\n                'view_assigned_patients', 'edit_patient_notes', 'conduct_sessions',\n                'view_patient_history', 'create_treatment_plans', 'access_resources',\n                'submit_reports'\n            ],\n            'session_timeout': 240,\n            'require_2fa': False,\n            'ip_whitelist': False\n        },\n        'patient': {\n            'level': 10,\n            'permissions': [\n                'view_own_data', 'book_appointments', 'access_sessions',\n                'view_progress', 'update_profile', 'access_resources'\n            ],\n            'session_timeout': 480,\n            'require_2fa': False,\n            'ip_whitelist': False\n        }\n    }\n    \n    # Audit log for security events\n    security_audit_log = []\n    \n    @classmethod\n    def check_permission(cls, user_role, permission):\n        \"\"\"Check if a role has a specific permission\"\"\"\n        if user_role not in cls.ROLES:\n            return False\n        return permission in cls.ROLES[user_role]['permissions']\n    \n    @classmethod\n    def get_role_level(cls, user_role):\n        \"\"\"Get the security level of a role\"\"\"\n        return cls.ROLES.get(user_role, {}).get('level', 0)\n    \n    @classmethod\n    def requires_role(cls, minimum_role):\n        \"\"\"Decorator to require a minimum role for access\"\"\"\n        def decorator(f):\n            @wraps(f)\n            def decorated_function(*args, **kwargs):\n                user_role = session.get('user_role', 'patient')\n                if cls.get_role_level(user_role) \u003c cls.get_role_level(minimum_role):\n                    cls.log_security_event('access_denied', {\n                        'user': session.get('user_email', 'anonymous'),\n                        'required_role': minimum_role,\n                        'user_role': user_role,\n                        'endpoint': request.endpoint\n                    })\n                    abort(403)\n                return f(*args, **kwargs)\n            return decorated_function\n        return decorator\n    \n    @classmethod\n    def requires_permission(cls, permission):\n        \"\"\"Decorator to require a specific permission\"\"\"\n        def decorator(f):\n            @wraps(f)\n            def decorated_function(*args, **kwargs):\n                user_role = session.get('user_role', 'patient')\n                if not cls.check_permission(user_role, permission):\n                    cls.log_security_event('permission_denied', {\n                        'user': session.get('user_email', 'anonymous'),\n                        'required_permission': permission,\n                        'user_role': user_role,\n                        'endpoint': request.endpoint\n                    })\n                    abort(403)\n                return f(*args, **kwargs)\n            return decorated_function\n        return decorator\n    \n    @classmethod\n    def check_session_timeout(cls, user_role):\n        \"\"\"Check if session has timed out based on role\"\"\"\n        last_activity = session.get('last_activity')\n        if not last_activity:\n            return True\n            \n        timeout_minutes = cls.ROLES.get(user_role, {}).get('session_timeout', 60)\n        timeout_delta = timedelta(minutes=timeout_minutes)\n        \n        if datetime.utcnow() - datetime.fromisoformat(last_activity) \u003e timeout_delta:\n            cls.log_security_event('session_timeout', {\n                'user': session.get('user_email', 'anonymous'),\n                'role': user_role\n            })\n            return True\n            \n        return False\n    \n    @classmethod\n    def verify_2fa_requirement(cls, user_role):\n        \"\"\"Check if 2FA is required for role\"\"\"\n        return cls.ROLES.get(user_role, {}).get('require_2fa', False)\n    \n    @classmethod\n    def verify_ip_whitelist(cls, user_role, ip_address):\n        \"\"\"Check if IP whitelisting is required and valid\"\"\"\n        if not cls.ROLES.get(user_role, {}).get('ip_whitelist', False):\n            return True\n            \n        # In production, this would check against actual whitelist\n        allowed_ips = session.get('allowed_ips', [])\n        return ip_address in allowed_ips\n    \n    @classmethod\n    def generate_secure_token(cls, length=32):\n        \"\"\"Generate a secure random token\"\"\"\n        return secrets.token_urlsafe(length)\n    \n    @classmethod\n    def hash_sensitive_data(cls, data):\n        \"\"\"Hash sensitive data for storage\"\"\"\n        return hashlib.sha256(data.encode()).hexdigest()\n    \n    @classmethod\n    def log_security_event(cls, event_type, details):\n        \"\"\"Log security events for audit trail\"\"\"\n        event = {\n            'timestamp': datetime.utcnow().isoformat(),\n            'event_type': event_type,\n            'details': details,\n            'ip_address': request.remote_addr if request else 'system',\n            'user_agent': request.headers.get('User-Agent', 'system') if request else 'system'\n        }\n        cls.security_audit_log.append(event)\n        \n        # In production, this would be stored in database\n        # For now, keep last 1000 events in memory\n        if len(cls.security_audit_log) \u003e 1000:\n            cls.security_audit_log = cls.security_audit_log[-1000:]\n    \n    @classmethod\n    def get_security_audit_log(cls, filters=None):\n        \"\"\"Get security audit log with optional filters\"\"\"\n        if not filters:\n            return cls.security_audit_log\n            \n        filtered_log = []\n        for event in cls.security_audit_log:\n            match = True\n            if 'event_type' in filters and event['event_type'] != filters['event_type']:\n                match = False\n            if 'user' in filters and event['details'].get('user') != filters['user']:\n                match = False\n            if 'date_from' in filters:\n                event_date = datetime.fromisoformat(event['timestamp'])\n                if event_date \u003c filters['date_from']:\n                    match = False\n            if 'date_to' in filters:\n                event_date = datetime.fromisoformat(event['timestamp'])\n                if event_date \u003e filters['date_to']:\n                    match = False\n                    \n            if match:\n                filtered_log.append(event)\n                \n        return filtered_log\n    \n    @classmethod\n    def enforce_password_policy(cls, password, role):\n        \"\"\"Enforce password policy based on role\"\"\"\n        min_length = {\n            'super_admin': 16,\n            'admin': 12,\n            'manager': 10,\n            'counselor': 8,\n            'patient': 8\n        }\n        \n        required_length = min_length.get(role, 8)\n        \n        if len(password) \u003c required_length:\n            return False, f\"Password must be at least {required_length} characters\"\n            \n        # Check complexity for admin roles\n        if role in ['super_admin', 'admin']:\n            if not any(c.isupper() for c in password):\n                return False, \"Password must contain uppercase letters\"\n            if not any(c.islower() for c in password):\n                return False, \"Password must contain lowercase letters\"\n            if not any(c.isdigit() for c in password):\n                return False, \"Password must contain numbers\"\n            if not any(c in '!@#$%^\u0026*()_+-=' for c in password):\n                return False, \"Password must contain special characters\"\n                \n        return True, \"Password meets requirements\"\n    \n    @classmethod\n    def get_role_dashboard_url(cls, role):\n        \"\"\"Get the appropriate dashboard URL for each role\"\"\"\n        dashboards = {\n            'super_admin': '/admin/dashboard',\n            'admin': '/admin/dashboard',\n            'manager': '/manager/dashboard',\n            'counselor': '/counselor/dashboard',\n            'patient': '/dashboard'\n        }\n        return dashboards.get(role, '/dashboard')",
                "self_care_planner.py": "\"\"\"\nSelf-care planning and wellness routines for Mind Mend platform\n\"\"\"\n\nfrom datetime import datetime\nfrom typing import Dict, List\nimport random\n\nclass SelfCarePlanner:\n    \"\"\"Personalized self-care and wellness planning\"\"\"\n    \n    def __init__(self):\n        self.self_care_categories = {\n            'physical': {\n                'activities': [\n                    'Take a walk in nature',\n                    'Do gentle stretching',\n                    'Practice yoga',\n                    'Dance to favorite music',\n                    'Take a relaxing bath',\n                    'Get a massage',\n                    'Exercise for 30 minutes',\n                    'Prepare a healthy meal'\n                ],\n                'benefits': ['Reduces tension', 'Improves energy', 'Enhances mood']\n            },\n            'emotional': {\n                'activities': [\n                    'Journal about feelings',\n                    'Practice self-compassion',\n                    'Call a supportive friend',\n                    'Watch a comfort movie',\n                    'Create art or crafts',\n                    'Listen to uplifting music',\n                    'Practice gratitude',\n                    'Cry if needed'\n                ],\n                'benefits': ['Processes emotions', 'Builds resilience', 'Improves mood']\n            },\n            'mental': {\n                'activities': [\n                    'Read a book',\n                    'Do a puzzle',\n                    'Learn something new',\n                    'Limit social media',\n                    'Practice mindfulness',\n                    'Organize your space',\n                    'Set boundaries',\n                    'Take breaks from work'\n                ],\n                'benefits': ['Reduces stress', 'Improves focus', 'Enhances clarity']\n            },\n            'social': {\n                'activities': [\n                    'Connect with loved ones',\n                    'Join a support group',\n                    'Volunteer for a cause',\n                    'Plan a social activity',\n                    'Express appreciation',\n                    'Ask for help when needed',\n                    'Set social boundaries',\n                    'Practice active listening'\n                ],\n                'benefits': ['Reduces isolation', 'Builds support', 'Improves relationships']\n            },\n            'spiritual': {\n                'activities': [\n                    'Practice meditation',\n                    'Spend time in nature',\n                    'Practice prayer or reflection',\n                    'Read inspirational texts',\n                    'Practice forgiveness',\n                    'Connect with values',\n                    'Practice acceptance',\n                    'Engage in ritual or ceremony'\n                ],\n                'benefits': ['Increases meaning', 'Provides peace', 'Enhances connection']\n            }\n        }\n        \n        self.wellness_dimensions = [\n            'sleep_hygiene',\n            'nutrition',\n            'movement',\n            'stress_management',\n            'social_connection',\n            'purpose_meaning',\n            'creativity',\n            'environment'\n        ]\n        \n        self.routine_templates = {\n            'morning': {\n                'energizing': ['stretching', 'meditation', 'healthy breakfast', 'gratitude'],\n                'calming': ['gentle wake-up', 'tea ritual', 'journaling', 'slow movement'],\n                'productive': ['exercise', 'planning', 'affirmations', 'cold shower']\n            },\n            'evening': {\n                'relaxing': ['warm bath', 'reading', 'gentle music', 'tea'],\n                'reflective': ['journaling', 'gratitude', 'meditation', 'planning tomorrow'],\n                'social': ['family time', 'phone friend', 'game night', 'shared meal']\n            },\n            'crisis': {\n                'immediate': ['breathing', 'grounding', 'safe space', 'support person'],\n                'short_term': ['gentle movement', 'comfort items', 'simple tasks', 'rest'],\n                'recovery': ['routine', 'nutrition', 'sleep', 'professional help']\n            }\n        }\n    \n    def create_personalized_plan(self, user_data: Dict) -\u003e Dict:\n        \"\"\"Create personalized self-care plan based on user needs\"\"\"\n        plan = {\n            'user_id': user_data.get('user_id'),\n            'created_date': datetime.now().isoformat(),\n            'primary_focus': self._determine_focus_areas(user_data),\n            'daily_practices': self._select_daily_practices(user_data),\n            'weekly_activities': self._plan_weekly_activities(user_data),\n            'crisis_plan': self._create_crisis_plan(user_data),\n            'accountability': self._set_accountability_measures(user_data),\n            'resources': self._gather_resources(user_data)\n        }\n        \n        return plan\n    \n    def generate_daily_routine(self, preferences: Dict) -\u003e Dict:\n        \"\"\"Generate daily self-care routine\"\"\"\n        routine = {\n            'morning': self._create_morning_routine(preferences),\n            'midday': self._create_midday_routine(preferences),\n            'evening': self._create_evening_routine(preferences),\n            'as_needed': self._create_as_needed_activities(preferences),\n            'reminders': self._set_routine_reminders(preferences)\n        }\n        \n        return routine\n    \n    def suggest_self_care_activity(self, current_state: Dict) -\u003e Dict:\n        \"\"\"Suggest immediate self-care activity based on current state\"\"\"\n        mood = current_state.get('mood', 'neutral')\n        energy = current_state.get('energy_level', 'medium')\n        time_available = current_state.get('time_minutes', 15)\n        \n        # Select appropriate activity based on state\n        if mood == 'anxious':\n            category = 'physical' if energy == 'high' else 'mental'\n        elif mood == 'sad':\n            category = 'emotional' if energy == 'low' else 'social'\n        elif mood == 'stressed':\n            category = 'mental' if time_available \u003c 20 else 'physical'\n        else:\n            category = random.choice(list(self.self_care_categories.keys()))\n        \n        activities = self.self_care_categories[category]['activities']\n        \n        # Filter by time\n        if time_available \u003c 10:\n            quick_activities = [a for a in activities if 'practice' in a.lower() or 'take' in a.lower()]\n            activity = random.choice(quick_activities) if quick_activities else activities[0]\n        else:\n            activity = random.choice(activities)\n        \n        return {\n            'activity': activity,\n            'category': category,\n            'estimated_time': self._estimate_activity_time(activity),\n            'benefits': self.self_care_categories[category]['benefits'],\n            'instructions': self._get_activity_instructions(activity),\n            'alternatives': self._get_alternative_activities(category, activity)\n        }\n    \n    def create_wellness_challenge(self, duration_days: int = 30) -\u003e Dict:\n        \"\"\"Create a wellness challenge\"\"\"\n        challenge = {\n            'name': f'{duration_days}-Day Wellness Journey',\n            'duration': duration_days,\n            'daily_challenges': [],\n            'weekly_themes': [],\n            'rewards': self._set_challenge_rewards(duration_days),\n            'tracking_method': 'daily check-ins',\n            'community_aspect': 'share progress in group'\n        }\n        \n        # Create daily challenges\n        for day in range(1, duration_days + 1):\n            daily_challenge = {\n                'day': day,\n                'primary': self._select_challenge_activity(day),\n                'bonus': self._select_bonus_activity(day),\n                'reflection_prompt': self._get_reflection_prompt(day)\n            }\n            challenge['daily_challenges'].append(daily_challenge)\n        \n        # Set weekly themes\n        weeks = (duration_days + 6) // 7\n        themes = ['Foundation', 'Growth', 'Integration', 'Mastery']\n        for week in range(weeks):\n            challenge['weekly_themes'].append({\n                'week': week + 1,\n                'theme': themes[week % len(themes)],\n                'focus': self._get_weekly_focus(week)\n            })\n        \n        return challenge\n    \n    def track_self_care(self, user_id: str, activity_data: Dict) -\u003e Dict:\n        \"\"\"Track self-care activity completion\"\"\"\n        tracking = {\n            'user_id': user_id,\n            'timestamp': datetime.now().isoformat(),\n            'activity': activity_data.get('activity'),\n            'category': activity_data.get('category'),\n            'duration_minutes': activity_data.get('duration'),\n            'mood_before': activity_data.get('mood_before'),\n            'mood_after': activity_data.get('mood_after'),\n            'effectiveness': activity_data.get('effectiveness', 5),\n            'would_repeat': activity_data.get('would_repeat', True),\n            'notes': activity_data.get('notes', ''),\n            'barriers': activity_data.get('barriers', []),\n            'streak_count': self._calculate_streak(user_id)\n        }\n        \n        # Generate insights\n        tracking['insights'] = self._generate_tracking_insights(tracking)\n        \n        return tracking\n    \n    def get_self_care_stats(self, user_id: str, period_days: int = 30) -\u003e Dict:\n        \"\"\"Get self-care statistics and insights\"\"\"\n        stats = {\n            'period': f'{period_days} days',\n            'total_activities': 45,  # Placeholder\n            'consistency_rate': 75,  # Placeholder\n            'favorite_categories': self._get_favorite_categories(user_id),\n            'most_effective': self._get_most_effective_activities(user_id),\n            'streak_data': self._get_streak_data(user_id),\n            'mood_impact': self._analyze_mood_impact(user_id),\n            'barriers_identified': self._get_common_barriers(user_id),\n            'recommendations': self._generate_recommendations(user_id),\n            'achievements': self._get_achievements(user_id)\n        }\n        \n        return stats\n    \n    def _determine_focus_areas(self, user_data: Dict) -\u003e List[str]:\n        \"\"\"Determine primary self-care focus areas\"\"\"\n        concerns = user_data.get('concerns', [])\n        focus_areas = []\n        \n        concern_to_focus = {\n            'anxiety': ['stress_management', 'physical', 'mental'],\n            'depression': ['movement', 'social_connection', 'purpose_meaning'],\n            'stress': ['stress_management', 'physical', 'spiritual'],\n            'relationships': ['social_connection', 'emotional', 'communication'],\n            'trauma': ['spiritual', 'emotional', 'physical']\n        }\n        \n        for concern in concerns:\n            if concern in concern_to_focus:\n                focus_areas.extend(concern_to_focus[concern])\n        \n        return list(set(focus_areas))[:3]  # Top 3 unique areas\n    \n    def _select_daily_practices(self, user_data: Dict) -\u003e List[Dict]:\n        \"\"\"Select daily self-care practices\"\"\"\n        practices = []\n        time_available = user_data.get('daily_time_minutes', 30)\n        \n        # Morning practice (5-10 min)\n        practices.append({\n            'time': 'morning',\n            'activity': 'mindful breathing or gratitude',\n            'duration': 5,\n            'purpose': 'start day centered'\n        })\n        \n        # Midday practice (5-10 min)\n        if time_available \u003e= 20:\n            practices.append({\n                'time': 'midday',\n                'activity': 'movement break or walk',\n                'duration': 10,\n                'purpose': 'reset energy'\n            })\n        \n        # Evening practice (10-15 min)\n        practices.append({\n            'time': 'evening',\n            'activity': 'journaling or relaxation',\n            'duration': 10,\n            'purpose': 'process day and unwind'\n        })\n        \n        return practices\n    \n    def _plan_weekly_activities(self, user_data: Dict) -\u003e List[Dict]:\n        \"\"\"Plan weekly self-care activities\"\"\"\n        activities = []\n        preferences = user_data.get('preferences', {})\n        \n        # Add variety throughout the week\n        weekly_template = [\n            {'day': 'Monday', 'focus': 'physical', 'activity': 'exercise or yoga'},\n            {'day': 'Tuesday', 'focus': 'mental', 'activity': 'learning or organizing'},\n            {'day': 'Wednesday', 'focus': 'social', 'activity': 'connect with friend'},\n            {'day': 'Thursday', 'focus': 'creative', 'activity': 'art or music'},\n            {'day': 'Friday', 'focus': 'emotional', 'activity': 'therapy or journaling'},\n            {'day': 'Saturday', 'focus': 'spiritual', 'activity': 'nature or meditation'},\n            {'day': 'Sunday', 'focus': 'rest', 'activity': 'whatever feels good'}\n        ]\n        \n        for day_plan in weekly_template:\n            if day_plan['focus'] in preferences.get('preferred_categories', []):\n                activities.append(day_plan)\n        \n        return activities\n    \n    def _create_crisis_plan(self, user_data: Dict) -\u003e Dict:\n        \"\"\"Create crisis self-care plan\"\"\"\n        return {\n            'warning_signs': [\n                'Feeling overwhelmed',\n                'Isolation urges',\n                'Sleep disruption',\n                'Appetite changes'\n            ],\n            'immediate_actions': [\n                'Use TIPP technique',\n                'Call support person',\n                'Go to safe space',\n                'Use crisis hotline if needed'\n            ],\n            'comfort_kit': [\n                'Soft blanket',\n                'Calming music playlist',\n                'Photos of loved ones',\n                'Favorite tea',\n                'Stress ball',\n                'Essential oils'\n            ],\n            'support_contacts': [\n                'Therapist',\n                'Trusted friend',\n                'Family member',\n                'Crisis hotline: 988'\n            ],\n            'recovery_plan': [\n                'Gentle routine',\n                'Basic self-care',\n                'Professional support',\n                'Gradual re-engagement'\n            ]\n        }\n    \n    def _set_accountability_measures(self, user_data: Dict) -\u003e Dict:\n        \"\"\"Set accountability measures for self-care\"\"\"\n        return {\n            'tracking_method': user_data.get('preferred_tracking', 'app reminders'),\n            'check_in_frequency': 'daily',\n            'accountability_partner': user_data.get('partner_name'),\n            'rewards_system': {\n                '7_days': 'Favorite treat',\n                '14_days': 'New self-care item',\n                '30_days': 'Special celebration'\n            },\n            'gentle_reminders': True,\n            'progress_sharing': user_data.get('share_progress', False)\n        }\n    \n    def _gather_resources(self, user_data: Dict) -\u003e Dict:\n        \"\"\"Gather relevant self-care resources\"\"\"\n        return {\n            'apps': [\n                'Insight Timer (meditation)',\n                'Calm (sleep stories)',\n                'Headspace (mindfulness)'\n            ],\n            'books': [\n                'The Self-Compassion Workbook',\n                'The Body Keeps the Score',\n                'Radical Acceptance'\n            ],\n            'websites': [\n                'mindmend.com.au/resources',\n                'self-compassion.org',\n                'mindful.org'\n            ],\n            'local_resources': [\n                'Community wellness center',\n                'Parks and nature trails',\n                'Support groups'\n            ],\n            'emergency_resources': [\n                'Crisis hotline: 988',\n                'Text HOME to 741741',\n                'Emergency: 911'\n            ]\n        }\n    \n    def _create_morning_routine(self, preferences: Dict) -\u003e List[Dict]:\n        \"\"\"Create morning self-care routine\"\"\"\n        routine_type = preferences.get('morning_type', 'calming')\n        routines = self.routine_templates['morning'].get(routine_type, [])\n        \n        return [{'time': '7:00 AM', 'activity': activity, 'duration': 10} for activity in routines]\n    \n    def _create_midday_routine(self, preferences: Dict) -\u003e List[Dict]:\n        \"\"\"Create midday self-care routine\"\"\"\n        return [\n            {'time': '12:00 PM', 'activity': 'mindful lunch', 'duration': 30},\n            {'time': '2:00 PM', 'activity': 'stretch break', 'duration': 5}\n        ]\n    \n    def _create_evening_routine(self, preferences: Dict) -\u003e List[Dict]:\n        \"\"\"Create evening self-care routine\"\"\"\n        routine_type = preferences.get('evening_type', 'relaxing')\n        routines = self.routine_templates['evening'].get(routine_type, [])\n        \n        return [{'time': '8:00 PM', 'activity': activity, 'duration': 15} for activity in routines]\n    \n    def _create_as_needed_activities(self, preferences: Dict) -\u003e List[Dict]:\n        \"\"\"Create as-needed self-care activities\"\"\"\n        return [\n            {'trigger': 'feeling stressed', 'activity': 'breathing exercise', 'duration': 5},\n            {'trigger': 'feeling sad', 'activity': 'call a friend', 'duration': 20},\n            {'trigger': 'feeling anxious', 'activity': 'grounding exercise', 'duration': 10}\n        ]\n    \n    def _set_routine_reminders(self, preferences: Dict) -\u003e List[Dict]:\n        \"\"\"Set reminders for routine\"\"\"\n        return [\n            {'time': '7:00 AM', 'message': 'Good morning! Time for your morning routine'},\n            {'time': '12:00 PM', 'message': 'Take a mindful lunch break'},\n            {'time': '8:00 PM', 'message': 'Evening wind-down time'}\n        ]\n    \n    def _estimate_activity_time(self, activity: str) -\u003e int:\n        \"\"\"Estimate time for activity\"\"\"\n        quick = ['breathing', 'stretch', 'gratitude', 'affirmation']\n        medium = ['walk', 'journal', 'meditation', 'call']\n        long = ['exercise', 'bath', 'yoga', 'nature']\n        \n        activity_lower = activity.lower()\n        if any(q in activity_lower for q in quick):\n            return 5\n        elif any(m in activity_lower for m in medium):\n            return 15\n        elif any(activity in activity_lower for activity in long):\n            return 30\n        return 15\n    \n    def _get_activity_instructions(self, activity: str) -\u003e str:\n        \"\"\"Get instructions for activity\"\"\"\n        instructions = {\n            'breathing': 'Find comfortable position. Breathe in for 4, hold for 4, out for 6.',\n            'meditation': 'Sit comfortably, close eyes, focus on breath or use guided app.',\n            'journal': 'Write freely about thoughts and feelings without judgment.',\n            'walk': 'Walk at comfortable pace, notice surroundings mindfully.',\n            'gratitude': 'List 3 things you appreciate, be specific.'\n        }\n        \n        for key, instruction in instructions.items():\n            if key in activity.lower():\n                return instruction\n        \n        return 'Take your time and be present with this activity.'\n    \n    def _get_alternative_activities(self, category: str, current: str) -\u003e List[str]:\n        \"\"\"Get alternative activities\"\"\"\n        all_activities = self.self_care_categories.get(category, {}).get('activities', [])\n        return [a for a in all_activities if a != current][:3]\n    \n    def _set_challenge_rewards(self, duration: int) -\u003e List[Dict]:\n        \"\"\"Set challenge rewards\"\"\"\n        rewards = []\n        milestones = [7, 14, 21, 30]\n        \n        for milestone in milestones:\n            if milestone \u003c= duration:\n                rewards.append({\n                    'day': milestone,\n                    'reward': f'{milestone}-day achievement badge',\n                    'bonus': 'Special self-care activity unlock'\n                })\n        \n        return rewards\n    \n    def _select_challenge_activity(self, day: int) -\u003e str:\n        \"\"\"Select daily challenge activity\"\"\"\n        categories = list(self.self_care_categories.keys())\n        category = categories[day % len(categories)]\n        activities = self.self_care_categories[category]['activities']\n        return random.choice(activities)\n    \n    def _select_bonus_activity(self, day: int) -\u003e str:\n        \"\"\"Select bonus activity\"\"\"\n        bonus_activities = [\n            'Try something new',\n            'Double your usual practice',\n            'Share with a friend',\n            'Create your own activity'\n        ]\n        return bonus_activities[day % len(bonus_activities)]\n    \n    def _get_reflection_prompt(self, day: int) -\u003e str:\n        \"\"\"Get daily reflection prompt\"\"\"\n        prompts = [\n            'What did you notice about yourself today?',\n            'How did self-care impact your mood?',\n            'What was most challenging and why?',\n            'What brought you joy today?',\n            'How can you build on today\\'s success?'\n        ]\n        return prompts[day % len(prompts)]\n    \n    def _get_weekly_focus(self, week: int) -\u003e str:\n        \"\"\"Get weekly focus area\"\"\"\n        focuses = ['Building habits', 'Deepening practice', 'Overcoming barriers', 'Integration']\n        return focuses[week % len(focuses)]\n    \n    def _calculate_streak(self, user_id: str) -\u003e int:\n        \"\"\"Calculate self-care streak\"\"\"\n        # Placeholder - would check database in production\n        return random.randint(1, 30)\n    \n    def _generate_tracking_insights(self, tracking: Dict) -\u003e List[str]:\n        \"\"\"Generate insights from tracking\"\"\"\n        insights = []\n        \n        if tracking['mood_after'] \u003e tracking['mood_before']:\n            insights.append('This activity improved your mood!')\n        \n        if tracking['effectiveness'] \u003e= 8:\n            insights.append('Highly effective - consider making this a regular practice.')\n        \n        if tracking['streak_count'] \u003e 7:\n            insights.append(f'Amazing {tracking[\"streak_count\"]}-day streak!')\n        \n        return insights\n    \n    def _get_favorite_categories(self, user_id: str) -\u003e List[str]:\n        \"\"\"Get user's favorite categories\"\"\"\n        # Placeholder - would analyze user data\n        return ['physical', 'emotional', 'mental']\n    \n    def _get_most_effective_activities(self, user_id: str) -\u003e List[Dict]:\n        \"\"\"Get most effective activities\"\"\"\n        return [\n            {'activity': 'Morning meditation', 'effectiveness': 9.2},\n            {'activity': 'Evening walk', 'effectiveness': 8.5},\n            {'activity': 'Gratitude journal', 'effectiveness': 8.0}\n        ]\n    \n    def _get_streak_data(self, user_id: str) -\u003e Dict:\n        \"\"\"Get streak data\"\"\"\n        return {\n            'current_streak': 12,\n            'longest_streak': 28,\n            'total_days': 95,\n            'consistency_rate': 82\n        }\n    \n    def _analyze_mood_impact(self, user_id: str) -\u003e Dict:\n        \"\"\"Analyze mood impact of self-care\"\"\"\n        return {\n            'average_mood_lift': 2.3,\n            'most_impactful_category': 'physical',\n            'correlation_strength': 0.72\n        }\n    \n    def _get_common_barriers(self, user_id: str) -\u003e List[str]:\n        \"\"\"Get common barriers to self-care\"\"\"\n        return ['lack of time', 'low energy', 'forgetting', 'feeling undeserving']\n    \n    def _generate_recommendations(self, user_id: str) -\u003e List[str]:\n        \"\"\"Generate self-care recommendations\"\"\"\n        return [\n            'Try morning routine for consistency',\n            'Add more social activities',\n            'Experiment with creative self-care',\n            'Set gentle reminders'\n        ]\n    \n    def _get_achievements(self, user_id: str) -\u003e List[Dict]:\n        \"\"\"Get self-care achievements\"\"\"\n        return [\n            {'name': 'Week Warrior', 'description': '7-day streak', 'date': 'Last week'},\n            {'name': 'Variety Victor', 'description': 'Tried all categories', 'date': '2 weeks ago'},\n            {'name': 'Mood Master', 'description': 'Consistent mood improvement', 'date': 'This month'}\n        ]",
                "social_connection_manager.py": "\"\"\"\nSocial Connection Manager\n=========================\nComprehensive social connection and peer support system for mental health.\nIncludes peer matching, group therapy, community challenges, and relationship tools.\n\"\"\"\n\nimport os\nimport json\nimport logging\nfrom datetime import datetime, timedelta\nfrom typing import Dict, Any, List, Optional, Tuple\nfrom dataclasses import dataclass\nfrom enum import Enum\nimport uuid\nimport hashlib\nfrom sqlalchemy import text\n\nlogger = logging.getLogger(__name__)\n\nclass ConnectionType(Enum):\n    \"\"\"Types of peer connections\"\"\"\n    SUPPORT_BUDDY = \"support_buddy\"\n    GROUP_THERAPY = \"group_therapy\"\n    COMMUNITY_CHALLENGE = \"community_challenge\"\n    MENTOR_MENTEE = \"mentor_mentee\"\n    FAMILY_SUPPORT = \"family_support\"\n\nclass MatchingCriteria(Enum):\n    \"\"\"Criteria for peer matching\"\"\"\n    SIMILAR_CONDITIONS = \"similar_conditions\"\n    COMPLEMENTARY_STRENGTHS = \"complementary_strengths\"\n    GEOGRAPHIC_PROXIMITY = \"geographic_proximity\"\n    AGE_SIMILARITY = \"age_similarity\"\n    SHARED_INTERESTS = \"shared_interests\"\n    THERAPY_STAGE = \"therapy_stage\"\n\nclass GroupSessionType(Enum):\n    \"\"\"Types of group therapy sessions\"\"\"\n    ANXIETY_SUPPORT = \"anxiety_support\"\n    DEPRESSION_RECOVERY = \"depression_recovery\"\n    PTSD_HEALING = \"ptsd_healing\"\n    ADDICTION_RECOVERY = \"addiction_recovery\"\n    GRIEF_SUPPORT = \"grief_support\"\n    RELATIONSHIP_SKILLS = \"relationship_skills\"\n    PARENTING_SUPPORT = \"parenting_support\"\n    TEEN_SUPPORT = \"teen_support\"\n\n@dataclass\nclass PeerMatch:\n    \"\"\"Peer matching result\"\"\"\n    user1_id: int\n    user2_id: int\n    connection_type: ConnectionType\n    compatibility_score: float\n    shared_attributes: List[str]\n    recommended_activities: List[str]\n    match_reasoning: str\n    safety_level: str\n\n@dataclass\nclass GroupSession:\n    \"\"\"Group therapy session details\"\"\"\n    session_id: str\n    session_type: GroupSessionType\n    title: str\n    description: str\n    moderator_id: int\n    max_participants: int\n    current_participants: List[int]\n    scheduled_time: datetime\n    duration_minutes: int\n    meeting_link: str\n    preparation_materials: List[str]\n    session_guidelines: List[str]\n\n@dataclass\nclass CommunityChallenge:\n    \"\"\"Community wellness challenge\"\"\"\n    challenge_id: str\n    title: str\n    description: str\n    challenge_type: str  # fitness, mindfulness, social, creative\n    duration_days: int\n    participants: List[int]\n    daily_activities: List[str]\n    rewards_system: Dict[str, Any]\n    progress_tracking: Dict[str, Any]\n\nclass SocialConnectionManager:\n    \"\"\"Manages all social connection and peer support features\"\"\"\n\n    def __init__(self):\n        self.matching_algorithms = self._initialize_matching_algorithms()\n        self.group_templates = self._initialize_group_templates()\n        self.challenge_library = self._initialize_challenge_library()\n        self.safety_protocols = self._initialize_safety_protocols()\n        self.active_connections = {}\n        self.moderation_queue = []\n\n    def _initialize_matching_algorithms(self) -\u003e Dict[str, Any]:\n        \"\"\"Initialize peer matching algorithms\"\"\"\n        return {\n            \"support_buddy\": {\n                \"weight_factors\": {\n                    \"similar_conditions\": 0.4,\n                    \"therapy_stage\": 0.3,\n                    \"age_similarity\": 0.1,\n                    \"geographic_proximity\": 0.1,\n                    \"shared_interests\": 0.1\n                },\n                \"minimum_compatibility\": 0.6,\n                \"safety_checks\": [\"verified_identity\", \"no_red_flags\", \"consent_given\"]\n            },\n            \"group_therapy\": {\n                \"weight_factors\": {\n                    \"similar_conditions\": 0.5,\n                    \"therapy_stage\": 0.2,\n                    \"communication_style\": 0.2,\n                    \"availability\": 0.1\n                },\n                \"group_size_optimal\": 6,\n                \"group_size_max\": 10\n            },\n            \"mentor_mentee\": {\n                \"weight_factors\": {\n                    \"experience_gap\": 0.4,\n                    \"similar_conditions\": 0.3,\n                    \"mentoring_skills\": 0.2,\n                    \"availability\": 0.1\n                },\n                \"mentor_requirements\": [\"recovery_stability\", \"communication_skills\", \"training_completed\"]\n            }\n        }\n\n    def _initialize_group_templates(self) -\u003e Dict[str, Any]:\n        \"\"\"Initialize group therapy session templates\"\"\"\n        return {\n            \"anxiety_support\": {\n                \"title\": \"Anxiety Support Circle\",\n                \"description\": \"A safe space to share experiences and coping strategies for anxiety\",\n                \"max_participants\": 8,\n                \"duration_minutes\": 60,\n                \"session_structure\": [\n                    \"Welcome and check-in (10 min)\",\n                    \"Topic discussion (30 min)\",\n                    \"Coping strategies sharing (15 min)\",\n                    \"Closing and resources (5 min)\"\n                ],\n                \"preparation_materials\": [\n                    \"Anxiety tracking worksheet\",\n                    \"Breathing exercise guide\",\n                    \"Crisis contact information\"\n                ],\n                \"guidelines\": [\n                    \"Respect confidentiality of all participants\",\n                    \"Use 'I' statements when sharing\",\n                    \"No giving medical advice\",\n                    \"Support without judgment\"\n                ]\n            },\n            \"depression_recovery\": {\n                \"title\": \"Depression Recovery Journey\",\n                \"description\": \"Supporting each other through depression recovery with hope and understanding\",\n                \"max_participants\": 6,\n                \"duration_minutes\": 75,\n                \"session_structure\": [\n                    \"Mood check-in (15 min)\",\n                    \"Weekly wins sharing (20 min)\",\n                    \"Challenge discussion (25 min)\",\n                    \"Goal setting for next week (10 min)\",\n                    \"Closing affirmations (5 min)\"\n                ],\n                \"preparation_materials\": [\n                    \"Mood tracking journal\",\n                    \"Activity scheduling worksheet\",\n                    \"Self-compassion exercises\"\n                ],\n                \"guidelines\": [\n                    \"Celebrate small victories\",\n                    \"Hold space for difficult emotions\",\n                    \"Share hope and encouragement\",\n                    \"Respect different recovery paths\"\n                ]\n            },\n            \"ptsd_healing\": {\n                \"title\": \"PTSD Healing Circle\",\n                \"description\": \"Trauma-informed support group for PTSD recovery\",\n                \"max_participants\": 6,\n                \"duration_minutes\": 90,\n                \"session_structure\": [\n                    \"Grounding exercise (10 min)\",\n                    \"Safety check-in (10 min)\",\n                    \"Guided sharing (40 min)\",\n                    \"Coping skills practice (20 min)\",\n                    \"Closing ritual (10 min)\"\n                ],\n                \"preparation_materials\": [\n                    \"Grounding techniques card\",\n                    \"Safety plan template\",\n                    \"Trauma-informed resources\"\n                ],\n                \"guidelines\": [\n                    \"Trauma-informed approach always\",\n                    \"Right to pass on sharing\",\n                    \"No graphic details required\",\n                    \"Professional facilitator present\"\n                ]\n            }\n        }\n\n    def _initialize_challenge_library(self) -\u003e Dict[str, Any]:\n        \"\"\"Initialize community challenge library\"\"\"\n        return {\n            \"mindful_march\": {\n                \"title\": \"30-Day Mindfulness Challenge\",\n                \"description\": \"Build a sustainable mindfulness practice together\",\n                \"type\": \"mindfulness\",\n                \"duration_days\": 30,\n                \"daily_activities\": [\n                    \"5-minute morning meditation\",\n                    \"Mindful meal practice\",\n                    \"Gratitude journaling\",\n                    \"Evening reflection\"\n                ],\n                \"rewards\": {\n                    \"daily_completion\": 10,\n                    \"weekly_streak\": 50,\n                    \"full_challenge\": 200,\n                    \"peer_support\": 25\n                },\n                \"community_features\": [\n                    \"Daily check-in posts\",\n                    \"Meditation buddy matching\",\n                    \"Weekly group meditation\",\n                    \"Progress sharing celebration\"\n                ]\n            },\n            \"movement_may\": {\n                \"title\": \"Mental Health Movement Challenge\",\n                \"description\": \"Exercise for mental wellness - any movement counts!\",\n                \"type\": \"fitness\",\n                \"duration_days\": 31,\n                \"daily_activities\": [\n                    \"20 minutes of any movement\",\n                    \"Mood tracking before/after\",\n                    \"Movement type logging\",\n                    \"Energy level assessment\"\n                ],\n                \"rewards\": {\n                    \"daily_movement\": 15,\n                    \"mood_improvement\": 20,\n                    \"variety_bonus\": 30,\n                    \"encouragement_given\": 10\n                },\n                \"community_features\": [\n                    \"Movement photo sharing\",\n                    \"Workout buddy matching\",\n                    \"Virtual group classes\",\n                    \"Progress celebration posts\"\n                ]\n            },\n            \"connection_challenge\": {\n                \"title\": \"Social Connection Challenge\",\n                \"description\": \"Building meaningful connections for better mental health\",\n                \"type\": \"social\",\n                \"duration_days\": 21,\n                \"daily_activities\": [\n                    \"Reach out to one person\",\n                    \"Practice active listening\",\n                    \"Share something personal\",\n                    \"Express gratitude to someone\"\n                ],\n                \"rewards\": {\n                    \"daily_connection\": 20,\n                    \"deep_conversation\": 35,\n                    \"new_relationship\": 50,\n                    \"support_given\": 25\n                },\n                \"community_features\": [\n                    \"Connection story sharing\",\n                    \"Conversation starter prompts\",\n                    \"Virtual coffee meetups\",\n                    \"Friendship matching\"\n                ]\n            }\n        }\n\n    def _initialize_safety_protocols(self) -\u003e Dict[str, Any]:\n        \"\"\"Initialize safety and moderation protocols\"\"\"\n        return {\n            \"peer_matching_safety\": [\n                \"Identity verification required\",\n                \"Background check for mentors\",\n                \"Gradual disclosure encouraged\",\n                \"Easy blocking and reporting\",\n                \"Professional oversight available\"\n            ],\n            \"group_session_safety\": [\n                \"Trained moderator present\",\n                \"Clear community guidelines\",\n                \"Zero tolerance for harassment\",\n                \"Crisis intervention protocols\",\n                \"Professional backup available\"\n            ],\n            \"content_moderation\": [\n                \"AI-powered content screening\",\n                \"Human moderator review\",\n                \"Community reporting system\",\n                \"Escalation procedures\",\n                \"Support for affected users\"\n            ],\n            \"crisis_protocols\": [\n                \"Immediate professional intervention\",\n                \"Emergency contact notification\",\n                \"Crisis resource provision\",\n                \"Follow-up care coordination\",\n                \"Safety plan activation\"\n            ]\n        }\n\n    def find_peer_matches(self, user_id: int, connection_type: ConnectionType,\n                         user_preferences: Dict[str, Any] = None) -\u003e List[PeerMatch]:\n        \"\"\"Find compatible peer matches for a user\"\"\"\n\n        # Get user profile (in production, fetch from database)\n        user_profile = self._get_user_profile(user_id)\n\n        # Get potential matches (in production, query database)\n        potential_matches = self._get_potential_matches(user_id, connection_type)\n\n        matches = []\n        algorithm = self.matching_algorithms.get(connection_type.value, self.matching_algorithms[\"support_buddy\"])\n\n        for candidate in potential_matches:\n            compatibility_score = self._calculate_compatibility(\n                user_profile,\n                candidate,\n                algorithm[\"weight_factors\"]\n            )\n\n            if compatibility_score \u003e= algorithm[\"minimum_compatibility\"]:\n                shared_attributes = self._find_shared_attributes(user_profile, candidate)\n                recommended_activities = self._get_recommended_activities(\n                    user_profile, candidate, connection_type\n                )\n\n                match = PeerMatch(\n                    user1_id=user_id,\n                    user2_id=candidate[\"user_id\"],\n                    connection_type=connection_type,\n                    compatibility_score=compatibility_score,\n                    shared_attributes=shared_attributes,\n                    recommended_activities=recommended_activities,\n                    match_reasoning=self._generate_match_reasoning(\n                        user_profile, candidate, compatibility_score\n                    ),\n                    safety_level=self._assess_safety_level(user_profile, candidate)\n                )\n                matches.append(match)\n\n        # Sort by compatibility score\n        matches.sort(key=lambda x: x.compatibility_score, reverse=True)\n\n        return matches[:10]  # Return top 10 matches\n\n    def create_group_session(self, session_type: GroupSessionType,\n                           moderator_id: int,\n                           scheduled_time: datetime,\n                           custom_config: Dict[str, Any] = None) -\u003e GroupSession:\n        \"\"\"Create a new group therapy session\"\"\"\n\n        session_id = str(uuid.uuid4())\n        template = self.group_templates.get(session_type.value, self.group_templates[\"anxiety_support\"])\n\n        # Apply custom configuration if provided\n        if custom_config:\n            template.update(custom_config)\n\n        # Generate meeting link (in production, integrate with video platform)\n        meeting_link = f\"https://mindmend.meet/{session_id}\"\n\n        session = GroupSession(\n            session_id=session_id,\n            session_type=session_type,\n            title=template[\"title\"],\n            description=template[\"description\"],\n            moderator_id=moderator_id,\n            max_participants=template[\"max_participants\"],\n            current_participants=[],\n            scheduled_time=scheduled_time,\n            duration_minutes=template[\"duration_minutes\"],\n            meeting_link=meeting_link,\n            preparation_materials=template[\"preparation_materials\"],\n            session_guidelines=template[\"guidelines\"]\n        )\n\n        # Store in database (in production)\n        self._save_group_session(session)\n\n        return session\n\n    def join_group_session(self, session_id: str, user_id: int) -\u003e Dict[str, Any]:\n        \"\"\"Allow user to join a group session\"\"\"\n\n        session = self._get_group_session(session_id)\n        if not session:\n            return {\"success\": False, \"error\": \"Session not found\"}\n\n        # Check capacity\n        if len(session.current_participants) \u003e= session.max_participants:\n            return {\"success\": False, \"error\": \"Session is full\"}\n\n        # Check if user already joined\n        if user_id in session.current_participants:\n            return {\"success\": False, \"error\": \"Already joined this session\"}\n\n        # Verify user eligibility\n        if not self._verify_session_eligibility(user_id, session):\n            return {\"success\": False, \"error\": \"Not eligible for this session\"}\n\n        # Add user to session\n        session.current_participants.append(user_id)\n        self._update_group_session(session)\n\n        # Send session details to user\n        return {\n            \"success\": True,\n            \"session_details\": {\n                \"meeting_link\": session.meeting_link,\n                \"scheduled_time\": session.scheduled_time.isoformat(),\n                \"preparation_materials\": session.preparation_materials,\n                \"guidelines\": session.session_guidelines\n            }\n        }\n\n    def create_community_challenge(self, challenge_type: str,\n                                 start_date: datetime,\n                                 custom_config: Dict[str, Any] = None) -\u003e CommunityChallenge:\n        \"\"\"Create a new community wellness challenge\"\"\"\n\n        challenge_id = str(uuid.uuid4())\n        template = self.challenge_library.get(challenge_type, self.challenge_library[\"mindful_march\"])\n\n        # Apply custom configuration\n        if custom_config:\n            template.update(custom_config)\n\n        challenge = CommunityChallenge(\n            challenge_id=challenge_id,\n            title=template[\"title\"],\n            description=template[\"description\"],\n            challenge_type=template[\"type\"],\n            duration_days=template[\"duration_days\"],\n            participants=[],\n            daily_activities=template[\"daily_activities\"],\n            rewards_system=template[\"rewards\"],\n            progress_tracking={\n                \"start_date\": start_date.isoformat(),\n                \"completion_rates\": {},\n                \"leaderboard\": [],\n                \"community_milestones\": []\n            }\n        )\n\n        # Store in database (in production)\n        self._save_community_challenge(challenge)\n\n        return challenge\n\n    def assess_relationship_health(self, user1_id: int, user2_id: int,\n                                 relationship_type: str = \"romantic\") -\u003e Dict[str, Any]:\n        \"\"\"Assess relationship health and provide recommendations\"\"\"\n\n        # Get relationship data (surveys, communication patterns, etc.)\n        relationship_data = self._get_relationship_data(user1_id, user2_id)\n\n        assessment = {\n            \"relationship_id\": f\"{user1_id}_{user2_id}\",\n            \"relationship_type\": relationship_type,\n            \"assessment_date\": datetime.utcnow().isoformat(),\n            \"overall_health_score\": 0,\n            \"dimension_scores\": {},\n            \"strengths\": [],\n            \"areas_for_improvement\": [],\n            \"recommended_activities\": [],\n            \"warning_signs\": []\n        }\n\n        # Assess different dimensions\n        dimensions = {\n            \"communication\": self._assess_communication(relationship_data),\n            \"trust\": self._assess_trust(relationship_data),\n            \"intimacy\": self._assess_intimacy(relationship_data),\n            \"conflict_resolution\": self._assess_conflict_resolution(relationship_data),\n            \"shared_values\": self._assess_shared_values(relationship_data),\n            \"individual_growth\": self._assess_individual_growth(relationship_data)\n        }\n\n        total_score = 0\n        for dimension, score in dimensions.items():\n            assessment[\"dimension_scores\"][dimension] = score\n            total_score += score\n\n            if score \u003e= 8:\n                assessment[\"strengths\"].append(f\"Excellent {dimension.replace('_', ' ')}\")\n            elif score \u003c= 5:\n                assessment[\"areas_for_improvement\"].append(f\"Needs attention: {dimension.replace('_', ' ')}\")\n            elif score \u003c= 3:\n                assessment[\"warning_signs\"].append(f\"Concerning: {dimension.replace('_', ' ')}\")\n\n        assessment[\"overall_health_score\"] = total_score / len(dimensions)\n\n        # Generate recommendations\n        assessment[\"recommended_activities\"] = self._generate_relationship_activities(\n            assessment[\"dimension_scores\"], relationship_type\n        )\n\n        return assessment\n\n    def moderate_content(self, content: str, user_id: int, context: str) -\u003e Dict[str, Any]:\n        \"\"\"Moderate user-generated content for safety\"\"\"\n\n        moderation_result = {\n            \"content_id\": hashlib.md5(content.encode()).hexdigest(),\n            \"user_id\": user_id,\n            \"context\": context,\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"approved\": True,\n            \"flags\": [],\n            \"severity\": \"none\",\n            \"action_required\": \"none\"\n        }\n\n        # Check for harmful content patterns\n        harmful_patterns = [\n            r\"\\b(?:suicide|kill myself|end it all)\\b\",\n            r\"\\b(?:self harm|cut myself|hurt myself)\\b\",\n            r\"\\b(?:hate|worthless|deserve to die)\\b\",\n            r\"\\b(?:abusive|violent|threatening)\\b\"\n        ]\n\n        import re\n        for pattern in harmful_patterns:\n            if re.search(pattern, content, re.IGNORECASE):\n                moderation_result[\"flags\"].append(\"potential_self_harm\")\n                moderation_result[\"severity\"] = \"high\"\n                moderation_result[\"approved\"] = False\n                moderation_result[\"action_required\"] = \"immediate_intervention\"\n                break\n\n        # Check for inappropriate sharing\n        if any(word in content.lower() for word in [\"personal info\", \"phone number\", \"address\"]):\n            moderation_result[\"flags\"].append(\"personal_information\")\n            moderation_result[\"severity\"] = \"medium\"\n\n        # Check for spam or promotional content\n        if content.count(\"http\") \u003e 2 or any(word in content.lower() for word in [\"buy now\", \"click here\", \"discount\"]):\n            moderation_result[\"flags\"].append(\"spam_promotional\")\n            moderation_result[\"severity\"] = \"low\"\n\n        # Add to moderation queue if flagged\n        if moderation_result[\"flags\"]:\n            self.moderation_queue.append(moderation_result)\n\n            # Trigger immediate intervention if high severity\n            if moderation_result[\"severity\"] == \"high\":\n                self._trigger_crisis_intervention(user_id, content)\n\n        return moderation_result\n\n    def get_social_analytics(self, user_id: int, timeframe_days: int = 30) -\u003e Dict[str, Any]:\n        \"\"\"Generate social connection analytics for a user\"\"\"\n\n        analytics = {\n            \"user_id\": user_id,\n            \"timeframe_days\": timeframe_days,\n            \"analysis_date\": datetime.utcnow().isoformat(),\n            \"connection_metrics\": {},\n            \"engagement_patterns\": {},\n            \"wellbeing_correlation\": {},\n            \"recommendations\": []\n        }\n\n        # Mock data - in production, fetch from database\n        analytics[\"connection_metrics\"] = {\n            \"active_connections\": 5,\n            \"new_connections_made\": 2,\n            \"group_sessions_attended\": 8,\n            \"community_challenges_joined\": 1,\n            \"support_given_count\": 15,\n            \"support_received_count\": 12\n        }\n\n        analytics[\"engagement_patterns\"] = {\n            \"most_active_days\": [\"Tuesday\", \"Thursday\", \"Sunday\"],\n            \"preferred_connection_type\": \"group_therapy\",\n            \"average_session_duration_minutes\": 45,\n            \"response_rate_to_messages\": 0.85\n        }\n\n        analytics[\"wellbeing_correlation\"] = {\n            \"mood_improvement_with_social_activity\": 0.73,\n            \"anxiety_reduction_after_group_sessions\": 0.68,\n            \"loneliness_score_trend\": \"improving\",\n            \"social_confidence_growth\": 0.45\n        }\n\n        # Generate personalized recommendations\n        if analytics[\"connection_metrics\"][\"active_connections\"] \u003c 3:\n            analytics[\"recommendations\"].append(\"Consider joining more peer support connections\")\n\n        if analytics[\"engagement_patterns\"][\"response_rate_to_messages\"] \u003c 0.5:\n            analytics[\"recommendations\"].append(\"Try to engage more actively in conversations\")\n\n        if analytics[\"wellbeing_correlation\"][\"mood_improvement_with_social_activity\"] \u003e 0.6:\n            analytics[\"recommendations\"].append(\"Continue prioritizing social activities - they're helping your mood!\")\n\n        return analytics\n\n    # Helper methods (simplified for demonstration)\n\n    def _get_user_profile(self, user_id: int) -\u003e Dict[str, Any]:\n        \"\"\"Get user profile for matching\"\"\"\n        # Mock profile - in production, fetch from database\n        return {\n            \"user_id\": user_id,\n            \"age\": 28,\n            \"conditions\": [\"anxiety\", \"depression\"],\n            \"therapy_stage\": \"active_treatment\",\n            \"interests\": [\"yoga\", \"reading\", \"hiking\"],\n            \"location\": {\"city\": \"Sydney\", \"state\": \"NSW\"},\n            \"availability\": [\"weekday_evenings\", \"weekend_mornings\"],\n            \"communication_style\": \"supportive\",\n            \"experience_level\": \"intermediate\"\n        }\n\n    def _get_potential_matches(self, user_id: int, connection_type: ConnectionType) -\u003e List[Dict[str, Any]]:\n        \"\"\"Get potential peer matches\"\"\"\n        # Mock data - in production, query database with filters\n        return [\n            {\n                \"user_id\": 2,\n                \"age\": 26,\n                \"conditions\": [\"anxiety\", \"stress\"],\n                \"therapy_stage\": \"active_treatment\",\n                \"interests\": [\"yoga\", \"meditation\", \"art\"],\n                \"location\": {\"city\": \"Sydney\", \"state\": \"NSW\"},\n                \"availability\": [\"weekday_evenings\", \"weekend_afternoons\"],\n                \"communication_style\": \"encouraging\",\n                \"experience_level\": \"beginner\"\n            },\n            {\n                \"user_id\": 3,\n                \"age\": 32,\n                \"conditions\": [\"depression\", \"anxiety\"],\n                \"therapy_stage\": \"maintenance\",\n                \"interests\": [\"hiking\", \"cooking\", \"reading\"],\n                \"location\": {\"city\": \"Melbourne\", \"state\": \"VIC\"},\n                \"availability\": [\"weekend_mornings\", \"weekday_lunch\"],\n                \"communication_style\": \"practical\",\n                \"experience_level\": \"advanced\"\n            }\n        ]\n\n    def _calculate_compatibility(self, user1: Dict[str, Any], user2: Dict[str, Any],\n                               weights: Dict[str, float]) -\u003e float:\n        \"\"\"Calculate compatibility score between two users\"\"\"\n        total_score = 0\n\n        # Similar conditions\n        if \"similar_conditions\" in weights:\n            common_conditions = set(user1[\"conditions\"]) \u0026 set(user2[\"conditions\"])\n            condition_score = len(common_conditions) / max(len(user1[\"conditions\"]), 1)\n            total_score += condition_score * weights[\"similar_conditions\"]\n\n        # Age similarity\n        if \"age_similarity\" in weights:\n            age_diff = abs(user1[\"age\"] - user2[\"age\"])\n            age_score = max(0, 1 - age_diff / 20)  # Normalize age difference\n            total_score += age_score * weights[\"age_similarity\"]\n\n        # Shared interests\n        if \"shared_interests\" in weights:\n            common_interests = set(user1[\"interests\"]) \u0026 set(user2[\"interests\"])\n            interest_score = len(common_interests) / max(len(user1[\"interests\"]), 1)\n            total_score += interest_score * weights[\"shared_interests\"]\n\n        # Therapy stage compatibility\n        if \"therapy_stage\" in weights:\n            stage_compatibility = {\n                (\"beginning\", \"beginning\"): 0.9,\n                (\"beginning\", \"active_treatment\"): 0.7,\n                (\"active_treatment\", \"active_treatment\"): 0.95,\n                (\"active_treatment\", \"maintenance\"): 0.8,\n                (\"maintenance\", \"maintenance\"): 0.85\n            }\n            stage_key = (user1[\"therapy_stage\"], user2[\"therapy_stage\"])\n            stage_score = stage_compatibility.get(stage_key, 0.5)\n            total_score += stage_score * weights[\"therapy_stage\"]\n\n        return min(total_score, 1.0)  # Cap at 1.0\n\n    def _find_shared_attributes(self, user1: Dict[str, Any], user2: Dict[str, Any]) -\u003e List[str]:\n        \"\"\"Find shared attributes between users\"\"\"\n        shared = []\n\n        # Shared conditions\n        common_conditions = set(user1[\"conditions\"]) \u0026 set(user2[\"conditions\"])\n        for condition in common_conditions:\n            shared.append(f\"Both managing {condition}\")\n\n        # Shared interests\n        common_interests = set(user1[\"interests\"]) \u0026 set(user2[\"interests\"])\n        for interest in common_interests:\n            shared.append(f\"Both enjoy {interest}\")\n\n        # Similar age\n        age_diff = abs(user1[\"age\"] - user2[\"age\"])\n        if age_diff \u003c= 5:\n            shared.append(\"Similar age\")\n\n        return shared\n\n    def _get_recommended_activities(self, user1: Dict[str, Any], user2: Dict[str, Any],\n                                  connection_type: ConnectionType) -\u003e List[str]:\n        \"\"\"Get recommended activities for matched users\"\"\"\n        activities = []\n\n        common_interests = set(user1[\"interests\"]) \u0026 set(user2[\"interests\"])\n\n        if connection_type == ConnectionType.SUPPORT_BUDDY:\n            activities = [\n                \"Weekly check-in calls\",\n                \"Share coping strategies\",\n                \"Virtual coffee sessions\",\n                \"Goal accountability partnership\"\n            ]\n\n            # Add interest-based activities\n            if \"yoga\" in common_interests:\n                activities.append(\"Virtual yoga sessions together\")\n            if \"reading\" in common_interests:\n                activities.append(\"Mental health book club\")\n\n        elif connection_type == ConnectionType.GROUP_THERAPY:\n            activities = [\n                \"Join anxiety support group\",\n                \"Participate in group mindfulness sessions\",\n                \"Share in discussion forums\"\n            ]\n\n        return activities\n\n    def _generate_match_reasoning(self, user1: Dict[str, Any], user2: Dict[str, Any],\n                                score: float) -\u003e str:\n        \"\"\"Generate explanation for why users were matched\"\"\"\n        reasons = []\n\n        common_conditions = set(user1[\"conditions\"]) \u0026 set(user2[\"conditions\"])\n        if common_conditions:\n            reasons.append(f\"Both are managing {', '.join(common_conditions)}\")\n\n        common_interests = set(user1[\"interests\"]) \u0026 set(user2[\"interests\"])\n        if common_interests:\n            reasons.append(f\"Share interests in {', '.join(list(common_interests)[:2])}\")\n\n        if user1[\"therapy_stage\"] == user2[\"therapy_stage\"]:\n            reasons.append(f\"Both in {user1['therapy_stage']} stage\")\n\n        if score \u003e 0.8:\n            return f\"Excellent match! {' and '.join(reasons)}.\"\n        elif score \u003e 0.6:\n            return f\"Good compatibility: {' and '.join(reasons)}.\"\n        else:\n            return f\"Potential connection: {' and '.join(reasons)}.\"\n\n    def _assess_safety_level(self, user1: Dict[str, Any], user2: Dict[str, Any]) -\u003e str:\n        \"\"\"Assess safety level for peer connection\"\"\"\n        # Simplified safety assessment\n        safety_factors = 0\n\n        # Check verification status\n        if user1.get(\"verified\", False) and user2.get(\"verified\", False):\n            safety_factors += 1\n\n        # Check experience level\n        if user1.get(\"experience_level\") in [\"intermediate\", \"advanced\"] or \\\n           user2.get(\"experience_level\") in [\"intermediate\", \"advanced\"]:\n            safety_factors += 1\n\n        # Check for red flags (simplified)\n        if not user1.get(\"red_flags\", []) and not user2.get(\"red_flags\", []):\n            safety_factors += 1\n\n        if safety_factors \u003e= 2:\n            return \"high\"\n        elif safety_factors \u003e= 1:\n            return \"medium\"\n        else:\n            return \"supervised_only\"\n\n    # Additional helper methods (simplified implementations)\n\n    def _save_group_session(self, session: GroupSession):\n        \"\"\"Save group session to database\"\"\"\n        pass  # Implementation would save to database\n\n    def _get_group_session(self, session_id: str) -\u003e Optional[GroupSession]:\n        \"\"\"Get group session from database\"\"\"\n        pass  # Implementation would fetch from database\n\n    def _update_group_session(self, session: GroupSession):\n        \"\"\"Update group session in database\"\"\"\n        pass  # Implementation would update database\n\n    def _verify_session_eligibility(self, user_id: int, session: GroupSession) -\u003e bool:\n        \"\"\"Verify if user is eligible for the session\"\"\"\n        return True  # Simplified - would check actual eligibility criteria\n\n    def _save_community_challenge(self, challenge: CommunityChallenge):\n        \"\"\"Save community challenge to database\"\"\"\n        pass  # Implementation would save to database\n\n    def _get_relationship_data(self, user1_id: int, user2_id: int) -\u003e Dict[str, Any]:\n        \"\"\"Get relationship assessment data\"\"\"\n        # Mock data for demonstration\n        return {\n            \"communication_frequency\": 8.5,\n            \"conflict_frequency\": 2.0,\n            \"shared_activities\": 6.5,\n            \"trust_indicators\": 8.0,\n            \"intimacy_rating\": 7.5,\n            \"individual_satisfaction\": [7.0, 8.0]\n        }\n\n    def _assess_communication(self, data: Dict[str, Any]) -\u003e float:\n        \"\"\"Assess communication dimension\"\"\"\n        return min(data.get(\"communication_frequency\", 5) +\n                  (10 - data.get(\"conflict_frequency\", 5)), 10)\n\n    def _assess_trust(self, data: Dict[str, Any]) -\u003e float:\n        \"\"\"Assess trust dimension\"\"\"\n        return data.get(\"trust_indicators\", 5)\n\n    def _assess_intimacy(self, data: Dict[str, Any]) -\u003e float:\n        \"\"\"Assess intimacy dimension\"\"\"\n        return data.get(\"intimacy_rating\", 5)\n\n    def _assess_conflict_resolution(self, data: Dict[str, Any]) -\u003e float:\n        \"\"\"Assess conflict resolution skills\"\"\"\n        return max(0, 10 - data.get(\"conflict_frequency\", 5) * 2)\n\n    def _assess_shared_values(self, data: Dict[str, Any]) -\u003e float:\n        \"\"\"Assess shared values alignment\"\"\"\n        return data.get(\"shared_activities\", 5) * 1.2  # Simplified\n\n    def _assess_individual_growth(self, data: Dict[str, Any]) -\u003e float:\n        \"\"\"Assess individual growth within relationship\"\"\"\n        satisfaction_scores = data.get(\"individual_satisfaction\", [5, 5])\n        return sum(satisfaction_scores) / len(satisfaction_scores)\n\n    def _generate_relationship_activities(self, scores: Dict[str, float],\n                                        relationship_type: str) -\u003e List[str]:\n        \"\"\"Generate relationship improvement activities\"\"\"\n        activities = []\n\n        if scores.get(\"communication\", 5) \u003c 6:\n            activities.append(\"Daily 15-minute check-in conversations\")\n            activities.append(\"Practice active listening exercises\")\n\n        if scores.get(\"trust\", 5) \u003c 6:\n            activities.append(\"Trust-building transparency exercises\")\n            activities.append(\"Share daily appreciations\")\n\n        if scores.get(\"intimacy\", 5) \u003c 6:\n            activities.append(\"Plan regular date nights\")\n            activities.append(\"Physical affection increase goals\")\n\n        if scores.get(\"conflict_resolution\", 5) \u003c 6:\n            activities.append(\"Learn healthy conflict resolution techniques\")\n            activities.append(\"Practice 'time-out' during heated discussions\")\n\n        # Add general relationship strengthening activities\n        activities.extend([\n            \"Weekly relationship check-in meetings\",\n            \"Couples gratitude journal\",\n            \"Shared mindfulness or meditation practice\",\n            \"New experience challenges together\"\n        ])\n\n        return activities[:5]  # Return top 5 recommendations\n\n    def _trigger_crisis_intervention(self, user_id: int, content: str):\n        \"\"\"Trigger crisis intervention protocols\"\"\"\n        logger.critical(f\"Crisis intervention triggered for user {user_id}\")\n\n        # In production, this would:\n        # 1. Alert crisis intervention team\n        # 2. Send immediate resources to user\n        # 3. Notify emergency contacts if consented\n        # 4. Connect with crisis hotlines\n        # 5. Schedule immediate professional follow-up\n\n    def get_platform_statistics(self) -\u003e Dict[str, Any]:\n        \"\"\"Get platform-wide social connection statistics\"\"\"\n        return {\n            \"total_peer_matches\": 1250,\n            \"active_group_sessions\": 45,\n            \"total_group_participants\": 360,\n            \"active_challenges\": 12,\n            \"challenge_participants\": 890,\n            \"matches_this_week\": 85,\n            \"pending_moderation\": 3,\n            \"community_engagement_rate\": 0.78,\n            \"average_match_satisfaction\": 4.2,\n            \"crisis_interventions_prevented\": 23\n        }\n\n# Create singleton instance\nsocial_connection_manager = SocialConnectionManager()",
                "subscription.py": "from dataclasses import dataclass\nfrom datetime import datetime\n\n\nfrom .database import db\n\n\nclass NewsletterSubscription(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(255), unique=True, nullable=False)\n    consent = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n",
                "subscription_manager.py": "\"\"\"\nSubscription Management for Mind Mend\n===================================\nComprehensive subscription and billing management with Stripe integration\n\"\"\"\n\nimport stripe\nimport os\nfrom datetime import datetime, timezone, timedelta\nfrom flask import current_app\nfrom models.database import db, Subscription, Payment, Invoice, User\nimport json\nimport logging\n\n# Configure Stripe\nstripe.api_key = os.environ.get('STRIPE_SECRET_KEY')\n\nclass SubscriptionTiers:\n    \"\"\"Define subscription tiers and pricing\"\"\"\n    \n    TIERS = {\n        'free': {\n            'name': 'Free',\n            'description': 'Basic AI therapy sessions',\n            'price_monthly': 0.00,\n            'price_yearly': 0.00,\n            'features': [\n                '5 AI therapy sessions per month',\n                'Basic mood tracking',\n                'Self-guided exercises',\n                'Community support'\n            ],\n            'limits': {\n                'sessions_per_month': 5,\n                'ai_models': ['gpt-3.5'],\n                'video_analysis': False,\n                'biometric_tracking': False,\n                'priority_support': False\n            }\n        },\n        'premium': {\n            'name': 'Premium',\n            'description': 'Advanced AI therapy with human counselor access',\n            'price_monthly': 29.99,\n            'price_yearly': 299.99,\n            'stripe_price_id_monthly': 'price_1S6Vh5GmYbTnUy09lEiI83xD',\n            'stripe_price_id_yearly': 'price_1S6VjkGmYbTnUy09LLVBWLXQ',\n            'features': [\n                'Unlimited AI therapy sessions',\n                'Advanced mood and progress tracking',\n                'Video emotion analysis',\n                'Biometric integration (Apple Watch, Fitbit)',\n                '2 human counselor sessions per month',\n                'Priority AI models (GPT-4, Claude)',\n                'Crisis detection and intervention',\n                'Personalized therapy plans',\n                'Priority support'\n            ],\n            'limits': {\n                'sessions_per_month': -1,  # Unlimited\n                'counselor_sessions_per_month': 2,\n                'ai_models': ['gpt-4o', 'claude-3'],\n                'video_analysis': True,\n                'biometric_tracking': True,\n                'priority_support': True\n            }\n        },\n        'enterprise': {\n            'name': 'Enterprise',\n            'description': 'Complete mental health platform for organizations',\n            'price_monthly': 99.99,\n            'price_yearly': 999.99,\n            'stripe_price_id_monthly': 'price_1S6VlVGmYbTnUy09dzKyosOA',\n            'stripe_price_id_yearly': 'price_1S6VmwGmYbTnUy09jnNLbO4C',\n            'features': [\n                'Everything in Premium',\n                'Unlimited human counselor sessions',\n                'Advanced analytics and reporting',\n                'Team/organizational insights',\n                'Custom AI model training',\n                'API access',\n                'White-label options',\n                'Dedicated account manager',\n                '24/7 priority support'\n            ],\n            'limits': {\n                'sessions_per_month': -1,  # Unlimited\n                'counselor_sessions_per_month': -1,  # Unlimited\n                'ai_models': 'all',\n                'video_analysis': True,\n                'biometric_tracking': True,\n                'priority_support': True,\n                'analytics_dashboard': True,\n                'api_access': True\n            }\n        }\n    }\n    \n    @classmethod\n    def get_tier_info(cls, tier):\n        \"\"\"Get information for a specific tier\"\"\"\n        return cls.TIERS.get(tier, cls.TIERS['free'])\n    \n    @classmethod\n    def get_all_tiers(cls):\n        \"\"\"Get all available tiers\"\"\"\n        return cls.TIERS\n\n\nclass SubscriptionManager:\n    \"\"\"Manage user subscriptions and billing\"\"\"\n    \n    def __init__(self):\n        self.stripe_key = os.environ.get('STRIPE_SECRET_KEY')\n        \n    def create_customer(self, user):\n        \"\"\"Create or retrieve Stripe customer for user\"\"\"\n        try:\n            # Check if user already has a subscription with customer ID\n            if user.subscription and user.subscription.stripe_customer_id:\n                return stripe.Customer.retrieve(user.subscription.stripe_customer_id)\n            \n            # Create new Stripe customer\n            customer = stripe.Customer.create(\n                email=user.email,\n                name=user.get_full_name(),\n                phone=user.phone,\n                metadata={\n                    'user_id': user.id,\n                    'platform': 'mindmend'\n                }\n            )\n            \n            return customer\n            \n        except Exception as e:\n            current_app.logger.error(f\"Error creating Stripe customer: {e}\")\n            raise\n    \n    def create_subscription(self, user, tier, billing_cycle='monthly', trial_days=7):\n        \"\"\"Create a new subscription for user\"\"\"\n        try:\n            tier_info = SubscriptionTiers.get_tier_info(tier)\n            \n            if tier == 'free':\n                return self._create_free_subscription(user)\n            \n            # Get or create Stripe customer\n            customer = self.create_customer(user)\n            \n            # Get price ID based on billing cycle\n            price_id = tier_info.get(f'stripe_price_id_{billing_cycle}')\n            if not price_id:\n                raise ValueError(f\"No price ID found for {tier} {billing_cycle}\")\n            \n            # Calculate trial end\n            trial_end = None\n            if trial_days \u003e 0:\n                trial_end = int((datetime.now(timezone.utc) + timedelta(days=trial_days)).timestamp())\n            \n            # Create Stripe subscription\n            stripe_subscription = stripe.Subscription.create(\n                customer=customer.id,\n                items=[{'price': price_id}],\n                trial_end=trial_end,\n                metadata={\n                    'user_id': user.id,\n                    'tier': tier,\n                    'platform': 'mindmend'\n                }\n            )\n            \n            # Create or update local subscription record\n            subscription = user.subscription\n            if not subscription:\n                subscription = Subscription(user_id=user.id)\n                db.session.add(subscription)\n            \n            # Update subscription details\n            subscription.stripe_customer_id = customer.id\n            subscription.stripe_subscription_id = stripe_subscription.id\n            subscription.tier = tier\n            subscription.status = stripe_subscription.status\n            subscription.price_per_month = tier_info[f'price_{billing_cycle}']\n            subscription.billing_cycle = billing_cycle\n            subscription.current_period_start = datetime.fromtimestamp(\n                stripe_subscription.current_period_start, tz=timezone.utc\n            )\n            subscription.current_period_end = datetime.fromtimestamp(\n                stripe_subscription.current_period_end, tz=timezone.utc\n            )\n            \n            if trial_days \u003e 0:\n                subscription.is_trial = True\n                subscription.trial_start = datetime.now(timezone.utc)\n                subscription.trial_end = datetime.fromtimestamp(trial_end, tz=timezone.utc)\n            \n            subscription.extra_data = json.dumps({\n                'stripe_subscription': stripe_subscription,\n                'created_via': 'subscription_manager'\n            })\n            \n            # Update user's subscription tier\n            user.subscription_tier = tier\n            \n            db.session.commit()\n            \n            return subscription\n            \n        except Exception as e:\n            db.session.rollback()\n            current_app.logger.error(f\"Error creating subscription: {e}\")\n            raise\n    \n    def _create_free_subscription(self, user):\n        \"\"\"Create free tier subscription\"\"\"\n        subscription = user.subscription\n        if not subscription:\n            subscription = Subscription(user_id=user.id)\n            db.session.add(subscription)\n        \n        subscription.tier = 'free'\n        subscription.status = 'active'\n        subscription.price_per_month = 0.00\n        subscription.billing_cycle = 'monthly'\n        subscription.current_period_start = datetime.now(timezone.utc)\n        subscription.current_period_end = datetime.now(timezone.utc) + timedelta(days=30)\n        \n        user.subscription_tier = 'free'\n        \n        db.session.commit()\n        return subscription\n    \n    def upgrade_subscription(self, user, new_tier, billing_cycle='monthly'):\n        \"\"\"Upgrade user's subscription\"\"\"\n        try:\n            subscription = user.subscription\n            if not subscription:\n                return self.create_subscription(user, new_tier, billing_cycle)\n            \n            if new_tier == 'free':\n                return self.cancel_subscription(user, at_period_end=False)\n            \n            new_tier_info = SubscriptionTiers.get_tier_info(new_tier)\n            price_id = new_tier_info.get(f'stripe_price_id_{billing_cycle}')\n            \n            if not price_id:\n                raise ValueError(f\"No price ID found for {new_tier} {billing_cycle}\")\n            \n            # Update Stripe subscription\n            if subscription.stripe_subscription_id:\n                stripe_subscription = stripe.Subscription.modify(\n                    subscription.stripe_subscription_id,\n                    items=[{\n                        'id': stripe.Subscription.retrieve(subscription.stripe_subscription_id).items.data[0].id,\n                        'price': price_id,\n                    }],\n                    proration_behavior='always_invoice',\n                    metadata={\n                        'user_id': user.id,\n                        'tier': new_tier,\n                        'upgraded_at': datetime.now(timezone.utc).isoformat()\n                    }\n                )\n                \n                # Update local subscription\n                subscription.tier = new_tier\n                subscription.status = stripe_subscription.status\n                subscription.price_per_month = new_tier_info[f'price_{billing_cycle}']\n                subscription.billing_cycle = billing_cycle\n                subscription.current_period_start = datetime.fromtimestamp(\n                    stripe_subscription.current_period_start, tz=timezone.utc\n                )\n                subscription.current_period_end = datetime.fromtimestamp(\n                    stripe_subscription.current_period_end, tz=timezone.utc\n                )\n                subscription.updated_at = datetime.now(timezone.utc)\n            else:\n                # No Stripe subscription exists, create new one\n                return self.create_subscription(user, new_tier, billing_cycle, trial_days=0)\n            \n            user.subscription_tier = new_tier\n            db.session.commit()\n            \n            return subscription\n            \n        except Exception as e:\n            db.session.rollback()\n            current_app.logger.error(f\"Error upgrading subscription: {e}\")\n            raise\n    \n    def cancel_subscription(self, user, at_period_end=True):\n        \"\"\"Cancel user's subscription\"\"\"\n        try:\n            subscription = user.subscription\n            if not subscription:\n                return None\n            \n            if subscription.stripe_subscription_id:\n                if at_period_end:\n                    # Cancel at end of billing period\n                    stripe.Subscription.modify(\n                        subscription.stripe_subscription_id,\n                        cancel_at_period_end=True\n                    )\n                    subscription.cancel_at_period_end = True\n                else:\n                    # Cancel immediately\n                    stripe.Subscription.cancel(subscription.stripe_subscription_id)\n                    subscription.status = 'canceled'\n                    subscription.canceled_at = datetime.now(timezone.utc)\n                    \n                    # Downgrade to free tier\n                    user.subscription_tier = 'free'\n                    subscription.tier = 'free'\n                    subscription.price_per_month = 0.00\n            else:\n                # Local subscription only\n                subscription.status = 'canceled'\n                subscription.canceled_at = datetime.now(timezone.utc)\n                user.subscription_tier = 'free'\n                subscription.tier = 'free'\n            \n            subscription.updated_at = datetime.now(timezone.utc)\n            db.session.commit()\n            \n            return subscription\n            \n        except Exception as e:\n            db.session.rollback()\n            current_app.logger.error(f\"Error canceling subscription: {e}\")\n            raise\n    \n    def handle_payment_success(self, stripe_payment_intent):\n        \"\"\"Handle successful payment from Stripe webhook\"\"\"\n        try:\n            # Find user by customer ID or payment intent metadata\n            customer_id = stripe_payment_intent.get('customer')\n            user = None\n            \n            if customer_id:\n                subscription = Subscription.query.filter_by(stripe_customer_id=customer_id).first()\n                user = subscription.user if subscription else None\n            \n            if not user:\n                metadata = stripe_payment_intent.get('metadata', {})\n                user_id = metadata.get('user_id')\n                if user_id:\n                    user = User.query.get(user_id)\n            \n            if not user:\n                current_app.logger.error(f\"Could not find user for payment intent: {stripe_payment_intent.get('id')}\")\n                return\n            \n            # Create payment record\n            payment = Payment(\n                user_id=user.id,\n                subscription_id=user.subscription.id if user.subscription else None,\n                stripe_payment_intent_id=stripe_payment_intent.get('id'),\n                stripe_charge_id=stripe_payment_intent.get('latest_charge'),\n                amount=stripe_payment_intent.get('amount') / 100,  # Convert from cents\n                currency=stripe_payment_intent.get('currency', 'usd').upper(),\n                status='succeeded',\n                payment_type='subscription',\n                billing_reason=stripe_payment_intent.get('metadata', {}).get('billing_reason', 'subscription_cycle'),\n                paid_at=datetime.now(timezone.utc),\n                extra_data=json.dumps(stripe_payment_intent)\n            )\n            \n            db.session.add(payment)\n            db.session.commit()\n            \n            current_app.logger.info(f\"Payment recorded for user {user.email}: ${payment.amount} {payment.currency}\")\n            \n        except Exception as e:\n            db.session.rollback()\n            current_app.logger.error(f\"Error handling payment success: {e}\")\n            raise\n    \n    def get_user_billing_info(self, user):\n        \"\"\"Get comprehensive billing information for user\"\"\"\n        try:\n            subscription = user.subscription\n            if not subscription:\n                return {\n                    'subscription': None,\n                    'tier_info': SubscriptionTiers.get_tier_info('free'),\n                    'payments': [],\n                    'invoices': [],\n                    'next_payment': None,\n                    'total_spent': 0.0\n                }\n            \n            # Get recent payments\n            payments = Payment.query.filter_by(user_id=user.id)\\\n                .order_by(Payment.created_at.desc()).limit(10).all()\n            \n            # Get recent invoices\n            invoices = Invoice.query.filter_by(user_id=user.id)\\\n                .order_by(Invoice.created_at.desc()).limit(10).all()\n            \n            # Calculate total spent\n            total_spent = db.session.query(db.func.sum(Payment.amount))\\\n                .filter(Payment.user_id == user.id, Payment.status == 'succeeded').scalar() or 0.0\n            \n            # Get next payment date\n            next_payment = None\n            if subscription.is_active() and subscription.current_period_end:\n                next_payment = subscription.current_period_end\n            \n            return {\n                'subscription': subscription,\n                'tier_info': SubscriptionTiers.get_tier_info(subscription.tier),\n                'payments': payments,\n                'invoices': invoices,\n                'next_payment': next_payment,\n                'total_spent': total_spent,\n                'days_until_renewal': subscription.days_until_renewal()\n            }\n            \n        except Exception as e:\n            current_app.logger.error(f\"Error getting billing info: {e}\")\n            raise\n\n\n# Initialize global subscription manager\nsubscription_manager = SubscriptionManager()\n",
                "therapeutic_tools_manager.py": "\"\"\"\nAdvanced Therapeutic Tools Manager - Phase 3 Implementation\nImplements VR/AR therapy, biofeedback integration, and personalized AI therapy\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Any, Optional, Tuple\nfrom datetime import datetime, timedelta\nimport json\nimport uuid\nfrom enum import Enum\nimport random\nimport math\n\nclass TherapyMode(Enum):\n    VR_IMMERSIVE = \"vr_immersive\"\n    AR_OVERLAY = \"ar_overlay\"\n    BIOFEEDBACK = \"biofeedback\"\n    AI_PERSONALIZED = \"ai_personalized\"\n    HYBRID = \"hybrid\"\n\nclass BiometricType(Enum):\n    HEART_RATE = \"heart_rate\"\n    SKIN_CONDUCTANCE = \"skin_conductance\"\n    BREATHING_RATE = \"breathing_rate\"\n    EEG = \"eeg\"\n    MUSCLE_TENSION = \"muscle_tension\"\n    TEMPERATURE = \"temperature\"\n\nclass TherapyIntensity(Enum):\n    LOW = \"low\"\n    MODERATE = \"moderate\"\n    HIGH = \"high\"\n    ADAPTIVE = \"adaptive\"\n\nclass VREnvironment(Enum):\n    BEACH_CALM = \"beach_calm\"\n    FOREST_MEDITATION = \"forest_meditation\"\n    MOUNTAIN_TOP = \"mountain_top\"\n    SPACE_EXPLORATION = \"space_exploration\"\n    UNDERWATER = \"underwater\"\n    GARDEN_PEACEFUL = \"garden_peaceful\"\n    EXPOSURE_GRADUAL = \"exposure_gradual\"\n    TRAUMA_PROCESSING = \"trauma_processing\"\n\n@dataclass\nclass BiometricReading:\n    reading_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    biometric_type: BiometricType = BiometricType.HEART_RATE\n    value: float = 0.0\n    unit: str = \"\"\n    timestamp: datetime = field(default_factory=datetime.now)\n    device_id: str = \"\"\n    quality_score: float = 1.0  # 0-1, measurement reliability\n    context: Dict[str, Any] = field(default_factory=dict)\n\n@dataclass\nclass VRTherapySession:\n    session_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    environment: VREnvironment = VREnvironment.BEACH_CALM\n    therapy_type: str = \"relaxation\"  # anxiety, ptsd, phobia, etc.\n    duration_minutes: int = 20\n    intensity: TherapyIntensity = TherapyIntensity.MODERATE\n    biometric_integration: bool = True\n    started_at: Optional[datetime] = None\n    completed_at: Optional[datetime] = None\n    effectiveness_score: Optional[float] = None\n    user_feedback: Dict[str, Any] = field(default_factory=dict)\n    biometric_data: List[BiometricReading] = field(default_factory=list)\n    adaptation_notes: List[str] = field(default_factory=list)\n\n@dataclass\nclass PersonalizedTherapyPlan:\n    plan_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str = \"\"\n    primary_conditions: List[str] = field(default_factory=list)\n    therapy_preferences: Dict[str, Any] = field(default_factory=dict)\n    biometric_baselines: Dict[BiometricType, float] = field(default_factory=dict)\n    vr_environments: List[VREnvironment] = field(default_factory=list)\n    session_frequency: str = \"3x_weekly\"  # daily, weekly, 3x_weekly\n    progress_milestones: List[Dict[str, Any]] = field(default_factory=list)\n    ai_personality_match: Dict[str, float] = field(default_factory=dict)\n    created_at: datetime = field(default_factory=datetime.now)\n    updated_at: datetime = field(default_factory=datetime.now)\n    effectiveness_metrics: Dict[str, float] = field(default_factory=dict)\n\n@dataclass\nclass BiofeedbackExercise:\n    exercise_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    name: str = \"\"\n    description: str = \"\"\n    target_biometric: BiometricType = BiometricType.HEART_RATE\n    target_range: Tuple[float, float] = (60.0, 100.0)\n    exercise_type: str = \"breathing\"  # breathing, muscle_relaxation, meditation\n    duration_minutes: int = 10\n    difficulty_level: int = 1  # 1-5\n    instructions: List[str] = field(default_factory=list)\n    success_criteria: Dict[str, Any] = field(default_factory=dict)\n    real_time_feedback: bool = True\n\n@dataclass\nclass TherapyOutcome:\n    outcome_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    session_id: str = \"\"\n    user_id: str = \"\"\n    pre_session_mood: int = 5  # 1-10 scale\n    post_session_mood: int = 5\n    anxiety_reduction: float = 0.0  # percentage\n    engagement_score: float = 0.0  # 0-1\n    biometric_improvement: Dict[BiometricType, float] = field(default_factory=dict)\n    user_satisfaction: int = 5  # 1-10\n    side_effects: List[str] = field(default_factory=list)\n    therapist_notes: str = \"\"\n    follow_up_recommended: bool = False\n\nclass TherapeuticToolsManager:\n    def __init__(self):\n        self.active_sessions: Dict[str, VRTherapySession] = {}\n        self.therapy_plans: Dict[str, PersonalizedTherapyPlan] = {}\n        self.biofeedback_exercises = self._initialize_biofeedback_exercises()\n        self.vr_environments = self._initialize_vr_environments()\n        self.ai_therapy_models = self._initialize_ai_models()\n        self.biometric_devices: Dict[str, Dict[str, Any]] = {}\n\n    def _initialize_biofeedback_exercises(self) -\u003e List[BiofeedbackExercise]:\n        \"\"\"Initialize library of biofeedback exercises\"\"\"\n        exercises = []\n\n        # Breathing exercises\n        exercises.append(BiofeedbackExercise(\n            name=\"4-7-8 Breathing\",\n            description=\"Deep breathing technique for anxiety relief\",\n            target_biometric=BiometricType.BREATHING_RATE,\n            target_range=(4.0, 6.0),\n            exercise_type=\"breathing\",\n            duration_minutes=5,\n            difficulty_level=1,\n            instructions=[\n                \"Exhale completely through your mouth\",\n                \"Close mouth and inhale through nose for 4 counts\",\n                \"Hold breath for 7 counts\",\n                \"Exhale through mouth for 8 counts\",\n                \"Repeat cycle 4 times\"\n            ],\n            success_criteria={\n                \"breathing_rate_stability\": 0.8,\n                \"target_range_maintenance\": 0.7\n            }\n        ))\n\n        # Heart rate variability\n        exercises.append(BiofeedbackExercise(\n            name=\"Heart Coherence Training\",\n            description=\"Improve heart rate variability for stress reduction\",\n            target_biometric=BiometricType.HEART_RATE,\n            target_range=(60.0, 80.0),\n            exercise_type=\"heart_coherence\",\n            duration_minutes=10,\n            difficulty_level=2,\n            instructions=[\n                \"Breathe slowly and rhythmically\",\n                \"Focus on heart area\",\n                \"Generate positive emotions (gratitude, care)\",\n                \"Match breathing to heart rhythm feedback\",\n                \"Maintain coherent pattern\"\n            ],\n            success_criteria={\n                \"coherence_ratio\": 0.6,\n                \"sustained_coherence_time\": 300  # seconds\n            }\n        ))\n\n        # Muscle tension release\n        exercises.append(BiofeedbackExercise(\n            name=\"Progressive Muscle Relaxation\",\n            description=\"Systematic muscle tension and release\",\n            target_biometric=BiometricType.MUSCLE_TENSION,\n            target_range=(0.0, 20.0),  # micro-volts\n            exercise_type=\"muscle_relaxation\",\n            duration_minutes=15,\n            difficulty_level=3,\n            instructions=[\n                \"Tense muscle group for 5 seconds\",\n                \"Release and notice relaxation\",\n                \"Focus on contrast between tension/relaxation\",\n                \"Move systematically through body\",\n                \"End with full body scan\"\n            ],\n            success_criteria={\n                \"tension_reduction\": 0.5,\n                \"sustained_relaxation\": 0.7\n            }\n        ))\n\n        return exercises\n\n    def _initialize_vr_environments(self) -\u003e Dict[VREnvironment, Dict[str, Any]]:\n        \"\"\"Initialize VR therapy environments\"\"\"\n        return {\n            VREnvironment.BEACH_CALM: {\n                \"name\": \"Tranquil Beach\",\n                \"description\": \"Peaceful ocean waves with warm sand\",\n                \"therapy_types\": [\"anxiety\", \"stress\", \"relaxation\"],\n                \"intensity_levels\": [TherapyIntensity.LOW, TherapyIntensity.MODERATE],\n                \"biometric_targets\": {\n                    BiometricType.HEART_RATE: (60, 80),\n                    BiometricType.BREATHING_RATE: (8, 12)\n                },\n                \"adaptive_elements\": [\"wave_intensity\", \"weather\", \"time_of_day\"]\n            },\n            VREnvironment.FOREST_MEDITATION: {\n                \"name\": \"Mindful Forest\",\n                \"description\": \"Serene forest with meditation guidance\",\n                \"therapy_types\": [\"mindfulness\", \"depression\", \"focus\"],\n                \"intensity_levels\": [TherapyIntensity.LOW, TherapyIntensity.MODERATE, TherapyIntensity.HIGH],\n                \"biometric_targets\": {\n                    BiometricType.EEG: (8, 13),  # Alpha waves\n                    BiometricType.MUSCLE_TENSION: (0, 15)\n                },\n                \"adaptive_elements\": [\"forest_density\", \"wildlife_sounds\", \"lighting\"]\n            },\n            VREnvironment.EXPOSURE_GRADUAL: {\n                \"name\": \"Gradual Exposure Therapy\",\n                \"description\": \"Controlled exposure for phobia treatment\",\n                \"therapy_types\": [\"phobia\", \"ptsd\", \"anxiety\"],\n                \"intensity_levels\": [TherapyIntensity.LOW, TherapyIntensity.MODERATE, TherapyIntensity.HIGH, TherapyIntensity.ADAPTIVE],\n                \"biometric_targets\": {\n                    BiometricType.HEART_RATE: (70, 120),\n                    BiometricType.SKIN_CONDUCTANCE: (2, 8)\n                },\n                \"adaptive_elements\": [\"exposure_distance\", \"object_size\", \"interaction_level\"]\n            }\n        }\n\n    def _initialize_ai_models(self) -\u003e Dict[str, Dict[str, Any]]:\n        \"\"\"Initialize AI therapy personality models\"\"\"\n        return {\n            \"cognitive_behavioral\": {\n                \"name\": \"CBT Therapist\",\n                \"approach\": \"Structured, goal-oriented cognitive restructuring\",\n                \"personality_traits\": {\n                    \"empathy\": 0.8,\n                    \"directness\": 0.9,\n                    \"patience\": 0.7,\n                    \"analytical\": 0.9\n                },\n                \"techniques\": [\"thought_challenging\", \"behavioral_experiments\", \"goal_setting\"],\n                \"suitable_conditions\": [\"anxiety\", \"depression\", \"panic\"]\n            },\n            \"mindfulness_based\": {\n                \"name\": \"Mindfulness Guide\",\n                \"approach\": \"Present-moment awareness and acceptance\",\n                \"personality_traits\": {\n                    \"empathy\": 0.9,\n                    \"directness\": 0.4,\n                    \"patience\": 0.9,\n                    \"analytical\": 0.5\n                },\n                \"techniques\": [\"meditation\", \"body_scanning\", \"breathing_awareness\"],\n                \"suitable_conditions\": [\"stress\", \"chronic_pain\", \"emotional_regulation\"]\n            },\n            \"trauma_informed\": {\n                \"name\": \"Trauma Specialist\",\n                \"approach\": \"Safety-first trauma processing\",\n                \"personality_traits\": {\n                    \"empathy\": 0.95,\n                    \"directness\": 0.6,\n                    \"patience\": 0.95,\n                    \"analytical\": 0.7\n                },\n                \"techniques\": [\"grounding\", \"resource_building\", \"gradual_exposure\"],\n                \"suitable_conditions\": [\"ptsd\", \"trauma\", \"dissociation\"]\n            }\n        }\n\n    def create_personalized_therapy_plan(self, user_id: str, conditions: List[str],\n                                       preferences: Dict[str, Any]) -\u003e PersonalizedTherapyPlan:\n        \"\"\"Create personalized therapy plan based on user profile\"\"\"\n\n        # Select appropriate VR environments\n        recommended_environments = []\n        for env, config in self.vr_environments.items():\n            if any(condition in config[\"therapy_types\"] for condition in conditions):\n                recommended_environments.append(env)\n\n        # Match AI personality\n        ai_matches = {}\n        for model_name, model_config in self.ai_therapy_models.items():\n            compatibility = sum(1 for condition in conditions\n                              if condition in model_config[\"suitable_conditions\"])\n            ai_matches[model_name] = compatibility / len(conditions) if conditions else 0\n\n        # Set biometric baselines (would normally come from assessment)\n        baselines = {\n            BiometricType.HEART_RATE: 75.0,\n            BiometricType.BREATHING_RATE: 16.0,\n            BiometricType.SKIN_CONDUCTANCE: 3.0,\n            BiometricType.MUSCLE_TENSION: 25.0\n        }\n\n        plan = PersonalizedTherapyPlan(\n            user_id=user_id,\n            primary_conditions=conditions,\n            therapy_preferences=preferences,\n            biometric_baselines=baselines,\n            vr_environments=recommended_environments[:3],  # Top 3\n            session_frequency=preferences.get(\"frequency\", \"3x_weekly\"),\n            ai_personality_match=ai_matches\n        )\n\n        # Create progress milestones\n        plan.progress_milestones = self._generate_milestones(conditions, plan.session_frequency)\n\n        self.therapy_plans[user_id] = plan\n        return plan\n\n    def _generate_milestones(self, conditions: List[str], frequency: str) -\u003e List[Dict[str, Any]]:\n        \"\"\"Generate therapy progress milestones\"\"\"\n        milestones = []\n\n        base_milestones = [\n            {\n                \"week\": 2,\n                \"goal\": \"Complete biometric baseline establishment\",\n                \"metrics\": [\"biometric_stability\", \"user_comfort\"],\n                \"target_values\": [0.8, 0.7]\n            },\n            {\n                \"week\": 4,\n                \"goal\": \"Achieve consistent session engagement\",\n                \"metrics\": [\"session_completion\", \"engagement_score\"],\n                \"target_values\": [0.9, 0.75]\n            },\n            {\n                \"week\": 8,\n                \"goal\": \"Demonstrate measurable symptom improvement\",\n                \"metrics\": [\"anxiety_reduction\", \"mood_improvement\"],\n                \"target_values\": [0.3, 0.25]\n            },\n            {\n                \"week\": 12,\n                \"goal\": \"Maintain therapeutic gains independently\",\n                \"metrics\": [\"self_regulation\", \"tool_usage\"],\n                \"target_values\": [0.8, 0.6]\n            }\n        ]\n\n        # Customize based on conditions\n        for milestone in base_milestones:\n            customized = milestone.copy()\n            if \"ptsd\" in conditions:\n                customized[\"metrics\"].append(\"trauma_processing_comfort\")\n                customized[\"target_values\"].append(0.6)\n            if \"anxiety\" in conditions:\n                customized[\"metrics\"].append(\"panic_frequency_reduction\")\n                customized[\"target_values\"].append(0.4)\n\n            milestones.append(customized)\n\n        return milestones\n\n    def start_vr_therapy_session(self, user_id: str, environment: VREnvironment,\n                                therapy_type: str = \"general\") -\u003e VRTherapySession:\n        \"\"\"Start a VR therapy session with biometric monitoring\"\"\"\n\n        # Get user's therapy plan for personalization\n        plan = self.therapy_plans.get(user_id)\n        intensity = TherapyIntensity.ADAPTIVE if plan else TherapyIntensity.MODERATE\n\n        session = VRTherapySession(\n            user_id=user_id,\n            environment=environment,\n            therapy_type=therapy_type,\n            intensity=intensity,\n            biometric_integration=True,\n            started_at=datetime.now()\n        )\n\n        self.active_sessions[session.session_id] = session\n\n        # Initialize biometric monitoring\n        self._start_biometric_monitoring(session.session_id)\n\n        return session\n\n    def _start_biometric_monitoring(self, session_id: str):\n        \"\"\"Start real-time biometric monitoring for session\"\"\"\n        session = self.active_sessions.get(session_id)\n        if not session:\n            return\n\n        # Simulate biometric device initialization\n        # In real implementation, this would connect to actual devices\n        device_types = [BiometricType.HEART_RATE, BiometricType.BREATHING_RATE,\n                       BiometricType.SKIN_CONDUCTANCE, BiometricType.MUSCLE_TENSION]\n\n        for device_type in device_types:\n            device_id = f\"{device_type.value}_{session_id[:8]}\"\n            self.biometric_devices[device_id] = {\n                \"session_id\": session_id,\n                \"type\": device_type,\n                \"status\": \"active\",\n                \"last_reading\": datetime.now()\n            }\n\n    def process_biometric_reading(self, session_id: str, biometric_type: BiometricType,\n                                value: float, device_id: str = \"\") -\u003e bool:\n        \"\"\"Process real-time biometric reading and adapt session\"\"\"\n        session = self.active_sessions.get(session_id)\n        if not session:\n            return False\n\n        reading = BiometricReading(\n            user_id=session.user_id,\n            biometric_type=biometric_type,\n            value=value,\n            device_id=device_id,\n            context={\"session_id\": session_id}\n        )\n\n        session.biometric_data.append(reading)\n\n        # Adaptive session adjustment based on biometric feedback\n        if session.intensity == TherapyIntensity.ADAPTIVE:\n            self._adapt_session_to_biometrics(session, reading)\n\n        return True\n\n    def _adapt_session_to_biometrics(self, session: VRTherapySession, reading: BiometricReading):\n        \"\"\"Adapt VR session based on biometric feedback\"\"\"\n        env_config = self.vr_environments[session.environment]\n        target_range = env_config[\"biometric_targets\"].get(reading.biometric_type)\n\n        if not target_range:\n            return\n\n        min_val, max_val = target_range\n        adaptation_needed = False\n\n        if reading.value \u003c min_val:\n            # User too relaxed/disengaged - increase intensity\n            adaptation = f\"Increased {session.environment.value} intensity due to low {reading.biometric_type.value}\"\n            session.adaptation_notes.append(adaptation)\n            adaptation_needed = True\n\n        elif reading.value \u003e max_val:\n            # User overstimulated/stressed - decrease intensity\n            adaptation = f\"Decreased {session.environment.value} intensity due to high {reading.biometric_type.value}\"\n            session.adaptation_notes.append(adaptation)\n            adaptation_needed = True\n\n        if adaptation_needed:\n            # In real implementation, this would send commands to VR system\n            print(f\"Adapting session {session.session_id}: {session.adaptation_notes[-1]}\")\n\n    def complete_vr_session(self, session_id: str, user_feedback: Dict[str, Any]) -\u003e TherapyOutcome:\n        \"\"\"Complete VR therapy session and generate outcome\"\"\"\n        session = self.active_sessions.get(session_id)\n        if not session:\n            raise ValueError(\"Session not found\")\n\n        session.completed_at = datetime.now()\n        session.user_feedback = user_feedback\n\n        # Calculate effectiveness score\n        session.effectiveness_score = self._calculate_effectiveness(session)\n\n        # Generate therapy outcome\n        outcome = TherapyOutcome(\n            session_id=session_id,\n            user_id=session.user_id,\n            pre_session_mood=user_feedback.get(\"pre_mood\", 5),\n            post_session_mood=user_feedback.get(\"post_mood\", 5),\n            user_satisfaction=user_feedback.get(\"satisfaction\", 5)\n        )\n\n        # Calculate biometric improvements\n        outcome.biometric_improvement = self._calculate_biometric_improvements(session)\n        outcome.anxiety_reduction = self._calculate_anxiety_reduction(session)\n        outcome.engagement_score = session.effectiveness_score\n\n        # Clean up monitoring\n        self._stop_biometric_monitoring(session_id)\n        del self.active_sessions[session_id]\n\n        return outcome\n\n    def _calculate_effectiveness(self, session: VRTherapySession) -\u003e float:\n        \"\"\"Calculate session effectiveness based on multiple factors\"\"\"\n        factors = []\n\n        # Duration completion factor\n        expected_duration = session.duration_minutes * 60\n        actual_duration = (session.completed_at - session.started_at).total_seconds()\n        completion_factor = min(actual_duration / expected_duration, 1.0)\n        factors.append(completion_factor * 0.3)\n\n        # Biometric stability factor\n        if session.biometric_data:\n            stability_scores = []\n            for biometric_type in [BiometricType.HEART_RATE, BiometricType.BREATHING_RATE]:\n                readings = [r.value for r in session.biometric_data if r.biometric_type == biometric_type]\n                if readings and len(readings) \u003e 3:\n                    # Calculate coefficient of variation (lower is more stable)\n                    mean_val = sum(readings) / len(readings)\n                    variance = sum((x - mean_val) ** 2 for x in readings) / len(readings)\n                    cv = math.sqrt(variance) / mean_val if mean_val \u003e 0 else 1\n                    stability = max(0, 1 - cv)  # Convert to 0-1 where 1 is stable\n                    stability_scores.append(stability)\n\n            if stability_scores:\n                factors.append(sum(stability_scores) / len(stability_scores) * 0.4)\n\n        # User feedback factor\n        if session.user_feedback:\n            satisfaction = session.user_feedback.get(\"satisfaction\", 5) / 10.0\n            factors.append(satisfaction * 0.3)\n\n        return sum(factors) if factors else 0.5\n\n    def _calculate_biometric_improvements(self, session: VRTherapySession) -\u003e Dict[BiometricType, float]:\n        \"\"\"Calculate improvement in biometric measures during session\"\"\"\n        improvements = {}\n\n        for biometric_type in [BiometricType.HEART_RATE, BiometricType.BREATHING_RATE,\n                              BiometricType.MUSCLE_TENSION]:\n            readings = [r.value for r in session.biometric_data if r.biometric_type == biometric_type]\n\n            if len(readings) \u003e 5:\n                # Compare first and last quartiles\n                quarter_point = len(readings) // 4\n                early_avg = sum(readings[:quarter_point]) / quarter_point\n                late_avg = sum(readings[-quarter_point:]) / quarter_point\n\n                # Calculate improvement (depends on metric)\n                if biometric_type in [BiometricType.HEART_RATE, BiometricType.MUSCLE_TENSION]:\n                    # Lower is better\n                    improvement = (early_avg - late_avg) / early_avg if early_avg \u003e 0 else 0\n                else:\n                    # Stability is better (less variation)\n                    early_std = math.sqrt(sum((x - early_avg) ** 2 for x in readings[:quarter_point]) / quarter_point)\n                    late_std = math.sqrt(sum((x - late_avg) ** 2 for x in readings[-quarter_point:]) / quarter_point)\n                    improvement = (early_std - late_std) / early_std if early_std \u003e 0 else 0\n\n                improvements[biometric_type] = max(-1.0, min(1.0, improvement))\n\n        return improvements\n\n    def _calculate_anxiety_reduction(self, session: VRTherapySession) -\u003e float:\n        \"\"\"Calculate anxiety reduction based on biometrics and feedback\"\"\"\n        # Heart rate variability improvement\n        hr_readings = [r.value for r in session.biometric_data if r.biometric_type == BiometricType.HEART_RATE]\n        hr_reduction = 0\n\n        if len(hr_readings) \u003e 10:\n            initial_hr = sum(hr_readings[:5]) / 5\n            final_hr = sum(hr_readings[-5:]) / 5\n            hr_reduction = max(0, (initial_hr - final_hr) / initial_hr)\n\n        # User-reported mood improvement\n        mood_improvement = 0\n        if session.user_feedback:\n            pre_mood = session.user_feedback.get(\"pre_mood\", 5)\n            post_mood = session.user_feedback.get(\"post_mood\", 5)\n            mood_improvement = (post_mood - pre_mood) / 10.0\n\n        # Combine metrics\n        return (hr_reduction * 0.6 + mood_improvement * 0.4)\n\n    def _stop_biometric_monitoring(self, session_id: str):\n        \"\"\"Stop biometric monitoring for session\"\"\"\n        devices_to_remove = []\n        for device_id, device_info in self.biometric_devices.items():\n            if device_info[\"session_id\"] == session_id:\n                devices_to_remove.append(device_id)\n\n        for device_id in devices_to_remove:\n            del self.biometric_devices[device_id]\n\n    def get_user_therapy_progress(self, user_id: str) -\u003e Dict[str, Any]:\n        \"\"\"Get comprehensive therapy progress for user\"\"\"\n        plan = self.therapy_plans.get(user_id)\n        if not plan:\n            return {\"error\": \"No therapy plan found\"}\n\n        # Simulate historical session data\n        sessions_completed = random.randint(5, 25)\n        weeks_active = random.randint(2, 12)\n\n        progress = {\n            \"plan_id\": plan.plan_id,\n            \"weeks_active\": weeks_active,\n            \"sessions_completed\": sessions_completed,\n            \"current_milestone\": self._get_current_milestone(plan, weeks_active),\n            \"biometric_trends\": self._generate_biometric_trends(plan),\n            \"effectiveness_trends\": self._generate_effectiveness_trends(sessions_completed),\n            \"upcoming_sessions\": self._get_upcoming_sessions(plan),\n            \"adaptation_history\": self._get_adaptation_history(user_id)\n        }\n\n        return progress\n\n    def _get_current_milestone(self, plan: PersonalizedTherapyPlan, weeks_active: int) -\u003e Dict[str, Any]:\n        \"\"\"Get current therapy milestone\"\"\"\n        current_milestone = None\n        for milestone in plan.progress_milestones:\n            if weeks_active \u003e= milestone[\"week\"]:\n                current_milestone = milestone\n            else:\n                break\n\n        if current_milestone:\n            # Simulate progress on current milestone\n            progress = random.uniform(0.4, 0.9)\n            current_milestone[\"progress\"] = progress\n            current_milestone[\"on_track\"] = progress \u003e= 0.6\n\n        return current_milestone or plan.progress_milestones[0]\n\n    def _generate_biometric_trends(self, plan: PersonalizedTherapyPlan) -\u003e Dict[str, List[float]]:\n        \"\"\"Generate simulated biometric improvement trends\"\"\"\n        trends = {}\n        for biometric_type, baseline in plan.biometric_baselines.items():\n            # Simulate gradual improvement over time\n            trend = []\n            current_value = baseline\n            improvement_rate = random.uniform(0.01, 0.05)  # 1-5% improvement per session\n\n            for session in range(10):  # Last 10 sessions\n                # Add some noise but overall improvement\n                noise = random.uniform(-0.1, 0.1)\n                if biometric_type in [BiometricType.HEART_RATE, BiometricType.MUSCLE_TENSION]:\n                    # Lower is better\n                    current_value *= (1 - improvement_rate + noise)\n                else:\n                    # Higher stability is better\n                    current_value *= (1 + improvement_rate + noise)\n\n                trend.append(round(current_value, 2))\n\n            trends[biometric_type.value] = trend\n\n        return trends\n\n    def _generate_effectiveness_trends(self, sessions_completed: int) -\u003e List[float]:\n        \"\"\"Generate session effectiveness trends\"\"\"\n        # Simulate learning curve - effectiveness improves over time\n        trends = []\n        base_effectiveness = 0.4\n\n        for session in range(min(sessions_completed, 20)):\n            # Gradual improvement with some variation\n            improvement = session * 0.02  # 2% improvement per session\n            variation = random.uniform(-0.1, 0.1)\n            effectiveness = min(1.0, base_effectiveness + improvement + variation)\n            trends.append(round(effectiveness, 2))\n\n        return trends\n\n    def _get_upcoming_sessions(self, plan: PersonalizedTherapyPlan) -\u003e List[Dict[str, Any]]:\n        \"\"\"Get upcoming recommended sessions\"\"\"\n        sessions = []\n        base_time = datetime.now() + timedelta(days=1)\n\n        frequency_map = {\n            \"daily\": 1,\n            \"3x_weekly\": 2,\n            \"weekly\": 7\n        }\n\n        interval = frequency_map.get(plan.session_frequency, 2)\n\n        for i in range(3):  # Next 3 sessions\n            session_time = base_time + timedelta(days=i * interval)\n\n            # Rotate through preferred VR environments\n            environment = plan.vr_environments[i % len(plan.vr_environments)]\n\n            sessions.append({\n                \"scheduled_time\": session_time.isoformat(),\n                \"environment\": environment.value,\n                \"therapy_type\": plan.primary_conditions[0] if plan.primary_conditions else \"general\",\n                \"estimated_duration\": 20,\n                \"preparation_needed\": True\n            })\n\n        return sessions\n\n    def _get_adaptation_history(self, user_id: str) -\u003e List[Dict[str, Any]]:\n        \"\"\"Get history of session adaptations\"\"\"\n        # Simulate adaptation history\n        adaptations = [\n            {\n                \"date\": (datetime.now() - timedelta(days=7)).isoformat(),\n                \"session_type\": \"vr_forest\",\n                \"adaptation\": \"Reduced lighting intensity due to elevated heart rate\",\n                \"biometric_trigger\": \"heart_rate \u003e 100 bpm\",\n                \"effectiveness\": \"improved_completion\"\n            },\n            {\n                \"date\": (datetime.now() - timedelta(days=3)).isoformat(),\n                \"session_type\": \"vr_beach\",\n                \"adaptation\": \"Extended breathing exercise segment\",\n                \"biometric_trigger\": \"breathing_rate \u003e 20/min\",\n                \"effectiveness\": \"better_relaxation\"\n            }\n        ]\n\n        return adaptations\n\n    def get_platform_statistics(self) -\u003e Dict[str, Any]:\n        \"\"\"Get platform-wide therapeutic tools statistics\"\"\"\n        return {\n            \"total_therapy_plans\": len(self.therapy_plans),\n            \"active_vr_sessions\": len(self.active_sessions),\n            \"biofeedback_exercises\": len(self.biofeedback_exercises),\n            \"vr_environments\": len(self.vr_environments),\n            \"ai_therapy_models\": len(self.ai_therapy_models),\n            \"connected_devices\": len(self.biometric_devices),\n            \"weekly_sessions_completed\": random.randint(50, 200),\n            \"average_effectiveness_score\": round(random.uniform(0.6, 0.85), 2),\n            \"user_satisfaction_rating\": round(random.uniform(4.2, 4.8), 1),\n            \"biometric_integration_rate\": round(random.uniform(0.75, 0.95), 2)\n        }\n\n# Global instance\ntherapeutic_tools_manager = TherapeuticToolsManager()",
                "therapy_activities.py": "\"\"\"\nComprehensive therapy activities and exercises for Mind Mend platform\n\"\"\"\n\nimport random\nfrom typing import Dict, List\n\nclass TherapyActivities:\n    \"\"\"Enhanced therapy activities generator with diverse exercises\"\"\"\n    \n    def __init__(self):\n        self.activities = {\n            'mindfulness': [\n                {\n                    'name': 'Body Scan Meditation',\n                    'duration': '15-20 minutes',\n                    'description': 'Systematically focus on different parts of your body, noticing sensations without judgment.',\n                    'instructions': [\n                        'Find a comfortable position lying down or sitting',\n                        'Close your eyes and take three deep breaths',\n                        'Start with your toes, noticing any sensations',\n                        'Slowly move your attention up through your body',\n                        'Acknowledge any tension and consciously relax',\n                        'End with awareness of your whole body'\n                    ],\n                    'benefits': ['Reduces stress', 'Improves body awareness', 'Promotes relaxation']\n                },\n                {\n                    'name': '5-4-3-2-1 Grounding Exercise',\n                    'duration': '5 minutes',\n                    'description': 'Use your senses to ground yourself in the present moment.',\n                    'instructions': [\n                        'Name 5 things you can see',\n                        'Name 4 things you can touch',\n                        'Name 3 things you can hear',\n                        'Name 2 things you can smell',\n                        'Name 1 thing you can taste'\n                    ],\n                    'benefits': ['Reduces anxiety', 'Helps with panic attacks', 'Increases present moment awareness']\n                },\n                {\n                    'name': 'Mindful Breathing Box',\n                    'duration': '10 minutes',\n                    'description': 'Square breathing technique for calm and focus.',\n                    'instructions': [\n                        'Breathe in for 4 counts',\n                        'Hold for 4 counts',\n                        'Breathe out for 4 counts',\n                        'Hold empty for 4 counts',\n                        'Repeat for 10 cycles'\n                    ],\n                    'benefits': ['Calms nervous system', 'Improves focus', 'Reduces stress']\n                }\n            ],\n            'cognitive': [\n                {\n                    'name': 'Thought Record Journal',\n                    'duration': '20 minutes',\n                    'description': 'Identify and challenge negative thought patterns.',\n                    'instructions': [\n                        'Describe the situation that triggered negative thoughts',\n                        'Write down your automatic thoughts',\n                        'Rate the emotion intensity (0-100)',\n                        'List evidence for and against the thought',\n                        'Create a balanced, realistic thought',\n                        'Re-rate your emotion'\n                    ],\n                    'benefits': ['Challenges cognitive distortions', 'Improves emotional regulation', 'Builds self-awareness']\n                },\n                {\n                    'name': 'Gratitude Mapping',\n                    'duration': '15 minutes',\n                    'description': 'Create a visual map of things you appreciate.',\n                    'instructions': [\n                        'Draw yourself in the center of a page',\n                        'Create branches for different life areas',\n                        'Add specific things you\\'re grateful for',\n                        'Use colors to represent different emotions',\n                        'Add new items daily'\n                    ],\n                    'benefits': ['Shifts focus to positive', 'Improves mood', 'Builds resilience']\n                },\n                {\n                    'name': 'Values Clarification Exercise',\n                    'duration': '30 minutes',\n                    'description': 'Identify and prioritize your core values.',\n                    'instructions': [\n                        'List 10 values important to you',\n                        'Define what each value means to you',\n                        'Rank them by importance',\n                        'Reflect on how you live these values',\n                        'Identify one action for each top value'\n                    ],\n                    'benefits': ['Improves decision-making', 'Increases life satisfaction', 'Guides goal-setting']\n                }\n            ],\n            'behavioral': [\n                {\n                    'name': 'Activity Scheduling',\n                    'duration': '15 minutes daily',\n                    'description': 'Plan enjoyable and meaningful activities.',\n                    'instructions': [\n                        'List activities that bring joy or accomplishment',\n                        'Schedule 1-2 activities per day',\n                        'Rate mood before and after each activity',\n                        'Track patterns over a week',\n                        'Adjust schedule based on what helps most'\n                    ],\n                    'benefits': ['Combats depression', 'Increases motivation', 'Builds positive routines']\n                },\n                {\n                    'name': 'Exposure Ladder',\n                    'duration': 'Variable',\n                    'description': 'Gradually face fears in a controlled way.',\n                    'instructions': [\n                        'Identify your fear or anxiety trigger',\n                        'List 10 situations from least to most scary',\n                        'Start with the easiest situation',\n                        'Stay in the situation until anxiety decreases',\n                        'Move up the ladder gradually'\n                    ],\n                    'benefits': ['Reduces phobias', 'Builds confidence', 'Decreases avoidance']\n                },\n                {\n                    'name': 'Habit Stacking',\n                    'duration': '5 minutes planning',\n                    'description': 'Build new positive habits onto existing ones.',\n                    'instructions': [\n                        'Identify a current daily habit',\n                        'Choose a new habit to add',\n                        'Link them with \"After I [current habit], I will [new habit]\"',\n                        'Start with 2-minute versions',\n                        'Gradually increase duration'\n                    ],\n                    'benefits': ['Creates lasting change', 'Reduces resistance', 'Builds healthy routines']\n                }\n            ],\n            'emotional': [\n                {\n                    'name': 'Emotion Wheel Check-In',\n                    'duration': '10 minutes',\n                    'description': 'Identify and name complex emotions.',\n                    'instructions': [\n                        'Look at an emotion wheel diagram',\n                        'Start with basic emotions in the center',\n                        'Move outward to more specific feelings',\n                        'Journal about what triggered these emotions',\n                        'Note physical sensations with each emotion'\n                    ],\n                    'benefits': ['Improves emotional literacy', 'Enhances self-awareness', 'Facilitates communication']\n                },\n                {\n                    'name': 'Self-Compassion Break',\n                    'duration': '5-10 minutes',\n                    'description': 'Practice kindness toward yourself during difficulty.',\n                    'instructions': [\n                        'Acknowledge: \"This is a moment of suffering\"',\n                        'Remember: \"Suffering is part of human experience\"',\n                        'Offer yourself kindness: \"May I be kind to myself\"',\n                        'Place hand on heart for comfort',\n                        'Speak to yourself as you would a friend'\n                    ],\n                    'benefits': ['Reduces self-criticism', 'Increases resilience', 'Improves emotional wellbeing']\n                },\n                {\n                    'name': 'Emotional Freedom Technique (Tapping)',\n                    'duration': '15 minutes',\n                    'description': 'Use acupressure points while processing emotions.',\n                    'instructions': [\n                        'Rate your distress level (0-10)',\n                        'Create a setup statement acknowledging the issue',\n                        'Tap on specific points while repeating phrases',\n                        'Work through negative and positive statements',\n                        'Re-rate your distress level'\n                    ],\n                    'benefits': ['Reduces anxiety', 'Processes trauma', 'Calms nervous system']\n                }\n            ],\n            'interpersonal': [\n                {\n                    'name': 'Active Listening Practice',\n                    'duration': '20 minutes',\n                    'description': 'Improve communication through focused listening.',\n                    'instructions': [\n                        'Partner speaks for 5 minutes uninterrupted',\n                        'Listener focuses without planning response',\n                        'Listener summarizes what they heard',\n                        'Speaker confirms or clarifies',\n                        'Switch roles and repeat'\n                    ],\n                    'benefits': ['Improves relationships', 'Reduces conflicts', 'Builds empathy']\n                },\n                {\n                    'name': 'Boundary Setting Exercise',\n                    'duration': '30 minutes',\n                    'description': 'Define and communicate personal boundaries.',\n                    'instructions': [\n                        'List areas where you need boundaries',\n                        'Define what you will and won\\'t accept',\n                        'Practice boundary statements',\n                        'Identify consequences for violations',\n                        'Role-play difficult conversations'\n                    ],\n                    'benefits': ['Improves self-respect', 'Reduces resentment', 'Enhances relationships']\n                },\n                {\n                    'name': 'Empathy Building Cards',\n                    'duration': '15 minutes',\n                    'description': 'Practice seeing situations from others\\' perspectives.',\n                    'instructions': [\n                        'Write a conflict on a card',\n                        'List your perspective',\n                        'Imagine the other person\\'s view',\n                        'Find three possible explanations for their behavior',\n                        'Identify common ground'\n                    ],\n                    'benefits': ['Reduces judgment', 'Improves understanding', 'Resolves conflicts']\n                }\n            ],\n            'creative': [\n                {\n                    'name': 'Art Therapy Expression',\n                    'duration': '30-45 minutes',\n                    'description': 'Express emotions through creative art.',\n                    'instructions': [\n                        'Choose art materials that appeal to you',\n                        'Set intention: express current feelings',\n                        'Create without judging the outcome',\n                        'Notice colors, shapes, and patterns',\n                        'Journal about what emerged'\n                    ],\n                    'benefits': ['Processes unconscious feelings', 'Reduces stress', 'Enhances self-expression']\n                },\n                {\n                    'name': 'Music Mood Playlist',\n                    'duration': '20 minutes',\n                    'description': 'Create playlists for emotional regulation.',\n                    'instructions': [\n                        'Create a playlist for your current mood',\n                        'Make another for your desired mood',\n                        'Include transitional songs between them',\n                        'Listen mindfully to the progression',\n                        'Note how music affects your state'\n                    ],\n                    'benefits': ['Regulates emotions', 'Provides coping tool', 'Increases self-awareness']\n                },\n                {\n                    'name': 'Therapeutic Writing Prompts',\n                    'duration': '20 minutes',\n                    'description': 'Explore thoughts and feelings through guided writing.',\n                    'instructions': [\n                        'Choose a prompt that resonates',\n                        'Write continuously without editing',\n                        'Don\\'t worry about grammar or structure',\n                        'Write for the full time',\n                        'Read back and highlight insights'\n                    ],\n                    'benefits': ['Clarifies thoughts', 'Processes emotions', 'Gains insights']\n                }\n            ],\n            'somatic': [\n                {\n                    'name': 'Progressive Muscle Relaxation',\n                    'duration': '20 minutes',\n                    'description': 'Systematically tense and relax muscle groups.',\n                    'instructions': [\n                        'Start with your toes, tense for 5 seconds',\n                        'Release and notice the relaxation',\n                        'Move up through each muscle group',\n                        'Include face and scalp',\n                        'End with whole body awareness'\n                    ],\n                    'benefits': ['Reduces physical tension', 'Improves sleep', 'Decreases anxiety']\n                },\n                {\n                    'name': 'Butterfly Hug',\n                    'duration': '5-10 minutes',\n                    'description': 'Self-soothing technique for emotional regulation.',\n                    'instructions': [\n                        'Cross arms over chest, hands on shoulders',\n                        'Alternate tapping each shoulder',\n                        'Maintain slow, rhythmic pace',\n                        'Breathe deeply while tapping',\n                        'Continue until feeling calmer'\n                    ],\n                    'benefits': ['Calms nervous system', 'Provides self-comfort', 'Reduces distress']\n                },\n                {\n                    'name': 'Yoga for Emotions',\n                    'duration': '30 minutes',\n                    'description': 'Use specific poses for emotional release.',\n                    'instructions': [\n                        'Child\\'s pose for safety and comfort',\n                        'Warrior poses for confidence',\n                        'Heart openers for grief or sadness',\n                        'Twists for letting go',\n                        'End in relaxation pose'\n                    ],\n                    'benefits': ['Releases stored emotions', 'Improves mind-body connection', 'Builds resilience']\n                }\n            ]\n        }\n        \n        self.prompts = {\n            'journaling': [\n                \"What would you do if you knew you couldn't fail?\",\n                \"Describe a time when you felt truly authentic.\",\n                \"What patterns do you notice in your relationships?\",\n                \"If your emotions had colors, what would today look like?\",\n                \"What would your best friend say about your current situation?\",\n                \"Write a letter to your younger self.\",\n                \"What are you avoiding and why?\",\n                \"Describe your ideal day in detail.\",\n                \"What would letting go look like for you?\",\n                \"How has your greatest challenge shaped you?\"\n            ],\n            'reflection': [\n                \"What did you learn about yourself this week?\",\n                \"How have your values influenced recent decisions?\",\n                \"What masks do you wear and with whom?\",\n                \"When do you feel most like yourself?\",\n                \"What would change if you fully accepted yourself?\",\n                \"How do you define success for yourself?\",\n                \"What beliefs about yourself are you ready to challenge?\",\n                \"What brings you genuine joy versus temporary pleasure?\",\n                \"How do you want to be remembered?\",\n                \"What growth have you noticed in yourself lately?\"\n            ]\n        }\n    \n    def get_activity(self, category: str, difficulty: str = 'moderate') -\u003e Dict:\n        \"\"\"Get a specific activity from a category\"\"\"\n        if category in self.activities:\n            activities = self.activities[category]\n            return random.choice(activities)\n        return None\n    \n    def get_personalized_plan(self, concerns: List[str], session_type: str) -\u003e List[Dict]:\n        \"\"\"Create a personalized activity plan based on concerns\"\"\"\n        plan = []\n        \n        # Map concerns to activity categories\n        concern_mapping = {\n            'anxiety': ['mindfulness', 'somatic', 'cognitive'],\n            'depression': ['behavioral', 'creative', 'cognitive'],\n            'relationships': ['interpersonal', 'emotional', 'mindfulness'],\n            'stress': ['somatic', 'mindfulness', 'creative'],\n            'trauma': ['somatic', 'emotional', 'creative'],\n            'self-esteem': ['cognitive', 'creative', 'emotional']\n        }\n        \n        for concern in concerns:\n            if concern.lower() in concern_mapping:\n                categories = concern_mapping[concern.lower()]\n                for cat in categories[:2]:  # Pick top 2 categories\n                    activity = self.get_activity(cat)\n                    if activity and activity not in plan:\n                        plan.append(activity)\n        \n        return plan[:3]  # Return top 3 activities\n    \n    def get_crisis_activities(self) -\u003e List[Dict]:\n        \"\"\"Get immediate activities for crisis situations\"\"\"\n        crisis_activities = [\n            {\n                'name': 'TIPP Technique',\n                'duration': 'Immediate',\n                'description': 'Rapid distress tolerance for crisis moments.',\n                'instructions': [\n                    'Temperature: Splash cold water on face',\n                    'Intense exercise: Do jumping jacks for 1 minute',\n                    'Paced breathing: Breathe out longer than in',\n                    'Paired muscle relaxation: Tense and release'\n                ],\n                'benefits': ['Immediate relief', 'Prevents impulsive actions', 'Calms intense emotions']\n            },\n            {\n                'name': 'Crisis Grounding',\n                'duration': '2-5 minutes',\n                'description': 'Quick grounding for panic or dissociation.',\n                'instructions': [\n                    'Plant feet firmly on ground',\n                    'Name your location and date',\n                    'Touch 3 different textures',\n                    'Say 3 affirmations out loud',\n                    'Call a support person if needed'\n                ],\n                'benefits': ['Prevents dissociation', 'Reduces panic', 'Reconnects to present']\n            }\n        ]\n        return crisis_activities\n    \n    def get_daily_check_in(self) -\u003e Dict:\n        \"\"\"Get a daily mental health check-in activity\"\"\"\n        return {\n            'name': 'Daily Wellness Check-In',\n            'duration': '5 minutes',\n            'description': 'Quick daily assessment and intention setting.',\n            'instructions': [\n                'Rate your mood (1-10)',\n                'Name your primary emotion',\n                'List 3 things you\\'re grateful for',\n                'Set one intention for the day',\n                'Choose one self-care activity'\n            ],\n            'benefits': ['Tracks patterns', 'Increases awareness', 'Promotes daily wellness']\n        }",
                "therapy_ai_integration.py": "\"\"\"\nIntegration module for AI-powered therapy sessions\nConnects multiple AI models with the therapy system\n\"\"\"\n\nimport logging\nfrom typing import Dict, Any, List\nfrom datetime import datetime\nimport numpy as np\nfrom models.ai_model_manager import ai_model_manager, ModelType\nfrom models.treatment_recommender import TreatmentRecommender\nfrom models.research_manager import research_manager\n\nlogger = logging.getLogger(__name__)\n\nclass TherapyAIIntegration:\n    \"\"\"Integrates AI models with therapy sessions\"\"\"\n    \n    def __init__(self):\n        self.ai_manager = ai_model_manager\n        self.treatment_recommender = TreatmentRecommender(ai_model_manager)\n        self.research_manager = research_manager\n        self.session_contexts = {}\n        self.model_performance_tracker = {}\n        \n    def enhance_therapy_response(self, \n                               session_type: str,\n                               user_message: str,\n                               session_data: Dict[str, Any],\n                               use_ensemble: bool = True) -\u003e Dict[str, Any]:\n        \"\"\"Enhanced therapy response using multiple AI models\"\"\"\n        \n        # Extract patient profile from session\n        patient_profile = self._extract_patient_profile(session_data)\n        \n        # Get initial diagnosis if needed\n        if not session_data.get('diagnosis'):\n            diagnosis = self.ai_manager.diagnose_with_ensemble(patient_profile)\n            session_data['diagnosis'] = diagnosis\n        else:\n            diagnosis = session_data['diagnosis']\n        \n        # Get treatment recommendations\n        if not session_data.get('treatment_plan'):\n            treatment_plan = self.treatment_recommender.generate_personalized_treatment_plan(\n                diagnosis,\n                patient_profile,\n                session_data.get('preferences', {})\n            )\n            session_data['treatment_plan'] = treatment_plan\n        else:\n            treatment_plan = session_data['treatment_plan']\n        \n        # Generate enhanced therapy response\n        if use_ensemble:\n            response = self._generate_ensemble_response(\n                session_type,\n                user_message,\n                diagnosis,\n                treatment_plan,\n                session_data\n            )\n        else:\n            response = self._generate_single_model_response(\n                session_type,\n                user_message,\n                diagnosis,\n                treatment_plan,\n                session_data\n            )\n        \n        # Enhance with research insights\n        response = self._enhance_with_research(response, diagnosis)\n        \n        # Add recommended activities\n        response['recommended_activities'] = self._get_session_activities(\n            treatment_plan,\n            session_data.get('completed_activities', [])\n        )\n        \n        # Update session context\n        self._update_session_context(session_data['session_id'], response)\n        \n        return response\n    \n    def _extract_patient_profile(self, session_data: Dict[str, Any]) -\u003e Dict[str, Any]:\n        \"\"\"Extract patient profile from session data\"\"\"\n        return {\n            'age': session_data.get('user_age', 30),\n            'gender': session_data.get('user_gender', 'not_specified'),\n            'chief_complaint': session_data.get('presenting_issue', ''),\n            'symptoms': {\n                'anxiety_level': session_data.get('anxiety_level', 5),\n                'depression_level': session_data.get('depression_level', 5),\n                'stress_level': session_data.get('stress_level', 5),\n                'sleep_quality': session_data.get('sleep_quality', 5)\n            },\n            'behavioral_data': {\n                'social_withdrawal': session_data.get('social_withdrawal', 0),\n                'activity_level': session_data.get('activity_level', 5),\n                'appetite_changes': session_data.get('appetite_changes', 0)\n            },\n            'assessment_scores': {\n                'phq9_score': session_data.get('phq9_score', 0),\n                'gad7_score': session_data.get('gad7_score', 0),\n                'pss_score': session_data.get('perceived_stress_score', 0)\n            },\n            'session_history': len(session_data.get('session_history', [])),\n            'therapy_experience': session_data.get('therapy_experience', 'none'),\n            'motivation_level': session_data.get('motivation_level', 7)\n        }\n    \n    def _generate_ensemble_response(self,\n                                  session_type: str,\n                                  user_message: str,\n                                  diagnosis: Dict[str, Any],\n                                  treatment_plan: Any,\n                                  session_data: Dict[str, Any]) -\u003e Dict[str, Any]:\n        \"\"\"Generate response using multiple AI models\"\"\"\n        \n        responses = []\n        model_weights = {}\n        \n        # Prepare context for AI models\n        context = {\n            'session_type': session_type,\n            'user_message': user_message,\n            'diagnosis': diagnosis,\n            'treatment_modality': treatment_plan.primary_modality.value,\n            'session_number': session_data.get('session_number', 1),\n            'previous_responses': session_data.get('response_history', [])[-3:]  # Last 3 exchanges\n        }\n        \n        # Get responses from different models\n        active_models = self.ai_manager.active_models[:3]  # Use top 3 models\n        \n        for model_name in active_models:\n            try:\n                model_config = self.ai_manager.models[model_name]\n                \n                # Generate prompt based on model specialization\n                prompt = self._create_therapy_prompt(context, model_config.specialization)\n                \n                # Get response based on model type\n                if model_config.type == ModelType.OPENAI_GPT:\n                    response = self._get_openai_therapy_response(prompt, model_config)\n                elif model_config.type == ModelType.OLLAMA:\n                    response = self._get_ollama_therapy_response(prompt, model_config)\n                else:\n                    continue\n                \n                if response:\n                    responses.append(response)\n                    model_weights[model_name] = model_config.accuracy_score or 0.8\n                    \n            except Exception as e:\n                logger.error(f\"Error getting response from {model_name}: {str(e)}\")\n        \n        # Aggregate responses\n        if not responses:\n            return self._get_fallback_therapy_response(context)\n        \n        # Synthesize best response\n        final_response = self._synthesize_therapy_responses(responses, model_weights)\n        \n        return final_response\n    \n    def _create_therapy_prompt(self, context: Dict[str, Any], specialization: str) -\u003e str:\n        \"\"\"Create specialized therapy prompt\"\"\"\n        \n        base_prompt = f\"\"\"\n        You are an expert therapist specializing in {context['treatment_modality']} therapy.\n        This is session {context['session_number']} with a patient diagnosed with {context['diagnosis']['primary_diagnosis']}.\n        \n        Session Type: {context['session_type']}\n        \n        Patient Message: {context['user_message']}\n        \n        Please provide a therapeutic response that:\n        1. Validates the patient's feelings\n        2. Uses appropriate {context['treatment_modality']} techniques\n        3. Provides practical guidance\n        4. Maintains professional boundaries\n        5. Shows empathy and understanding\n        \"\"\"\n        \n        # Add specialization-specific instructions\n        if specialization == \"mental_health_assessment\":\n            base_prompt += \"\\n\\nFocus on assessment and understanding the patient's current state.\"\n        elif specialization == \"therapy_recommendations\":\n            base_prompt += \"\\n\\nInclude specific therapeutic exercises or homework.\"\n        elif specialization == \"general_therapy\":\n            base_prompt += \"\\n\\nProvide a balanced response addressing both emotional and practical aspects.\"\n        \n        return base_prompt\n    \n    def _get_openai_therapy_response(self, prompt: str, config: Any) -\u003e Dict[str, Any]:\n        \"\"\"Get therapy response from OpenAI\"\"\"\n        try:\n            from openai import OpenAI\n            client = OpenAI(api_key=config.api_key)\n            \n            response = client.chat.completions.create(\n                model=config.name,\n                messages=[\n                    {\"role\": \"system\", \"content\": \"You are a compassionate and professional therapist.\"},\n                    {\"role\": \"user\", \"content\": prompt}\n                ],\n                temperature=0.8,\n                max_tokens=500\n            )\n            \n            return {\n                'text': response.choices[0].message.content,\n                'model': config.name,\n                'confidence': 0.9\n            }\n            \n        except Exception as e:\n            logger.error(f\"OpenAI therapy response error: {str(e)}\")\n            return None\n    \n    def _get_ollama_therapy_response(self, prompt: str, config: Any) -\u003e Dict[str, Any]:\n        \"\"\"Get therapy response from Ollama\"\"\"\n        try:\n            import requests\n            \n            response = requests.post(\n                config.endpoint,\n                json={\n                    \"model\": config.name,\n                    \"prompt\": prompt,\n                    \"stream\": False\n                },\n                timeout=30\n            )\n            \n            if response.status_code == 200:\n                result = response.json()\n                return {\n                    'text': result.get('response', ''),\n                    'model': config.name,\n                    'confidence': 0.85\n                }\n            \n            return None\n            \n        except Exception as e:\n            logger.error(f\"Ollama therapy response error: {str(e)}\")\n            return None\n    \n    def _synthesize_therapy_responses(self, \n                                    responses: List[Dict[str, Any]], \n                                    weights: Dict[str, float]) -\u003e Dict[str, Any]:\n        \"\"\"Synthesize multiple AI responses into one coherent response\"\"\"\n        \n        # Extract key elements from each response\n        validations = []\n        techniques = []\n        guidance = []\n        \n        for response in responses:\n            text = response['text']\n            model = response['model']\n            weight = weights.get(model, 0.8)\n            \n            # Simple extraction (in production, use NLP)\n            sections = text.split('\\n\\n')\n            if sections:\n                validations.append((sections[0], weight))\n                if len(sections) \u003e 1:\n                    techniques.append((sections[1], weight))\n                if len(sections) \u003e 2:\n                    guidance.append((sections[2], weight))\n        \n        # Select best elements based on weights\n        best_validation = max(validations, key=lambda x: x[1])[0] if validations else \"\"\n        best_technique = max(techniques, key=lambda x: x[1])[0] if techniques else \"\"\n        best_guidance = max(guidance, key=lambda x: x[1])[0] if guidance else \"\"\n        \n        # Combine into final response\n        final_text = f\"{best_validation}\\n\\n{best_technique}\\n\\n{best_guidance}\".strip()\n        \n        # Calculate aggregate confidence\n        total_confidence = sum(r['confidence'] * weights.get(r['model'], 0.8) for r in responses)\n        avg_confidence = total_confidence / len(responses) if responses else 0.7\n        \n        return {\n            'response': final_text,\n            'confidence': avg_confidence,\n            'models_used': [r['model'] for r in responses],\n            'synthesis_method': 'weighted_selection',\n            'timestamp': datetime.utcnow().isoformat()\n        }\n    \n    def _enhance_with_research(self, \n                             response: Dict[str, Any], \n                             diagnosis: Dict[str, Any]) -\u003e Dict[str, Any]:\n        \"\"\"Enhance response with research insights\"\"\"\n        \n        # Get relevant research insights\n        condition = diagnosis.get('primary_diagnosis', '').lower()\n        \n        # Search for relevant research\n        research_results = self.research_manager.search_research(\n            f\"{condition} treatment effectiveness\",\n            category='treatment'\n        )\n        \n        if research_results:\n            # Add research-backed insights\n            insights = []\n            for paper in research_results[:2]:  # Top 2 relevant papers\n                insights.append({\n                    'title': paper.get('title', ''),\n                    'key_finding': paper.get('abstract', '')[:200] + '...',\n                    'relevance_score': paper.get('relevance_score', 0.8)\n                })\n            \n            response['research_insights'] = insights\n            response['evidence_based'] = True\n        \n        # Get early diagnosis indicators if relevant\n        if 'early' in condition or 'risk' in diagnosis.get('risk_factors', []):\n            indicators = self.research_manager.get_early_diagnosis_indicators(condition)\n            if indicators:\n                response['early_indicators'] = indicators['indicators'][:3]\n        \n        return response\n    \n    def _get_session_activities(self, \n                              treatment_plan: Any,\n                              completed_activities: List[str]) -\u003e List[Dict[str, Any]]:\n        \"\"\"Get recommended activities for this session\"\"\"\n        \n        # Filter out completed activities\n        available_activities = [\n            a for a in treatment_plan.activities \n            if a['name'] not in completed_activities\n        ]\n        \n        # Prioritize by multiple factors\n        for activity in available_activities:\n            score = 0\n            \n            # Priority score\n            if activity.get('priority') == 'high':\n                score += 3\n            elif activity.get('priority') == 'medium':\n                score += 2\n            else:\n                score += 1\n            \n            # Effectiveness score\n            score += activity.get('effectiveness', 0.8) * 2\n            \n            # Difficulty appropriate for stage\n            if len(completed_activities) \u003c 3 and activity.get('difficulty') == 'easy':\n                score += 1\n            elif len(completed_activities) \u003e= 3 and activity.get('difficulty') == 'moderate':\n                score += 1\n            \n            activity['recommendation_score'] = score\n        \n        # Sort by score and return top 3\n        available_activities.sort(key=lambda x: x['recommendation_score'], reverse=True)\n        \n        return available_activities[:3]\n    \n    def _update_session_context(self, session_id: str, response: Dict[str, Any]):\n        \"\"\"Update session context for continuity\"\"\"\n        if session_id not in self.session_contexts:\n            self.session_contexts[session_id] = {\n                'created': datetime.utcnow(),\n                'exchanges': []\n            }\n        \n        self.session_contexts[session_id]['exchanges'].append({\n            'timestamp': datetime.utcnow(),\n            'response': response['response'][:200],  # Store summary\n            'confidence': response.get('confidence', 0.7),\n            'models_used': response.get('models_used', [])\n        })\n        \n        # Keep only last 10 exchanges\n        self.session_contexts[session_id]['exchanges'] = \\\n            self.session_contexts[session_id]['exchanges'][-10:]\n    \n    def _generate_single_model_response(self,\n                                      session_type: str,\n                                      user_message: str,\n                                      diagnosis: Dict[str, Any],\n                                      treatment_plan: Any,\n                                      session_data: Dict[str, Any]) -\u003e Dict[str, Any]:\n        \"\"\"Generate response using a single model (fallback)\"\"\"\n        \n        # Use primary OpenAI model\n        context = {\n            'session_type': session_type,\n            'user_message': user_message,\n            'diagnosis': diagnosis,\n            'treatment_modality': treatment_plan.primary_modality.value\n        }\n        \n        prompt = self._create_therapy_prompt(context, \"general_therapy\")\n        \n        # Try OpenAI first\n        for model_name in self.ai_manager.active_models:\n            config = self.ai_manager.models[model_name]\n            if config.type == ModelType.OPENAI_GPT:\n                response = self._get_openai_therapy_response(prompt, config)\n                if response:\n                    return {\n                        'response': response['text'],\n                        'confidence': response['confidence'],\n                        'models_used': [model_name],\n                        'timestamp': datetime.utcnow().isoformat()\n                    }\n        \n        # Fallback\n        return self._get_fallback_therapy_response(context)\n    \n    def _get_fallback_therapy_response(self, context: Dict[str, Any]) -\u003e Dict[str, Any]:\n        \"\"\"Provide fallback therapy response\"\"\"\n        \n        responses = {\n            'default': \"I hear what you're sharing, and I appreciate your openness. Let's explore this together. Can you tell me more about how this has been affecting your daily life?\",\n            'anxiety': \"It sounds like you're experiencing some anxiety. That's completely understandable. Let's work on some grounding techniques that might help you feel more centered.\",\n            'depression': \"Thank you for sharing that with me. Depression can make everything feel overwhelming. Let's focus on small, manageable steps that can help you feel a bit better.\",\n            'stress': \"I can hear the stress in what you're sharing. Stress affects us all differently. Let's identify what's within your control and work on strategies to manage those areas.\"\n        }\n        \n        # Select appropriate response\n        condition = context.get('diagnosis', {}).get('primary_diagnosis', '').lower()\n        \n        for key, response in responses.items():\n            if key in condition:\n                selected_response = response\n                break\n        else:\n            selected_response = responses['default']\n        \n        return {\n            'response': selected_response,\n            'confidence': 0.6,\n            'models_used': ['fallback'],\n            'timestamp': datetime.utcnow().isoformat()\n        }\n    \n    def analyze_session_effectiveness(self, \n                                    session_id: str,\n                                    session_data: Dict[str, Any]) -\u003e Dict[str, Any]:\n        \"\"\"Analyze the effectiveness of a therapy session\"\"\"\n        \n        # Get session context\n        context = self.session_contexts.get(session_id, {})\n        \n        # Calculate metrics\n        metrics = {\n            'engagement_score': self._calculate_engagement_score(session_data),\n            'therapeutic_alliance': self._assess_therapeutic_alliance(session_data),\n            'technique_utilization': self._analyze_technique_usage(context),\n            'progress_indicators': self._identify_progress_indicators(session_data),\n            'areas_for_improvement': []\n        }\n        \n        # Identify areas for improvement\n        if metrics['engagement_score'] \u003c 0.6:\n            metrics['areas_for_improvement'].append({\n                'area': 'engagement',\n                'suggestion': 'Consider more interactive exercises or shorter response times'\n            })\n        \n        if metrics['therapeutic_alliance'] \u003c 0.7:\n            metrics['areas_for_improvement'].append({\n                'area': 'rapport',\n                'suggestion': 'Focus more on validation and empathy in responses'\n            })\n        \n        # Model performance tracking\n        if 'models_used' in context:\n            for model in context['models_used']:\n                if model not in self.model_performance_tracker:\n                    self.model_performance_tracker[model] = []\n                \n                self.model_performance_tracker[model].append({\n                    'session_id': session_id,\n                    'effectiveness': metrics['engagement_score'],\n                    'timestamp': datetime.utcnow()\n                })\n        \n        return metrics\n    \n    def _calculate_engagement_score(self, session_data: Dict[str, Any]) -\u003e float:\n        \"\"\"Calculate patient engagement score\"\"\"\n        score = 0.5  # Base score\n        \n        # Message length and frequency\n        messages = session_data.get('messages', [])\n        if messages:\n            avg_length = np.mean([len(m.get('content', '')) for m in messages])\n            if avg_length \u003e 50:\n                score += 0.1\n            if avg_length \u003e 100:\n                score += 0.1\n        \n        # Response time\n        response_times = session_data.get('response_times', [])\n        if response_times:\n            avg_response_time = np.mean(response_times)\n            if avg_response_time \u003c 60:  # Less than 1 minute\n                score += 0.1\n        \n        # Activity completion\n        if session_data.get('activities_completed', 0) \u003e 0:\n            score += 0.2\n        \n        return min(score, 1.0)\n    \n    def _assess_therapeutic_alliance(self, session_data: Dict[str, Any]) -\u003e float:\n        \"\"\"Assess therapeutic alliance quality\"\"\"\n        alliance_score = 0.7  # Base score\n        \n        # Check for positive indicators\n        positive_indicators = ['thank', 'helpful', 'understand', 'appreciate', 'better']\n        messages = ' '.join([m.get('content', '') for m in session_data.get('messages', [])])\n        \n        for indicator in positive_indicators:\n            if indicator in messages.lower():\n                alliance_score += 0.05\n        \n        # Check for negative indicators\n        negative_indicators = ['confused', 'frustrated', \"don't understand\", 'not helping']\n        for indicator in negative_indicators:\n            if indicator in messages.lower():\n                alliance_score -= 0.1\n        \n        return max(0, min(alliance_score, 1.0))\n    \n    def _analyze_technique_usage(self, context: Dict[str, Any]) -\u003e Dict[str, int]:\n        \"\"\"Analyze therapeutic techniques used\"\"\"\n        techniques = {\n            'validation': 0,\n            'reframing': 0,\n            'skills_teaching': 0,\n            'homework_assignment': 0,\n            'mindfulness': 0\n        }\n        \n        # Simple keyword analysis (in production, use NLP)\n        exchanges = context.get('exchanges', [])\n        for exchange in exchanges:\n            response_text = exchange.get('response', '').lower()\n            \n            if any(word in response_text for word in ['understand', 'hear', 'valid']):\n                techniques['validation'] += 1\n            if any(word in response_text for word in ['another way', 'perspective', 'reframe']):\n                techniques['reframing'] += 1\n            if any(word in response_text for word in ['practice', 'exercise', 'technique']):\n                techniques['skills_teaching'] += 1\n            if any(word in response_text for word in ['homework', 'practice this week', 'try']):\n                techniques['homework_assignment'] += 1\n            if any(word in response_text for word in ['mindful', 'present', 'breathing']):\n                techniques['mindfulness'] += 1\n        \n        return techniques\n    \n    def _identify_progress_indicators(self, session_data: Dict[str, Any]) -\u003e List[str]:\n        \"\"\"Identify indicators of therapeutic progress\"\"\"\n        indicators = []\n        \n        # Mood improvement\n        if session_data.get('mood_start') and session_data.get('mood_end'):\n            if session_data['mood_end'] \u003e session_data['mood_start']:\n                indicators.append('mood_improvement')\n        \n        # Insight development\n        insight_keywords = ['realize', 'understand now', 'makes sense', 'see how']\n        messages = ' '.join([m.get('content', '') for m in session_data.get('messages', [])])\n        \n        if any(keyword in messages.lower() for keyword in insight_keywords):\n            indicators.append('insight_development')\n        \n        # Commitment to change\n        commitment_keywords = ['will try', 'going to', 'plan to', 'commit']\n        if any(keyword in messages.lower() for keyword in commitment_keywords):\n            indicators.append('commitment_to_change')\n        \n        # Skill application\n        if 'practiced' in messages.lower() or 'used the technique' in messages.lower():\n            indicators.append('skill_application')\n        \n        return indicators\n\n# Create singleton instance\ntherapy_ai_integration = TherapyAIIntegration()",
                "treatment_recommender.py": "\"\"\"\nAdvanced Treatment Recommendation System\nUses multiple AI models to provide personalized treatment recommendations\n\"\"\"\n\nimport logging\nfrom typing import Dict, Any, List\nfrom datetime import datetime, timedelta\nfrom dataclasses import dataclass\nfrom enum import Enum\n\nlogger = logging.getLogger(__name__)\n\nclass TreatmentType(Enum):\n    \"\"\"Types of treatment modalities\"\"\"\n    COGNITIVE_BEHAVIORAL = \"cbt\"\n    DIALECTICAL_BEHAVIORAL = \"dbt\"\n    ACCEPTANCE_COMMITMENT = \"act\"\n    MINDFULNESS_BASED = \"mbsr\"\n    PSYCHODYNAMIC = \"psychodynamic\"\n    SOMATIC = \"somatic\"\n    EMDR = \"emdr\"\n    MEDICATION = \"medication\"\n    LIFESTYLE = \"lifestyle\"\n    COMPLEMENTARY = \"complementary\"\n\nclass TreatmentIntensity(Enum):\n    \"\"\"Treatment intensity levels\"\"\"\n    SELF_GUIDED = \"self_guided\"\n    WEEKLY_SESSIONS = \"weekly\"\n    BIWEEKLY_SESSIONS = \"biweekly\"\n    INTENSIVE = \"intensive\"\n    CRISIS = \"crisis\"\n\n@dataclass\nclass TreatmentPlan:\n    \"\"\"Comprehensive treatment plan\"\"\"\n    primary_modality: TreatmentType\n    secondary_modalities: List[TreatmentType]\n    intensity: TreatmentIntensity\n    duration_weeks: int\n    activities: List[Dict[str, Any]]\n    goals: List[Dict[str, Any]]\n    monitoring_plan: Dict[str, Any]\n    confidence_score: float\n    ai_consensus: Dict[str, Any]\n\nclass TreatmentRecommender:\n    \"\"\"Advanced treatment recommendation system\"\"\"\n    \n    def __init__(self, ai_model_manager):\n        self.ai_manager = ai_model_manager\n        self.treatment_database = self._initialize_treatment_database()\n        self.activity_library = self._initialize_activity_library()\n        self.evidence_base = {}\n        \n    def _initialize_treatment_database(self) -\u003e Dict[str, Any]:\n        \"\"\"Initialize comprehensive treatment database\"\"\"\n        return {\n            'anxiety': {\n                'primary_modalities': [TreatmentType.COGNITIVE_BEHAVIORAL, TreatmentType.ACCEPTANCE_COMMITMENT],\n                'evidence_level': 'high',\n                'typical_duration': 12,\n                'success_rate': 0.78\n            },\n            'depression': {\n                'primary_modalities': [TreatmentType.COGNITIVE_BEHAVIORAL, TreatmentType.MINDFULNESS_BASED],\n                'evidence_level': 'high',\n                'typical_duration': 16,\n                'success_rate': 0.75\n            },\n            'ptsd': {\n                'primary_modalities': [TreatmentType.EMDR, TreatmentType.COGNITIVE_BEHAVIORAL],\n                'evidence_level': 'high',\n                'typical_duration': 20,\n                'success_rate': 0.72\n            },\n            'relationship_issues': {\n                'primary_modalities': [TreatmentType.PSYCHODYNAMIC, TreatmentType.ACCEPTANCE_COMMITMENT],\n                'evidence_level': 'moderate',\n                'typical_duration': 24,\n                'success_rate': 0.70\n            },\n            'substance_use': {\n                'primary_modalities': [TreatmentType.DIALECTICAL_BEHAVIORAL, TreatmentType.MINDFULNESS_BASED],\n                'evidence_level': 'high',\n                'typical_duration': 26,\n                'success_rate': 0.65\n            }\n        }\n    \n    def _initialize_activity_library(self) -\u003e Dict[str, List[Dict[str, Any]]]:\n        \"\"\"Initialize comprehensive activity library\"\"\"\n        return {\n            TreatmentType.COGNITIVE_BEHAVIORAL: [\n                {\n                    'name': 'Thought Record',\n                    'description': 'Track and challenge negative thought patterns',\n                    'frequency': 'daily',\n                    'duration_minutes': 15,\n                    'difficulty': 'moderate',\n                    'effectiveness': 0.85,\n                    'digital_tool': True\n                },\n                {\n                    'name': 'Behavioral Activation Schedule',\n                    'description': 'Plan and track mood-boosting activities',\n                    'frequency': 'daily',\n                    'duration_minutes': 20,\n                    'difficulty': 'easy',\n                    'effectiveness': 0.82,\n                    'digital_tool': True\n                },\n                {\n                    'name': 'Cognitive Restructuring Exercise',\n                    'description': 'Identify and modify cognitive distortions',\n                    'frequency': '3x/week',\n                    'duration_minutes': 30,\n                    'difficulty': 'moderate',\n                    'effectiveness': 0.88,\n                    'digital_tool': True\n                }\n            ],\n            TreatmentType.MINDFULNESS_BASED: [\n                {\n                    'name': 'Body Scan Meditation',\n                    'description': 'Progressive relaxation through body awareness',\n                    'frequency': 'daily',\n                    'duration_minutes': 20,\n                    'difficulty': 'easy',\n                    'effectiveness': 0.80,\n                    'digital_tool': True,\n                    'guided_audio': True\n                },\n                {\n                    'name': 'Mindful Breathing',\n                    'description': 'Focused attention on breath',\n                    'frequency': '2x/day',\n                    'duration_minutes': 10,\n                    'difficulty': 'easy',\n                    'effectiveness': 0.78,\n                    'digital_tool': True\n                },\n                {\n                    'name': 'Loving-Kindness Meditation',\n                    'description': 'Cultivate compassion for self and others',\n                    'frequency': '3x/week',\n                    'duration_minutes': 25,\n                    'difficulty': 'moderate',\n                    'effectiveness': 0.76,\n                    'digital_tool': True,\n                    'guided_audio': True\n                }\n            ],\n            TreatmentType.DIALECTICAL_BEHAVIORAL: [\n                {\n                    'name': 'Distress Tolerance Skills',\n                    'description': 'TIPP technique for crisis management',\n                    'frequency': 'as needed',\n                    'duration_minutes': 5,\n                    'difficulty': 'moderate',\n                    'effectiveness': 0.90,\n                    'digital_tool': True,\n                    'crisis_tool': True\n                },\n                {\n                    'name': 'Emotion Regulation Diary',\n                    'description': 'Track emotions and triggers',\n                    'frequency': 'daily',\n                    'duration_minutes': 10,\n                    'difficulty': 'easy',\n                    'effectiveness': 0.83,\n                    'digital_tool': True\n                },\n                {\n                    'name': 'Interpersonal Effectiveness Practice',\n                    'description': 'DEARMAN technique for assertive communication',\n                    'frequency': 'weekly',\n                    'duration_minutes': 30,\n                    'difficulty': 'hard',\n                    'effectiveness': 0.85,\n                    'digital_tool': True\n                }\n            ],\n            TreatmentType.ACCEPTANCE_COMMITMENT: [\n                {\n                    'name': 'Values Clarification Exercise',\n                    'description': 'Identify and prioritize personal values',\n                    'frequency': 'weekly',\n                    'duration_minutes': 45,\n                    'difficulty': 'moderate',\n                    'effectiveness': 0.87,\n                    'digital_tool': True\n                },\n                {\n                    'name': 'Defusion Techniques',\n                    'description': 'Distance yourself from unhelpful thoughts',\n                    'frequency': 'daily',\n                    'duration_minutes': 10,\n                    'difficulty': 'moderate',\n                    'effectiveness': 0.81,\n                    'digital_tool': True\n                },\n                {\n                    'name': 'Committed Action Planning',\n                    'description': 'Set value-based goals and actions',\n                    'frequency': 'weekly',\n                    'duration_minutes': 30,\n                    'difficulty': 'moderate',\n                    'effectiveness': 0.84,\n                    'digital_tool': True\n                }\n            ],\n            TreatmentType.SOMATIC: [\n                {\n                    'name': 'Progressive Muscle Relaxation',\n                    'description': 'Systematic tension and release',\n                    'frequency': 'daily',\n                    'duration_minutes': 20,\n                    'difficulty': 'easy',\n                    'effectiveness': 0.79,\n                    'digital_tool': True,\n                    'guided_audio': True\n                },\n                {\n                    'name': 'Grounding Exercises',\n                    'description': '5-4-3-2-1 sensory awareness technique',\n                    'frequency': 'as needed',\n                    'duration_minutes': 5,\n                    'difficulty': 'easy',\n                    'effectiveness': 0.82,\n                    'digital_tool': True\n                }\n            ],\n            TreatmentType.LIFESTYLE: [\n                {\n                    'name': 'Sleep Hygiene Protocol',\n                    'description': 'Optimize sleep environment and habits',\n                    'frequency': 'daily',\n                    'duration_minutes': 30,\n                    'difficulty': 'moderate',\n                    'effectiveness': 0.77,\n                    'digital_tool': True\n                },\n                {\n                    'name': 'Exercise Planning',\n                    'description': 'Structured physical activity schedule',\n                    'frequency': '5x/week',\n                    'duration_minutes': 30,\n                    'difficulty': 'moderate',\n                    'effectiveness': 0.81,\n                    'digital_tool': True\n                },\n                {\n                    'name': 'Nutrition Tracking',\n                    'description': 'Monitor mood-food connections',\n                    'frequency': 'daily',\n                    'duration_minutes': 10,\n                    'difficulty': 'easy',\n                    'effectiveness': 0.73,\n                    'digital_tool': True\n                }\n            ]\n        }\n    \n    def generate_personalized_treatment_plan(self, \n                                           diagnosis: Dict[str, Any],\n                                           patient_profile: Dict[str, Any],\n                                           preferences: Dict[str, Any] = None) -\u003e TreatmentPlan:\n        \"\"\"Generate comprehensive personalized treatment plan using AI consensus\"\"\"\n        \n        # Get AI consensus on treatment approach\n        treatment_query = {\n            'diagnosis': diagnosis,\n            'patient_profile': patient_profile,\n            'preferences': preferences or {},\n            'query_type': 'treatment_recommendation'\n        }\n        \n        ai_recommendations = self.ai_manager.diagnose_with_ensemble(treatment_query)\n        \n        # Determine primary condition\n        primary_condition = self._extract_primary_condition(diagnosis)\n        \n        # Get evidence-based recommendations\n        evidence_based = self.treatment_database.get(\n            primary_condition, \n            self.treatment_database['anxiety']  # Default\n        )\n        \n        # Select treatment modalities\n        primary_modality = self._select_primary_modality(\n            evidence_based['primary_modalities'],\n            patient_profile,\n            preferences\n        )\n        \n        secondary_modalities = self._select_secondary_modalities(\n            primary_modality,\n            patient_profile,\n            diagnosis\n        )\n        \n        # Determine intensity\n        intensity = self._determine_treatment_intensity(\n            diagnosis,\n            patient_profile\n        )\n        \n        # Generate activity plan\n        activities = self._generate_activity_plan(\n            primary_modality,\n            secondary_modalities,\n            intensity,\n            patient_profile\n        )\n        \n        # Set treatment goals\n        goals = self._generate_treatment_goals(\n            diagnosis,\n            patient_profile,\n            evidence_based['typical_duration']\n        )\n        \n        # Create monitoring plan\n        monitoring_plan = self._create_monitoring_plan(\n            diagnosis,\n            intensity\n        )\n        \n        # Calculate confidence score\n        confidence_score = self._calculate_plan_confidence(\n            ai_recommendations,\n            evidence_based['evidence_level'],\n            patient_profile\n        )\n        \n        return TreatmentPlan(\n            primary_modality=primary_modality,\n            secondary_modalities=secondary_modalities,\n            intensity=intensity,\n            duration_weeks=evidence_based['typical_duration'],\n            activities=activities,\n            goals=goals,\n            monitoring_plan=monitoring_plan,\n            confidence_score=confidence_score,\n            ai_consensus=ai_recommendations\n        )\n    \n    def _extract_primary_condition(self, diagnosis: Dict[str, Any]) -\u003e str:\n        \"\"\"Extract primary condition from diagnosis\"\"\"\n        primary_diagnosis = diagnosis.get('primary_diagnosis', '').lower()\n        \n        condition_map = {\n            'anxiety': 'anxiety',\n            'depression': 'depression',\n            'ptsd': 'ptsd',\n            'trauma': 'ptsd',\n            'relationship': 'relationship_issues',\n            'couples': 'relationship_issues',\n            'substance': 'substance_use',\n            'addiction': 'substance_use'\n        }\n        \n        for keyword, condition in condition_map.items():\n            if keyword in primary_diagnosis:\n                return condition\n        \n        return 'anxiety'  # Default\n    \n    def _select_primary_modality(self, \n                                recommended_modalities: List[TreatmentType],\n                                patient_profile: Dict[str, Any],\n                                preferences: Dict[str, Any]) -\u003e TreatmentType:\n        \"\"\"Select primary treatment modality based on multiple factors\"\"\"\n        \n        # Score each modality\n        modality_scores = {}\n        \n        for modality in recommended_modalities:\n            score = 1.0  # Base score\n            \n            # Adjust for patient factors\n            if patient_profile.get('age', 30) \u003c 25 and modality == TreatmentType.COGNITIVE_BEHAVIORAL:\n                score *= 1.2  # CBT works well for younger patients\n            \n            if patient_profile.get('previous_therapy_success') == modality.value:\n                score *= 1.5  # Previous success increases likelihood\n            \n            # Adjust for preferences\n            if preferences:\n                if modality.value in preferences.get('preferred_modalities', []):\n                    score *= 1.3\n                if modality.value in preferences.get('avoided_modalities', []):\n                    score *= 0.5\n            \n            modality_scores[modality] = score\n        \n        # Select highest scoring modality\n        return max(modality_scores.items(), key=lambda x: x[1])[0]\n    \n    def _select_secondary_modalities(self,\n                                   primary: TreatmentType,\n                                   patient_profile: Dict[str, Any],\n                                   diagnosis: Dict[str, Any]) -\u003e List[TreatmentType]:\n        \"\"\"Select complementary treatment modalities\"\"\"\n        secondary = []\n        \n        # Always include lifestyle modifications\n        secondary.append(TreatmentType.LIFESTYLE)\n        \n        # Add mindfulness if stress is high\n        if patient_profile.get('stress_level', 5) \u003e 7:\n            secondary.append(TreatmentType.MINDFULNESS_BASED)\n        \n        # Add somatic if trauma is present\n        if 'trauma' in diagnosis.get('primary_diagnosis', '').lower():\n            secondary.append(TreatmentType.SOMATIC)\n        \n        # Ensure no duplicates with primary\n        return [m for m in secondary if m != primary]\n    \n    def _determine_treatment_intensity(self,\n                                     diagnosis: Dict[str, Any],\n                                     patient_profile: Dict[str, Any]) -\u003e TreatmentIntensity:\n        \"\"\"Determine appropriate treatment intensity\"\"\"\n        \n        # Check crisis indicators\n        risk_factors = diagnosis.get('risk_factors', [])\n        if any('suicidal' in str(rf).lower() or 'crisis' in str(rf).lower() for rf in risk_factors):\n            return TreatmentIntensity.CRISIS\n        \n        # Check symptom severity\n        severity = patient_profile.get('symptom_severity', 5)\n        if severity \u003e= 8:\n            return TreatmentIntensity.INTENSIVE\n        elif severity \u003e= 6:\n            return TreatmentIntensity.WEEKLY_SESSIONS\n        elif severity \u003e= 4:\n            return TreatmentIntensity.BIWEEKLY_SESSIONS\n        else:\n            return TreatmentIntensity.SELF_GUIDED\n    \n    def _generate_activity_plan(self,\n                               primary: TreatmentType,\n                               secondary: List[TreatmentType],\n                               intensity: TreatmentIntensity,\n                               patient_profile: Dict[str, Any]) -\u003e List[Dict[str, Any]]:\n        \"\"\"Generate personalized activity plan\"\"\"\n        activities = []\n        \n        # Get primary modality activities\n        primary_activities = self.activity_library.get(primary, [])\n        \n        # Filter by patient capability\n        max_difficulty = patient_profile.get('therapy_experience', 'none')\n        difficulty_map = {\n            'none': 'easy',\n            'some': 'moderate',\n            'extensive': 'hard'\n        }\n        max_diff = difficulty_map.get(max_difficulty, 'moderate')\n        \n        # Select appropriate activities\n        for activity in primary_activities:\n            if self._compare_difficulty(activity['difficulty'], max_diff) \u003c= 0:\n                activities.append({\n                    **activity,\n                    'modality': primary.value,\n                    'priority': 'high'\n                })\n        \n        # Add secondary modality activities\n        for modality in secondary:\n            modality_activities = self.activity_library.get(modality, [])\n            for activity in modality_activities[:2]:  # Limit to 2 per secondary\n                if self._compare_difficulty(activity['difficulty'], max_diff) \u003c= 0:\n                    activities.append({\n                        **activity,\n                        'modality': modality.value,\n                        'priority': 'medium'\n                    })\n        \n        # Adjust frequency based on intensity\n        if intensity == TreatmentIntensity.SELF_GUIDED:\n            # Reduce frequency for self-guided\n            for activity in activities:\n                if activity['frequency'] == 'daily':\n                    activity['frequency'] = '3x/week'\n                elif activity['frequency'] == '2x/day':\n                    activity['frequency'] = 'daily'\n        \n        return activities\n    \n    def _compare_difficulty(self, diff1: str, diff2: str) -\u003e int:\n        \"\"\"Compare difficulty levels\"\"\"\n        levels = {'easy': 0, 'moderate': 1, 'hard': 2}\n        return levels.get(diff1, 1) - levels.get(diff2, 1)\n    \n    def _generate_treatment_goals(self,\n                                diagnosis: Dict[str, Any],\n                                patient_profile: Dict[str, Any],\n                                duration_weeks: int) -\u003e List[Dict[str, Any]]:\n        \"\"\"Generate SMART treatment goals\"\"\"\n        goals = []\n        \n        # Primary symptom reduction goal\n        primary_condition = diagnosis.get('primary_diagnosis', 'symptoms')\n        goals.append({\n            'type': 'symptom_reduction',\n            'description': f'Reduce {primary_condition} symptoms by 50%',\n            'target_date': (datetime.utcnow() + timedelta(weeks=duration_weeks)).isoformat(),\n            'measurement': 'Weekly symptom tracking scores',\n            'milestone_1': f'25% reduction by week {duration_weeks//2}',\n            'milestone_2': f'40% reduction by week {int(duration_weeks*0.75)}'\n        })\n        \n        # Functional improvement goal\n        goals.append({\n            'type': 'functional_improvement',\n            'description': 'Improve daily functioning and quality of life',\n            'target_date': (datetime.utcnow() + timedelta(weeks=duration_weeks)).isoformat(),\n            'measurement': 'Functional assessment scores',\n            'milestone_1': 'Resume 2 previously avoided activities',\n            'milestone_2': 'Maintain consistent daily routine'\n        })\n        \n        # Skill development goal\n        goals.append({\n            'type': 'skill_development',\n            'description': 'Master core therapeutic techniques',\n            'target_date': (datetime.utcnow() + timedelta(weeks=duration_weeks//2)).isoformat(),\n            'measurement': 'Skill practice logs and self-ratings',\n            'milestone_1': 'Complete initial skill training modules',\n            'milestone_2': 'Apply skills independently in daily life'\n        })\n        \n        # Relapse prevention goal (if applicable)\n        if duration_weeks \u003e 12:\n            goals.append({\n                'type': 'relapse_prevention',\n                'description': 'Develop robust relapse prevention plan',\n                'target_date': (datetime.utcnow() + timedelta(weeks=duration_weeks)).isoformat(),\n                'measurement': 'Completed prevention plan and practice logs',\n                'milestone_1': 'Identify triggers and early warning signs',\n                'milestone_2': 'Practice prevention strategies successfully'\n            })\n        \n        return goals\n    \n    def _create_monitoring_plan(self,\n                              diagnosis: Dict[str, Any],\n                              intensity: TreatmentIntensity) -\u003e Dict[str, Any]:\n        \"\"\"Create comprehensive monitoring plan\"\"\"\n        \n        # Base monitoring frequency\n        frequency_map = {\n            TreatmentIntensity.CRISIS: 'daily',\n            TreatmentIntensity.INTENSIVE: 'every 3 days',\n            TreatmentIntensity.WEEKLY_SESSIONS: 'weekly',\n            TreatmentIntensity.BIWEEKLY_SESSIONS: 'biweekly',\n            TreatmentIntensity.SELF_GUIDED: 'weekly'\n        }\n        \n        monitoring_plan = {\n            'symptom_tracking': {\n                'frequency': frequency_map[intensity],\n                'methods': ['digital mood diary', 'standardized assessments'],\n                'alerts': {\n                    'severe_symptoms': 'Immediate notification',\n                    'worsening_trend': 'Alert after 3 consecutive increases',\n                    'missed_tracking': 'Reminder after 2 missed entries'\n                }\n            },\n            'progress_reviews': {\n                'frequency': 'monthly',\n                'components': ['symptom scores', 'goal progress', 'activity completion'],\n                'adjustment_triggers': ['\u003c25% improvement after 4 weeks', 'patient request']\n            },\n            'safety_monitoring': {\n                'risk_assessment': 'At each contact',\n                'crisis_protocol': 'Activated if risk indicators present',\n                'emergency_contacts': 'Updated and verified monthly'\n            },\n            'engagement_tracking': {\n                'activity_completion': 'Daily automatic tracking',\n                'session_attendance': 'Per session',\n                'homework_compliance': 'Weekly review'\n            }\n        }\n        \n        return monitoring_plan\n    \n    def _calculate_plan_confidence(self,\n                                 ai_recommendations: Dict[str, Any],\n                                 evidence_level: str,\n                                 patient_profile: Dict[str, Any]) -\u003e float:\n        \"\"\"Calculate confidence in treatment plan\"\"\"\n        \n        # Start with AI consensus confidence\n        base_confidence = ai_recommendations.get('overall_confidence', 0.7)\n        \n        # Adjust for evidence level\n        evidence_multipliers = {\n            'high': 1.1,\n            'moderate': 1.0,\n            'low': 0.9\n        }\n        base_confidence *= evidence_multipliers.get(evidence_level, 1.0)\n        \n        # Adjust for patient factors\n        if patient_profile.get('previous_therapy_success'):\n            base_confidence *= 1.1\n        \n        if patient_profile.get('motivation_level', 5) \u003e 7:\n            base_confidence *= 1.05\n        \n        # Cap confidence\n        return min(base_confidence, 0.95)\n    \n    def adapt_treatment_plan(self,\n                           current_plan: TreatmentPlan,\n                           progress_data: Dict[str, Any],\n                           patient_feedback: Dict[str, Any]) -\u003e TreatmentPlan:\n        \"\"\"Adapt treatment plan based on progress and feedback\"\"\"\n        \n        # Analyze progress\n        improvement_rate = progress_data.get('symptom_improvement', 0)\n        engagement_rate = progress_data.get('activity_completion_rate', 0)\n        \n        # Create modified plan\n        new_plan = current_plan\n        \n        # Adjust intensity if needed\n        if improvement_rate \u003c 0.25 and current_plan.duration_weeks \u003e 4:\n            # Not improving enough - increase intensity\n            if current_plan.intensity == TreatmentIntensity.SELF_GUIDED:\n                new_plan.intensity = TreatmentIntensity.BIWEEKLY_SESSIONS\n            elif current_plan.intensity == TreatmentIntensity.BIWEEKLY_SESSIONS:\n                new_plan.intensity = TreatmentIntensity.WEEKLY_SESSIONS\n        \n        # Adjust activities based on engagement\n        if engagement_rate \u003c 0.5:\n            # Low engagement - simplify activities\n            new_plan.activities = [a for a in new_plan.activities if a['difficulty'] != 'hard']\n            \n            # Add more engaging activities\n            for activity in new_plan.activities:\n                if activity.get('digital_tool'):\n                    activity['gamification'] = True\n                    activity['reminder_frequency'] = 'daily'\n        \n        # Update based on patient feedback\n        if patient_feedback.get('too_time_consuming'):\n            # Reduce activity duration\n            for activity in new_plan.activities:\n                activity['duration_minutes'] = int(activity['duration_minutes'] * 0.75)\n        \n        if patient_feedback.get('preferred_activities'):\n            # Prioritize preferred activities\n            preferred = patient_feedback['preferred_activities']\n            for activity in new_plan.activities:\n                if activity['name'] in preferred:\n                    activity['priority'] = 'high'\n        \n        return new_plan\n    \n    def get_crisis_intervention_plan(self, risk_level: str) -\u003e Dict[str, Any]:\n        \"\"\"Get immediate crisis intervention plan\"\"\"\n        \n        crisis_plans = {\n            'high': {\n                'immediate_actions': [\n                    'Contact crisis support immediately',\n                    'Ensure safety - remove means',\n                    'Do not leave person alone',\n                    'Call emergency services if imminent danger'\n                ],\n                'coping_strategies': [\n                    'TIPP technique (Temperature, Intense exercise, Paced breathing, Paired muscle relaxation)',\n                    'Distraction with intense sensations',\n                    'Contact support person from safety plan'\n                ],\n                'professional_contact': 'Immediate - within 1 hour',\n                'follow_up': 'Daily until crisis resolves'\n            },\n            'moderate': {\n                'immediate_actions': [\n                    'Implement safety plan',\n                    'Contact therapist within 24 hours',\n                    'Increase support check-ins'\n                ],\n                'coping_strategies': [\n                    'Grounding exercises (5-4-3-2-1)',\n                    'Safe place visualization',\n                    'Call warm line or text crisis line'\n                ],\n                'professional_contact': 'Within 24 hours',\n                'follow_up': 'Every 2-3 days'\n            },\n            'low': {\n                'immediate_actions': [\n                    'Review and update safety plan',\n                    'Schedule additional session if needed',\n                    'Increase self-monitoring'\n                ],\n                'coping_strategies': [\n                    'Regular coping skills practice',\n                    'Maintain routine',\n                    'Engage support network'\n                ],\n                'professional_contact': 'Next scheduled session',\n                'follow_up': 'Weekly'\n            }\n        }\n        \n        return crisis_plans.get(risk_level, crisis_plans['moderate'])",
                "video_analyzer.py": "import json\nimport logging\nimport os\nfrom datetime import datetime\nfrom openai import OpenAI\n\nclass VideoAnalyzer:\n    def __init__(self):\n        self.openai_client = OpenAI(api_key=os.environ.get(\"OPENAI_API_KEY\", \"demo-key\"))\n        \n        # Emotion categories and their indicators\n        self.emotion_categories = {\n            \"happiness\": {\"indicators\": [\"smile\", \"bright eyes\", \"relaxed features\"], \"color\": \"#28a745\"},\n            \"sadness\": {\"indicators\": [\"downturned mouth\", \"droopy eyes\", \"furrowed brow\"], \"color\": \"#6c757d\"},\n            \"anger\": {\"indicators\": [\"tense jaw\", \"narrowed eyes\", \"tight lips\"], \"color\": \"#dc3545\"},\n            \"fear\": {\"indicators\": [\"wide eyes\", \"raised eyebrows\", \"tense expression\"], \"color\": \"#ffc107\"},\n            \"surprise\": {\"indicators\": [\"raised eyebrows\", \"wide eyes\", \"open mouth\"], \"color\": \"#17a2b8\"},\n            \"disgust\": {\"indicators\": [\"wrinkled nose\", \"curled lip\", \"squinted eyes\"], \"color\": \"#6f42c1\"},\n            \"anxiety\": {\"indicators\": [\"tense muscles\", \"fidgeting\", \"rapid blinking\"], \"color\": \"#fd7e14\"},\n            \"stress\": {\"indicators\": [\"tight jaw\", \"tense forehead\", \"shallow breathing\"], \"color\": \"#e83e8c\"},\n            \"neutral\": {\"indicators\": [\"relaxed expression\", \"steady gaze\"], \"color\": \"#007bff\"}\n        }\n        \n        # Microexpression indicators\n        self.microexpressions = {\n            \"concealed_emotion\": {\"indicators\": [\"brief facial changes\", \"asymmetrical expressions\"], \"duration\": \"\u003c 0.5s\"},\n            \"deception\": {\"indicators\": [\"incongruent expressions\", \"delayed responses\"], \"duration\": \"\u003c 1s\"},\n            \"suppressed_feelings\": {\"indicators\": [\"partial expressions\", \"quick recoveries\"], \"duration\": \"\u003c 0.3s\"},\n            \"emotional_conflict\": {\"indicators\": [\"mixed expressions\", \"rapid changes\"], \"duration\": \"\u003c 1s\"},\n            \"masked_distress\": {\"indicators\": [\"forced smile\", \"tight eyes\"], \"duration\": \"\u003c 0.5s\"}\n        }\n        \n        # Stress indicators\n        self.stress_indicators = {\n            \"physiological\": [\"increased blinking\", \"jaw tension\", \"forehead wrinkles\"],\n            \"behavioral\": [\"fidgeting\", \"avoiding eye contact\", \"repetitive movements\"],\n            \"vocal\": [\"pitch changes\", \"speech hesitation\", \"volume variations\"]\n        }\n    \n    def analyze_frame(self, frame_data):\n        \"\"\"Analyze a video frame for emotions and microexpressions\"\"\"\n        try:\n            if not frame_data:\n                return {\"error\": \"No frame data provided\"}\n            \n            # Use OpenAI Vision API for facial analysis\n            analysis = self._analyze_with_openai_vision(frame_data)\n            \n            # Combine with rule-based analysis\n            enhanced_analysis = self._enhance_analysis(analysis)\n            \n            # Add stress level calculation\n            stress_level = self._calculate_stress_level(enhanced_analysis)\n            \n            return {\n                \"emotions\": enhanced_analysis.get(\"emotions\", {}),\n                \"primary_emotion\": self._get_primary_emotion(enhanced_analysis.get(\"emotions\", {})),\n                \"microexpressions\": enhanced_analysis.get(\"microexpressions\", {}),\n                \"facial_landmarks\": enhanced_analysis.get(\"facial_landmarks\", {}),\n                \"eye_contact\": enhanced_analysis.get(\"eye_contact\", \"unknown\"),\n                \"engagement_level\": enhanced_analysis.get(\"engagement_level\", 0.5),\n                \"stress_level\": stress_level,\n                \"confidence\": enhanced_analysis.get(\"confidence\", 0),\n                \"recommendations\": self._generate_recommendations(enhanced_analysis, stress_level),\n                \"timestamp\": datetime.now().isoformat()\n            }\n            \n        except Exception as e:\n            logging.error(f\"Video analysis error: {e}\")\n            return self._fallback_analysis()\n    \n    def _analyze_with_openai_vision(self, frame_data):\n        \"\"\"Use OpenAI Vision API for comprehensive facial analysis\"\"\"\n        try:\n            # the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024.\n            # do not change this unless explicitly requested by the user\n            \n            response = self.openai_client.chat.completions.create(\n                model=\"gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\",\n                        \"content\": \"\"\"You are an expert in facial expression analysis and microexpression detection for therapeutic purposes.\n                        Analyze the image for:\n                        1. Primary emotions (happiness, sadness, anger, fear, surprise, disgust, anxiety, stress, neutral)\n                        2. Microexpressions and brief facial changes\n                        3. Eye contact and gaze patterns\n                        4. Engagement level (0-1 scale)\n                        5. Stress indicators\n                        6. Overall confidence in analysis\n                        \n                        Respond in JSON format with emotion scores (0-1), confidence levels, and detailed observations.\n                        Be therapeutic and supportive in your analysis.\"\"\"\n                    },\n                    {\n                        \"role\": \"user\",\n                        \"content\": [\n                            {\n                                \"type\": \"text\",\n                                \"text\": \"Please analyze this facial expression for therapeutic insights including emotions, microexpressions, stress indicators, and engagement level.\"\n                            },\n                            {\n                                \"type\": \"image_url\",\n                                \"image_url\": {\"url\": f\"data:image/jpeg;base64,{frame_data}\"}\n                            }\n                        ]\n                    }\n                ],\n                response_format={\"type\": \"json_object\"},\n                max_tokens=1000\n            )\n            \n            return json.loads(response.choices[0].message.content)\n            \n        except Exception as e:\n            logging.error(f\"OpenAI Vision API error: {e}\")\n            return self._fallback_analysis()\n    \n    def _enhance_analysis(self, openai_analysis):\n        \"\"\"Enhance OpenAI analysis with additional processing\"\"\"\n        enhanced = openai_analysis.copy()\n        \n        # Ensure emotions is a dictionary with float values\n        emotions = enhanced.get(\"emotions\", {})\n        if not isinstance(emotions, dict):\n            emotions = {\"neutral\": 0.8}\n        \n        # Normalize emotion scores\n        normalized_emotions = {}\n        for emotion, score in emotions.items():\n            if isinstance(score, (int, float)):\n                normalized_emotions[emotion] = max(0, min(1, float(score)))\n            else:\n                normalized_emotions[emotion] = 0.5\n        \n        enhanced[\"emotions\"] = normalized_emotions\n        \n        # Calculate emotional complexity\n        emotion_count = sum(1 for score in normalized_emotions.values() if score \u003e 0.3)\n        enhanced[\"emotional_complexity\"] = emotion_count\n        \n        # Detect emotional inconsistencies\n        enhanced[\"emotional_conflict\"] = self._detect_emotional_inconsistency(normalized_emotions)\n        \n        # Add engagement level if missing\n        if \"engagement_level\" not in enhanced:\n            enhanced[\"engagement_level\"] = self._calculate_engagement_level(normalized_emotions)\n        \n        # Add eye contact assessment if missing\n        if \"eye_contact\" not in enhanced:\n            enhanced[\"eye_contact\"] = self._assess_eye_contact(enhanced)\n        \n        return enhanced\n    \n    def _get_primary_emotion(self, emotions):\n        \"\"\"Get the primary emotion from emotion scores\"\"\"\n        if not emotions:\n            return \"neutral\"\n        \n        primary = max(emotions.keys(), key=lambda k: emotions.get(k, 0))\n        return primary if emotions.get(primary, 0) \u003e 0.3 else \"neutral\"\n    \n    def _detect_emotional_inconsistency(self, emotions):\n        \"\"\"Detect conflicting emotional expressions\"\"\"\n        positive_emotions = [\"happiness\", \"surprise\"]\n        negative_emotions = [\"sadness\", \"anger\", \"fear\", \"disgust\", \"anxiety\", \"stress\"]\n        \n        positive_score = sum(emotions.get(emotion, 0) for emotion in positive_emotions)\n        negative_score = sum(emotions.get(emotion, 0) for emotion in negative_emotions)\n        \n        # If both positive and negative emotions are high, there's inconsistency\n        return positive_score \u003e 0.5 and negative_score \u003e 0.5\n    \n    def _calculate_stress_level(self, analysis):\n        \"\"\"Calculate overall stress level from analysis\"\"\"\n        emotions = analysis.get(\"emotions\", {})\n        stress_emotions = [\"anxiety\", \"fear\", \"anger\", \"stress\"]\n        \n        stress_score = sum(emotions.get(emotion, 0) for emotion in stress_emotions)\n        \n        # Add baseline stress from sadness and other indicators\n        stress_score += emotions.get(\"sadness\", 0) * 0.5\n        stress_score += emotions.get(\"disgust\", 0) * 0.3\n        \n        # Consider microexpressions\n        microexpressions = analysis.get(\"microexpressions\", {})\n        if isinstance(microexpressions, dict):\n            for micro_type, micro_data in microexpressions.items():\n                if micro_type in [\"suppressed_feelings\", \"masked_distress\"]:\n                    stress_score += 0.2\n        \n        # Consider engagement level (low engagement might indicate stress)\n        engagement = analysis.get(\"engagement_level\", 0.5)\n        if engagement \u003c 0.3:\n            stress_score += 0.2\n        \n        return min(stress_score, 1.0)\n    \n    def _calculate_engagement_level(self, emotions):\n        \"\"\"Calculate engagement level from emotions\"\"\"\n        engaging_emotions = [\"happiness\", \"surprise\", \"anger\"]  # Active emotions\n        disengaging_emotions = [\"sadness\", \"fear\", \"neutral\"]   # Passive emotions\n        \n        engaging_score = sum(emotions.get(emotion, 0) for emotion in engaging_emotions)\n        disengaging_score = sum(emotions.get(emotion, 0) for emotion in disengaging_emotions)\n        \n        # Base engagement is 0.5, adjust based on emotion balance\n        engagement = 0.5 + (engaging_score - disengaging_score) * 0.3\n        return max(0, min(1, engagement))\n    \n    def _assess_eye_contact(self, analysis):\n        \"\"\"Assess eye contact quality\"\"\"\n        # This would normally use facial landmark detection\n        # For now, provide a reasonable assessment based on engagement\n        engagement = analysis.get(\"engagement_level\", 0.5)\n        \n        if engagement \u003e 0.7:\n            return \"excellent\"\n        elif engagement \u003e 0.5:\n            return \"good\"\n        elif engagement \u003e 0.3:\n            return \"moderate\"\n        else:\n            return \"poor\"\n    \n    def _generate_recommendations(self, analysis, stress_level):\n        \"\"\"Generate therapeutic recommendations based on analysis\"\"\"\n        recommendations = []\n        emotions = analysis.get(\"emotions\", {})\n        \n        # High stress recommendations\n        if stress_level \u003e 0.7:\n            recommendations.extend([\n                \"Consider taking a brief pause to practice deep breathing\",\n                \"Notice any physical tension and try to relax those muscles\",\n                \"Ground yourself by focusing on the present moment\"\n            ])\n        elif stress_level \u003e 0.5:\n            recommendations.extend([\n                \"Pay attention to your stress levels during this conversation\",\n                \"Practice mindful breathing if you feel overwhelmed\"\n            ])\n        \n        # Specific emotion recommendations\n        primary_emotion = self._get_primary_emotion(emotions)\n        \n        if primary_emotion == \"anxiety\" and emotions.get(\"anxiety\", 0) \u003e 0.6:\n            recommendations.append(\"Use grounding techniques like the 5-4-3-2-1 method\")\n        elif primary_emotion == \"sadness\" and emotions.get(\"sadness\", 0) \u003e 0.6:\n            recommendations.append(\"It's okay to feel sad - allow yourself to experience these emotions\")\n        elif primary_emotion == \"anger\" and emotions.get(\"anger\", 0) \u003e 0.6:\n            recommendations.append(\"Take some deep breaths and consider what's behind the anger\")\n        elif primary_emotion == \"fear\" and emotions.get(\"fear\", 0) \u003e 0.6:\n            recommendations.append(\"You're in a safe space - try to identify what feels threatening\")\n        \n        # Emotional conflict recommendations\n        if analysis.get(\"emotional_conflict\"):\n            recommendations.append(\"I notice mixed emotions - it's normal to feel multiple things at once\")\n        \n        # Engagement recommendations\n        engagement = analysis.get(\"engagement_level\", 0.5)\n        if engagement \u003c 0.3:\n            recommendations.append(\"Take your time - there's no pressure to engage more than feels comfortable\")\n        elif engagement \u003e 0.8:\n            recommendations.append(\"I appreciate your openness and engagement in this process\")\n        \n        # Eye contact recommendations\n        eye_contact = analysis.get(\"eye_contact\", \"unknown\")\n        if eye_contact == \"poor\":\n            recommendations.append(\"It's okay if direct eye contact feels difficult right now\")\n        \n        return recommendations[:3]  # Limit to top 3 recommendations\n    \n    def _fallback_analysis(self):\n        \"\"\"Fallback analysis when AI is unavailable\"\"\"\n        return {\n            \"emotions\": {\"neutral\": 0.8, \"anxiety\": 0.2},\n            \"primary_emotion\": \"neutral\",\n            \"microexpressions\": {},\n            \"facial_landmarks\": {},\n            \"eye_contact\": \"moderate\",\n            \"engagement_level\": 0.6,\n            \"stress_level\": 0.3,\n            \"confidence\": 0.3,\n            \"recommendations\": [\"Video analysis temporarily unavailable - continue with text-based support\"],\n            \"error\": \"AI analysis service unavailable\"\n        }\n    \n    def analyze_sequence(self, frame_sequence):\n        \"\"\"Analyze a sequence of frames for patterns\"\"\"\n        try:\n            if not frame_sequence:\n                return {\"error\": \"No frame sequence provided\"}\n            \n            frame_analyses = []\n            for i, frame_data in enumerate(frame_sequence):\n                analysis = self.analyze_frame(frame_data)\n                analysis[\"frame_index\"] = i\n                frame_analyses.append(analysis)\n            \n            # Analyze patterns across frames\n            sequence_analysis = {\n                \"frame_count\": len(frame_analyses),\n                \"emotional_trajectory\": self._analyze_emotional_trajectory(frame_analyses),\n                \"stress_progression\": self._analyze_stress_progression(frame_analyses),\n                \"engagement_patterns\": self._analyze_engagement_patterns(frame_analyses),\n                \"microexpression_events\": self._count_microexpression_events(frame_analyses),\n                \"overall_assessment\": self._generate_sequence_assessment(frame_analyses),\n                \"timestamp\": datetime.now().isoformat()\n            }\n            \n            return sequence_analysis\n            \n        except Exception as e:\n            logging.error(f\"Sequence analysis error: {e}\")\n            return {\"error\": \"Failed to analyze frame sequence\"}\n    \n    def _analyze_emotional_trajectory(self, frame_analyses):\n        \"\"\"Analyze how emotions change over time\"\"\"\n        emotions_over_time = {}\n        \n        for analysis in frame_analyses:\n            emotions = analysis.get(\"emotions\", {})\n            for emotion, score in emotions.items():\n                if emotion not in emotions_over_time:\n                    emotions_over_time[emotion] = []\n                emotions_over_time[emotion].append(score)\n        \n        trajectory = {}\n        for emotion, scores in emotions_over_time.items():\n            if scores:\n                trajectory[emotion] = {\n                    \"start\": scores[0],\n                    \"end\": scores[-1],\n                    \"change\": scores[-1] - scores[0],\n                    \"average\": sum(scores) / len(scores),\n                    \"volatility\": self._calculate_volatility(scores)\n                }\n        \n        return trajectory\n    \n    def _analyze_stress_progression(self, frame_analyses):\n        \"\"\"Analyze stress level changes over time\"\"\"\n        stress_levels = [analysis.get(\"stress_level\", 0) for analysis in frame_analyses]\n        \n        if not stress_levels:\n            return {}\n        \n        return {\n            \"initial_stress\": stress_levels[0],\n            \"final_stress\": stress_levels[-1],\n            \"peak_stress\": max(stress_levels),\n            \"average_stress\": sum(stress_levels) / len(stress_levels),\n            \"stress_trend\": \"increasing\" if stress_levels[-1] \u003e stress_levels[0] else \"decreasing\",\n            \"stress_variability\": self._calculate_volatility(stress_levels)\n        }\n    \n    def _analyze_engagement_patterns(self, frame_analyses):\n        \"\"\"Analyze engagement level patterns\"\"\"\n        engagement_levels = [analysis.get(\"engagement_level\", 0.5) for analysis in frame_analyses]\n        \n        return {\n            \"average_engagement\": sum(engagement_levels) / len(engagement_levels),\n            \"peak_engagement\": max(engagement_levels),\n            \"lowest_engagement\": min(engagement_levels),\n            \"engagement_consistency\": 1 - self._calculate_volatility(engagement_levels)\n        }\n    \n    def _count_microexpression_events(self, frame_analyses):\n        \"\"\"Count microexpression events across frames\"\"\"\n        microexpression_counts = {}\n        \n        for analysis in frame_analyses:\n            microexpressions = analysis.get(\"microexpressions\", {})\n            if isinstance(microexpressions, dict):\n                for micro_type in microexpressions.keys():\n                    microexpression_counts[micro_type] = microexpression_counts.get(micro_type, 0) + 1\n        \n        return microexpression_counts\n    \n    def _generate_sequence_assessment(self, frame_analyses):\n        \"\"\"Generate overall assessment for the sequence\"\"\"\n        if not frame_analyses:\n            return \"No data available for assessment\"\n        \n        avg_stress = sum(analysis.get(\"stress_level\", 0) for analysis in frame_analyses) / len(frame_analyses)\n        avg_engagement = sum(analysis.get(\"engagement_level\", 0.5) for analysis in frame_analyses) / len(frame_analyses)\n        \n        assessment = []\n        \n        if avg_stress \u003e 0.7:\n            assessment.append(\"High stress levels detected throughout the session\")\n        elif avg_stress \u003e 0.5:\n            assessment.append(\"Moderate stress levels observed\")\n        else:\n            assessment.append(\"Relatively low stress levels maintained\")\n        \n        if avg_engagement \u003e 0.7:\n            assessment.append(\"Strong engagement demonstrated\")\n        elif avg_engagement \u003e 0.5:\n            assessment.append(\"Moderate engagement levels\")\n        else:\n            assessment.append(\"Lower engagement levels observed\")\n        \n        return \". \".join(assessment)\n    \n    def _calculate_volatility(self, values):\n        \"\"\"Calculate volatility (standard deviation) of a list of values\"\"\"\n        if len(values) \u003c 2:\n            return 0\n        \n        mean = sum(values) / len(values)\n        variance = sum((x - mean) ** 2 for x in values) / len(values)\n        return variance ** 0.5\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "creationTimestamp": "2025-10-09T00:14:52Z",
                "name": "app-cm2",
                "namespace": "default",
                "resourceVersion": "1759968892279583016",
                "uid": "25527590-9d9a-4bcf-9fea-14c07ddcc48f"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "404.html": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003ePage Not Found - Mind Mend\u003c/title\u003e\n    \u003clink href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\"\u003e\n    \u003cstyle\u003e\n        body {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        .error-container {\n            background: rgba(255, 255, 255, 0.95);\n            border-radius: 20px;\n            padding: 3rem;\n            text-align: center;\n            max-width: 500px;\n        }\n    \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003cdiv class=\"error-container\"\u003e\n        \u003ci class=\"fas fa-exclamation-triangle fa-4x text-warning mb-3\"\u003e\u003c/i\u003e\n        \u003ch1 class=\"display-4\"\u003e404\u003c/h1\u003e\n        \u003ch4\u003ePage Not Found\u003c/h4\u003e\n        \u003cp class=\"text-muted\"\u003eThe page you're looking for doesn't exist.\u003c/p\u003e\n        \u003ca href=\"/\" class=\"btn btn-primary\"\u003e\n            \u003ci class=\"fas fa-home me-2\"\u003e\u003c/i\u003eBack to Home\n        \u003c/a\u003e\n    \u003c/div\u003e\n\u003c/body\u003e\n\u003c/html\u003e",
                "500.html": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eServer Error - Mind Mend\u003c/title\u003e\n    \u003clink href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\"\u003e\n    \u003cstyle\u003e\n        body {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        .error-container {\n            background: rgba(255, 255, 255, 0.95);\n            border-radius: 20px;\n            padding: 3rem;\n            text-align: center;\n            max-width: 500px;\n        }\n    \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003cdiv class=\"error-container\"\u003e\n        \u003ci class=\"fas fa-exclamation-circle fa-4x text-danger mb-3\"\u003e\u003c/i\u003e\n        \u003ch1 class=\"display-4\"\u003e500\u003c/h1\u003e\n        \u003ch4\u003eServer Error\u003c/h4\u003e\n        \u003cp class=\"text-muted\"\u003eSomething went wrong on our end. Please try again later.\u003c/p\u003e\n        \u003ca href=\"/\" class=\"btn btn-primary\"\u003e\n            \u003ci class=\"fas fa-home me-2\"\u003e\u003c/i\u003eBack to Home\n        \u003c/a\u003e\n    \u003c/div\u003e\n\u003c/body\u003e\n\u003c/html\u003e",
                "activities.html": "{% extends \"base.html\" %}\n\n{% block title %}Therapeutic Activities - Mind Mend{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-12\"\u003e\n            \u003cdiv class=\"card mb-4\"\u003e\n                \u003cdiv class=\"card-header bg-primary text-white\"\u003e\n                    \u003ch2 class=\"mb-0\"\u003e\u003ci class=\"fas fa-tasks me-2\"\u003e\u003c/i\u003eTherapeutic Activities \u0026 Exercises\u003c/h2\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cp class=\"lead\"\u003eExplore evidence-based activities designed to support your mental health journey.\u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Activity Categories --\u003e\n    \u003cdiv class=\"row mb-4\"\u003e\n        \u003cdiv class=\"col-12\"\u003e\n            \u003cdiv class=\"btn-group flex-wrap\" role=\"group\"\u003e\n                \u003cbutton class=\"btn btn-outline-primary active\" onclick=\"filterActivities('all')\"\u003eAll Activities\u003c/button\u003e\n                \u003cbutton class=\"btn btn-outline-primary\" onclick=\"filterActivities('mindfulness')\"\u003eMindfulness\u003c/button\u003e\n                \u003cbutton class=\"btn btn-outline-primary\" onclick=\"filterActivities('cognitive')\"\u003eCognitive\u003c/button\u003e\n                \u003cbutton class=\"btn btn-outline-primary\" onclick=\"filterActivities('behavioral')\"\u003eBehavioral\u003c/button\u003e\n                \u003cbutton class=\"btn btn-outline-primary\" onclick=\"filterActivities('emotional')\"\u003eEmotional\u003c/button\u003e\n                \u003cbutton class=\"btn btn-outline-primary\" onclick=\"filterActivities('interpersonal')\"\u003eInterpersonal\u003c/button\u003e\n                \u003cbutton class=\"btn btn-outline-primary\" onclick=\"filterActivities('creative')\"\u003eCreative\u003c/button\u003e\n                \u003cbutton class=\"btn btn-outline-primary\" onclick=\"filterActivities('somatic')\"\u003eBody-Based\u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Activities Grid --\u003e\n    \u003cdiv class=\"row\" id=\"activitiesGrid\"\u003e\n        \u003c!-- Mindfulness Activities --\u003e\n        \u003cdiv class=\"col-md-6 col-lg-4 mb-4 activity-card\" data-category=\"mindfulness\"\u003e\n            \u003cdiv class=\"card h-100\"\u003e\n                \u003cdiv class=\"card-header bg-info\"\u003e\n                    \u003ch5 class=\"mb-0 text-dark\"\u003e\u003ci class=\"fas fa-brain me-2\"\u003e\u003c/i\u003eBody Scan Meditation\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cp\u003e\u003cstrong\u003eDuration:\u003c/strong\u003e 15-20 minutes\u003c/p\u003e\n                    \u003cp\u003eSystematically focus on different parts of your body, noticing sensations without judgment.\u003c/p\u003e\n                    \u003cdiv class=\"mt-3\"\u003e\n                        \u003cbutton class=\"btn btn-sm btn-primary\" onclick=\"startActivity('body-scan')\"\u003e\n                            \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart Activity\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003cdiv class=\"col-md-6 col-lg-4 mb-4 activity-card\" data-category=\"mindfulness\"\u003e\n            \u003cdiv class=\"card h-100\"\u003e\n                \u003cdiv class=\"card-header bg-info\"\u003e\n                    \u003ch5 class=\"mb-0 text-dark\"\u003e\u003ci class=\"fas fa-hand-holding-heart me-2\"\u003e\u003c/i\u003e5-4-3-2-1 Grounding\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cp\u003e\u003cstrong\u003eDuration:\u003c/strong\u003e 5 minutes\u003c/p\u003e\n                    \u003cp\u003eUse your senses to ground yourself in the present moment and reduce anxiety.\u003c/p\u003e\n                    \u003cdiv class=\"mt-3\"\u003e\n                        \u003cbutton class=\"btn btn-sm btn-primary\" onclick=\"startActivity('grounding')\"\u003e\n                            \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart Activity\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Cognitive Activities --\u003e\n        \u003cdiv class=\"col-md-6 col-lg-4 mb-4 activity-card\" data-category=\"cognitive\"\u003e\n            \u003cdiv class=\"card h-100\"\u003e\n                \u003cdiv class=\"card-header bg-warning\"\u003e\n                    \u003ch5 class=\"mb-0 text-dark\"\u003e\u003ci class=\"fas fa-book me-2\"\u003e\u003c/i\u003eThought Record Journal\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cp\u003e\u003cstrong\u003eDuration:\u003c/strong\u003e 20 minutes\u003c/p\u003e\n                    \u003cp\u003eIdentify and challenge negative thought patterns using CBT techniques.\u003c/p\u003e\n                    \u003cdiv class=\"mt-3\"\u003e\n                        \u003cbutton class=\"btn btn-sm btn-primary\" onclick=\"startActivity('thought-record')\"\u003e\n                            \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart Activity\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003cdiv class=\"col-md-6 col-lg-4 mb-4 activity-card\" data-category=\"cognitive\"\u003e\n            \u003cdiv class=\"card h-100\"\u003e\n                \u003cdiv class=\"card-header bg-warning\"\u003e\n                    \u003ch5 class=\"mb-0 text-dark\"\u003e\u003ci class=\"fas fa-heart me-2\"\u003e\u003c/i\u003eGratitude Mapping\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cp\u003e\u003cstrong\u003eDuration:\u003c/strong\u003e 15 minutes\u003c/p\u003e\n                    \u003cp\u003eCreate a visual map of things you appreciate to shift focus to the positive.\u003c/p\u003e\n                    \u003cdiv class=\"mt-3\"\u003e\n                        \u003cbutton class=\"btn btn-sm btn-primary\" onclick=\"startActivity('gratitude-map')\"\u003e\n                            \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart Activity\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Behavioral Activities --\u003e\n        \u003cdiv class=\"col-md-6 col-lg-4 mb-4 activity-card\" data-category=\"behavioral\"\u003e\n            \u003cdiv class=\"card h-100\"\u003e\n                \u003cdiv class=\"card-header bg-success\"\u003e\n                    \u003ch5 class=\"mb-0 text-dark\"\u003e\u003ci class=\"fas fa-calendar-check me-2\"\u003e\u003c/i\u003eActivity Scheduling\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cp\u003e\u003cstrong\u003eDuration:\u003c/strong\u003e 15 minutes daily\u003c/p\u003e\n                    \u003cp\u003ePlan enjoyable and meaningful activities to combat depression and build routine.\u003c/p\u003e\n                    \u003cdiv class=\"mt-3\"\u003e\n                        \u003cbutton class=\"btn btn-sm btn-primary\" onclick=\"startActivity('activity-schedule')\"\u003e\n                            \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart Activity\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Emotional Activities --\u003e\n        \u003cdiv class=\"col-md-6 col-lg-4 mb-4 activity-card\" data-category=\"emotional\"\u003e\n            \u003cdiv class=\"card h-100\"\u003e\n                \u003cdiv class=\"card-header bg-danger\"\u003e\n                    \u003ch5 class=\"mb-0 text-dark\"\u003e\u003ci class=\"fas fa-palette me-2\"\u003e\u003c/i\u003eEmotion Wheel Check-In\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cp\u003e\u003cstrong\u003eDuration:\u003c/strong\u003e 10 minutes\u003c/p\u003e\n                    \u003cp\u003eIdentify and name complex emotions to improve emotional literacy.\u003c/p\u003e\n                    \u003cdiv class=\"mt-3\"\u003e\n                        \u003cbutton class=\"btn btn-sm btn-primary\" onclick=\"startActivity('emotion-wheel')\"\u003e\n                            \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart Activity\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Interpersonal Activities --\u003e\n        \u003cdiv class=\"col-md-6 col-lg-4 mb-4 activity-card\" data-category=\"interpersonal\"\u003e\n            \u003cdiv class=\"card h-100\"\u003e\n                \u003cdiv class=\"card-header bg-primary\"\u003e\n                    \u003ch5 class=\"mb-0\"\u003e\u003ci class=\"fas fa-users me-2\"\u003e\u003c/i\u003eActive Listening Practice\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cp\u003e\u003cstrong\u003eDuration:\u003c/strong\u003e 20 minutes\u003c/p\u003e\n                    \u003cp\u003eImprove communication through focused listening exercises with a partner.\u003c/p\u003e\n                    \u003cdiv class=\"mt-3\"\u003e\n                        \u003cbutton class=\"btn btn-sm btn-primary\" onclick=\"startActivity('active-listening')\"\u003e\n                            \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart Activity\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Creative Activities --\u003e\n        \u003cdiv class=\"col-md-6 col-lg-4 mb-4 activity-card\" data-category=\"creative\"\u003e\n            \u003cdiv class=\"card h-100\"\u003e\n                \u003cdiv class=\"card-header bg-info\"\u003e\n                    \u003ch5 class=\"mb-0 text-dark\"\u003e\u003ci class=\"fas fa-paint-brush me-2\"\u003e\u003c/i\u003eArt Therapy Expression\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cp\u003e\u003cstrong\u003eDuration:\u003c/strong\u003e 30-45 minutes\u003c/p\u003e\n                    \u003cp\u003eExpress emotions through creative art without judgment.\u003c/p\u003e\n                    \u003cdiv class=\"mt-3\"\u003e\n                        \u003cbutton class=\"btn btn-sm btn-primary\" onclick=\"startActivity('art-therapy')\"\u003e\n                            \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart Activity\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Somatic Activities --\u003e\n        \u003cdiv class=\"col-md-6 col-lg-4 mb-4 activity-card\" data-category=\"somatic\"\u003e\n            \u003cdiv class=\"card h-100\"\u003e\n                \u003cdiv class=\"card-header bg-success\"\u003e\n                    \u003ch5 class=\"mb-0 text-dark\"\u003e\u003ci class=\"fas fa-spa me-2\"\u003e\u003c/i\u003eProgressive Muscle Relaxation\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cp\u003e\u003cstrong\u003eDuration:\u003c/strong\u003e 20 minutes\u003c/p\u003e\n                    \u003cp\u003eSystematically tense and relax muscle groups to reduce physical tension.\u003c/p\u003e\n                    \u003cdiv class=\"mt-3\"\u003e\n                        \u003cbutton class=\"btn btn-sm btn-primary\" onclick=\"startActivity('pmr')\"\u003e\n                            \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart Activity\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Personalized Recommendations --\u003e\n    \u003cdiv class=\"row mt-4\"\u003e\n        \u003cdiv class=\"col-12\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-header bg-primary\"\u003e\n                    \u003ch4 class=\"mb-0\"\u003e\u003ci class=\"fas fa-star me-2\"\u003e\u003c/i\u003ePersonalized Recommendations\u003c/h4\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cp\u003eBased on your recent sessions, we recommend these activities:\u003c/p\u003e\n                    \u003cdiv id=\"recommendations\" class=\"row\"\u003e\n                        \u003c!-- Recommendations will be loaded here --\u003e\n                    \u003c/div\u003e\n                    \u003cbutton class=\"btn btn-primary mt-3\" onclick=\"getPersonalizedPlan()\"\u003e\n                        \u003ci class=\"fas fa-sync me-2\"\u003e\u003c/i\u003eGet New Recommendations\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cscript\u003e\n// Filter activities by category\nfunction filterActivities(category) {\n    const cards = document.querySelectorAll('.activity-card');\n    const buttons = document.querySelectorAll('.btn-group button');\n    \n    // Update active button\n    buttons.forEach(btn =\u003e btn.classList.remove('active'));\n    event.target.classList.add('active');\n    \n    // Show/hide cards\n    cards.forEach(card =\u003e {\n        if (category === 'all' || card.dataset.category === category) {\n            card.style.display = 'block';\n        } else {\n            card.style.display = 'none';\n        }\n    });\n}\n\n// Start an activity\nasync function startActivity(activityType) {\n    try {\n        const response = await fetch('/api/start_activity', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ activity_type: activityType })\n        });\n        \n        const data = await response.json();\n        if (data.redirect) {\n            window.location.href = data.redirect;\n        }\n    } catch (error) {\n        console.error('Error starting activity:', error);\n    }\n}\n\n// Get personalized activity recommendations\nasync function getPersonalizedPlan() {\n    try {\n        const response = await fetch('/api/personalized_activities');\n        const data = await response.json();\n        \n        const recommendationsDiv = document.getElementById('recommendations');\n        recommendationsDiv.innerHTML = '';\n        \n        data.activities.forEach(activity =\u003e {\n            const card = `\n                \u003cdiv class=\"col-md-4 mb-3\"\u003e\n                    \u003cdiv class=\"card\"\u003e\n                        \u003cdiv class=\"card-body\"\u003e\n                            \u003ch6\u003e${activity.name}\u003c/h6\u003e\n                            \u003cp class=\"small\"\u003e${activity.description}\u003c/p\u003e\n                            \u003cbutton class=\"btn btn-sm btn-primary\" onclick=\"startActivity('${activity.id}')\"\u003e\n                                Start\n                            \u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            `;\n            recommendationsDiv.innerHTML += card;\n        });\n    } catch (error) {\n        console.error('Error getting recommendations:', error);\n    }\n}\n\n// Load recommendations on page load\ndocument.addEventListener('DOMContentLoaded', getPersonalizedPlan);\n\u003c/script\u003e\n{% endblock %}",
                "ai_models.html": "{% extends \"base.html\" %}\n\n{% block title %}AI Models Management{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"container py-3\"\u003e\n  \u003ch2 class=\"mb-3\"\u003e\u003ci class=\"fas fa-robot me-2\"\u003e\u003c/i\u003eAI Models Management\u003c/h2\u003e\n  {% if error %}\n    \u003cdiv class=\"alert alert-danger\"\u003e{{ error }}\u003c/div\u003e\n  {% endif %}\n  \u003cdiv class=\"card\"\u003e\n    \u003cdiv class=\"card-body\"\u003e\n      \u003cdiv class=\"d-flex justify-content-between align-items-center mb-3\"\u003e\n        \u003cdiv\u003e\n          \u003cspan class=\"badge bg-primary\"\u003eTotal: {{ status.total_models }}\u003c/span\u003e\n          \u003cspan class=\"badge bg-success ms-2\"\u003eActive: {{ status.active_models }}\u003c/span\u003e\n        \u003c/div\u003e\n        \u003cbutton class=\"btn btn-outline-secondary btn-sm\" onclick=\"location.reload()\"\u003e\n          \u003ci class=\"fas fa-rotate\"\u003e\u003c/i\u003e Refresh\n        \u003c/button\u003e\n      \u003c/div\u003e\n\n      \u003cdiv class=\"table-responsive\"\u003e\n        \u003ctable class=\"table table-hover align-middle\"\u003e\n          \u003cthead\u003e\n            \u003ctr\u003e\n              \u003cth\u003eName\u003c/th\u003e\n              \u003cth\u003eType\u003c/th\u003e\n              \u003cth\u003eSpecialization\u003c/th\u003e\n              \u003cth\u003eAccuracy\u003c/th\u003e\n              \u003cth\u003eAvailable\u003c/th\u003e\n              \u003cth\u003eActive\u003c/th\u003e\n              \u003cth\u003eActions\u003c/th\u003e\n            \u003c/tr\u003e\n          \u003c/thead\u003e\n          \u003ctbody\u003e\n            {% for m in status.model_details %}\n            \u003ctr\u003e\n              \u003ctd\u003e\u003ccode\u003e{{ m.name }}\u003c/code\u003e\u003c/td\u003e\n              \u003ctd\u003e{{ m.type }}\u003c/td\u003e\n              \u003ctd\u003e{{ m.specialization or '-' }}\u003c/td\u003e\n              \u003ctd\u003e{{ '%.2f'|format(m.accuracy) if m.accuracy is not none else '—' }}\u003c/td\u003e\n              \u003ctd\u003e\n                {% if m.available %}\n                \u003cspan class=\"badge bg-success\"\u003eYes\u003c/span\u003e\n                {% else %}\n                \u003cspan class=\"badge bg-secondary\"\u003eNo\u003c/span\u003e\n                {% endif %}\n              \u003c/td\u003e\n              \u003ctd\u003e\n                {% if m.active %}\n                \u003cspan class=\"badge bg-success\"\u003eActive\u003c/span\u003e\n                {% else %}\n                \u003cspan class=\"badge bg-light text-dark\"\u003eInactive\u003c/span\u003e\n                {% endif %}\n              \u003c/td\u003e\n              \u003ctd\u003e\n                \u003cbutton class=\"btn btn-sm {{ 'btn-outline-danger' if m.active else 'btn-outline-primary' }}\" \n                        onclick=\"toggleModel('{{ m.name }}', {{ 'false' if m.active else 'true' }})\"\n                        {% if not m.available and not m.active %}disabled title=\"Model unavailable\"{% endif %}\u003e\n                  {% if m.active %}\u003ci class=\"fas fa-pause\"\u003e\u003c/i\u003e Deactivate{% else %}\u003ci class=\"fas fa-play\"\u003e\u003c/i\u003e Activate{% endif %}\n                \u003c/button\u003e\n              \u003c/td\u003e\n            \u003c/tr\u003e\n            {% endfor %}\n          \u003c/tbody\u003e\n        \u003c/table\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003cscript\u003e\nasync function toggleModel(name, active) {\n  try {\n    const res = await fetch('/api/ai-models/toggle', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ name, active })\n    });\n    if (!res.ok) {\n      const err = await res.json().catch(() =\u003e ({}));\n      alert('Failed to update model: ' + (err.error || res.status));\n      return;\n    }\n    location.reload();\n  } catch (e) {\n    alert('Error: ' + e);\n  }\n}\n\u003c/script\u003e\n{% endblock %}\n\n",
                "base.html": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\" data-bs-theme=\"dark\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003e{% block title %}Mind Mend - AI Mental Health Platform{% endblock %}\u003c/title\u003e\n    \n    \u003c!-- Bootstrap CSS --\u003e\n    \u003clink href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\u003e\n    \n    \u003c!-- Font Awesome for icons --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\"\u003e\n    \n    \u003c!-- Custom CSS - IMPORTANT: This must come AFTER Bootstrap --\u003e\n    \u003clink href=\"{{ url_for('static', filename='css/custom.css') }}\" rel=\"stylesheet\"\u003e\n    \n    \u003c!-- Chart.js for data visualization --\u003e\n    \u003cscript src=\"https://cdn.jsdelivr.net/npm/chart.js\"\u003e\u003c/script\u003e\n    \n    \u003c!-- Socket.IO for real-time communication --\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js\"\u003e\u003c/script\u003e\n    \n    {% block head %}{% endblock %}\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003c!-- Navigation --\u003e\n    \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003ca class=\"navbar-brand d-flex align-items-center\" href=\"{{ url_for('home') }}\"\u003e\n                \u003cimg src=\"/static/logos/mindmend_logo_4.svg\" alt=\"Mind Mend\" height=\"35\" class=\"me-2\"\u003e\n                \u003cspan\u003eMind Mend\u003c/span\u003e\n            \u003c/a\u003e\n            \n            \u003cbutton class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\"\u003e\n                \u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n            \u003c/button\u003e\n            \n            \u003cdiv class=\"collapse navbar-collapse\" id=\"navbarNav\"\u003e\n                \u003cul class=\"navbar-nav me-auto\"\u003e\n                    \u003cli class=\"nav-item\"\u003e\n                        \u003ca class=\"nav-link\" href=\"{{ url_for('home') }}\"\u003e\n                            \u003ci class=\"fas fa-home me-1\"\u003e\u003c/i\u003eHome\n                        \u003c/a\u003e\n                    \u003c/li\u003e\n                    \u003cli class=\"nav-item dropdown\"\u003e\n                        \u003ca class=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\"\u003e\n                            \u003ci class=\"fas fa-comments me-1\"\u003e\u003c/i\u003eTherapy\n                        \u003c/a\u003e\n                        \u003cul class=\"dropdown-menu\"\u003e\n                            \u003cli\u003e\u003ca class=\"dropdown-item\" href=\"{{ url_for('individual_therapy') }}\"\u003e\n                                \u003ci class=\"fas fa-user me-1\"\u003e\u003c/i\u003eIndividual\n                            \u003c/a\u003e\u003c/li\u003e\n                            \u003cli\u003e\u003ca class=\"dropdown-item\" href=\"{{ url_for('relationship_therapy') }}\"\u003e\n                                \u003ci class=\"fas fa-heart me-1\"\u003e\u003c/i\u003eRelationship\n                            \u003c/a\u003e\u003c/li\u003e\n                            \u003cli\u003e\u003ca class=\"dropdown-item\" href=\"{{ url_for('group_therapy') }}\"\u003e\n                                \u003ci class=\"fas fa-users me-1\"\u003e\u003c/i\u003eGroup\n                            \u003c/a\u003e\u003c/li\u003e\n                        \u003c/ul\u003e\n                    \u003c/li\u003e\n                    \u003cli class=\"nav-item\"\u003e\n                        \u003ca class=\"nav-link\" href=\"{{ url_for('video_assessment') }}\"\u003e\n                            \u003ci class=\"fas fa-video me-1\"\u003e\u003c/i\u003eVideo Assessment\n                        \u003c/a\u003e\n                    \u003c/li\u003e\n                    \u003cli class=\"nav-item\"\u003e\n                        \u003ca class=\"nav-link\" href=\"{{ url_for('activities') }}\"\u003e\n                            \u003ci class=\"fas fa-tasks me-1\"\u003e\u003c/i\u003eActivities\n                        \u003c/a\u003e\n                    \u003c/li\u003e\n                    \u003cli class=\"nav-item\"\u003e\n                        \u003ca class=\"nav-link\" href=\"{{ url_for('dashboard') }}\"\u003e\n                            \u003ci class=\"fas fa-chart-line me-1\"\u003e\u003c/i\u003eDashboard\n                        \u003c/a\u003e\n                    \u003c/li\u003e\n                \u003c/ul\u003e\n                \n                \u003cul class=\"navbar-nav\"\u003e\n                    \u003cli class=\"nav-item\"\u003e\n                        \u003ca class=\"nav-link\" href=\"{{ url_for('premium') }}\"\u003e\n                            \u003ci class=\"fas fa-crown me-1 text-warning\"\u003e\u003c/i\u003ePremium\n                        \u003c/a\u003e\n                    \u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/nav\u003e\n\n    \u003c!-- Main Content --\u003e\n    \u003cmain class=\"container-fluid py-4\"\u003e\n        \u003cdiv class=\"container\"\u003e\n            {% block content %}{% endblock %}\n        \u003c/div\u003e\n    \u003c/main\u003e\n\n    \u003c!-- Footer --\u003e\n    \u003cfooter class=\"bg-dark text-light py-4 mt-5\"\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003ch5\u003e\u003ci class=\"fas fa-brain me-2\"\u003e\u003c/i\u003eMind Mend\u003c/h5\u003e\n                    \u003cp class=\"text-muted\"\u003eAI-powered mental health support with human expertise.\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003ch6 class=\"text-light\"\u003e🇦🇺 Australian Crisis Resources\u003c/h6\u003e\n                    \u003cul class=\"list-unstyled crisis-resources\"\u003e\n                        \u003cli\u003e\u003ci class=\"fas fa-phone me-2 text-danger\"\u003e\u003c/i\u003e\u003cstrong\u003eEmergency:\u003c/strong\u003e 000\u003c/li\u003e\n                        \u003cli\u003e\u003ci class=\"fas fa-phone me-2 text-primary\"\u003e\u003c/i\u003e\u003cstrong\u003eLifeline:\u003c/strong\u003e 13 11 14\u003c/li\u003e\n                        \u003cli\u003e\u003ci class=\"fas fa-sms me-2 text-info\"\u003e\u003c/i\u003e\u003cstrong\u003eText Crisis:\u003c/strong\u003e 0477 13 11 14\u003c/li\u003e\n                        \u003cli\u003e\u003ci class=\"fas fa-comments me-2 text-success\"\u003e\u003c/i\u003e\u003cstrong\u003eKids Helpline:\u003c/strong\u003e 1800 55 1800\u003c/li\u003e\n                        \u003cli\u003e\u003ci class=\"fas fa-heart me-2 text-warning\"\u003e\u003c/i\u003e\u003cstrong\u003eBeyond Blue:\u003c/strong\u003e 1300 22 4636\u003c/li\u003e\n                        \u003cli\u003e\u003ci class=\"fas fa-user-friends me-2 text-secondary\"\u003e\u003c/i\u003e\u003cstrong\u003eMensLine:\u003c/strong\u003e 1300 78 99 78\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003chr class=\"my-3\"\u003e\n            \u003cdiv class=\"row align-items-center\"\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003csmall class=\"text-muted\"\u003e© 2024 Mind Mend. All rights reserved.\u003c/small\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-6 text-end\"\u003e\n                    \u003csmall class=\"text-muted\"\u003ePrivacy-first AI mental health platform\u003c/small\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/footer\u003e\n\n    \u003c!-- Bootstrap JS --\u003e\n    \u003cscript src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"\u003e\u003c/script\u003e\n    \n    \u003c!-- Custom JavaScript --\u003e\n    {% block scripts %}{% endblock %}\n\u003c/body\u003e\n\u003c/html\u003e\n",
                "brand_guide.html": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eMind Mend - Brand Usage Guide\u003c/title\u003e\n    \u003clink href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\"\u003e\n    \u003cstyle\u003e\n        body {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        .brand-card {\n            background: rgba(255, 255, 255, 0.95);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            border: 1px solid rgba(255, 255, 255, 0.2);\n            padding: 2rem;\n            margin-bottom: 2rem;\n            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n        }\n        \n        .logo-preview {\n            background: #f8f9fa;\n            border-radius: 15px;\n            padding: 2rem;\n            margin: 1rem 0;\n            text-align: center;\n            border: 2px dashed #dee2e6;\n        }\n        \n        .logo-preview.dark {\n            background: #2c3e50;\n        }\n        \n        .usage-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 2rem;\n            margin-top: 2rem;\n        }\n        \n        .usage-card {\n            background: linear-gradient(145deg, #ffffff, #f8f9fa);\n            border-radius: 15px;\n            padding: 1.5rem;\n            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n        }\n        \n        .page-header {\n            text-align: center;\n            color: white;\n            margin-bottom: 3rem;\n        }\n        \n        .download-btn {\n            background: linear-gradient(45deg, #00b894, #6c5ce7);\n            border: none;\n            color: white;\n            border-radius: 10px;\n            padding: 0.5rem 1rem;\n            transition: all 0.3s ease;\n            text-decoration: none;\n            display: inline-block;\n        }\n        \n        .download-btn:hover {\n            transform: scale(1.05);\n            color: white;\n            text-decoration: none;\n        }\n        \n        .back-btn {\n            position: fixed;\n            top: 20px;\n            left: 20px;\n            background: rgba(255, 255, 255, 0.2);\n            backdrop-filter: blur(10px);\n            border: 1px solid rgba(255, 255, 255, 0.3);\n            color: white;\n            border-radius: 50px;\n            padding: 0.75rem 1.5rem;\n            text-decoration: none;\n            transition: all 0.3s ease;\n        }\n        \n        .back-btn:hover {\n            background: rgba(255, 255, 255, 0.3);\n            color: white;\n            text-decoration: none;\n        }\n    \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003ca href=\"/logos\" class=\"back-btn\"\u003e\n        \u003ci class=\"fas fa-arrow-left me-2\"\u003e\u003c/i\u003eBack to Logos\n    \u003c/a\u003e\n    \n    \u003cdiv class=\"container my-5 pt-4\"\u003e\n        \u003cdiv class=\"page-header\"\u003e\n            \u003ch1\u003eMind Mend Brand Usage Guide\u003c/h1\u003e\n            \u003cp\u003eProfessional guidelines for using the Growth \u0026 Healing logo across different contexts\u003c/p\u003e\n        \u003c/div\u003e\n        \n        \u003c!-- Primary Logo --\u003e\n        \u003cdiv class=\"brand-card\"\u003e\n            \u003ch3\u003e\u003ci class=\"fas fa-star text-warning me-2\"\u003e\u003c/i\u003ePrimary Logo - Growth \u0026 Healing\u003c/h3\u003e\n            \u003cp class=\"text-muted\"\u003eThe official Mind Mend logo featuring nature-inspired leaf design with integrated tech elements\u003c/p\u003e\n            \n            \u003cdiv class=\"logo-preview\"\u003e\n                \u003cimg src=\"/static/logos/mindmend_logo_4.svg\" alt=\"Primary Logo\" height=\"80\"\u003e\n                \u003cp class=\"mt-2 mb-0 small text-muted\"\u003eUse on light backgrounds\u003c/p\u003e\n            \u003c/div\u003e\n            \n            \u003cdiv class=\"row mt-3\"\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003ch6\u003eBest Used For:\u003c/h6\u003e\n                    \u003cul class=\"small\"\u003e\n                        \u003cli\u003eWebsite headers and navigation\u003c/li\u003e\n                        \u003cli\u003eMarketing materials\u003c/li\u003e\n                        \u003cli\u003eBusiness cards and letterhead\u003c/li\u003e\n                        \u003cli\u003eSocial media profiles\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003ch6\u003eTechnical Specs:\u003c/h6\u003e\n                    \u003cul class=\"small\"\u003e\n                        \u003cli\u003eFormat: SVG (scalable)\u003c/li\u003e\n                        \u003cli\u003eMinimum width: 120px\u003c/li\u003e\n                        \u003cli\u003eClear space: 20px on all sides\u003c/li\u003e\n                        \u003cli\u003eColors: Green-Purple gradient\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003c!-- Logo Variations --\u003e\n        \u003cdiv class=\"usage-grid\"\u003e\n            \u003c!-- White Version --\u003e\n            \u003cdiv class=\"usage-card\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-moon me-2\"\u003e\u003c/i\u003eWhite Version\u003c/h5\u003e\n                \u003cdiv class=\"logo-preview dark\"\u003e\n                    \u003cimg src=\"/static/logos/mindmend_logo_4_white.svg\" alt=\"White Logo\" height=\"60\"\u003e\n                \u003c/div\u003e\n                \u003cp class=\"small\"\u003eFor dark backgrounds, overlays, and video content\u003c/p\u003e\n                \u003ca href=\"/static/logos/mindmend_logo_4_white.svg\" class=\"download-btn\" download\u003e\n                    \u003ci class=\"fas fa-download me-1\"\u003e\u003c/i\u003eDownload\n                \u003c/a\u003e\n            \u003c/div\u003e\n            \n            \u003c!-- Icon Only --\u003e\n            \u003cdiv class=\"usage-card\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-circle me-2\"\u003e\u003c/i\u003eIcon Only\u003c/h5\u003e\n                \u003cdiv class=\"logo-preview\"\u003e\n                    \u003cimg src=\"/static/logos/mindmend_icon_only.svg\" alt=\"Icon Only\" height=\"60\"\u003e\n                \u003c/div\u003e\n                \u003cp class=\"small\"\u003eFor app icons, favicons, and small spaces\u003c/p\u003e\n                \u003ca href=\"/static/logos/mindmend_icon_only.svg\" class=\"download-btn\" download\u003e\n                    \u003ci class=\"fas fa-download me-1\"\u003e\u003c/i\u003eDownload\n                \u003c/a\u003e\n            \u003c/div\u003e\n            \n            \u003c!-- Horizontal Layout --\u003e\n            \u003cdiv class=\"usage-card\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-arrows-alt-h me-2\"\u003e\u003c/i\u003eHorizontal Layout\u003c/h5\u003e\n                \u003cdiv class=\"logo-preview\"\u003e\n                    \u003cimg src=\"/static/logos/mindmend_horizontal.svg\" alt=\"Horizontal Logo\" height=\"40\"\u003e\n                \u003c/div\u003e\n                \u003cp class=\"small\"\u003eFor wide headers, banners, and footer areas\u003c/p\u003e\n                \u003ca href=\"/static/logos/mindmend_horizontal.svg\" class=\"download-btn\" download\u003e\n                    \u003ci class=\"fas fa-download me-1\"\u003e\u003c/i\u003eDownload\n                \u003c/a\u003e\n            \u003c/div\u003e\n            \n            \u003c!-- Monochrome --\u003e\n            \u003cdiv class=\"usage-card\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-palette me-2\"\u003e\u003c/i\u003eMonochrome\u003c/h5\u003e\n                \u003cdiv class=\"logo-preview\"\u003e\n                    \u003cimg src=\"/static/logos/mindmend_monochrome.svg\" alt=\"Monochrome Logo\" height=\"60\"\u003e\n                \u003c/div\u003e\n                \u003cp class=\"small\"\u003eFor print materials, stamps, and single-color applications\u003c/p\u003e\n                \u003ca href=\"/static/logos/mindmend_monochrome.svg\" class=\"download-btn\" download\u003e\n                    \u003ci class=\"fas fa-download me-1\"\u003e\u003c/i\u003eDownload\n                \u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003c!-- Usage Guidelines --\u003e\n        \u003cdiv class=\"brand-card mt-4\"\u003e\n            \u003ch3\u003e\u003ci class=\"fas fa-exclamation-triangle text-warning me-2\"\u003e\u003c/i\u003eUsage Guidelines\u003c/h3\u003e\n            \n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003ch5 class=\"text-success\"\u003e\u003ci class=\"fas fa-check me-2\"\u003e\u003c/i\u003eDo's\u003c/h5\u003e\n                    \u003cul\u003e\n                        \u003cli\u003eMaintain clear space around the logo\u003c/li\u003e\n                        \u003cli\u003eUse approved color variations only\u003c/li\u003e\n                        \u003cli\u003eScale proportionally (lock aspect ratio)\u003c/li\u003e\n                        \u003cli\u003eEnsure sufficient contrast with background\u003c/li\u003e\n                        \u003cli\u003eUse SVG format when possible for crisp display\u003c/li\u003e\n                        \u003cli\u003eKeep logo legible at all sizes\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003ch5 class=\"text-danger\"\u003e\u003ci class=\"fas fa-times me-2\"\u003e\u003c/i\u003eDon'ts\u003c/h5\u003e\n                    \u003cul\u003e\n                        \u003cli\u003eDon't stretch or distort the logo\u003c/li\u003e\n                        \u003cli\u003eDon't change colors outside approved palette\u003c/li\u003e\n                        \u003cli\u003eDon't add effects, shadows, or outlines\u003c/li\u003e\n                        \u003cli\u003eDon't place on busy or conflicting backgrounds\u003c/li\u003e\n                        \u003cli\u003eDon't use below minimum size (120px width)\u003c/li\u003e\n                        \u003cli\u003eDon't rotate or modify the design elements\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003c!-- Specific Use Cases --\u003e\n        \u003cdiv class=\"brand-card\"\u003e\n            \u003ch3\u003e\u003ci class=\"fas fa-list-alt me-2\"\u003e\u003c/i\u003eSpecific Use Cases\u003c/h3\u003e\n            \n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003ch6\u003e\u003ci class=\"fas fa-globe me-2\"\u003e\u003c/i\u003eDigital Applications\u003c/h6\u003e\n                    \u003cul class=\"small\"\u003e\n                        \u003cli\u003e\u003cstrong\u003eWebsite:\u003c/strong\u003e Primary logo in header\u003c/li\u003e\n                        \u003cli\u003e\u003cstrong\u003eApp Icon:\u003c/strong\u003e Icon-only version\u003c/li\u003e\n                        \u003cli\u003e\u003cstrong\u003eSocial Media:\u003c/strong\u003e Profile picture (icon), cover (horizontal)\u003c/li\u003e\n                        \u003cli\u003e\u003cstrong\u003eEmail Signatures:\u003c/strong\u003e Horizontal layout\u003c/li\u003e\n                        \u003cli\u003e\u003cstrong\u003eDigital Ads:\u003c/strong\u003e Primary or white version\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003ch6\u003e\u003ci class=\"fas fa-print me-2\"\u003e\u003c/i\u003ePrint Materials\u003c/h6\u003e\n                    \u003cul class=\"small\"\u003e\n                        \u003cli\u003e\u003cstrong\u003eBusiness Cards:\u003c/strong\u003e Primary or monochrome\u003c/li\u003e\n                        \u003cli\u003e\u003cstrong\u003eLetterhead:\u003c/strong\u003e Horizontal layout\u003c/li\u003e\n                        \u003cli\u003e\u003cstrong\u003eBrochures:\u003c/strong\u003e Primary logo\u003c/li\u003e\n                        \u003cli\u003e\u003cstrong\u003ePresentations:\u003c/strong\u003e White on dark slides\u003c/li\u003e\n                        \u003cli\u003e\u003cstrong\u003eReports:\u003c/strong\u003e Monochrome for headers\u003c/li\u003e\n                    \u003c/ul\u003e\n                    \u003cdiv class=\"mt-2 p-2 bg-light rounded\"\u003e\n                        \u003csmall class=\"text-muted\"\u003e\n                            \u003cstrong\u003eBusiness Contact:\u003c/strong\u003e\u003cbr/\u003e\n                            Suite 329/98-100 Elizabeth Street\u003cbr/\u003e\n                            Melbourne, VIC, 3000, Australia\u003cbr/\u003e\n                            Email: sticky.pty.ltd@gmail.com\n                        \u003c/small\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003ch6\u003e\u003ci class=\"fas fa-video me-2\"\u003e\u003c/i\u003eVideo \u0026 Media\u003c/h6\u003e\n                    \u003cul class=\"small\"\u003e\n                        \u003cli\u003e\u003cstrong\u003eVideo Intros:\u003c/strong\u003e Primary logo with animation\u003c/li\u003e\n                        \u003cli\u003e\u003cstrong\u003eOverlays:\u003c/strong\u003e White version\u003c/li\u003e\n                        \u003cli\u003e\u003cstrong\u003eThumbnails:\u003c/strong\u003e Icon-only for recognition\u003c/li\u003e\n                        \u003cli\u003e\u003cstrong\u003eWatermarks:\u003c/strong\u003e Monochrome at low opacity\u003c/li\u003e\n                        \u003cli\u003e\u003cstrong\u003ePresentations:\u003c/strong\u003e Context-appropriate version\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003c!-- Download All --\u003e\n        \u003cdiv class=\"text-center mt-4\"\u003e\n            \u003cdiv class=\"card bg-white bg-opacity-90 d-inline-block px-4 py-3 rounded-pill\"\u003e\n                \u003ch5 class=\"mb-2\"\u003eNeed all logo variations?\u003c/h5\u003e\n                \u003cp class=\"mb-3 text-muted\"\u003eDownload the complete brand package with all logo variations and usage guidelines\u003c/p\u003e\n                \u003cbutton class=\"btn btn-primary btn-lg\" onclick=\"downloadAllLogos()\"\u003e\n                    \u003ci class=\"fas fa-download me-2\"\u003e\u003c/i\u003eDownload Complete Brand Package\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cscript\u003e\n        function downloadAllLogos() {\n            const logos = [\n                '/static/logos/mindmend_logo_4.svg',\n                '/static/logos/mindmend_logo_4_white.svg',\n                '/static/logos/mindmend_icon_only.svg',\n                '/static/logos/mindmend_horizontal.svg',\n                '/static/logos/mindmend_monochrome.svg'\n            ];\n            \n            logos.forEach((logoUrl, index) =\u003e {\n                setTimeout(() =\u003e {\n                    const link = document.createElement('a');\n                    link.href = logoUrl;\n                    link.download = logoUrl.split('/').pop();\n                    link.click();\n                }, index * 500); // Stagger downloads\n            });\n            \n            // Show success message\n            const toast = document.createElement('div');\n            toast.className = 'position-fixed top-0 end-0 m-4 p-3 bg-success text-white rounded';\n            toast.style.zIndex = '9999';\n            toast.innerHTML = '\u003ci class=\"fas fa-check-circle me-2\"\u003e\u003c/i\u003eDownloading all logo variations...';\n            document.body.appendChild(toast);\n            \n            setTimeout(() =\u003e {\n                toast.remove();\n            }, 3000);\n        }\n    \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e",
                "coming_soon.html": "\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n    \u003ctitle\u003eComing Soon\u003c/title\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003ch1\u003eComing Soon\u003c/h1\u003e\n    \u003cp\u003eThis feature is under development. Please check back later.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n",
                "counselor_signup.html": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eHuman Counselor Signup - Mind Mend\u003c/title\u003e\n    \u003clink href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\"\u003e\n    \u003cstyle\u003e\n        body {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            font-family: 'Arial', sans-serif;\n        }\n        .signup-container {\n            background: rgba(255, 255, 255, 0.95);\n            border-radius: 20px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            padding: 2rem;\n            margin: 2rem auto;\n            max-width: 700px;\n        }\n        .coming-soon-badge {\n            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n            color: white;\n            border-radius: 50px;\n            padding: 10px 20px;\n            display: inline-block;\n            margin-bottom: 1rem;\n            font-weight: bold;\n        }\n        .feature-list {\n            background: #f8f9fa;\n            border-radius: 10px;\n            padding: 1.5rem;\n            margin: 1rem 0;\n        }\n        .payment-placeholder {\n            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n            color: white;\n            border-radius: 15px;\n            padding: 2rem;\n            text-align: center;\n            margin: 2rem 0;\n        }\n        .btn-premium {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            border: none;\n            padding: 15px 30px;\n            border-radius: 50px;\n            color: white;\n            font-weight: bold;\n            transition: all 0.3s ease;\n        }\n        .btn-premium:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);\n            color: white;\n        }\n    \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"signup-container\"\u003e\n            \u003cdiv class=\"text-center mb-4\"\u003e\n                \u003cdiv class=\"coming-soon-badge\"\u003e\n                    \u003ci class=\"fas fa-clock me-2\"\u003e\u003c/i\u003eComing Soon\n                \u003c/div\u003e\n                \u003ch1 class=\"display-4 text-primary\"\u003e\n                    \u003ci class=\"fas fa-user-md me-3\"\u003e\u003c/i\u003eHuman Counselor Access\n                \u003c/h1\u003e\n                \u003cp class=\"lead text-muted\"\u003eTalk to licensed mental health professionals\u003c/p\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Premium Features --\u003e\n            \u003cdiv class=\"feature-list\"\u003e\n                \u003ch4\u003e\u003ci class=\"fas fa-crown me-2 text-warning\"\u003e\u003c/i\u003ePremium Features Coming Soon\u003c/h4\u003e\n                \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-md-6\"\u003e\n                        \u003cul class=\"list-unstyled\"\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eLicensed Therapists\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eVideo Sessions\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003e24/7 Crisis Support\u003c/li\u003e\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-6\"\u003e\n                        \u003cul class=\"list-unstyled\"\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003ePersonalized Treatment Plans\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eInsurance Coverage\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003ePrescription Services\u003c/li\u003e\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Payment Integration Placeholder --\u003e\n            \u003cdiv class=\"payment-placeholder\"\u003e\n                \u003ch3\u003e\u003ci class=\"fas fa-credit-card me-2\"\u003e\u003c/i\u003ePayment Integration\u003c/h3\u003e\n                \u003cp class=\"mb-3\"\u003eSecure payment processing with multiple options:\u003c/p\u003e\n                \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-md-4 text-center mb-2\"\u003e\n                        \u003ci class=\"fab fa-stripe fa-2x mb-2\"\u003e\u003c/i\u003e\n                        \u003cp\u003eStripe\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-4 text-center mb-2\"\u003e\n                        \u003ci class=\"fab fa-paypal fa-2x mb-2\"\u003e\u003c/i\u003e\n                        \u003cp\u003ePayPal\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-4 text-center mb-2\"\u003e\n                        \u003ci class=\"fas fa-university fa-2x mb-2\"\u003e\u003c/i\u003e\n                        \u003cp\u003eInsurance\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003csmall\u003ePayment gateway integration hooks ready for implementation\u003c/small\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Pricing Preview --\u003e\n            \u003cdiv class=\"row mb-4\"\u003e\n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003cdiv class=\"card h-100\"\u003e\n                        \u003cdiv class=\"card-body text-center\"\u003e\n                            \u003ch5 class=\"card-title\"\u003eBasic\u003c/h5\u003e\n                            \u003ch2 class=\"text-primary\"\u003e$49\u003csmall\u003e/month\u003c/small\u003e\u003c/h2\u003e\n                            \u003cul class=\"list-unstyled\"\u003e\n                                \u003cli\u003e2 Sessions/month\u003c/li\u003e\n                                \u003cli\u003eText Support\u003c/li\u003e\n                                \u003cli\u003eAI Analysis\u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003cdiv class=\"card h-100 border-primary\"\u003e\n                        \u003cdiv class=\"card-body text-center\"\u003e\n                            \u003ch5 class=\"card-title text-primary\"\u003ePremium\u003c/h5\u003e\n                            \u003ch2 class=\"text-primary\"\u003e$99\u003csmall\u003e/month\u003c/small\u003e\u003c/h2\u003e\n                            \u003cul class=\"list-unstyled\"\u003e\n                                \u003cli\u003e4 Sessions/month\u003c/li\u003e\n                                \u003cli\u003eVideo Sessions\u003c/li\u003e\n                                \u003cli\u003eCrisis Support\u003c/li\u003e\n                                \u003cli\u003eAI + Human\u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003cdiv class=\"card h-100\"\u003e\n                        \u003cdiv class=\"card-body text-center\"\u003e\n                            \u003ch5 class=\"card-title\"\u003eEnterprise\u003c/h5\u003e\n                            \u003ch2 class=\"text-primary\"\u003e$199\u003csmall\u003e/month\u003c/small\u003e\u003c/h2\u003e\n                            \u003cul class=\"list-unstyled\"\u003e\n                                \u003cli\u003eUnlimited Sessions\u003c/li\u003e\n                                \u003cli\u003eDedicated Therapist\u003c/li\u003e\n                                \u003cli\u003eFamily Plans\u003c/li\u003e\n                                \u003cli\u003ePriority Support\u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Signup Form Placeholder --\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-header bg-light\"\u003e\n                    \u003ch5 class=\"mb-0\"\u003e\u003ci class=\"fas fa-clipboard-list me-2\"\u003e\u003c/i\u003eEarly Access Signup\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cp class=\"text-muted\"\u003eJoin our waitlist to be notified when human counselor services launch.\u003c/p\u003e\n                    \u003cform onsubmit=\"handleSignup(event)\"\u003e\n                        \u003cdiv class=\"row\"\u003e\n                            \u003cdiv class=\"col-md-6 mb-3\"\u003e\n                                \u003clabel class=\"form-label\"\u003eFull Name\u003c/label\u003e\n                                \u003cinput type=\"text\" class=\"form-control\" placeholder=\"Enter your name\" disabled\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"col-md-6 mb-3\"\u003e\n                                \u003clabel class=\"form-label\"\u003eEmail Address\u003c/label\u003e\n                                \u003cinput type=\"email\" class=\"form-control\" placeholder=\"Enter your email\" disabled\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"mb-3\"\u003e\n                            \u003clabel class=\"form-label\"\u003ePhone Number\u003c/label\u003e\n                            \u003cinput type=\"tel\" class=\"form-control\" placeholder=\"For crisis support contact\" disabled\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"mb-3\"\u003e\n                            \u003clabel class=\"form-label\"\u003eInsurance Provider (Optional)\u003c/label\u003e\n                            \u003cselect class=\"form-control\" disabled\u003e\n                                \u003coption\u003eSelect your insurance\u003c/option\u003e\n                                \u003coption\u003eBlue Cross Blue Shield\u003c/option\u003e\n                                \u003coption\u003eAetna\u003c/option\u003e\n                                \u003coption\u003eCigna\u003c/option\u003e\n                                \u003coption\u003eUnited Healthcare\u003c/option\u003e\n                                \u003coption\u003eOther\u003c/option\u003e\n                            \u003c/select\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"text-center\"\u003e\n                            \u003cbutton type=\"submit\" class=\"btn btn-premium btn-lg\"\u003e\n                                \u003ci class=\"fas fa-bell me-2\"\u003e\u003c/i\u003eJoin Waitlist\n                            \u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/form\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Navigation --\u003e\n            \u003cdiv class=\"text-center mt-4\"\u003e\n                \u003ca href=\"/\" class=\"btn btn-outline-primary me-2\"\u003e\n                    \u003ci class=\"fas fa-home me-1\"\u003e\u003c/i\u003eBack to Home\n                \u003c/a\u003e\n                \u003ca href=\"/premium_session\" class=\"btn btn-outline-success\"\u003e\n                    \u003ci class=\"fas fa-video me-1\"\u003e\u003c/i\u003ePreview Session\n                \u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cscript src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        function handleSignup(event) {\n            event.preventDefault();\n            alert('🎉 Thank you for your interest!\\n\\nHuman counselor services are coming soon. We\\'ll notify you when:\\n\\n• Licensed therapists are available\\n• Payment integration is complete\\n• Video session platform is ready\\n• Insurance processing is active\\n\\nFor now, enjoy our AI-powered therapy sessions!');\n        }\n\n        // Placeholder for future payment integration\n        class PaymentProcessor {\n            constructor() {\n                this.stripeKey = null;\n                this.paypalKey = null;\n                this.initialized = false;\n            }\n\n            initializeStripe() {\n                // Future Stripe integration\n                console.log('Stripe payment gateway will be initialized here');\n            }\n\n            initializePayPal() {\n                // Future PayPal integration\n                console.log('PayPal payment gateway will be initialized here');\n            }\n\n            processSubscription(plan, userDetails) {\n                // Future subscription processing\n                return {\n                    success: false,\n                    message: 'Payment processing coming soon in Level 3+',\n                    subscriptionId: null\n                };\n            }\n\n            validateInsurance(provider, policyNumber) {\n                // Future insurance validation\n                return {\n                    valid: false,\n                    coverage: 0,\n                    message: 'Insurance validation coming soon'\n                };\n            }\n        }\n\n        // Initialize placeholder payment system\n        const paymentProcessor = new PaymentProcessor();\n        console.log('Payment system hooks ready for Level 3+ implementation');\n    \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e",
                "couples_login.html": "{% extends \"base.html\" %}\n\n{% block title %}Couples Counseling - Mind Mend{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"row justify-content-center\"\u003e\n        \u003cdiv class=\"col-lg-10\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-header bg-primary text-white\"\u003e\n                    \u003ch2 class=\"mb-0\"\u003e\u003ci class=\"fas fa-heart me-2\"\u003e\u003c/i\u003eCouples Counseling Session\u003c/h2\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003c!-- Login Status Display --\u003e\n                    \u003cdiv class=\"row mb-4\"\u003e\n                        \u003cdiv class=\"col-md-6\"\u003e\n                            \u003cdiv class=\"card {% if partner1_logged_in %}bg-success text-white{% else %}bg-secondary{% endif %}\"\u003e\n                                \u003cdiv class=\"card-body text-center\"\u003e\n                                    \u003ch5\u003e\u003ci class=\"fas fa-user me-2\"\u003e\u003c/i\u003ePartner 1\u003c/h5\u003e\n                                    {% if partner1_logged_in %}\n                                        \u003cp class=\"mb-0\"\u003e\u003ci class=\"fas fa-check-circle me-2\"\u003e\u003c/i\u003e{{ partner1_name }} - Logged In\u003c/p\u003e\n                                    {% else %}\n                                        \u003cp class=\"mb-0\"\u003e\u003ci class=\"fas fa-times-circle me-2\"\u003e\u003c/i\u003eNot Logged In\u003c/p\u003e\n                                    {% endif %}\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"col-md-6\"\u003e\n                            \u003cdiv class=\"card {% if partner2_logged_in %}bg-success text-white{% else %}bg-secondary{% endif %}\"\u003e\n                                \u003cdiv class=\"card-body text-center\"\u003e\n                                    \u003ch5\u003e\u003ci class=\"fas fa-user me-2\"\u003e\u003c/i\u003ePartner 2\u003c/h5\u003e\n                                    {% if partner2_logged_in %}\n                                        \u003cp class=\"mb-0\"\u003e\u003ci class=\"fas fa-check-circle me-2\"\u003e\u003c/i\u003e{{ partner2_name }} - Logged In\u003c/p\u003e\n                                    {% else %}\n                                        \u003cp class=\"mb-0\"\u003e\u003ci class=\"fas fa-times-circle me-2\"\u003e\u003c/i\u003eNot Logged In\u003c/p\u003e\n                                    {% endif %}\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    {% if not (partner1_logged_in and partner2_logged_in) %}\n                    \u003c!-- Login Forms --\u003e\n                    \u003cdiv class=\"alert alert-info\"\u003e\n                        \u003ci class=\"fas fa-info-circle me-2\"\u003e\u003c/i\u003eBoth partners need to log in to start the couples counseling session. You can log in on the same device or separate devices.\n                    \u003c/div\u003e\n\n                    {% if not partner1_logged_in %}\n                    \u003cdiv class=\"card mb-3\"\u003e\n                        \u003cdiv class=\"card-header bg-info\"\u003e\n                            \u003ch5 class=\"mb-0 text-dark\"\u003ePartner 1 Login\u003c/h5\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"card-body\"\u003e\n                            \u003cform method=\"POST\" action=\"{{ url_for('couples_login') }}\"\u003e\n                                \u003cinput type=\"hidden\" name=\"partner_role\" value=\"partner1\"\u003e\n                                \u003cdiv class=\"mb-3\"\u003e\n                                    \u003clabel for=\"partner1_name\" class=\"form-label\"\u003eYour Name\u003c/label\u003e\n                                    \u003cinput type=\"text\" class=\"form-control\" id=\"partner1_name\" name=\"name\" required placeholder=\"Enter your name\"\u003e\n                                \u003c/div\u003e\n                                \u003cdiv class=\"mb-3\"\u003e\n                                    \u003clabel for=\"partner1_email\" class=\"form-label\"\u003eEmail Address\u003c/label\u003e\n                                    \u003cinput type=\"email\" class=\"form-control\" id=\"partner1_email\" name=\"email\" required placeholder=\"your@email.com\"\u003e\n                                \u003c/div\u003e\n                                \u003cdiv class=\"mb-3\"\u003e\n                                    \u003clabel for=\"partner1_password\" class=\"form-label\"\u003ePassword (Optional)\u003c/label\u003e\n                                    \u003cinput type=\"password\" class=\"form-control\" id=\"partner1_password\" name=\"password\" placeholder=\"Leave blank for guest access\"\u003e\n                                    \u003csmall class=\"form-text\"\u003eFor first-time users, leave blank for guest access\u003c/small\u003e\n                                \u003c/div\u003e\n                                \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003e\n                                    \u003ci class=\"fas fa-sign-in-alt me-2\"\u003e\u003c/i\u003eLogin as Partner 1\n                                \u003c/button\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    {% endif %}\n\n                    {% if not partner2_logged_in %}\n                    \u003cdiv class=\"card\"\u003e\n                        \u003cdiv class=\"card-header bg-warning\"\u003e\n                            \u003ch5 class=\"mb-0 text-dark\"\u003ePartner 2 Login\u003c/h5\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"card-body\"\u003e\n                            \u003cform method=\"POST\" action=\"{{ url_for('couples_login') }}\"\u003e\n                                \u003cinput type=\"hidden\" name=\"partner_role\" value=\"partner2\"\u003e\n                                \u003cdiv class=\"mb-3\"\u003e\n                                    \u003clabel for=\"partner2_name\" class=\"form-label\"\u003eYour Name\u003c/label\u003e\n                                    \u003cinput type=\"text\" class=\"form-control\" id=\"partner2_name\" name=\"name\" required placeholder=\"Enter your name\"\u003e\n                                \u003c/div\u003e\n                                \u003cdiv class=\"mb-3\"\u003e\n                                    \u003clabel for=\"partner2_email\" class=\"form-label\"\u003eEmail Address\u003c/label\u003e\n                                    \u003cinput type=\"email\" class=\"form-control\" id=\"partner2_email\" name=\"email\" required placeholder=\"your@email.com\"\u003e\n                                \u003c/div\u003e\n                                \u003cdiv class=\"mb-3\"\u003e\n                                    \u003clabel for=\"partner2_password\" class=\"form-label\"\u003ePassword (Optional)\u003c/label\u003e\n                                    \u003cinput type=\"password\" class=\"form-control\" id=\"partner2_password\" name=\"password\" placeholder=\"Leave blank for guest access\"\u003e\n                                    \u003csmall class=\"form-text\"\u003eFor first-time users, leave blank for guest access\u003c/small\u003e\n                                \u003c/div\u003e\n                                \u003cbutton type=\"submit\" class=\"btn btn-warning text-dark\"\u003e\n                                    \u003ci class=\"fas fa-sign-in-alt me-2\"\u003e\u003c/i\u003eLogin as Partner 2\n                                \u003c/button\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    {% endif %}\n\n                    {% else %}\n                    \u003c!-- Both partners logged in - Show session options --\u003e\n                    \u003cdiv class=\"alert alert-success\"\u003e\n                        \u003ci class=\"fas fa-check-circle me-2\"\u003e\u003c/i\u003eBoth partners are logged in! You can now start your couples counseling session.\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"text-center\"\u003e\n                        \u003ch4 class=\"mb-3\"\u003eWelcome {{ partner1_name }} and {{ partner2_name }}!\u003c/h4\u003e\n                        \u003cp class=\"mb-4\"\u003eYou're ready to begin your couples counseling journey together.\u003c/p\u003e\n                        \n                        \u003cdiv class=\"row justify-content-center\"\u003e\n                            \u003cdiv class=\"col-md-6 mb-3\"\u003e\n                                \u003ca href=\"{{ url_for('couples_session') }}\" class=\"btn btn-primary btn-lg w-100\"\u003e\n                                    \u003ci class=\"fas fa-comments me-2\"\u003e\u003c/i\u003eStart Couples Session\n                                \u003c/a\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"col-md-6 mb-3\"\u003e\n                                \u003cbutton class=\"btn btn-danger btn-lg w-100\" onclick=\"if(confirm('Are you sure you want to logout both partners?')) window.location.href='{{ url_for('couples_logout') }}'\"\u003e\n                                    \u003ci class=\"fas fa-sign-out-alt me-2\"\u003e\u003c/i\u003eLogout Both Partners\n                                \u003c/button\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    {% endif %}\n\n                    \u003c!-- Instructions --\u003e\n                    \u003cdiv class=\"mt-4\"\u003e\n                        \u003ch5\u003e\u003ci class=\"fas fa-question-circle me-2\"\u003e\u003c/i\u003eHow It Works\u003c/h5\u003e\n                        \u003cul\u003e\n                            \u003cli\u003e\u003cstrong\u003eSame Device:\u003c/strong\u003e Both partners can log in on the same computer or tablet. Simply complete both login forms above.\u003c/li\u003e\n                            \u003cli\u003e\u003cstrong\u003eSeparate Devices:\u003c/strong\u003e Each partner can log in from their own device using the same session link.\u003c/li\u003e\n                            \u003cli\u003e\u003cstrong\u003ePrivacy:\u003c/strong\u003e Your session is private and encrypted. Only you and your partner can access it.\u003c/li\u003e\n                            \u003cli\u003e\u003cstrong\u003eAI Mediator:\u003c/strong\u003e Our AI therapist will guide your conversation and provide helpful insights.\u003c/li\u003e\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}",
                "couples_session.html": "{% extends \"base.html\" %}\n\n{% block title %}Couples Therapy Session - Mind Mend{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"container-fluid\"\u003e\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-lg-8\"\u003e\n            \u003c!-- Main Chat Interface --\u003e\n            \u003cdiv class=\"card chat-interface\"\u003e\n                \u003cdiv class=\"card-header bg-primary text-white\"\u003e\n                    \u003ch4 class=\"mb-0\"\u003e\n                        \u003ci class=\"fas fa-heart me-2\"\u003e\u003c/i\u003eCouples Therapy Session\n                        \u003cspan class=\"float-end\"\u003e\n                            \u003csmall\u003e{{ partner1_name }} \u0026 {{ partner2_name }}\u003c/small\u003e\n                        \u003c/span\u003e\n                    \u003c/h4\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003c!-- Chat Messages --\u003e\n                    \u003cdiv id=\"chatMessages\" class=\"chat-container\" style=\"height: 400px; overflow-y: auto;\"\u003e\n                        \u003cdiv class=\"chat-message ai\"\u003e\n                            \u003cstrong\u003eAI Therapist:\u003c/strong\u003e Welcome {{ partner1_name }} and {{ partner2_name }}! I'm here to facilitate a constructive conversation between you both. This is a safe space where you can express your feelings openly and honestly. Let's start with what brings you here today?\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003c!-- Partner Indicators --\u003e\n                    \u003cdiv class=\"row mt-3 mb-2\"\u003e\n                        \u003cdiv class=\"col-6\"\u003e\n                            \u003cdiv class=\"form-check\"\u003e\n                                \u003cinput class=\"form-check-input\" type=\"radio\" name=\"currentSpeaker\" id=\"partner1Radio\" value=\"partner1\" checked\u003e\n                                \u003clabel class=\"form-check-label\" for=\"partner1Radio\"\u003e\n                                    \u003ci class=\"fas fa-user me-1\"\u003e\u003c/i\u003e{{ partner1_name }} is typing\n                                \u003c/label\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"col-6\"\u003e\n                            \u003cdiv class=\"form-check\"\u003e\n                                \u003cinput class=\"form-check-input\" type=\"radio\" name=\"currentSpeaker\" id=\"partner2Radio\" value=\"partner2\"\u003e\n                                \u003clabel class=\"form-check-label\" for=\"partner2Radio\"\u003e\n                                    \u003ci class=\"fas fa-user me-1\"\u003e\u003c/i\u003e{{ partner2_name }} is typing\n                                \u003c/label\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003c!-- Input Form --\u003e\n                    \u003cform id=\"chatForm\" class=\"mt-3\"\u003e\n                        \u003cdiv class=\"input-group\"\u003e\n                            \u003cinput type=\"text\" id=\"messageInput\" class=\"form-control\" placeholder=\"Type your message...\" required\u003e\n                            \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003e\n                                \u003ci class=\"fas fa-paper-plane me-1\"\u003e\u003c/i\u003eSend\n                            \u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/form\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003cdiv class=\"col-lg-4\"\u003e\n            \u003c!-- Session Tools --\u003e\n            \u003cdiv class=\"card mb-3\"\u003e\n                \u003cdiv class=\"card-header bg-info\"\u003e\n                    \u003ch5 class=\"mb-0 text-dark\"\u003e\u003ci class=\"fas fa-tools me-2\"\u003e\u003c/i\u003eSession Tools\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cdiv class=\"dropdown mb-2\"\u003e\n                        \u003cbutton class=\"btn btn-primary dropdown-toggle w-100\" type=\"button\" id=\"conversationDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"\u003e\n                            \u003ci class=\"fas fa-comments me-2\"\u003e\u003c/i\u003eGet Conversation Starter\n                        \u003c/button\u003e\n                        \u003cul class=\"dropdown-menu w-100\" aria-labelledby=\"conversationDropdown\"\u003e\n                            \u003cli\u003e\u003ca class=\"dropdown-item\" href=\"#\" onclick=\"getConversationStarter('random')\"\u003e\n                                \u003ci class=\"fas fa-random me-2\"\u003e\u003c/i\u003eRandom Topic\u003c/a\u003e\u003c/li\u003e\n                            \u003cli\u003e\u003chr class=\"dropdown-divider\"\u003e\u003c/li\u003e\n                            \u003cli\u003e\u003ca class=\"dropdown-item\" href=\"#\" onclick=\"getConversationStarter('connection')\"\u003e\n                                \u003ci class=\"fas fa-heart me-2\"\u003e\u003c/i\u003eConnection \u0026 Intimacy\u003c/a\u003e\u003c/li\u003e\n                            \u003cli\u003e\u003ca class=\"dropdown-item\" href=\"#\" onclick=\"getConversationStarter('communication')\"\u003e\n                                \u003ci class=\"fas fa-comments me-2\"\u003e\u003c/i\u003eCommunication\u003c/a\u003e\u003c/li\u003e\n                            \u003cli\u003e\u003ca class=\"dropdown-item\" href=\"#\" onclick=\"getConversationStarter('conflict_resolution')\"\u003e\n                                \u003ci class=\"fas fa-handshake me-2\"\u003e\u003c/i\u003eConflict Resolution\u003c/a\u003e\u003c/li\u003e\n                            \u003cli\u003e\u003ca class=\"dropdown-item\" href=\"#\" onclick=\"getConversationStarter('growth')\"\u003e\n                                \u003ci class=\"fas fa-seedling me-2\"\u003e\u003c/i\u003eGrowth \u0026 Goals\u003c/a\u003e\u003c/li\u003e\n                            \u003cli\u003e\u003ca class=\"dropdown-item\" href=\"#\" onclick=\"getConversationStarter('appreciation')\"\u003e\n                                \u003ci class=\"fas fa-star me-2\"\u003e\u003c/i\u003eAppreciation\u003c/a\u003e\u003c/li\u003e\n                            \u003cli\u003e\u003ca class=\"dropdown-item\" href=\"#\" onclick=\"getConversationStarter('fun')\"\u003e\n                                \u003ci class=\"fas fa-smile me-2\"\u003e\u003c/i\u003eFun \u0026 Playfulness\u003c/a\u003e\u003c/li\u003e\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                    \u003cbutton class=\"btn btn-info w-100 mb-2\" onclick=\"requestExercise()\"\u003e\n                        \u003ci class=\"fas fa-tasks me-2\"\u003e\u003c/i\u003eRequest Exercise\n                    \u003c/button\u003e\n                    \u003cbutton class=\"btn btn-warning w-100 mb-2\" onclick=\"pauseSession()\"\u003e\n                        \u003ci class=\"fas fa-pause me-2\"\u003e\u003c/i\u003eTake a Break\n                    \u003c/button\u003e\n                    \u003cbutton class=\"btn btn-success w-100 mb-2\" onclick=\"requestSummary()\"\u003e\n                        \u003ci class=\"fas fa-clipboard-list me-2\"\u003e\u003c/i\u003eGet Summary\n                    \u003c/button\u003e\n                    \u003cbutton class=\"btn btn-danger w-100\" onclick=\"endSession()\"\u003e\n                        \u003ci class=\"fas fa-stop me-2\"\u003e\u003c/i\u003eEnd Session\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Conversation Starters --\u003e\n            \u003cdiv class=\"card mb-3\" id=\"conversationStarterCard\" style=\"display: none;\"\u003e\n                \u003cdiv class=\"card-header bg-primary\"\u003e\n                    \u003ch5 class=\"mb-0 text-white\"\u003e\n                        \u003ci class=\"fas fa-lightbulb me-2\"\u003e\u003c/i\u003eConversation Starter\n                        \u003cbutton type=\"button\" class=\"btn-close btn-close-white float-end\" onclick=\"hideConversationStarter()\"\u003e\u003c/button\u003e\n                    \u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cdiv id=\"conversationStarterContent\"\u003e\n                        \u003c!-- Dynamic content will be inserted here --\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"mt-3\"\u003e\n                        \u003cbutton class=\"btn btn-sm btn-outline-primary\" onclick=\"getNewStarter()\"\u003e\n                            \u003ci class=\"fas fa-refresh me-1\"\u003e\u003c/i\u003eTry Another\n                        \u003c/button\u003e\n                        \u003cbutton class=\"btn btn-sm btn-outline-success\" onclick=\"useStarter()\"\u003e\n                            \u003ci class=\"fas fa-check me-1\"\u003e\u003c/i\u003eUse This\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Relationship Health Indicators --\u003e\n            \u003cdiv class=\"card mb-3\"\u003e\n                \u003cdiv class=\"card-header bg-success\"\u003e\n                    \u003ch5 class=\"mb-0 text-dark\"\u003e\u003ci class=\"fas fa-heartbeat me-2\"\u003e\u003c/i\u003eRelationship Health\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel\u003eCommunication Quality\u003c/label\u003e\n                        \u003cdiv class=\"progress\"\u003e\n                            \u003cdiv class=\"progress-bar bg-success\" id=\"communicationBar\" role=\"progressbar\" style=\"width: 70%;\"\u003e70%\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel\u003eEmotional Connection\u003c/label\u003e\n                        \u003cdiv class=\"progress\"\u003e\n                            \u003cdiv class=\"progress-bar bg-info\" id=\"emotionalBar\" role=\"progressbar\" style=\"width: 60%;\"\u003e60%\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel\u003eConflict Resolution\u003c/label\u003e\n                        \u003cdiv class=\"progress\"\u003e\n                            \u003cdiv class=\"progress-bar bg-warning\" id=\"conflictBar\" role=\"progressbar\" style=\"width: 50%;\"\u003e50%\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Tips \u0026 Guidelines --\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-header bg-warning\"\u003e\n                    \u003ch5 class=\"mb-0 text-dark\"\u003e\u003ci class=\"fas fa-lightbulb me-2\"\u003e\u003c/i\u003eCommunication Tips\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cul class=\"list-unstyled mb-0\"\u003e\n                        \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eUse \"I feel\" statements\u003c/li\u003e\n                        \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eListen without interrupting\u003c/li\u003e\n                        \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eAcknowledge your partner's feelings\u003c/li\u003e\n                        \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eFocus on solutions, not blame\u003c/li\u003e\n                        \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eTake breaks if emotions run high\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cscript\u003e\n// Session variables\nconst partner1Name = \"{{ partner1_name }}\";\nconst partner2Name = \"{{ partner2_name }}\";\nlet currentSpeaker = 'partner1';\nlet currentStarter = null;\nlet conversationHistory = [];\n\n// Update current speaker\ndocument.querySelectorAll('input[name=\"currentSpeaker\"]').forEach(radio =\u003e {\n    radio.addEventListener('change', (e) =\u003e {\n        currentSpeaker = e.target.value;\n    });\n});\n\n// Chat functionality\ndocument.getElementById('chatForm').addEventListener('submit', async (e) =\u003e {\n    e.preventDefault();\n    \n    const messageInput = document.getElementById('messageInput');\n    const message = messageInput.value.trim();\n    \n    if (!message) return;\n    \n    // Determine speaker name\n    const speakerName = currentSpeaker === 'partner1' ? partner1Name : partner2Name;\n    \n    // Add message to chat\n    addMessage(speakerName, message, 'user');\n    \n    // Clear input\n    messageInput.value = '';\n    \n    // Send to AI\n    try {\n        const response = await fetch('/api/couples_session', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                message: message,\n                speaker: currentSpeaker,\n                speaker_name: speakerName,\n                partner1_name: partner1Name,\n                partner2_name: partner2Name\n            })\n        });\n        \n        const data = await response.json();\n        \n        if (data.response) {\n            addMessage('AI Therapist', data.response, 'ai');\n            \n            // Update relationship metrics if provided\n            if (data.metrics) {\n                updateMetrics(data.metrics);\n            }\n        }\n    } catch (error) {\n        console.error('Error:', error);\n        addMessage('System', 'Sorry, there was an error processing your message.', 'ai');\n    }\n});\n\nfunction addMessage(speaker, message, type) {\n    const chatMessages = document.getElementById('chatMessages');\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `chat-message ${type}`;\n    \n    if (type === 'user') {\n        messageDiv.innerHTML = `\u003cstrong\u003e${speaker}:\u003c/strong\u003e ${message}`;\n    } else {\n        messageDiv.innerHTML = `\u003cstrong\u003e${speaker}:\u003c/strong\u003e ${message}`;\n    }\n    \n    chatMessages.appendChild(messageDiv);\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n}\n\nfunction updateMetrics(metrics) {\n    if (metrics.communication !== undefined) {\n        updateProgressBar('communicationBar', metrics.communication);\n    }\n    if (metrics.emotional !== undefined) {\n        updateProgressBar('emotionalBar', metrics.emotional);\n    }\n    if (metrics.conflict !== undefined) {\n        updateProgressBar('conflictBar', metrics.conflict);\n    }\n}\n\nfunction updateProgressBar(barId, value) {\n    const bar = document.getElementById(barId);\n    bar.style.width = value + '%';\n    bar.textContent = value + '%';\n}\n\n// Session tools\nasync function requestExercise() {\n    try {\n        const response = await fetch('/api/couples_exercise', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n        \n        const data = await response.json();\n        if (data.exercise) {\n            addMessage('AI Therapist', `Here's an exercise for you both: ${data.exercise}`, 'ai');\n        }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\nfunction pauseSession() {\n    addMessage('AI Therapist', \"Let's take a 5-minute break. Use this time to breathe and reflect on what we've discussed. When you're ready, we can continue.\", 'ai');\n}\n\nasync function requestSummary() {\n    try {\n        const response = await fetch('/api/couples_summary', {\n            method: 'GET'\n        });\n        \n        const data = await response.json();\n        if (data.summary) {\n            addMessage('AI Therapist', `Session Summary: ${data.summary}`, 'ai');\n        }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\nfunction endSession() {\n    if (confirm('Are you sure you want to end this session?')) {\n        window.location.href = '{{ url_for(\"couples_logout\") }}';\n    }\n}\n\n// Conversation Starter Functions\nasync function getConversationStarter(category = 'random') {\n    try {\n        const response = await fetch('/api/conversation_starter', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                category: category,\n                depth: 'medium',\n                history: conversationHistory.slice(-5)\n            })\n        });\n        \n        const data = await response.json();\n        if (data.starter) {\n            currentStarter = data.starter;\n            displayConversationStarter(data.starter);\n        }\n    } catch (error) {\n        console.error('Error getting conversation starter:', error);\n        alert('Unable to get conversation starter. Please try again.');\n    }\n}\n\nfunction displayConversationStarter(starter) {\n    const card = document.getElementById('conversationStarterCard');\n    const content = document.getElementById('conversationStarterContent');\n    \n    let html = `\n        \u003cdiv class=\"starter-category mb-2\"\u003e\n            \u003cspan class=\"badge bg-secondary\"\u003e${starter.main_category}\u003c/span\u003e\n            \u003cspan class=\"badge bg-info\"\u003e${starter.depth} depth\u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"lead mb-3\"\u003e${starter.prompt}\u003c/p\u003e\n    `;\n    \n    if (starter.follow_up) {\n        html += `\u003cp class=\"text-muted mb-2\"\u003e\u003cstrong\u003eFollow-up:\u003c/strong\u003e ${starter.follow_up}\u003c/p\u003e`;\n    }\n    \n    if (starter.context) {\n        html += `\u003cp class=\"text-info small\"\u003e\u003cem\u003e${starter.context}\u003c/em\u003e\u003c/p\u003e`;\n    }\n    \n    content.innerHTML = html;\n    card.style.display = 'block';\n    \n    // Add to conversation history\n    conversationHistory.push(starter.category);\n}\n\nfunction hideConversationStarter() {\n    document.getElementById('conversationStarterCard').style.display = 'none';\n}\n\nasync function getNewStarter() {\n    await getConversationStarter();\n}\n\nfunction useStarter() {\n    if (currentStarter) {\n        // Add the starter to the chat\n        addMessage('AI Therapist', `Here's a conversation topic: \"${currentStarter.prompt}\"`, 'ai');\n        \n        // Add follow-up if available\n        if (currentStarter.follow_up) {\n            setTimeout(() =\u003e {\n                addMessage('AI Therapist', `And when you're ready: \"${currentStarter.follow_up}\"`, 'ai');\n            }, 1000);\n        }\n        \n        hideConversationStarter();\n    }\n}\n\u003c/script\u003e\n{% endblock %}",
                "crisis_support.html": "\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eCrisis Support - MindMend\u003c/title\u003e\n        \u003cstyle\u003e\n            body { font-family: Arial; margin: 0; background: linear-gradient(135deg, #dc3545 0%, #bd2130 100%); color: white; min-height: 100vh; }\n            .container { max-width: 1000px; margin: 0 auto; padding: 30px; }\n            .emergency-card { background: rgba(255,255,255,0.1); border-radius: 15px; padding: 30px; margin-bottom: 20px; backdrop-filter: blur(10px); }\n            .btn { background: white; color: #dc3545; padding: 15px 30px; border: none; border-radius: 8px; text-decoration: none; font-size: 18px; font-weight: bold; display: inline-block; margin: 10px; }\n            .btn:hover { transform: translateY(-2px); }\n            .hotline { background: rgba(255,255,255,0.2); padding: 20px; border-radius: 10px; margin: 15px 0; }\n            .immediate { background: #fff3cd; color: #856404; padding: 20px; border-radius: 10px; margin: 20px 0; }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"emergency-card\"\u003e\n                \u003ch1\u003e🆘 Crisis Support\u003c/h1\u003e\n                \u003cp style=\"font-size: 1.2em;\"\u003eIf you're in immediate danger or having thoughts of self-harm, please reach out for help immediately.\u003c/p\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"immediate\"\u003e\n                \u003ch2\u003e⚠️ Immediate Help\u003c/h2\u003e\n                \u003cp\u003e\u003cstrong\u003eIf this is a medical emergency, call 000 immediately.\u003c/strong\u003e\u003c/p\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"emergency-card\"\u003e\n                \u003ch2\u003e📞 Crisis Hotlines (Australia)\u003c/h2\u003e\n\n                \u003cdiv class=\"hotline\"\u003e\n                    \u003ch3\u003eLifeline - 13 11 14\u003c/h3\u003e\n                    \u003cp\u003e24-hour crisis support and suicide prevention\u003c/p\u003e\n                \u003c/div\u003e\n\n                \u003cdiv class=\"hotline\"\u003e\n                    \u003ch3\u003eBeyond Blue - 1300 22 4636\u003c/h3\u003e\n                    \u003cp\u003eSupport for anxiety, depression and suicide prevention\u003c/p\u003e\n                \u003c/div\u003e\n\n                \u003cdiv class=\"hotline\"\u003e\n                    \u003ch3\u003eKids Helpline - 1800 55 1800\u003c/h3\u003e\n                    \u003cp\u003eFor people aged 5-25 years\u003c/p\u003e\n                \u003c/div\u003e\n\n                \u003cdiv class=\"hotline\"\u003e\n                    \u003ch3\u003eMensLine Australia - 1300 78 99 78\u003c/h3\u003e\n                    \u003cp\u003eSupport for men dealing with relationship and emotional health issues\u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"emergency-card\"\u003e\n                \u003ch2\u003e🧘 Immediate Coping Strategies\u003c/h2\u003e\n                \u003cul style=\"font-size: 1.1em;\"\u003e\n                    \u003cli\u003e\u003cstrong\u003e5-4-3-2-1 Grounding:\u003c/strong\u003e Name 5 things you see, 4 you can touch, 3 you hear, 2 you smell, 1 you taste\u003c/li\u003e\n                    \u003cli\u003e\u003cstrong\u003eDeep Breathing:\u003c/strong\u003e Inhale for 4 counts, hold for 4, exhale for 6\u003c/li\u003e\n                    \u003cli\u003e\u003cstrong\u003eCall Someone:\u003c/strong\u003e Reach out to a trusted friend, family member, or counselor\u003c/li\u003e\n                    \u003cli\u003e\u003cstrong\u003eSafety Plan:\u003c/strong\u003e Remove any means of self-harm from your immediate area\u003c/li\u003e\n                    \u003cli\u003e\u003cstrong\u003eStay Connected:\u003c/strong\u003e Don't isolate yourself - reach out for support\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n\n            \u003cdiv style=\"text-align: center; margin-top: 30px;\"\u003e\n                \u003ca href=\"/\" class=\"btn\"\u003e← Return to Safety\u003c/a\u003e\n                \u003ca href=\"/individual\" class.btn-primary\"\u003eTalk to AI Counselor\u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n",
                "dashboard.html": "{% extends \"base.html\" %}\n\n{% block title %}Dashboard - Mind Mend{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"row\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"d-flex justify-content-between align-items-center mb-4\"\u003e\n            \u003ch2\u003e\u003ci class=\"fas fa-chart-line me-2\"\u003e\u003c/i\u003eYour Mental Health Dashboard\u003c/h2\u003e\n            \u003cdiv class=\"d-flex gap-2\"\u003e\n                \u003cbutton class=\"btn btn-outline-primary\" id=\"exportData\"\u003e\n                    \u003ci class=\"fas fa-download me-1\"\u003e\u003c/i\u003eExport Data\n                \u003c/button\u003e\n                \u003cbutton class=\"btn btn-outline-info\" id=\"refreshDashboard\"\u003e\n                    \u003ci class=\"fas fa-sync me-1\"\u003e\u003c/i\u003eRefresh\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Quick Actions --\u003e\n\u003cdiv class=\"row mb-4\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"d-flex flex-wrap gap-2\"\u003e\n                    \u003ca href=\"{{ url_for('session') }}\" class=\"btn btn-primary\"\u003e\n                        \u003ci class=\"fas fa-comments me-1\"\u003e\u003c/i\u003eNew Session\n                    \u003c/a\u003e\n                    \u003ca href=\"{{ url_for('individual_therapy') }}\" class=\"btn btn-info\"\u003e\n                        \u003ci class=\"fas fa-user me-1\"\u003e\u003c/i\u003eIndividual Therapy\n                    \u003c/a\u003e\n                    \u003cbutton class=\"btn btn-success\" onclick=\"startJournaling()\"\u003e\n                        \u003ci class=\"fas fa-pen me-1\"\u003e\u003c/i\u003eJournal Entry\n                    \u003c/button\u003e\n                    \u003ca href=\"{{ url_for('subscribe') }}\" class=\"btn btn-warning\"\u003e\n                        \u003ci class=\"fas fa-crown me-1\"\u003e\u003c/i\u003eUpgrade Premium\n                    \u003c/a\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Key Statistics --\u003e\n\u003cdiv class=\"row g-4 mb-4\"\u003e\n    \u003cdiv class=\"col-lg-3 col-md-6\"\u003e\n        \u003cdiv class=\"card text-center\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003ci class=\"fas fa-comments fa-2x text-primary mb-2\"\u003e\u003c/i\u003e\n                \u003ch3 class=\"mb-1\"\u003e{{ stats.total_sessions or 0 }}\u003c/h3\u003e\n                \u003cp class=\"text-muted mb-0\"\u003eTotal Sessions\u003c/p\u003e\n                {% if stats.total_sessions \u003e 0 %}\n                \u003csmall class=\"text-success\"\u003e\n                    \u003ci class=\"fas fa-arrow-up me-1\"\u003e\u003c/i\u003eActive engagement\n                \u003c/small\u003e\n                {% endif %}\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"col-lg-3 col-md-6\"\u003e\n        \u003cdiv class=\"card text-center\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003ci class=\"fas fa-dumbbell fa-2x text-success mb-2\"\u003e\u003c/i\u003e\n                \u003ch3 class=\"mb-1\"\u003e{{ stats.completed_exercises or 0 }}\u003c/h3\u003e\n                \u003cp class=\"text-muted mb-0\"\u003eExercises Completed\u003c/p\u003e\n                {% if stats.completed_exercises \u003e 0 %}\n                \u003csmall class=\"text-success\"\u003e\n                    \u003ci class=\"fas fa-check me-1\"\u003e\u003c/i\u003eGreat progress!\n                \u003c/small\u003e\n                {% endif %}\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"col-lg-3 col-md-6\"\u003e\n        \u003cdiv class=\"card text-center\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003ci class=\"fas fa-heart fa-2x text-danger mb-2\"\u003e\u003c/i\u003e\n                \u003ch3 class=\"mb-1\"\u003e{{ \"%.1f\"|format(stats.avg_mood or 5.0) }}\u003c/h3\u003e\n                \u003cp class=\"text-muted mb-0\"\u003eAverage Mood\u003c/p\u003e\n                \u003csmall class=\"text-muted\"\u003eScale of 1-10\u003c/small\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"col-lg-3 col-md-6\"\u003e\n        \u003cdiv class=\"card text-center\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003ci class=\"fas fa-fire fa-2x text-warning mb-2\"\u003e\u003c/i\u003e\n                \u003ch3 class=\"mb-1\"\u003e{{ stats.streak_days or 0 }}\u003c/h3\u003e\n                \u003cp class=\"text-muted mb-0\"\u003eDay Streak\u003c/p\u003e\n                {% if stats.streak_days \u003e 0 %}\n                \u003csmall class=\"text-warning\"\u003e\n                    \u003ci class=\"fas fa-fire me-1\"\u003e\u003c/i\u003eKeep it up!\n                \u003c/small\u003e\n                {% endif %}\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Progress Charts --\u003e\n\u003cdiv class=\"row g-4 mb-4\"\u003e\n    \u003cdiv class=\"col-lg-8\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-chart-line me-2\"\u003e\u003c/i\u003eMood Trends\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003ccanvas id=\"moodChart\" height=\"100\"\u003e\u003c/canvas\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"col-lg-4\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-chart-pie me-2\"\u003e\u003c/i\u003eSession Distribution\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003ccanvas id=\"sessionChart\" height=\"200\"\u003e\u003c/canvas\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Biometric Monitoring --\u003e\n\u003cdiv class=\"row g-4 mb-4\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                    \u003ch5\u003e\u003ci class=\"fas fa-heartbeat me-2\"\u003e\u003c/i\u003eBiometric Monitoring\u003c/h5\u003e\n                    \u003cbutton class=\"btn btn-outline-primary btn-sm\" id=\"connectDevice\"\u003e\n                        \u003ci class=\"fas fa-plus me-1\"\u003e\u003c/i\u003eConnect Device\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                {% if biometric_data %}\n                \u003cdiv class=\"row g-3 mb-4\"\u003e\n                    \u003cdiv class=\"col-md-3\"\u003e\n                        \u003cdiv class=\"text-center\"\u003e\n                            \u003cdiv class=\"h4 mb-1 text-danger\"\u003e\n                                {{ biometric_data[-1].heart_rate or '--' }}\n                                {% if biometric_data[-1].heart_rate %}\u003csmall\u003ebpm\u003c/small\u003e{% endif %}\n                            \u003c/div\u003e\n                            \u003cdiv class=\"text-muted\"\u003eHeart Rate\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-3\"\u003e\n                        \u003cdiv class=\"text-center\"\u003e\n                            \u003cdiv class=\"h4 mb-1 text-warning\"\u003e\n                                {% if biometric_data[-1].stress_level %}\n                                    {{ \"%.0f\"|format(biometric_data[-1].stress_level * 100) }}%\n                                {% else %}\n                                    --\n                                {% endif %}\n                            \u003c/div\u003e\n                            \u003cdiv class=\"text-muted\"\u003eStress Level\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-3\"\u003e\n                        \u003cdiv class=\"text-center\"\u003e\n                            \u003cdiv class=\"h4 mb-1 text-info\"\u003e\n                                {% if biometric_data[-1].sleep_quality %}\n                                    {{ \"%.0f\"|format(biometric_data[-1].sleep_quality * 100) }}%\n                                {% else %}\n                                    --\n                                {% endif %}\n                            \u003c/div\u003e\n                            \u003cdiv class=\"text-muted\"\u003eSleep Quality\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-3\"\u003e\n                        \u003cdiv class=\"text-center\"\u003e\n                            \u003cdiv class=\"h4 mb-1 text-success\"\u003e\n                                {{ biometric_data[-1].hrv_score or '--' }}\n                            \u003c/div\u003e\n                            \u003cdiv class=\"text-muted\"\u003eHRV Score\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003ccanvas id=\"biometricChart\" height=\"80\"\u003e\u003c/canvas\u003e\n                {% else %}\n                \u003cdiv class=\"text-center py-4\"\u003e\n                    \u003ci class=\"fas fa-watch fa-3x text-muted mb-3\"\u003e\u003c/i\u003e\n                    \u003ch6\u003eNo biometric data available\u003c/h6\u003e\n                    \u003cp class=\"text-muted\"\u003eConnect a wearable device to track your health metrics\u003c/p\u003e\n                    \u003cbutton class=\"btn btn-primary\" id=\"setupDevice\"\u003e\n                        \u003ci class=\"fas fa-cog me-1\"\u003e\u003c/i\u003eSetup Device Integration\n                    \u003c/button\u003e\n                \u003c/div\u003e\n                {% endif %}\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Recent Activity --\u003e\n\u003cdiv class=\"row g-4\"\u003e\n    \u003cdiv class=\"col-lg-6\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-clock me-2\"\u003e\u003c/i\u003eRecent Sessions\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                {% if sessions %}\n                \u003cdiv class=\"list-group list-group-flush\"\u003e\n                    {% for session in sessions[:5] %}\n                    \u003cdiv class=\"list-group-item bg-transparent\"\u003e\n                        \u003cdiv class=\"d-flex justify-content-between\"\u003e\n                            \u003cdiv\u003e\n                                \u003ch6 class=\"mb-1\"\u003e{{ session.session_type.title() }} Session\u003c/h6\u003e\n                                \u003cp class=\"mb-1 text-muted\"\u003e{{ session.input_text[:80] }}{% if session.input_text|length \u003e 80 %}...{% endif %}\u003c/p\u003e\n                                \u003csmall class=\"text-muted\"\u003e\n                                    {{ session.timestamp.strftime('%B %d, %Y at %I:%M %p') }}\n                                \u003c/small\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"text-end\"\u003e\n                                {% if session.mood_before %}\n                                \u003cdiv class=\"badge bg-info\"\u003eMood: {{ session.mood_before }}/10\u003c/div\u003e\n                                {% endif %}\n                                {% if session.alerts %}\n                                \u003cdiv class=\"badge bg-warning mt-1\"\u003eAlerts\u003c/div\u003e\n                                {% endif %}\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    {% endfor %}\n                \u003c/div\u003e\n                {% else %}\n                \u003cdiv class=\"text-center py-4\"\u003e\n                    \u003ci class=\"fas fa-comments fa-3x text-muted mb-3\"\u003e\u003c/i\u003e\n                    \u003ch6\u003eNo sessions yet\u003c/h6\u003e\n                    \u003cp class=\"text-muted\"\u003eStart your first therapy session to see your progress here\u003c/p\u003e\n                    \u003ca href=\"{{ url_for('individual_therapy') }}\" class=\"btn btn-primary\"\u003e\n                        \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart Session\n                    \u003c/a\u003e\n                \u003c/div\u003e\n                {% endif %}\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"col-lg-6\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-tasks me-2\"\u003e\u003c/i\u003eAssigned Exercises\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                {% if exercises %}\n                \u003cdiv class=\"list-group list-group-flush\"\u003e\n                    {% for exercise in exercises[:5] %}\n                    \u003cdiv class=\"list-group-item bg-transparent\"\u003e\n                        \u003cdiv class=\"d-flex justify-content-between align-items-start\"\u003e\n                            \u003cdiv\u003e\n                                \u003ch6 class=\"mb-1\"\u003e{{ exercise.title }}\u003c/h6\u003e\n                                \u003cp class=\"mb-1 text-muted\"\u003e{{ exercise.description[:60] }}{% if exercise.description|length \u003e 60 %}...{% endif %}\u003c/p\u003e\n                                \u003csmall class=\"text-muted\"\u003e\n                                    {{ exercise.duration_minutes }} min • \n                                    Difficulty: {{ exercise.difficulty_level }}/5\n                                \u003c/small\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"text-end\"\u003e\n                                {% set status_colors = {'assigned': 'secondary', 'in_progress': 'warning', 'completed': 'success'} %}\n                                \u003cspan class=\"badge bg-{{ status_colors.get(exercise.completion_status, 'secondary') }}\"\u003e\n                                    {{ exercise.completion_status.replace('_', ' ').title() }}\n                                \u003c/span\u003e\n                                {% if exercise.completion_status != 'completed' %}\n                                \u003cbr\u003e\n                                \u003cbutton class=\"btn btn-sm btn-outline-primary mt-1\" onclick=\"startExercise({{ exercise.id }})\"\u003e\n                                    \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart\n                                \u003c/button\u003e\n                                {% endif %}\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    {% endfor %}\n                \u003c/div\u003e\n                {% else %}\n                \u003cdiv class=\"text-center py-4\"\u003e\n                    \u003ci class=\"fas fa-dumbbell fa-3x text-muted mb-3\"\u003e\u003c/i\u003e\n                    \u003ch6\u003eNo exercises assigned\u003c/h6\u003e\n                    \u003cp class=\"text-muted\"\u003eComplete a therapy session to get personalized exercises\u003c/p\u003e\n                    \u003ca href=\"{{ url_for('individual_therapy') }}\" class=\"btn btn-success\"\u003e\n                        \u003ci class=\"fas fa-user me-1\"\u003e\u003c/i\u003eStart Individual Session\n                    \u003c/a\u003e\n                \u003c/div\u003e\n                {% endif %}\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Assessments \u0026 Reports --\u003e\n\u003cdiv class=\"row mt-4\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                    \u003ch5\u003e\u003ci class=\"fas fa-chart-bar me-2\"\u003e\u003c/i\u003eAssessment History\u003c/h5\u003e\n                    \u003ca href=\"{{ url_for('video_assessment') }}\" class=\"btn btn-outline-primary\"\u003e\n                        \u003ci class=\"fas fa-video me-1\"\u003e\u003c/i\u003eNew Assessment\n                    \u003c/a\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                {% if assessments %}\n                \u003cdiv class=\"table-responsive\"\u003e\n                    \u003ctable class=\"table table-hover\"\u003e\n                        \u003cthead\u003e\n                            \u003ctr\u003e\n                                \u003cth\u003eDate\u003c/th\u003e\n                                \u003cth\u003eType\u003c/th\u003e\n                                \u003cth\u003eScore\u003c/th\u003e\n                                \u003cth\u003eStatus\u003c/th\u003e\n                                \u003cth\u003eActions\u003c/th\u003e\n                            \u003c/tr\u003e\n                        \u003c/thead\u003e\n                        \u003ctbody\u003e\n                            {% for assessment in assessments %}\n                            \u003ctr\u003e\n                                \u003ctd\u003e{{ assessment.timestamp.strftime('%m/%d/%Y') }}\u003c/td\u003e\n                                \u003ctd\u003e{{ assessment.assessment_type.replace('_', ' ').title() }}\u003c/td\u003e\n                                \u003ctd\u003e\n                                    {% if assessment.multi_modal_score %}\n                                    \u003cspan class=\"badge bg-{% if assessment.multi_modal_score \u003e= 80 %}success{% elif assessment.multi_modal_score \u003e= 60 %}warning{% else %}danger{% endif %}\"\u003e\n                                        {{ \"%.0f\"|format(assessment.multi_modal_score) }}%\n                                    \u003c/span\u003e\n                                    {% else %}\n                                    \u003cspan class=\"text-muted\"\u003e--\u003c/span\u003e\n                                    {% endif %}\n                                \u003c/td\u003e\n                                \u003ctd\u003e\n                                    {% if assessment.completed %}\n                                    \u003cspan class=\"badge bg-success\"\u003eComplete\u003c/span\u003e\n                                    {% else %}\n                                    \u003cspan class=\"badge bg-warning\"\u003ePending\u003c/span\u003e\n                                    {% endif %}\n                                \u003c/td\u003e\n                                \u003ctd\u003e\n                                    \u003cbutton class=\"btn btn-sm btn-outline-info\" onclick=\"viewAssessment({{ assessment.id }})\"\u003e\n                                        \u003ci class=\"fas fa-eye me-1\"\u003e\u003c/i\u003eView\n                                    \u003c/button\u003e\n                                \u003c/td\u003e\n                            \u003c/tr\u003e\n                            {% endfor %}\n                        \u003c/tbody\u003e\n                    \u003c/table\u003e\n                \u003c/div\u003e\n                {% else %}\n                \u003cdiv class=\"text-center py-4\"\u003e\n                    \u003ci class=\"fas fa-clipboard-check fa-3x text-muted mb-3\"\u003e\u003c/i\u003e\n                    \u003ch6\u003eNo assessments completed\u003c/h6\u003e\n                    \u003cp class=\"text-muted\"\u003eTake your first AI video assessment to get comprehensive insights\u003c/p\u003e\n                    \u003ca href=\"{{ url_for('video_assessment') }}\" class=\"btn btn-info\"\u003e\n                        \u003ci class=\"fas fa-video me-1\"\u003e\u003c/i\u003eStart Video Assessment\n                    \u003c/a\u003e\n                \u003c/div\u003e\n                {% endif %}\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\u003c!-- Journaling Section --\u003e\n\u003cdiv class=\"row\"\u003e\n    \u003cdiv class=\"col-lg-6\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-book me-2\"\u003e\u003c/i\u003eJournal Entries\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\" id=\"journalSection\"\u003e\n                \u003cdiv class=\"text-muted text-center py-4\" id=\"noJournalEntries\"\u003e\n                    \u003ci class=\"fas fa-book-open fa-3x mb-3\"\u003e\u003c/i\u003e\n                    \u003cp\u003eNo journal entries yet. Start writing to track your progress!\u003c/p\u003e\n                    \u003cbutton class=\"btn btn-primary\" onclick=\"startJournaling()\"\u003e\n                        \u003ci class=\"fas fa-pen me-2\"\u003e\u003c/i\u003eWrite First Entry\n                    \u003c/button\u003e\n                \u003c/div\u003e\n                \u003cdiv id=\"journalEntries\" style=\"display: none;\"\u003e\n                    \u003c!-- Journal entries will be loaded here --\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"col-lg-6\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-chart-line me-2\"\u003e\u003c/i\u003eMood Tracking\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003ccanvas id=\"moodChart\" width=\"400\" height=\"200\"\u003e\u003c/canvas\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Journal Entry Modal --\u003e\n\u003cdiv class=\"modal fade\" id=\"journalModal\" tabindex=\"-1\"\u003e\n    \u003cdiv class=\"modal-dialog modal-lg\"\u003e\n        \u003cdiv class=\"modal-content\"\u003e\n            \u003cdiv class=\"modal-header\"\u003e\n                \u003ch5 class=\"modal-title\"\u003e\u003ci class=\"fas fa-pen me-2\"\u003e\u003c/i\u003eJournal Entry\u003c/h5\u003e\n                \u003cbutton type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"\u003e\u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"modal-body\"\u003e\n                \u003cform id=\"journalForm\"\u003e\n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel for=\"journalTitle\" class=\"form-label\"\u003eTitle (Optional)\u003c/label\u003e\n                        \u003cinput type=\"text\" class=\"form-control\" id=\"journalTitle\" placeholder=\"How are you feeling today?\"\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel for=\"journalMood\" class=\"form-label\"\u003eCurrent Mood\u003c/label\u003e\n                        \u003cdiv class=\"d-flex align-items-center\"\u003e\n                            \u003cinput type=\"range\" class=\"form-range me-3\" id=\"journalMood\" min=\"1\" max=\"10\" value=\"5\"\u003e\n                            \u003cspan class=\"badge bg-primary\" id=\"journalMoodValue\"\u003e5\u003c/span\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"form-text\"\u003e1 = Very Low, 10 = Excellent\u003c/div\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel for=\"journalContent\" class=\"form-label\"\u003eJournal Entry\u003c/label\u003e\n                        \u003ctextarea class=\"form-control\" id=\"journalContent\" rows=\"8\" \n                                placeholder=\"Write about your thoughts, feelings, experiences, or anything on your mind...\"\u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel for=\"journalTags\" class=\"form-label\"\u003eTags (Optional)\u003c/label\u003e\n                        \u003cinput type=\"text\" class=\"form-control\" id=\"journalTags\" \n                               placeholder=\"anxiety, work, family, gratitude (comma separated)\"\u003e\n                    \u003c/div\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"modal-footer\"\u003e\n                \u003cbutton type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\"\u003eCancel\u003c/button\u003e\n                \u003cbutton type=\"button\" class=\"btn btn-primary\" onclick=\"saveJournalEntry()\"\u003e\n                    \u003ci class=\"fas fa-save me-2\"\u003e\u003c/i\u003eSave Entry\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003cscript\u003e\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize mood chart\n    initializeMoodChart();\n    \n    // Load journal entries\n    loadJournalEntries();\n    \n    // Mood slider in journal modal\n    const moodSlider = document.getElementById('journalMood');\n    const moodValue = document.getElementById('journalMoodValue');\n    if (moodSlider) {\n        moodSlider.addEventListener('input', function() {\n            moodValue.textContent = this.value;\n        });\n    }\n});\n\n// Journaling functions\nwindow.startJournaling = function() {\n    const modal = new bootstrap.Modal(document.getElementById('journalModal'));\n    modal.show();\n};\n\nwindow.saveJournalEntry = function() {\n    const title = document.getElementById('journalTitle').value;\n    const mood = document.getElementById('journalMood').value;\n    const content = document.getElementById('journalContent').value;\n    const tags = document.getElementById('journalTags').value;\n    \n    if (!content.trim()) {\n        alert('Please write something in your journal entry.');\n        return;\n    }\n    \n    const entry = {\n        title: title || 'Journal Entry',\n        mood: parseInt(mood),\n        content: content,\n        tags: tags.split(',').map(tag =\u003e tag.trim()).filter(tag =\u003e tag),\n        timestamp: new Date().toISOString()\n    };\n    \n    // Save to localStorage for now (in production, save to database)\n    let entries = JSON.parse(localStorage.getItem('journalEntries') || '[]');\n    entries.unshift(entry);\n    localStorage.setItem('journalEntries', JSON.stringify(entries));\n    \n    // Clear form\n    document.getElementById('journalForm').reset();\n    document.getElementById('journalMoodValue').textContent = '5';\n    \n    // Close modal\n    const modal = bootstrap.Modal.getInstance(document.getElementById('journalModal'));\n    modal.hide();\n    \n    // Reload entries\n    loadJournalEntries();\n    \n    // Show success message\n    const alertDiv = document.createElement('div');\n    alertDiv.className = 'alert alert-success alert-dismissible fade show';\n    alertDiv.innerHTML = `\n        \u003ci class=\"fas fa-check me-2\"\u003e\u003c/i\u003eJournal entry saved successfully!\n        \u003cbutton type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"\u003e\u003c/button\u003e\n    `;\n    document.querySelector('.container-fluid').insertBefore(alertDiv, document.querySelector('.row'));\n    \n    setTimeout(() =\u003e alertDiv.remove(), 3000);\n};\n\nfunction loadJournalEntries() {\n    const entries = JSON.parse(localStorage.getItem('journalEntries') || '[]');\n    const entriesContainer = document.getElementById('journalEntries');\n    const noEntriesDiv = document.getElementById('noJournalEntries');\n    \n    if (entries.length === 0) {\n        noEntriesDiv.style.display = 'block';\n        entriesContainer.style.display = 'none';\n        return;\n    }\n    \n    noEntriesDiv.style.display = 'none';\n    entriesContainer.style.display = 'block';\n    \n    let html = '';\n    entries.slice(0, 5).forEach((entry, index) =\u003e {\n        const date = new Date(entry.timestamp);\n        html += `\n            \u003cdiv class=\"card mb-3\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch6 class=\"card-title\"\u003e${entry.title}\u003c/h6\u003e\n                    \u003cp class=\"card-text\"\u003e${entry.content.substring(0, 150)}${entry.content.length \u003e 150 ? '...' : ''}\u003c/p\u003e\n                    \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                        \u003cdiv\u003e\n                            \u003cspan class=\"badge bg-info\"\u003eMood: ${entry.mood}/10\u003c/span\u003e\n                            ${entry.tags.map(tag =\u003e `\u003cspan class=\"badge bg-secondary ms-1\"\u003e${tag}\u003c/span\u003e`).join('')}\n                        \u003c/div\u003e\n                        \u003csmall class=\"text-muted\"\u003e${date.toLocaleDateString()}\u003c/small\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        `;\n    });\n    \n    entriesContainer.innerHTML = html;\n}\n\nfunction initializeMoodChart() {\n    const ctx = document.getElementById('moodChart').getContext('2d');\n    \n    // Get mood data from journal entries\n    const entries = JSON.parse(localStorage.getItem('journalEntries') || '[]');\n    const moodData = entries.slice(0, 30).reverse(); // Last 30 entries\n    \n    const labels = moodData.map(entry =\u003e {\n        const date = new Date(entry.timestamp);\n        return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    });\n    \n    const moodValues = moodData.map(entry =\u003e entry.mood);\n    \n    new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: labels,\n            datasets: [{\n                label: 'Mood Score',\n                data: moodValues,\n                borderColor: 'rgb(54, 162, 235)',\n                backgroundColor: 'rgba(54, 162, 235, 0.1)',\n                tension: 0.4,\n                fill: true\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    max: 10,\n                    ticks: {\n                        stepSize: 1\n                    }\n                }\n            },\n            plugins: {\n                legend: {\n                    display: false\n                }\n            }\n        }\n    });\n}\n\nfunction initializeSessionChart() {\n    {% if biometric_data %}\n    initializeBiometricChart();\n    {% endif %}\n    \n    // Event listeners\n    document.getElementById('refreshDashboard')?.addEventListener('click', refreshDashboard);\n    document.getElementById('exportData')?.addEventListener('click', exportData);\n    document.getElementById('connectDevice')?.addEventListener('click', connectDevice);\n    document.getElementById('setupDevice')?.addEventListener('click', setupDevice);\n});\n\nfunction initializeMoodChart() {\n    const ctx = document.getElementById('moodChart');\n    if (!ctx) return;\n    \n    // Generate sample data for the past 30 days\n    const labels = [];\n    const data = [];\n    const today = new Date();\n    \n    for (let i = 29; i \u003e= 0; i--) {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        labels.push(date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));\n        \n        // Use actual data if available, otherwise show empty state\n        {% if sessions %}\n        data.push(Math.random() * 3 + 5); // Random mood between 5-8\n        {% else %}\n        data.push(null);\n        {% endif %}\n    }\n    \n    new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: labels,\n            datasets: [{\n                label: 'Daily Mood',\n                data: data,\n                borderColor: '#007bff',\n                backgroundColor: 'rgba(0, 123, 255, 0.1)',\n                tension: 0.4,\n                fill: true\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    max: 10,\n                    title: {\n                        display: true,\n                        text: 'Mood (1-10)'\n                    }\n                }\n            },\n            plugins: {\n                legend: {\n                    display: false\n                }\n            }\n        }\n    });\n}\n\nfunction initializeSessionChart() {\n    const ctx = document.getElementById('sessionChart');\n    if (!ctx) return;\n    \n    {% if sessions %}\n    // Count session types\n    const sessionTypes = {};\n    {% for session in sessions %}\n    const type = '{{ session.session_type }}';\n    sessionTypes[type] = (sessionTypes[type] || 0) + 1;\n    {% endfor %}\n    \n    const labels = Object.keys(sessionTypes);\n    const data = Object.values(sessionTypes);\n    const colors = ['#007bff', '#dc3545', '#28a745', '#ffc107'];\n    {% else %}\n    const labels = ['No sessions yet'];\n    const data = [1];\n    const colors = ['#6c757d'];\n    {% endif %}\n    \n    new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n            labels: labels,\n            datasets: [{\n                data: data,\n                backgroundColor: colors\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    position: 'bottom'\n                }\n            }\n        }\n    });\n}\n\n{% if biometric_data %}\nfunction initializeBiometricChart() {\n    const ctx = document.getElementById('biometricChart');\n    if (!ctx) return;\n    \n    const labels = [];\n    const heartRateData = [];\n    const stressData = [];\n    \n    {% for data in biometric_data[-10:] %}\n    labels.push('{{ data.timestamp.strftime(\"%m/%d %H:%M\") }}');\n    heartRateData.push({{ data.heart_rate or 'null' }});\n    stressData.push({{ (data.stress_level * 100) if data.stress_level else 'null' }});\n    {% endfor %}\n    \n    new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: labels,\n            datasets: [{\n                label: 'Heart Rate (bpm)',\n                data: heartRateData,\n                borderColor: '#dc3545',\n                backgroundColor: 'rgba(220, 53, 69, 0.1)',\n                yAxisID: 'y'\n            }, {\n                label: 'Stress Level (%)',\n                data: stressData,\n                borderColor: '#ffc107',\n                backgroundColor: 'rgba(255, 193, 7, 0.1)',\n                yAxisID: 'y1'\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n                y: {\n                    type: 'linear',\n                    display: true,\n                    position: 'left',\n                    title: {\n                        display: true,\n                        text: 'Heart Rate (bpm)'\n                    }\n                },\n                y1: {\n                    type: 'linear',\n                    display: true,\n                    position: 'right',\n                    title: {\n                        display: true,\n                        text: 'Stress Level (%)'\n                    },\n                    grid: {\n                        drawOnChartArea: false,\n                    },\n                }\n            }\n        }\n    });\n}\n{% endif %}\n\nasync function refreshDashboard() {\n    const btn = document.getElementById('refreshDashboard');\n    const originalText = btn.innerHTML;\n    btn.innerHTML = '\u003ci class=\"fas fa-spinner fa-spin me-1\"\u003e\u003c/i\u003eRefreshing...';\n    btn.disabled = true;\n    \n    try {\n        const response = await fetch('/api/dashboard-stats');\n        const stats = await response.json();\n        \n        // Update stats in UI\n        // This would update the statistics display\n        \n        setTimeout(() =\u003e {\n            location.reload(); // Simple refresh for now\n        }, 1000);\n    } catch (error) {\n        console.error('Error refreshing dashboard:', error);\n        alert('Error refreshing dashboard. Please try again.');\n    } finally {\n        btn.innerHTML = originalText;\n        btn.disabled = false;\n    }\n}\n\nfunction exportData() {\n    // Implementation for exporting user data\n    alert('Data export feature coming soon!');\n}\n\nfunction connectDevice() {\n    // Implementation for connecting biometric devices\n    alert('Device connection setup will be available in the premium version.');\n}\n\nfunction setupDevice() {\n    // Implementation for device setup\n    alert('Device integration setup coming soon!');\n}\n\n// Global functions for exercise and assessment interaction\nwindow.startExercise = function(exerciseId) {\n    // Implementation for starting exercises\n    window.location.href = `/exercise/${exerciseId}`;\n};\n\nwindow.viewAssessment = function(assessmentId) {\n    // Implementation for viewing assessment details\n    window.location.href = `/assessment/${assessmentId}`;\n};\n\u003c/script\u003e\n{% endblock %}\n",
                "dashboard_widgets.html": "{% extends \"base.html\" %}\n\n{% block title %}Your Mind Mend Dashboard{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"dashboard-container\"\u003e\n    \u003c!-- Dashboard Header --\u003e\n    \u003cdiv class=\"dashboard-header\"\u003e\n        \u003cdiv class=\"welcome-section\"\u003e\n            \u003cdiv class=\"user-avatar\"\u003e\n                \u003ci class=\"fas fa-user-circle\"\u003e\u003c/i\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"welcome-text\"\u003e\n                \u003ch1\u003eWelcome back, Friend!\u003c/h1\u003e\n                \u003cp class=\"last-session\"\u003eLast session: {{ last_session_date or 'Start your first session today' }}\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"quick-actions\"\u003e\n            \u003ca href=\"{{ url_for('individual_therapy') }}\" class=\"quick-action-btn primary\"\u003e\n                \u003ci class=\"fas fa-play\"\u003e\u003c/i\u003e\n                \u003cspan\u003eStart Session\u003c/span\u003e\n            \u003c/a\u003e\n            \u003ca href=\"{{ url_for('video_assess') }}\" class=\"quick-action-btn secondary\"\u003e\n                \u003ci class=\"fas fa-video\"\u003e\u003c/i\u003e\n                \u003cspan\u003eVideo Check-in\u003c/span\u003e\n            \u003c/a\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Dashboard Widgets Grid --\u003e\n    \u003cdiv class=\"dashboard-grid\"\u003e\n        \n        \u003c!-- Mood Tracking Widget --\u003e\n        \u003cdiv class=\"dashboard-widget mood-widget\"\u003e\n            \u003cdiv class=\"widget-header\"\u003e\n                \u003ch3\u003e\u003ci class=\"fas fa-heart\"\u003e\u003c/i\u003e Mood Tracker\u003c/h3\u003e\n                \u003cdiv class=\"widget-actions\"\u003e\n                    \u003cbutton class=\"log-mood-btn\" onclick=\"openMoodLogger()\"\u003eLog Mood\u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"widget-content\"\u003e\n                \u003cdiv class=\"current-mood\"\u003e\n                    \u003cdiv class=\"mood-display\"\u003e\n                        \u003cdiv class=\"mood-emoji\" id=\"currentMoodEmoji\"\u003e😊\u003c/div\u003e\n                        \u003cdiv class=\"mood-text\"\u003e\n                            \u003cspan class=\"mood-label\" id=\"currentMoodLabel\"\u003eGood\u003c/span\u003e\n                            \u003csmall class=\"mood-time\"\u003eToday, 2:30 PM\u003c/small\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"mood-chart-container\"\u003e\n                    \u003ccanvas id=\"moodChart\" width=\"300\" height=\"150\"\u003e\u003c/canvas\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"mood-insights\"\u003e\n                    \u003cdiv class=\"insight-item\"\u003e\n                        \u003cspan class=\"insight-label\"\u003eWeekly Average:\u003c/span\u003e\n                        \u003cspan class=\"insight-value positive\"\u003e↗ 7.2/10\u003c/span\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"insight-item\"\u003e\n                        \u003cspan class=\"insight-label\"\u003eImprovement:\u003c/span\u003e\n                        \u003cspan class=\"insight-value positive\"\u003e+15% this week\u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- AI Insights Widget --\u003e\n        \u003cdiv class=\"dashboard-widget ai-insights-widget\"\u003e\n            \u003cdiv class=\"widget-header\"\u003e\n                \u003ch3\u003e\u003ci class=\"fas fa-brain\"\u003e\u003c/i\u003e AI Mental Health Insights\u003c/h3\u003e\n                \u003cbutton class=\"refresh-insights\" onclick=\"refreshAIInsights()\"\u003e\n                    \u003ci class=\"fas fa-sync-alt\"\u003e\u003c/i\u003e\n                \u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"widget-content\"\u003e\n                \u003cdiv id=\"ai-insights-content\"\u003e\n                    \u003cdiv class=\"loading-insights\"\u003e\n                        \u003cdiv class=\"spinner\"\u003e\u003c/div\u003e\n                        \u003cp\u003eAnalyzing your mental health patterns...\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Progress Tracking Widget --\u003e\n        \u003cdiv class=\"dashboard-widget progress-widget\"\u003e\n            \u003cdiv class=\"widget-header\"\u003e\n                \u003ch3\u003e\u003ci class=\"fas fa-chart-line\"\u003e\u003c/i\u003e Your Progress\u003c/h3\u003e\n                \u003cselect class=\"time-filter\" onchange=\"updateProgressChart(this.value)\"\u003e\n                    \u003coption value=\"week\"\u003eThis Week\u003c/option\u003e\n                    \u003coption value=\"month\"\u003eThis Month\u003c/option\u003e\n                    \u003coption value=\"quarter\"\u003e3 Months\u003c/option\u003e\n                \u003c/select\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"widget-content\"\u003e\n                \u003cdiv class=\"progress-stats\"\u003e\n                    \u003cdiv class=\"stat-item\"\u003e\n                        \u003cdiv class=\"stat-value\"\u003e{{ session_count or 0 }}\u003c/div\u003e\n                        \u003cdiv class=\"stat-label\"\u003eSessions Completed\u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"stat-item\"\u003e\n                        \u003cdiv class=\"stat-value\"\u003e{{ streak_days or 0 }}\u003c/div\u003e\n                        \u003cdiv class=\"stat-label\"\u003eDay Streak\u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"stat-item\"\u003e\n                        \u003cdiv class=\"stat-value\"\u003e{{ goals_achieved or 0 }}/5\u003c/div\u003e\n                        \u003cdiv class=\"stat-label\"\u003eGoals Achieved\u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"progress-chart\"\u003e\n                    \u003ccanvas id=\"progressChart\" width=\"350\" height=\"180\"\u003e\u003c/canvas\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Quick Tools Widget --\u003e\n        \u003cdiv class=\"dashboard-widget tools-widget\"\u003e\n            \u003cdiv class=\"widget-header\"\u003e\n                \u003ch3\u003e\u003ci class=\"fas fa-tools\"\u003e\u003c/i\u003e Quick Tools\u003c/h3\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"widget-content\"\u003e\n                \u003cdiv class=\"tool-grid\"\u003e\n                    \u003cdiv class=\"tool-item\" onclick=\"openTool('breathing')\"\u003e\n                        \u003cdiv class=\"tool-icon\"\u003e\n                            \u003ci class=\"fas fa-wind\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003cspan class=\"tool-name\"\u003eBreathing Exercise\u003c/span\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"tool-item\" onclick=\"openTool('journal')\"\u003e\n                        \u003cdiv class=\"tool-icon\"\u003e\n                            \u003ci class=\"fas fa-book\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003cspan class=\"tool-name\"\u003eMood Journal\u003c/span\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"tool-item\" onclick=\"openTool('meditation')\"\u003e\n                        \u003cdiv class=\"tool-icon\"\u003e\n                            \u003ci class=\"fas fa-lotus-pose\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003cspan class=\"tool-name\"\u003eGuided Meditation\u003c/span\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"tool-item\" onclick=\"openTool('crisis')\"\u003e\n                        \u003cdiv class=\"tool-icon crisis\"\u003e\n                            \u003ci class=\"fas fa-phone\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003cspan class=\"tool-name\"\u003eCrisis Support\u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Goals \u0026 Achievements Widget --\u003e\n        \u003cdiv class=\"dashboard-widget goals-widget\"\u003e\n            \u003cdiv class=\"widget-header\"\u003e\n                \u003ch3\u003e\u003ci class=\"fas fa-target\"\u003e\u003c/i\u003e Goals \u0026 Achievements\u003c/h3\u003e\n                \u003cbutton class=\"add-goal-btn\" onclick=\"openGoalCreator()\"\u003e\n                    \u003ci class=\"fas fa-plus\"\u003e\u003c/i\u003e Add Goal\n                \u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"widget-content\"\u003e\n                \u003cdiv class=\"active-goals\"\u003e\n                    \u003cdiv class=\"goal-item\"\u003e\n                        \u003cdiv class=\"goal-progress\"\u003e\n                            \u003cdiv class=\"goal-info\"\u003e\n                                \u003ch4\u003ePractice Daily Mindfulness\u003c/h4\u003e\n                                \u003cp\u003eMeditate for 10 minutes daily\u003c/p\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"progress-circle\" data-progress=\"70\"\u003e\n                                \u003cspan class=\"progress-text\"\u003e70%\u003c/span\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"goal-streak\"\u003e\n                            \u003cspan class=\"streak-text\"\u003e5 day streak 🔥\u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"goal-item\"\u003e\n                        \u003cdiv class=\"goal-progress\"\u003e\n                            \u003cdiv class=\"goal-info\"\u003e\n                                \u003ch4\u003eImprove Sleep Quality\u003c/h4\u003e\n                                \u003cp\u003eSleep 7+ hours for 2 weeks\u003c/p\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"progress-circle\" data-progress=\"45\"\u003e\n                                \u003cspan class=\"progress-text\"\u003e45%\u003c/span\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"goal-streak\"\u003e\n                            \u003cspan class=\"streak-text\"\u003e3 day streak\u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv class=\"recent-achievements\"\u003e\n                    \u003ch4\u003eRecent Achievements\u003c/h4\u003e\n                    \u003cdiv class=\"achievement-item\"\u003e\n                        \u003cdiv class=\"achievement-badge\"\u003e🎯\u003c/div\u003e\n                        \u003cdiv class=\"achievement-text\"\u003e\n                            \u003cspan class=\"achievement-title\"\u003eFirst Week Complete\u003c/span\u003e\n                            \u003cspan class=\"achievement-date\"\u003e2 days ago\u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"achievement-item\"\u003e\n                        \u003cdiv class=\"achievement-badge\"\u003e🧠\u003c/div\u003e\n                        \u003cdiv class=\"achievement-text\"\u003e\n                            \u003cspan class=\"achievement-title\"\u003eMindfulness Master\u003c/span\u003e\n                            \u003cspan class=\"achievement-date\"\u003e1 week ago\u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Upcoming Sessions Widget --\u003e\n        \u003cdiv class=\"dashboard-widget sessions-widget\"\u003e\n            \u003cdiv class=\"widget-header\"\u003e\n                \u003ch3\u003e\u003ci class=\"fas fa-calendar-alt\"\u003e\u003c/i\u003e Therapy Sessions\u003c/h3\u003e\n                \u003ca href=\"/schedule\" class=\"schedule-link\"\u003eView All\u003c/a\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"widget-content\"\u003e\n                \u003cdiv class=\"session-actions\"\u003e\n                    \u003ca href=\"{{ url_for('individual_therapy') }}\" class=\"session-type-btn individual\"\u003e\n                        \u003ci class=\"fas fa-user\"\u003e\u003c/i\u003e\n                        \u003cspan\u003eIndividual Therapy\u003c/span\u003e\n                        \u003csmall\u003eAI-powered sessions\u003c/small\u003e\n                    \u003c/a\u003e\n                    \n                    \u003ca href=\"{{ url_for('couples_session') }}\" class=\"session-type-btn couples\"\u003e\n                        \u003ci class=\"fas fa-heart\"\u003e\u003c/i\u003e\n                        \u003cspan\u003eCouples Therapy\u003c/span\u003e\n                        \u003csmall\u003eRelationship support\u003c/small\u003e\n                    \u003c/a\u003e\n                    \n                    \u003ca href=\"{{ url_for('group_therapy') }}\" class=\"session-type-btn group\"\u003e\n                        \u003ci class=\"fas fa-users\"\u003e\u003c/i\u003e\n                        \u003cspan\u003eGroup Sessions\u003c/span\u003e\n                        \u003csmall\u003eCommunity support\u003c/small\u003e\n                    \u003c/a\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Mood Logger Modal --\u003e\n\u003cdiv id=\"moodLoggerModal\" class=\"modal\"\u003e\n    \u003cdiv class=\"modal-content\"\u003e\n        \u003cdiv class=\"modal-header\"\u003e\n            \u003ch3\u003eHow are you feeling?\u003c/h3\u003e\n            \u003cspan class=\"close\" onclick=\"closeMoodLogger()\"\u003e\u0026times;\u003c/span\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"modal-body\"\u003e\n            \u003cdiv class=\"mood-selector\"\u003e\n                \u003cdiv class=\"mood-option\" data-mood=\"1\" data-label=\"Very Sad\"\u003e😢\u003c/div\u003e\n                \u003cdiv class=\"mood-option\" data-mood=\"2\" data-label=\"Sad\"\u003e😞\u003c/div\u003e\n                \u003cdiv class=\"mood-option\" data-mood=\"3\" data-label=\"Neutral\"\u003e😐\u003c/div\u003e\n                \u003cdiv class=\"mood-option\" data-mood=\"4\" data-label=\"Good\"\u003e😊\u003c/div\u003e\n                \u003cdiv class=\"mood-option\" data-mood=\"5\" data-label=\"Great\"\u003e😁\u003c/div\u003e\n            \u003c/div\u003e\n            \u003ctextarea placeholder=\"What's on your mind? (optional)\" id=\"moodNotes\"\u003e\u003c/textarea\u003e\n            \u003cbutton class=\"save-mood-btn\" onclick=\"saveMood()\"\u003eSave Mood\u003c/button\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block styles %}\n\u003cstyle\u003e\n.dashboard-container {\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: 2rem;\n    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n    min-height: 100vh;\n}\n\n/* Dashboard Header */\n.dashboard-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 2rem;\n    background: white;\n    padding: 2rem;\n    border-radius: 20px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\n.welcome-section {\n    display: flex;\n    align-items: center;\n    gap: 1.5rem;\n}\n\n.user-avatar {\n    font-size: 4rem;\n    color: #4CAF50;\n}\n\n.welcome-text h1 {\n    margin: 0;\n    color: #333;\n    font-size: 2rem;\n    font-weight: 700;\n}\n\n.last-session {\n    margin: 0.5rem 0 0 0;\n    color: #666;\n    font-size: 1rem;\n}\n\n.quick-actions {\n    display: flex;\n    gap: 1rem;\n}\n\n.quick-action-btn {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.5rem;\n    padding: 1rem 1.5rem;\n    border-radius: 15px;\n    text-decoration: none;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    min-width: 100px;\n}\n\n.quick-action-btn.primary {\n    background: linear-gradient(135deg, #4CAF50, #45a049);\n    color: white;\n}\n\n.quick-action-btn.secondary {\n    background: rgba(102, 126, 234, 0.1);\n    color: #667eea;\n    border: 2px solid #667eea;\n}\n\n.quick-action-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);\n}\n\n/* Dashboard Grid */\n.dashboard-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\n    gap: 2rem;\n}\n\n/* Widget Base Styles */\n.dashboard-widget {\n    background: white;\n    border-radius: 20px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n    overflow: hidden;\n    transition: all 0.3s ease;\n}\n\n.dashboard-widget:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);\n}\n\n.widget-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1.5rem 2rem;\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    color: white;\n}\n\n.widget-header h3 {\n    margin: 0;\n    font-size: 1.2rem;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.widget-content {\n    padding: 2rem;\n}\n\n/* Mood Widget */\n.current-mood {\n    margin-bottom: 1.5rem;\n}\n\n.mood-display {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.mood-emoji {\n    font-size: 3rem;\n}\n\n.mood-text {\n    display: flex;\n    flex-direction: column;\n}\n\n.mood-label {\n    font-size: 1.3rem;\n    font-weight: 600;\n    color: #333;\n}\n\n.mood-time {\n    color: #666;\n}\n\n.mood-chart-container {\n    margin: 1.5rem 0;\n    height: 150px;\n}\n\n.mood-insights {\n    display: flex;\n    justify-content: space-between;\n    gap: 1rem;\n}\n\n.insight-item {\n    display: flex;\n    flex-direction: column;\n    gap: 0.25rem;\n}\n\n.insight-label {\n    font-size: 0.9rem;\n    color: #666;\n}\n\n.insight-value {\n    font-weight: 600;\n    font-size: 1.1rem;\n}\n\n.insight-value.positive {\n    color: #4CAF50;\n}\n\n.log-mood-btn {\n    background: rgba(255, 255, 255, 0.2);\n    color: white;\n    border: none;\n    padding: 0.5rem 1rem;\n    border-radius: 20px;\n    cursor: pointer;\n    font-weight: 600;\n    transition: all 0.3s ease;\n}\n\n.log-mood-btn:hover {\n    background: rgba(255, 255, 255, 0.3);\n}\n\n/* AI Insights Widget */\n.ai-insights-widget .widget-header {\n    background: linear-gradient(135deg, #667eea, #764ba2);\n}\n\n.loading-insights {\n    text-align: center;\n    padding: 2rem;\n}\n\n.spinner {\n    width: 40px;\n    height: 40px;\n    border: 4px solid #f3f3f3;\n    border-top: 4px solid #667eea;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n    margin: 0 auto 1rem auto;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n.ai-insight-card {\n    background: rgba(102, 126, 234, 0.05);\n    border: 1px solid rgba(102, 126, 234, 0.2);\n    border-radius: 12px;\n    padding: 1.5rem;\n    margin-bottom: 1rem;\n}\n\n.ai-insight-card h4 {\n    color: #333;\n    margin: 0 0 0.5rem 0;\n    font-size: 1.1rem;\n}\n\n.ai-insight-card p {\n    color: #666;\n    margin: 0 0 1rem 0;\n    line-height: 1.5;\n}\n\n.confidence-score {\n    display: inline-block;\n    background: rgba(76, 175, 80, 0.1);\n    color: #4CAF50;\n    padding: 0.25rem 0.75rem;\n    border-radius: 15px;\n    font-size: 0.85rem;\n    font-weight: 600;\n}\n\n/* Progress Widget */\n.progress-stats {\n    display: flex;\n    justify-content: space-around;\n    margin-bottom: 1.5rem;\n}\n\n.stat-item {\n    text-align: center;\n}\n\n.stat-value {\n    font-size: 2rem;\n    font-weight: 700;\n    color: #4CAF50;\n    margin-bottom: 0.25rem;\n}\n\n.stat-label {\n    font-size: 0.9rem;\n    color: #666;\n}\n\n.progress-chart {\n    height: 180px;\n}\n\n.time-filter {\n    background: rgba(255, 255, 255, 0.2);\n    color: white;\n    border: none;\n    padding: 0.5rem;\n    border-radius: 8px;\n    cursor: pointer;\n}\n\n/* Tools Widget */\n.tool-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 1rem;\n}\n\n.tool-item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.75rem;\n    padding: 1.5rem;\n    background: rgba(76, 175, 80, 0.05);\n    border-radius: 12px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    text-align: center;\n}\n\n.tool-item:hover {\n    background: rgba(76, 175, 80, 0.1);\n    transform: translateY(-2px);\n}\n\n.tool-icon {\n    font-size: 2rem;\n    color: #4CAF50;\n}\n\n.tool-icon.crisis {\n    color: #f44336;\n}\n\n.tool-name {\n    font-weight: 600;\n    color: #333;\n    font-size: 0.9rem;\n}\n\n/* Goals Widget */\n.active-goals {\n    margin-bottom: 2rem;\n}\n\n.goal-item {\n    background: rgba(76, 175, 80, 0.05);\n    border-radius: 12px;\n    padding: 1.5rem;\n    margin-bottom: 1rem;\n}\n\n.goal-progress {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1rem;\n}\n\n.goal-info h4 {\n    margin: 0 0 0.25rem 0;\n    color: #333;\n    font-size: 1.1rem;\n}\n\n.goal-info p {\n    margin: 0;\n    color: #666;\n    font-size: 0.9rem;\n}\n\n.progress-circle {\n    width: 60px;\n    height: 60px;\n    border-radius: 50%;\n    background: conic-gradient(#4CAF50 0deg, #4CAF50 252deg, #e0e0e0 252deg);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n}\n\n.progress-circle::before {\n    content: '';\n    width: 45px;\n    height: 45px;\n    border-radius: 50%;\n    background: white;\n    position: absolute;\n}\n\n.progress-text {\n    font-weight: 600;\n    color: #333;\n    z-index: 1;\n    font-size: 0.9rem;\n}\n\n.goal-streak {\n    text-align: center;\n}\n\n.streak-text {\n    background: linear-gradient(135deg, #FF6B6B, #EE5A52);\n    color: white;\n    padding: 0.5rem 1rem;\n    border-radius: 20px;\n    font-size: 0.85rem;\n    font-weight: 600;\n}\n\n.recent-achievements h4 {\n    color: #333;\n    margin-bottom: 1rem;\n    font-size: 1.1rem;\n}\n\n.achievement-item {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    margin-bottom: 0.75rem;\n}\n\n.achievement-badge {\n    font-size: 1.5rem;\n    width: 40px;\n    text-align: center;\n}\n\n.achievement-text {\n    display: flex;\n    flex-direction: column;\n    gap: 0.25rem;\n}\n\n.achievement-title {\n    font-weight: 600;\n    color: #333;\n    font-size: 0.95rem;\n}\n\n.achievement-date {\n    font-size: 0.8rem;\n    color: #666;\n}\n\n.add-goal-btn {\n    background: rgba(255, 255, 255, 0.2);\n    color: white;\n    border: none;\n    padding: 0.5rem 1rem;\n    border-radius: 20px;\n    cursor: pointer;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.add-goal-btn:hover {\n    background: rgba(255, 255, 255, 0.3);\n}\n\n/* Sessions Widget */\n.session-actions {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.session-type-btn {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    padding: 1.5rem;\n    background: rgba(102, 126, 234, 0.05);\n    border-radius: 12px;\n    text-decoration: none;\n    color: #333;\n    transition: all 0.3s ease;\n    border: 2px solid transparent;\n}\n\n.session-type-btn:hover {\n    background: rgba(102, 126, 234, 0.1);\n    border-color: #667eea;\n    transform: translateY(-2px);\n}\n\n.session-type-btn i {\n    font-size: 1.5rem;\n    color: #667eea;\n    width: 30px;\n    text-align: center;\n}\n\n.session-type-btn span {\n    font-weight: 600;\n    font-size: 1.1rem;\n}\n\n.session-type-btn small {\n    color: #666;\n    font-size: 0.85rem;\n}\n\n.session-type-btn.individual i { color: #4CAF50; }\n.session-type-btn.couples i { color: #E91E63; }\n.session-type-btn.group i { color: #FF9800; }\n\n/* Modal Styles */\n.modal {\n    display: none;\n    position: fixed;\n    z-index: 1000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n}\n\n.modal-content {\n    background: white;\n    margin: 10% auto;\n    border-radius: 20px;\n    max-width: 500px;\n    width: 90%;\n    overflow: hidden;\n    animation: slideUp 0.3s ease;\n}\n\n.modal-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1.5rem 2rem;\n    background: linear-gradient(135deg, #4CAF50, #45a049);\n    color: white;\n}\n\n.modal-header h3 {\n    margin: 0;\n    font-size: 1.3rem;\n}\n\n.close {\n    font-size: 1.5rem;\n    cursor: pointer;\n    width: 30px;\n    height: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 50%;\n    transition: background 0.3s ease;\n}\n\n.close:hover {\n    background: rgba(255, 255, 255, 0.2);\n}\n\n.modal-body {\n    padding: 2rem;\n}\n\n.mood-selector {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 1.5rem;\n}\n\n.mood-option {\n    font-size: 3rem;\n    cursor: pointer;\n    padding: 1rem;\n    border-radius: 15px;\n    transition: all 0.3s ease;\n}\n\n.mood-option:hover,\n.mood-option.selected {\n    background: rgba(76, 175, 80, 0.1);\n    transform: scale(1.1);\n}\n\n.modal-body textarea {\n    width: 100%;\n    min-height: 100px;\n    padding: 1rem;\n    border: 2px solid #e0e0e0;\n    border-radius: 10px;\n    resize: vertical;\n    font-family: inherit;\n    margin-bottom: 1.5rem;\n    box-sizing: border-box;\n}\n\n.save-mood-btn {\n    width: 100%;\n    background: linear-gradient(135deg, #4CAF50, #45a049);\n    color: white;\n    border: none;\n    padding: 1rem;\n    border-radius: 10px;\n    font-size: 1.1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.save-mood-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .dashboard-container {\n        padding: 1rem;\n    }\n    \n    .dashboard-grid {\n        grid-template-columns: 1fr;\n        gap: 1rem;\n    }\n    \n    .dashboard-header {\n        flex-direction: column;\n        gap: 1rem;\n        text-align: center;\n    }\n    \n    .tool-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .mood-insights {\n        flex-direction: column;\n        gap: 1rem;\n    }\n}\n\n@keyframes slideUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\u003c/style\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003cscript src=\"https://cdn.jsdelivr.net/npm/chart.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n// Initialize dashboard when page loads\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeMoodChart();\n    initializeProgressChart();\n    initializeProgressCircles();\n    loadAIInsights();\n});\n\n// AI Insights Loading\nasync function loadAIInsights() {\n    try {\n        const response = await fetch('/api/dashboard/ai-insights');\n        const insights = await response.json();\n        \n        if (insights.success) {\n            displayAIInsights(insights.data);\n        } else {\n            showInsightsError();\n        }\n    } catch (error) {\n        console.error('Error loading AI insights:', error);\n        showInsightsError();\n    }\n}\n\nfunction displayAIInsights(insights) {\n    const container = document.getElementById('ai-insights-content');\n    \n    let html = '';\n    insights.forEach(insight =\u003e {\n        html += `\n            \u003cdiv class=\"ai-insight-card\"\u003e\n                \u003ch4\u003e${insight.title}\u003c/h4\u003e\n                \u003cp\u003e${insight.description}\u003c/p\u003e\n                \u003cspan class=\"confidence-score\"\u003eConfidence: ${insight.confidence}%\u003c/span\u003e\n            \u003c/div\u003e\n        `;\n    });\n    \n    container.innerHTML = html;\n}\n\nfunction showInsightsError() {\n    const container = document.getElementById('ai-insights-content');\n    container.innerHTML = `\n        \u003cdiv class=\"text-center\"\u003e\n            \u003ci class=\"fas fa-exclamation-triangle fa-2x text-warning mb-2\"\u003e\u003c/i\u003e\n            \u003cp\u003eUnable to load AI insights at this time.\u003c/p\u003e\n            \u003cbutton class=\"btn btn-primary btn-sm\" onclick=\"loadAIInsights()\"\u003eRetry\u003c/button\u003e\n        \u003c/div\u003e\n    `;\n}\n\nasync function refreshAIInsights() {\n    const button = document.querySelector('.refresh-insights');\n    const originalHtml = button.innerHTML;\n    \n    button.innerHTML = '\u003ci class=\"fas fa-spinner fa-spin\"\u003e\u003c/i\u003e';\n    button.disabled = true;\n    \n    try {\n        const response = await fetch('/api/dashboard/ai-insights?refresh=true');\n        const insights = await response.json();\n        \n        if (insights.success) {\n            displayAIInsights(insights.data);\n        } else {\n            showInsightsError();\n        }\n    } catch (error) {\n        console.error('Error refreshing AI insights:', error);\n        showInsightsError();\n    } finally {\n        button.innerHTML = originalHtml;\n        button.disabled = false;\n    }\n}\n\n// Mood Chart\nfunction initializeMoodChart() {\n    const ctx = document.getElementById('moodChart').getContext('2d');\n    \n    // Sample mood data (replace with real data)\n    const moodData = {\n        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n        datasets: [{\n            label: 'Mood',\n            data: [6, 7, 5, 8, 7, 9, 8],\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true\n        }]\n    };\n    \n    new Chart(ctx, {\n        type: 'line',\n        data: moodData,\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    display: false\n                }\n            },\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    max: 10,\n                    grid: {\n                        color: 'rgba(0, 0, 0, 0.05)'\n                    }\n                },\n                x: {\n                    grid: {\n                        display: false\n                    }\n                }\n            },\n            elements: {\n                point: {\n                    radius: 4,\n                    hoverRadius: 6\n                }\n            }\n        }\n    });\n}\n\n// Progress Chart\nfunction initializeProgressChart() {\n    const ctx = document.getElementById('progressChart').getContext('2d');\n    \n    const progressData = {\n        labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],\n        datasets: [{\n            label: 'Sessions',\n            data: [2, 3, 4, 3],\n            backgroundColor: 'rgba(76, 175, 80, 0.7)',\n            borderColor: '#4CAF50',\n            borderWidth: 2\n        }, {\n            label: 'Goals Met',\n            data: [1, 2, 3, 3],\n            backgroundColor: 'rgba(102, 126, 234, 0.7)',\n            borderColor: '#667eea',\n            borderWidth: 2\n        }]\n    };\n    \n    new Chart(ctx, {\n        type: 'bar',\n        data: progressData,\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    position: 'top'\n                }\n            },\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    grid: {\n                        color: 'rgba(0, 0, 0, 0.05)'\n                    }\n                },\n                x: {\n                    grid: {\n                        display: false\n                    }\n                }\n            }\n        }\n    });\n}\n\n// Initialize progress circles\nfunction initializeProgressCircles() {\n    document.querySelectorAll('.progress-circle').forEach(circle =\u003e {\n        const progress = circle.dataset.progress;\n        const degrees = (progress / 100) * 360;\n        circle.style.background = `conic-gradient(#4CAF50 0deg, #4CAF50 ${degrees}deg, #e0e0e0 ${degrees}deg)`;\n    });\n}\n\n// Mood logging functions\nfunction openMoodLogger() {\n    document.getElementById('moodLoggerModal').style.display = 'block';\n}\n\nfunction closeMoodLogger() {\n    document.getElementById('moodLoggerModal').style.display = 'none';\n}\n\nfunction saveMood() {\n    const selectedMood = document.querySelector('.mood-option.selected');\n    const notes = document.getElementById('moodNotes').value;\n    \n    if (selectedMood) {\n        // Update current mood display\n        const moodEmoji = selectedMood.textContent;\n        const moodLabel = selectedMood.dataset.label;\n        \n        document.getElementById('currentMoodEmoji').textContent = moodEmoji;\n        document.getElementById('currentMoodLabel').textContent = moodLabel;\n        \n        // In a real app, save to database\n        console.log('Mood saved:', { mood: selectedMood.dataset.mood, label: moodLabel, notes });\n        \n        // Show success message\n        alert('Mood logged successfully!');\n        \n        closeMoodLogger();\n    } else {\n        alert('Please select a mood before saving.');\n    }\n}\n\n// Mood selector event listeners\ndocument.addEventListener('DOMContentLoaded', function() {\n    document.querySelectorAll('.mood-option').forEach(option =\u003e {\n        option.addEventListener('click', function() {\n            document.querySelectorAll('.mood-option').forEach(opt =\u003e opt.classList.remove('selected'));\n            this.classList.add('selected');\n        });\n    });\n});\n\n// Tool functions\nfunction openTool(toolType) {\n    const toolActions = {\n        breathing: () =\u003e {\n            alert('Starting breathing exercise... Breathe in for 4, hold for 4, breathe out for 4.');\n            // In a real app, open breathing exercise component\n        },\n        journal: () =\u003e {\n            alert('Opening mood journal...');\n            // In a real app, navigate to journal page\n        },\n        meditation: () =\u003e {\n            alert('Starting guided meditation...');\n            // In a real app, open meditation player\n        },\n        crisis: () =\u003e {\n            alert('Crisis Support Resources:\\n\\nLifeline Australia: 13 11 14\\nCrisis Text Line: 0477 13 11 14\\nBeyond Blue: 1300 22 4636\\nEmergency: 000');\n            // In a real app, show crisis resources modal\n        }\n    };\n    \n    if (toolActions[toolType]) {\n        toolActions[toolType]();\n    }\n}\n\nfunction updateProgressChart(timeframe) {\n    console.log('Updating progress chart for:', timeframe);\n    // In a real app, fetch new data and update chart\n}\n\nfunction openGoalCreator() {\n    alert('Goal Creator would open here. In the full app, this would be a modal to create new goals.');\n    // In a real app, open goal creation modal\n}\n\n// Close modal when clicking outside\nwindow.onclick = function(event) {\n    const modal = document.getElementById('moodLoggerModal');\n    if (event.target == modal) {\n        modal.style.display = 'none';\n    }\n}\n\u003c/script\u003e\n{% endblock %}",
                "emotion_tracking.html": "\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eEmotion Tracking - MindMend\u003c/title\u003e\n        \u003cstyle\u003e\n            body { font-family: Arial; margin: 0; background: #f8f9fa; }\n            .container { max-width: 1200px; margin: 0 auto; padding: 20px; }\n            .header { background: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; text-align: center; }\n            .tracking-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }\n            .tracking-card { background: white; padding: 25px; border-radius: 15px; box-shadow: 0 5px 15px rgba(0,0,0,0.1); }\n            .emotion-chart { width: 100%; height: 200px; background: linear-gradient(45deg, #667eea, #764ba2); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: white; font-size: 18px; }\n            .quick-log { background: #e6fffa; padding: 20px; border-radius: 10px; margin-top: 20px; }\n            .emotion-btn { background: #667eea; color: white; padding: 10px 20px; border: none; border-radius: 20px; margin: 5px; cursor: pointer; }\n            .emotion-btn:hover { background: #5a67d8; }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"header\"\u003e\n                \u003ch1\u003e📈 Emotion Tracking\u003c/h1\u003e\n                \u003cp\u003eMonitor your emotional patterns and progress\u003c/p\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"tracking-grid\"\u003e\n                \u003cdiv class=\"tracking-card\"\u003e\n                    \u003ch3\u003eWeekly Mood Trend\u003c/h3\u003e\n                    \u003cdiv class=\"emotion-chart\"\u003e\n                        📊 Mood trending upward this week\n                    \u003c/div\u003e\n                    \u003cdiv style=\"margin-top: 15px;\"\u003e\n                        \u003cdiv\u003eAverage Mood: \u003cstrong\u003e7.2/10\u003c/strong\u003e\u003c/div\u003e\n                        \u003cdiv\u003eImprovement: \u003cstrong\u003e+15%\u003c/strong\u003e\u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003cdiv class=\"tracking-card\"\u003e\n                    \u003ch3\u003eStress Levels\u003c/h3\u003e\n                    \u003cdiv class=\"emotion-chart\" style=\"background: linear-gradient(45deg, #48bb78, #38a169);\"\u003e\n                        🧘 Stress levels decreasing\n                    \u003c/div\u003e\n                    \u003cdiv style=\"margin-top: 15px;\"\u003e\n                        \u003cdiv\u003eCurrent Level: \u003cstrong\u003eLow\u003c/strong\u003e\u003c/div\u003e\n                        \u003cdiv\u003e7-day average: \u003cstrong\u003eModerate\u003c/strong\u003e\u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003cdiv class=\"tracking-card\"\u003e\n                    \u003ch3\u003eSleep Quality\u003c/h3\u003e\n                    \u003cdiv class=\"emotion-chart\" style=\"background: linear-gradient(45deg, #4299e1, #3182ce);\"\u003e\n                        😴 Sleep improving\n                    \u003c/div\u003e\n                    \u003cdiv style=\"margin-top: 15px;\"\u003e\n                        \u003cdiv\u003eLast night: \u003cstrong\u003e8.1/10\u003c/strong\u003e\u003c/div\u003e\n                        \u003cdiv\u003eWeekly average: \u003cstrong\u003e7.4/10\u003c/strong\u003e\u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"quick-log\"\u003e\n                \u003ch3\u003e📝 Quick Emotion Log\u003c/h3\u003e\n                \u003cp\u003eHow are you feeling right now?\u003c/p\u003e\n                \u003cdiv\u003e\n                    \u003cbutton class=\"emotion-btn\" onclick=\"logEmotion('happy')\"\u003e😊 Happy\u003c/button\u003e\n                    \u003cbutton class=\"emotion-btn\" onclick=\"logEmotion('calm')\"\u003e😌 Calm\u003c/button\u003e\n                    \u003cbutton class=\"emotion-btn\" onclick=\"logEmotion('anxious')\"\u003e😰 Anxious\u003c/button\u003e\n                    \u003cbutton class=\"emotion-btn\" onclick=\"logEmotion('sad')\"\u003e😢 Sad\u003c/button\u003e\n                    \u003cbutton class=\"emotion-btn\" onclick=\"logEmotion('energetic')\"\u003e⚡ Energetic\u003c/button\u003e\n                    \u003cbutton class=\"emotion-btn\" onclick=\"logEmotion('tired')\"\u003e😴 Tired\u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cdiv style=\"text-align: center; margin-top: 20px;\"\u003e\n                \u003ca href=\"/\" style=\"background: #6c757d; color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px;\"\u003e← Back to Home\u003c/a\u003e\n                \u003ca href=\"/video-assessment\" style=\"background: #667eea; color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px; margin-left: 10px;\"\u003e📹 Video Assessment\u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003cscript\u003e\n            function logEmotion(emotion) {\n                fetch('/api/log-emotion', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ emotion: emotion, timestamp: new Date().toISOString() })\n                }).then(() =\u003e {\n                    alert(`Emotion \"${emotion}\" logged successfully!`);\n                });\n            }\n        \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n",
                "forgot_password.html": "{% extends \"base.html\" %}\n\n{% block title %}Reset Password - Mind Mend{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"forgot-password-container\"\u003e\n    \u003cdiv class=\"forgot-password-card\"\u003e\n        \u003c!-- Header --\u003e\n        \u003cdiv class=\"forgot-password-header\"\u003e\n            \u003cdiv class=\"logo-section\"\u003e\n                \u003cimg src=\"{{ url_for('static', filename='logos/mindmend_logo_4.svg') }}\" alt=\"Mind Mend\" class=\"logo\"\u003e\n                \u003ch2\u003eReset Password\u003c/h2\u003e\n                \u003cp\u003eEnter your email address and we'll send you a link to reset your password\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Reset Form --\u003e\n        \u003cdiv class=\"forgot-password-form\"\u003e\n            {% if message %}\n            \u003cdiv class=\"success-message\"\u003e\n                \u003ci class=\"fas fa-check-circle\"\u003e\u003c/i\u003e\n                {{ message }}\n            \u003c/div\u003e\n            {% endif %}\n\n            {% if error %}\n            \u003cdiv class=\"error-message\"\u003e\n                \u003ci class=\"fas fa-exclamation-triangle\"\u003e\u003c/i\u003e\n                {{ error }}\n            \u003c/div\u003e\n            {% endif %}\n\n            \u003cform method=\"POST\" action=\"{{ url_for('forgot_password') }}\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003clabel for=\"email\"\u003eEmail Address\u003c/label\u003e\n                    \u003cinput type=\"email\" id=\"email\" name=\"email\" required \n                           placeholder=\"Enter your registered email address\"\n                           value=\"{{ request.form.email or '' }}\"\u003e\n                    \u003cdiv class=\"form-hint\"\u003eWe'll send password reset instructions to this email\u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003cbutton type=\"submit\" class=\"reset-btn\"\u003e\n                    \u003ci class=\"fas fa-paper-plane\"\u003e\u003c/i\u003e\n                    Send Reset Link\n                \u003c/button\u003e\n            \u003c/form\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Navigation Links --\u003e\n        \u003cdiv class=\"navigation-links\"\u003e\n            \u003cdiv class=\"divider\"\u003e\n                \u003cspan\u003eRemember your password?\u003c/span\u003e\n            \u003c/div\u003e\n            \u003ca href=\"{{ url_for('login') }}\" class=\"back-to-login\"\u003e\n                \u003ci class=\"fas fa-arrow-left\"\u003e\u003c/i\u003e\n                Back to Sign In\n            \u003c/a\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Help Section --\u003e\n    \u003cdiv class=\"help-section\"\u003e\n        \u003ch3\u003eNeed Help?\u003c/h3\u003e\n        \u003cdiv class=\"help-options\"\u003e\n            \u003cdiv class=\"help-item\"\u003e\n                \u003ci class=\"fas fa-envelope\"\u003e\u003c/i\u003e\n                \u003cdiv\u003e\n                    \u003ch4\u003eEmail Support\u003c/h4\u003e\n                    \u003cp\u003eContact us at support@mindmend.com\u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"help-item\"\u003e\n                \u003ci class=\"fas fa-phone\"\u003e\u003c/i\u003e\n                \u003cdiv\u003e\n                    \u003ch4\u003ePhone Support\u003c/h4\u003e\n                    \u003cp\u003eCall us during business hours\u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"help-item crisis\"\u003e\n                \u003ci class=\"fas fa-exclamation-triangle\"\u003e\u003c/i\u003e\n                \u003cdiv\u003e\n                    \u003ch4\u003eCrisis Support\u003c/h4\u003e\n                    \u003cp\u003eLifeline Australia: 13 11 14\u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block styles %}\n\u003cstyle\u003e\n.forgot-password-container {\n    min-height: 100vh;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 2rem;\n    gap: 2rem;\n}\n\n.forgot-password-card {\n    background: white;\n    border-radius: 20px;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);\n    max-width: 450px;\n    width: 100%;\n    overflow: hidden;\n    animation: slideUp 0.6s ease;\n}\n\n.forgot-password-header {\n    background: linear-gradient(135deg, #4CAF50, #45a049);\n    color: white;\n    padding: 2rem;\n    text-align: center;\n}\n\n.logo {\n    height: 60px;\n    margin-bottom: 1rem;\n    filter: brightness(0) invert(1);\n}\n\n.forgot-password-header h2 {\n    margin: 0 0 0.5rem 0;\n    font-size: 2rem;\n    font-weight: 700;\n}\n\n.forgot-password-header p {\n    margin: 0;\n    opacity: 0.9;\n    font-size: 1rem;\n    line-height: 1.4;\n}\n\n.forgot-password-form {\n    padding: 2rem;\n}\n\n.success-message,\n.error-message {\n    padding: 1rem;\n    border-radius: 8px;\n    margin-bottom: 1.5rem;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.success-message {\n    background: rgba(76, 175, 80, 0.1);\n    color: #4CAF50;\n}\n\n.error-message {\n    background: rgba(244, 67, 54, 0.1);\n    color: #f44336;\n}\n\n.form-group {\n    margin-bottom: 1.5rem;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 0.5rem;\n    color: #333;\n    font-weight: 600;\n}\n\n.form-group input {\n    width: 100%;\n    padding: 1rem;\n    border: 2px solid #e0e0e0;\n    border-radius: 10px;\n    font-size: 1rem;\n    transition: all 0.3s ease;\n    box-sizing: border-box;\n}\n\n.form-group input:focus {\n    outline: none;\n    border-color: #4CAF50;\n    box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);\n}\n\n.form-hint {\n    font-size: 0.85rem;\n    color: #666;\n    margin-top: 0.5rem;\n}\n\n.reset-btn {\n    width: 100%;\n    background: linear-gradient(135deg, #4CAF50, #45a049);\n    color: white;\n    border: none;\n    padding: 1rem;\n    border-radius: 10px;\n    font-size: 1.1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n.reset-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);\n}\n\n.navigation-links {\n    padding: 1.5rem 2rem;\n    background: rgba(76, 175, 80, 0.05);\n    text-align: center;\n}\n\n.divider {\n    margin-bottom: 1rem;\n    color: #666;\n    font-size: 0.9rem;\n}\n\n.back-to-login {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n    color: #4CAF50;\n    text-decoration: none;\n    font-weight: 600;\n    padding: 0.5rem 1rem;\n    border-radius: 20px;\n    transition: all 0.3s ease;\n}\n\n.back-to-login:hover {\n    background: rgba(76, 175, 80, 0.1);\n    transform: translateY(-1px);\n}\n\n.help-section {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 20px;\n    padding: 2rem;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);\n    max-width: 350px;\n    width: 100%;\n}\n\n.help-section h3 {\n    color: #333;\n    margin-bottom: 1.5rem;\n    text-align: center;\n    font-size: 1.3rem;\n}\n\n.help-options {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.help-item {\n    display: flex;\n    align-items: flex-start;\n    gap: 1rem;\n    padding: 1rem;\n    background: white;\n    border: 2px solid #e0e0e0;\n    border-radius: 12px;\n    transition: all 0.3s ease;\n}\n\n.help-item:hover {\n    border-color: #4CAF50;\n    background: rgba(76, 175, 80, 0.05);\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.help-item.crisis {\n    border-color: #f44336;\n}\n\n.help-item.crisis:hover {\n    border-color: #f44336;\n    background: rgba(244, 67, 54, 0.05);\n}\n\n.help-item i {\n    font-size: 1.2rem;\n    width: 24px;\n    text-align: center;\n    color: #4CAF50;\n    margin-top: 0.25rem;\n}\n\n.help-item.crisis i {\n    color: #f44336;\n}\n\n.help-item div h4 {\n    margin: 0 0 0.25rem 0;\n    color: #333;\n    font-size: 1rem;\n}\n\n.help-item div p {\n    margin: 0;\n    color: #666;\n    font-size: 0.9rem;\n}\n\n@keyframes slideUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .forgot-password-container {\n        flex-direction: column;\n        padding: 1rem;\n    }\n    \n    .forgot-password-card,\n    .help-section {\n        max-width: 100%;\n    }\n    \n    .help-section {\n        order: -1;\n        padding: 1.5rem;\n    }\n    \n    .help-options {\n        gap: 0.75rem;\n    }\n    \n    .help-item {\n        padding: 0.75rem;\n    }\n}\n\u003c/style\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003cscript\u003e\n// Add form validation\ndocument.addEventListener('DOMContentLoaded', function() {\n    const form = document.querySelector('form');\n    const emailInput = document.getElementById('email');\n    \n    form.addEventListener('submit', function(e) {\n        // Email validation\n        if (!emailInput.value.trim() || !emailInput.value.includes('@')) {\n            emailInput.style.borderColor = '#f44336';\n            e.preventDefault();\n            return false;\n        } else {\n            emailInput.style.borderColor = '#4CAF50';\n        }\n    });\n    \n    // Real-time validation feedback\n    emailInput.addEventListener('input', function() {\n        if (this.value.includes('@') \u0026\u0026 this.value.length \u003e 5) {\n            this.style.borderColor = '#4CAF50';\n        } else {\n            this.style.borderColor = '#e0e0e0';\n        }\n    });\n});\n\u003c/script\u003e\n{% endblock %}",
                "group_therapy.html": "{% extends \"base.html\" %}\n\n{% block title %}Group Therapy - Mind Mend{% endblock %}\n\n{% block head %}\n\u003cstyle\u003e\n    .participant-card {\n        transition: all 0.3s ease;\n        cursor: pointer;\n    }\n    .participant-card:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n    }\n    .participant-active {\n        border: 2px solid var(--bs-primary);\n    }\n    .participant-speaking {\n        border: 2px solid var(--bs-success);\n        animation: pulse 2s infinite;\n    }\n    @keyframes pulse {\n        0% { box-shadow: 0 0 0 0 rgba(var(--bs-success-rgb), 0.7); }\n        70% { box-shadow: 0 0 0 10px rgba(var(--bs-success-rgb), 0); }\n        100% { box-shadow: 0 0 0 0 rgba(var(--bs-success-rgb), 0); }\n    }\n    .group-dynamics-chart {\n        height: 200px;\n    }\n    .conversation-flow {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\u003c/style\u003e\n{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"row\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"d-flex justify-content-between align-items-center mb-4\"\u003e\n            \u003ch2\u003e\u003ci class=\"fas fa-users me-2\"\u003e\u003c/i\u003eGroup Therapy Session\u003c/h2\u003e\n            \u003cdiv class=\"d-flex gap-2\"\u003e\n                \u003cspan class=\"badge bg-success\"\u003eSession Active\u003c/span\u003e\n                \u003cbutton class=\"btn btn-outline-primary\" id=\"joinSession\"\u003e\n                    \u003ci class=\"fas fa-sign-in-alt me-1\"\u003e\u003c/i\u003eJoin Session\n                \u003c/button\u003e\n                \u003cbutton class=\"btn btn-outline-info\" id=\"groupAnalytics\"\u003e\n                    \u003ci class=\"fas fa-chart-network me-1\"\u003e\u003c/i\u003eGroup Analytics\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Group Overview --\u003e\n\u003cdiv class=\"row g-4 mb-4\"\u003e\n    \u003cdiv class=\"col-lg-8\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-users me-2\"\u003e\u003c/i\u003eActive Participants\u003c/h5\u003e\n                \u003csmall class=\"text-muted\"\u003e6 members online • Session: \"Managing Anxiety Together\"\u003c/small\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"row g-3\" id=\"participantsList\"\u003e\n                    \u003c!-- Participants will be loaded here --\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"col-lg-4\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch6\u003e\u003ci class=\"fas fa-chart-pie me-2\"\u003e\u003c/i\u003eGroup Dynamics\u003c/h6\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"text-center mb-3\"\u003e\n                    \u003cdiv class=\"h4 mb-1\" id=\"groupCohesion\"\u003e85%\u003c/div\u003e\n                    \u003cdiv class=\"text-muted\"\u003eGroup Cohesion\u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"row g-2 text-center\"\u003e\n                    \u003cdiv class=\"col-6\"\u003e\n                        \u003cdiv class=\"h6 mb-0\" id=\"participation\"\u003e92%\u003c/div\u003e\n                        \u003csmall class=\"text-muted\"\u003eParticipation\u003c/small\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-6\"\u003e\n                        \u003cdiv class=\"h6 mb-0\" id=\"supportLevel\"\u003eHigh\u003c/div\u003e\n                        \u003csmall class=\"text-muted\"\u003eSupport Level\u003c/small\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-6\"\u003e\n                        \u003cdiv class=\"h6 mb-0\" id=\"conflictLevel\"\u003eLow\u003c/div\u003e\n                        \u003csmall class=\"text-muted\"\u003eConflict\u003c/small\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-6\"\u003e\n                        \u003cdiv class=\"h6 mb-0\" id=\"emotionalSafety\"\u003e98%\u003c/div\u003e\n                        \u003csmall class=\"text-muted\"\u003eSafety\u003c/small\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Session Interface --\u003e\n\u003cdiv class=\"row g-4\"\u003e\n    \u003cdiv class=\"col-lg-8\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-comments me-2\"\u003e\u003c/i\u003eGroup Discussion\u003c/h5\u003e\n                \u003cdiv class=\"d-flex gap-2\"\u003e\n                    \u003cbutton class=\"btn btn-sm btn-outline-primary\" id=\"raiseHand\"\u003e\n                        \u003ci class=\"fas fa-hand-paper me-1\"\u003e\u003c/i\u003eRaise Hand\n                    \u003c/button\u003e\n                    \u003cbutton class=\"btn btn-sm btn-outline-success\" id=\"shareFeeling\"\u003e\n                        \u003ci class=\"fas fa-heart me-1\"\u003e\u003c/i\u003eShare Feeling\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003c!-- Conversation Flow --\u003e\n                \u003cdiv class=\"conversation-flow mb-3\" id=\"conversationFlow\"\u003e\n                    \u003c!-- Messages will appear here --\u003e\n                \u003c/div\u003e\n\n                \u003c!-- Input Area --\u003e\n                \u003cform id=\"groupMessageForm\"\u003e\n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel for=\"participantName\" class=\"form-label\"\u003eYour Name\u003c/label\u003e\n                        \u003cinput type=\"text\" class=\"form-control\" id=\"participantName\" placeholder=\"Enter your name\"\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel for=\"messageInput\" class=\"form-label\"\u003eShare with the group\u003c/label\u003e\n                        \u003ctextarea class=\"form-control\" id=\"messageInput\" rows=\"3\" \n                                placeholder=\"Share your thoughts, feelings, or experiences...\"\u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"d-flex justify-content-between\"\u003e\n                        \u003cdiv\u003e\n                            \u003cbutton type=\"button\" class=\"btn btn-outline-secondary btn-sm\" id=\"anonymousMode\"\u003e\n                                \u003ci class=\"fas fa-user-secret me-1\"\u003e\u003c/i\u003eAnonymous\n                            \u003c/button\u003e\n                            \u003cbutton type=\"button\" class=\"btn btn-outline-info btn-sm\" id=\"requestSupport\"\u003e\n                                \u003ci class=\"fas fa-hands-helping me-1\"\u003e\u003c/i\u003eRequest Support\n                            \u003c/button\u003e\n                        \u003c/div\u003e\n                        \u003cbutton type=\"submit\" class=\"btn btn-success\"\u003e\n                            \u003ci class=\"fas fa-paper-plane me-2\"\u003e\u003c/i\u003eShare\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"col-lg-4\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch6\u003e\u003ci class=\"fas fa-robot me-2\"\u003e\u003c/i\u003eAI Group Facilitator\u003c/h6\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv id=\"aiFacilitatorFeedback\"\u003e\n                    \u003cdiv class=\"alert alert-info\"\u003e\n                        \u003ci class=\"fas fa-lightbulb me-2\"\u003e\u003c/i\u003e\n                        \u003cstrong\u003eSession Insight:\u003c/strong\u003e Great engagement from everyone! I notice themes of resilience and mutual support emerging.\n                    \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003ch6 class=\"mt-4\"\u003eSuggested Activities\u003c/h6\u003e\n                \u003cdiv id=\"groupActivities\"\u003e\n                    \u003cdiv class=\"card bg-dark border-0 mb-2\"\u003e\n                        \u003cdiv class=\"card-body py-2\"\u003e\n                            \u003ch6 class=\"card-title mb-1\"\u003eGratitude Circle\u003c/h6\u003e\n                            \u003cp class=\"card-text small\"\u003eShare something you're grateful for\u003c/p\u003e\n                            \u003cbutton class=\"btn btn-primary btn-sm\" onclick=\"startGroupActivity('gratitude')\"\u003e\n                                \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart\n                            \u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"card bg-dark border-0 mb-2\"\u003e\n                        \u003cdiv class=\"card-body py-2\"\u003e\n                            \u003ch6 class=\"card-title mb-1\"\u003eBreathing Together\u003c/h6\u003e\n                            \u003cp class=\"card-text small\"\u003eSynchronized group breathing exercise\u003c/p\u003e\n                            \u003cbutton class=\"btn btn-success btn-sm\" onclick=\"startGroupActivity('breathing')\"\u003e\n                                \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart\n                            \u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003ch6 class=\"mt-4\"\u003eSupport Requests\u003c/h6\u003e\n                \u003cdiv id=\"supportRequests\"\u003e\n                    \u003csmall class=\"text-muted\"\u003eNo current support requests\u003c/small\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Group Analytics Modal --\u003e\n\u003cdiv class=\"modal fade\" id=\"analyticsModal\" tabindex=\"-1\"\u003e\n    \u003cdiv class=\"modal-dialog modal-lg\"\u003e\n        \u003cdiv class=\"modal-content\"\u003e\n            \u003cdiv class=\"modal-header\"\u003e\n                \u003ch5 class=\"modal-title\"\u003e\u003ci class=\"fas fa-chart-bar me-2\"\u003e\u003c/i\u003eGroup Analytics\u003c/h5\u003e\n                \u003cbutton type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"\u003e\u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"modal-body\"\u003e\n                \u003cdiv class=\"row g-4\"\u003e\n                    \u003cdiv class=\"col-md-6\"\u003e\n                        \u003ch6\u003eParticipation Patterns\u003c/h6\u003e\n                        \u003ccanvas id=\"participationChart\" width=\"400\" height=\"200\"\u003e\u003c/canvas\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-6\"\u003e\n                        \u003ch6\u003eEmotional Trends\u003c/h6\u003e\n                        \u003ccanvas id=\"emotionalTrendsChart\" width=\"400\" height=\"200\"\u003e\u003c/canvas\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003chr\u003e\n                \u003cdiv class=\"row g-4\"\u003e\n                    \u003cdiv class=\"col-md-6\"\u003e\n                        \u003ch6\u003eSupport Network\u003c/h6\u003e\n                        \u003cdiv id=\"supportNetwork\"\u003e\n                            \u003c!-- Network visualization would go here --\u003e\n                            \u003cp class=\"text-muted\"\u003eVisual representation of group connections\u003c/p\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-6\"\u003e\n                        \u003ch6\u003eSession Insights\u003c/h6\u003e\n                        \u003cul class=\"list-unstyled\"\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eHigh engagement across all members\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eEffective peer support demonstrated\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-exclamation-triangle text-warning me-2\"\u003e\u003c/i\u003eOne member showing withdrawal\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-lightbulb text-info me-2\"\u003e\u003c/i\u003eRecommend follow-up individual session\u003c/li\u003e\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Group Activity Modal --\u003e\n\u003cdiv class=\"modal fade\" id=\"activityModal\" tabindex=\"-1\"\u003e\n    \u003cdiv class=\"modal-dialog\"\u003e\n        \u003cdiv class=\"modal-content\"\u003e\n            \u003cdiv class=\"modal-header\"\u003e\n                \u003ch5 class=\"modal-title\" id=\"activityTitle\"\u003eGroup Activity\u003c/h5\u003e\n                \u003cbutton type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"\u003e\u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"modal-body\"\u003e\n                \u003cdiv id=\"activityContent\"\u003e\n                    \u003c!-- Activity content will be loaded here --\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"modal-footer\"\u003e\n                \u003cbutton type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\"\u003eLeave Activity\u003c/button\u003e\n                \u003cbutton type=\"button\" class=\"btn btn-primary\" id=\"participateBtn\"\u003eParticipate\u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003cscript src=\"{{ url_for('static', filename='js/real-time-analysis.js') }}\"\u003e\u003c/script\u003e\n\n\u003cscript\u003e\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize group session\n    initializeGroupSession();\n    \n    // Form handlers\n    const messageForm = document.getElementById('groupMessageForm');\n    messageForm.addEventListener('submit', handleGroupMessage);\n    \n    // Button handlers\n    document.getElementById('joinSession').addEventListener('click', joinGroupSession);\n    document.getElementById('groupAnalytics').addEventListener('click', showGroupAnalytics);\n    document.getElementById('raiseHand').addEventListener('click', raiseHand);\n    document.getElementById('shareFeeling').addEventListener('click', shareFeeling);\n    \n    function initializeGroupSession() {\n        // Load participants\n        loadParticipants();\n        \n        // Load conversation history\n        loadConversationHistory();\n        \n        // Start real-time updates\n        setInterval(updateGroupDynamics, 10000);\n    }\n    \n    function loadParticipants() {\n        const participants = [\n            { id: 1, name: 'Sarah M.', status: 'active', emotion: 'calm', speaking: false },\n            { id: 2, name: 'John D.', status: 'active', emotion: 'anxious', speaking: false },\n            { id: 3, name: 'Maya K.', status: 'active', emotion: 'hopeful', speaking: true },\n            { id: 4, name: 'Alex R.', status: 'listening', emotion: 'supportive', speaking: false },\n            { id: 5, name: 'Chris L.', status: 'active', emotion: 'thoughtful', speaking: false },\n            { id: 6, name: 'Jordan P.', status: 'active', emotion: 'engaged', speaking: false }\n        ];\n        \n        const participantsList = document.getElementById('participantsList');\n        let participantsHtml = '';\n        \n        participants.forEach(participant =\u003e {\n            const cardClass = participant.speaking ? 'participant-card participant-speaking' : \n                            participant.status === 'active' ? 'participant-card participant-active' : \n                            'participant-card';\n            \n            participantsHtml += `\n                \u003cdiv class=\"col-md-4 col-sm-6\"\u003e\n                    \u003cdiv class=\"card ${cardClass}\" data-participant-id=\"${participant.id}\"\u003e\n                        \u003cdiv class=\"card-body text-center py-2\"\u003e\n                            \u003cdiv class=\"d-flex align-items-center justify-content-center mb-2\"\u003e\n                                \u003cdiv class=\"rounded-circle bg-primary d-flex align-items-center justify-content-center me-2\" \n                                     style=\"width: 32px; height: 32px;\"\u003e\n                                    \u003ci class=\"fas fa-user text-white\"\u003e\u003c/i\u003e\n                                \u003c/div\u003e\n                                \u003cdiv\u003e\n                                    \u003cdiv class=\"fw-bold\"\u003e${participant.name}\u003c/div\u003e\n                                    \u003csmall class=\"text-muted\"\u003e${participant.emotion}\u003c/small\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"d-flex justify-content-center gap-1\"\u003e\n                                \u003cspan class=\"badge bg-${participant.status === 'active' ? 'success' : 'secondary'} badge-sm\"\u003e\n                                    ${participant.status}\n                                \u003c/span\u003e\n                                ${participant.speaking ? '\u003cspan class=\"badge bg-info badge-sm\"\u003eSpeaking\u003c/span\u003e' : ''}\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            `;\n        });\n        \n        participantsList.innerHTML = participantsHtml;\n    }\n    \n    function loadConversationHistory() {\n        const messages = [\n            {\n                participant: 'Dr. AI Facilitator',\n                message: 'Welcome everyone to our group session on managing anxiety. Let\\'s start by sharing how everyone is feeling today.',\n                timestamp: '2:00 PM',\n                type: 'facilitator'\n            },\n            {\n                participant: 'Sarah M.',\n                message: 'I\\'ve been feeling overwhelmed with work lately, but being here with everyone helps.',\n                timestamp: '2:02 PM',\n                type: 'participant',\n                emotion: 'anxious'\n            },\n            {\n                participant: 'Maya K.',\n                message: 'I totally understand, Sarah. I\\'ve found that the breathing exercises we learned last week really help me.',\n                timestamp: '2:03 PM',\n                type: 'participant',\n                emotion: 'supportive'\n            }\n        ];\n        \n        const conversationFlow = document.getElementById('conversationFlow');\n        let messagesHtml = '';\n        \n        messages.forEach(msg =\u003e {\n            const messageClass = msg.type === 'facilitator' ? 'alert alert-info' : 'card mb-2';\n            const emotionBadge = msg.emotion ? `\u003cspan class=\"badge bg-${getEmotionColor(msg.emotion)} ms-2\"\u003e${msg.emotion}\u003c/span\u003e` : '';\n            \n            messagesHtml += `\n                \u003cdiv class=\"${messageClass}\"\u003e\n                    \u003cdiv class=\"d-flex justify-content-between align-items-start\"\u003e\n                        \u003cdiv\u003e\n                            \u003cstrong\u003e${msg.participant}\u003c/strong\u003e${emotionBadge}\n                            \u003cp class=\"mb-1 mt-1\"\u003e${msg.message}\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003csmall class=\"text-muted\"\u003e${msg.timestamp}\u003c/small\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            `;\n        });\n        \n        conversationFlow.innerHTML = messagesHtml;\n    }\n    \n    function getEmotionColor(emotion) {\n        const emotionColors = {\n            'anxious': 'warning',\n            'supportive': 'success',\n            'calm': 'info',\n            'hopeful': 'primary',\n            'thoughtful': 'secondary'\n        };\n        return emotionColors[emotion] || 'secondary';\n    }\n    \n    async function handleGroupMessage(e) {\n        e.preventDefault();\n        \n        const participantName = document.getElementById('participantName').value;\n        const messageText = document.getElementById('messageInput').value;\n        \n        if (!participantName || !messageText) {\n            alert('Please enter your name and message');\n            return;\n        }\n        \n        // Add message to conversation\n        addMessageToConversation(participantName, messageText);\n        \n        // Analyze message with AI\n        try {\n            const response = await fetch('/api/analyze-text', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    text: messageText,\n                    session_type: 'group',\n                    participant_name: participantName,\n                    group_context: true\n                })\n            });\n            \n            const result = await response.json();\n            \n            // Update AI facilitator feedback\n            updateAIFacilitatorFeedback(result);\n            \n            // Check for support needs\n            if (result.support_needed) {\n                addSupportRequest(participantName, result.support_type);\n            }\n            \n        } catch (error) {\n            console.error('Error analyzing group message:', error);\n        }\n        \n        // Clear form\n        document.getElementById('messageInput').value = '';\n    }\n    \n    function addMessageToConversation(participant, message) {\n        const conversationFlow = document.getElementById('conversationFlow');\n        const timestamp = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\n        \n        const messageHtml = `\n            \u003cdiv class=\"card mb-2\"\u003e\n                \u003cdiv class=\"card-body py-2\"\u003e\n                    \u003cdiv class=\"d-flex justify-content-between align-items-start\"\u003e\n                        \u003cdiv\u003e\n                            \u003cstrong\u003e${participant}\u003c/strong\u003e\n                            \u003cp class=\"mb-1 mt-1\"\u003e${message}\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003csmall class=\"text-muted\"\u003e${timestamp}\u003c/small\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        `;\n        \n        conversationFlow.insertAdjacentHTML('beforeend', messageHtml);\n        conversationFlow.scrollTop = conversationFlow.scrollHeight;\n    }\n    \n    function updateAIFacilitatorFeedback(analysisResult) {\n        const feedback = document.getElementById('aiFacilitatorFeedback');\n        \n        let feedbackHtml = '';\n        \n        if (analysisResult.group_insight) {\n            feedbackHtml += `\n                \u003cdiv class=\"alert alert-info\"\u003e\n                    \u003ci class=\"fas fa-lightbulb me-2\"\u003e\u003c/i\u003e\n                    \u003cstrong\u003eGroup Insight:\u003c/strong\u003e ${analysisResult.group_insight}\n                \u003c/div\u003e\n            `;\n        }\n        \n        if (analysisResult.facilitation_suggestion) {\n            feedbackHtml += `\n                \u003cdiv class=\"alert alert-success\"\u003e\n                    \u003ci class=\"fas fa-comments me-2\"\u003e\u003c/i\u003e\n                    \u003cstrong\u003eFacilitation Tip:\u003c/strong\u003e ${analysisResult.facilitation_suggestion}\n                \u003c/div\u003e\n            `;\n        }\n        \n        if (feedbackHtml) {\n            feedback.innerHTML = feedbackHtml;\n        }\n    }\n    \n    function addSupportRequest(participant, supportType) {\n        const supportRequests = document.getElementById('supportRequests');\n        \n        const requestHtml = `\n            \u003cdiv class=\"alert alert-warning py-2 mb-2\"\u003e\n                \u003cstrong\u003e${participant}\u003c/strong\u003e requested ${supportType} support\n                \u003cbutton class=\"btn btn-sm btn-outline-primary ms-2\" onclick=\"offerSupport('${participant}')\"\u003e\n                    \u003ci class=\"fas fa-hands-helping me-1\"\u003e\u003c/i\u003eOffer Support\n                \u003c/button\u003e\n            \u003c/div\u003e\n        `;\n        \n        supportRequests.innerHTML = requestHtml;\n    }\n    \n    function updateGroupDynamics() {\n        // Simulate dynamic updates (in real app, this would come from AI analysis)\n        const cohesion = Math.floor(Math.random() * 15) + 80;\n        const participation = Math.floor(Math.random() * 10) + 88;\n        \n        document.getElementById('groupCohesion').textContent = cohesion + '%';\n        document.getElementById('participation').textContent = participation + '%';\n    }\n    \n    function joinGroupSession() {\n        const name = prompt('Enter your name to join the session:');\n        if (name) {\n            document.getElementById('participantName').value = name;\n            alert('Welcome to the group session, ' + name + '!');\n        }\n    }\n    \n    function showGroupAnalytics() {\n        const modal = new bootstrap.Modal(document.getElementById('analyticsModal'));\n        modal.show();\n        \n        // Load analytics charts\n        setTimeout(loadAnalyticsCharts, 300);\n    }\n    \n    function loadAnalyticsCharts() {\n        // Participation Chart\n        const ctx1 = document.getElementById('participationChart').getContext('2d');\n        new Chart(ctx1, {\n            type: 'doughnut',\n            data: {\n                labels: ['Sarah M.', 'John D.', 'Maya K.', 'Alex R.', 'Chris L.', 'Jordan P.'],\n                datasets: [{\n                    data: [22, 18, 25, 15, 12, 8],\n                    backgroundColor: [\n                        '#ff6384', '#36a2eb', '#ffcd56', '#4bc0c0', '#9966ff', '#ff9f40'\n                    ]\n                }]\n            },\n            options: {\n                responsive: true,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n        \n        // Emotional Trends Chart\n        const ctx2 = document.getElementById('emotionalTrendsChart').getContext('2d');\n        new Chart(ctx2, {\n            type: 'line',\n            data: {\n                labels: ['Start', '15min', '30min', '45min', 'Current'],\n                datasets: [{\n                    label: 'Average Mood',\n                    data: [3, 4, 5, 6, 7],\n                    borderColor: '#36a2eb',\n                    tension: 0.4\n                }, {\n                    label: 'Anxiety Level',\n                    data: [7, 6, 5, 4, 3],\n                    borderColor: '#ff6384',\n                    tension: 0.4\n                }]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        max: 10\n                    }\n                }\n            }\n        });\n    }\n    \n    function raiseHand() {\n        alert('Your hand has been raised. The facilitator will acknowledge you shortly.');\n    }\n    \n    function shareFeeling() {\n        const feeling = prompt('How are you feeling right now?');\n        if (feeling) {\n            addMessageToConversation('You', `I'm feeling ${feeling}`);\n        }\n    }\n    \n    // Global functions for group activities\n    window.startGroupActivity = function(activityType) {\n        const modal = new bootstrap.Modal(document.getElementById('activityModal'));\n        const title = document.getElementById('activityTitle');\n        const content = document.getElementById('activityContent');\n        \n        if (activityType === 'gratitude') {\n            title.textContent = 'Gratitude Circle';\n            content.innerHTML = `\n                \u003cp\u003eLet's go around the circle and each share something we're grateful for today.\u003c/p\u003e\n                \u003cdiv class=\"alert alert-info\"\u003e\n                    \u003cstrong\u003eCurrent turn:\u003c/strong\u003e Maya K. is sharing their gratitude...\n                \u003c/div\u003e\n                \u003cp\u003eWhen it's your turn, click \"Participate\" to share.\u003c/p\u003e\n            `;\n        } else if (activityType === 'breathing') {\n            title.textContent = 'Group Breathing Exercise';\n            content.innerHTML = `\n                \u003cp\u003eLet's breathe together as a group. Follow the visual guide:\u003c/p\u003e\n                \u003cdiv class=\"text-center my-4\"\u003e\n                    \u003cdiv class=\"breathing-circle\" style=\"width: 100px; height: 100px; background: var(--bs-primary); border-radius: 50%; margin: 0 auto; animation: breathe 4s infinite;\"\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cp class=\"text-center\"\u003eInhale for 4 counts, hold for 4, exhale for 4\u003c/p\u003e\n                \u003cstyle\u003e\n                @keyframes breathe {\n                    0%, 100% { transform: scale(1); }\n                    50% { transform: scale(1.2); }\n                }\n                \u003c/style\u003e\n            `;\n        }\n        \n        modal.show();\n    };\n    \n    window.offerSupport = function(participant) {\n        const supportMessage = prompt(`What support would you like to offer ${participant}?`);\n        if (supportMessage) {\n            addMessageToConversation('You', `@${participant} ${supportMessage}`);\n        }\n    };\n});\n\u003c/script\u003e\n{% endblock %}\n",
                "home_anonymous.html": "\n        \u003c!DOCTYPE html\u003e\n        \u003chtml\u003e\n        \u003chead\u003e\n            \u003ctitle\u003eMindMend - AI-Powered Mental Health Support\u003c/title\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n            \u003cstyle\u003e\n                body { font-family: Arial, sans-serif; margin: 0; line-height: 1.6; color: #333; }\n                .hero { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 100px 0; text-align: center; }\n                .container { max-width: 1200px; margin: 0 auto; padding: 0 20px; }\n                .hero h1 { font-size: 3.5em; margin-bottom: 20px; font-weight: bold; }\n                .hero p { font-size: 1.3em; margin-bottom: 30px; opacity: 0.9; }\n                .btn { background: #ffffff; color: #667eea; padding: 15px 30px; border: none; border-radius: 25px; text-decoration: none; font-size: 18px; font-weight: bold; display: inline-block; margin: 10px; transition: all 0.3s; }\n                .btn:hover { transform: translateY(-3px); box-shadow: 0 10px 20px rgba(0,0,0,0.2); }\n                .btn-outline { background: transparent; color: white; border: 2px solid white; }\n                .btn-outline:hover { background: white; color: #667eea; }\n                .features { padding: 80px 0; background: #f8f9fa; }\n                .features-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 40px; margin-top: 50px; }\n                .feature-card { background: white; padding: 40px; border-radius: 15px; box-shadow: 0 5px 15px rgba(0,0,0,0.1); text-align: center; }\n                .feature-icon { font-size: 3em; margin-bottom: 20px; }\n                .feature-card h3 { color: #667eea; margin-bottom: 15px; }\n                .testimonials { padding: 80px 0; }\n                .testimonial-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 30px; margin-top: 50px; }\n                .testimonial { background: #f8f9fa; padding: 30px; border-radius: 15px; border-left: 5px solid #667eea; }\n                .cta { background: linear-gradient(135deg, #48bb78 0%, #38a169 100%); color: white; padding: 80px 0; text-align: center; }\n                .stats { padding: 80px 0; background: white; text-align: center; }\n                .stats-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 40px; margin-top: 50px; }\n                .stat-number { font-size: 3em; font-weight: bold; color: #667eea; }\n                .navbar { background: rgba(255,255,255,0.95); padding: 15px 0; position: fixed; width: 100%; top: 0; z-index: 1000; backdrop-filter: blur(10px); }\n                .navbar .container { display: flex; justify-content: space-between; align-items: center; }\n                .navbar .logo { font-weight: bold; font-size: 1.5em; color: #667eea; }\n                .navbar-links { display: flex; gap: 30px; }\n                .navbar-links a { color: #333; text-decoration: none; font-weight: 500; }\n                body { padding-top: 80px; }\n            \u003c/style\u003e\n        \u003c/head\u003e\n        \u003cbody\u003e\n            \u003cnav class=\"navbar\"\u003e\n                \u003cdiv class=\"container\"\u003e\n                    \u003cdiv class=\"logo\"\u003e🧠 MindMend\u003c/div\u003e\n                    \u003cdiv class=\"navbar-links\"\u003e\n                        \u003ca href=\"#features\"\u003eFeatures\u003c/a\u003e\n                        \u003ca href=\"#testimonials\"\u003eSuccess Stories\u003c/a\u003e\n                        \u003ca href=\"/login\"\u003eLogin\u003c/a\u003e\n                        \u003ca href=\"/register\" class=\"btn\" style=\"padding: 8px 20px; margin: 0;\"\u003eGet Started\u003c/a\u003e\n                        \u003ca href=\"/admin\" style=\"color: #dc3545; font-weight: bold;\"\u003e🔐 Admin\u003c/a\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/nav\u003e\n\n            \u003csection class=\"hero\"\u003e\n                \u003cdiv class=\"container\"\u003e\n                    \u003ch1\u003eTransform Your Mental Health Journey\u003c/h1\u003e\n                    \u003cp\u003eAI-powered therapy sessions, real-time emotional analysis, and personalized wellness activities - all in one platform.\u003c/p\u003e\n                    \u003ca href=\"/register\" class=\"btn\"\u003eStart Your Free Journey\u003c/a\u003e\n                    \u003ca href=\"/video-assessment\" class=\"btn btn-outline\"\u003eTry Video Assessment\u003c/a\u003e\n                \u003c/div\u003e\n            \u003c/section\u003e\n\n            \u003csection class=\"stats\"\u003e\n                \u003cdiv class=\"container\"\u003e\n                    \u003ch2\u003eTrusted by Thousands\u003c/h2\u003e\n                    \u003cdiv class=\"stats-grid\"\u003e\n                        \u003cdiv\u003e\n                            \u003cdiv class=\"stat-number\"\u003e10k+\u003c/div\u003e\n                            \u003cdiv\u003eActive Users\u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv\u003e\n                            \u003cdiv class=\"stat-number\"\u003e50k+\u003c/div\u003e\n                            \u003cdiv\u003eTherapy Sessions\u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv\u003e\n                            \u003cdiv class=\"stat-number\"\u003e95%\u003c/div\u003e\n                            \u003cdiv\u003eSatisfaction Rate\u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv\u003e\n                            \u003cdiv class=\"stat-number\"\u003e24/7\u003c/div\u003e\n                            \u003cdiv\u003eAvailable Support\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/section\u003e\n\n            \u003csection class=\"features\" id=\"features\"\u003e\n                \u003cdiv class=\"container\"\u003e\n                    \u003ch2 style=\"text-align: center; font-size: 2.5em; margin-bottom: 20px;\"\u003eComprehensive Mental Health Support\u003c/h2\u003e\n                    \u003cp style=\"text-align: center; font-size: 1.2em; color: #666;\"\u003eEverything you need for your mental wellness journey\u003c/p\u003e\n\n                    \u003cdiv class=\"features-grid\"\u003e\n                        \u003cdiv class=\"feature-card\"\u003e\n                            \u003cdiv class=\"feature-icon\"\u003e🤖\u003c/div\u003e\n                            \u003ch3\u003eAI-Powered Therapy\u003c/h3\u003e\n                            \u003cp\u003eAdvanced AI therapists trained on evidence-based techniques provide personalized support 24/7.\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"feature-card\"\u003e\n                            \u003cdiv class=\"feature-icon\"\u003e📹\u003c/div\u003e\n                            \u003ch3\u003eVideo Emotion Analysis\u003c/h3\u003e\n                            \u003cp\u003eReal-time facial expression analysis to understand your emotional state and provide better support.\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"feature-card\"\u003e\n                            \u003cdiv class=\"feature-icon\"\u003e💏\u003c/div\u003e\n                            \u003ch3\u003eCouples Therapy\u003c/h3\u003e\n                            \u003cp\u003eSpecialized relationship counseling to strengthen communication and resolve conflicts together.\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"feature-card\"\u003e\n                            \u003cdiv class=\"feature-icon\"\u003e📊\u003c/div\u003e\n                            \u003ch3\u003eProgress Tracking\u003c/h3\u003e\n                            \u003cp\u003eComprehensive analytics to monitor your mental health journey and celebrate improvements.\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"feature-card\"\u003e\n                            \u003cdiv class=\"feature-icon\"\u003e🧘\u003c/div\u003e\n                            \u003ch3\u003eWellness Activities\u003c/h3\u003e\n                            \u003cp\u003eCurated therapeutic exercises, mindfulness practices, and coping strategies.\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"feature-card\"\u003e\n                            \u003cdiv class=\"feature-icon\"\u003e🆘\u003c/div\u003e\n                            \u003ch3\u003eCrisis Support\u003c/h3\u003e\n                            \u003cp\u003eImmediate support and resources available whenever you need help the most.\u003c/p\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/section\u003e\n\n            \u003csection class=\"testimonials\" id=\"testimonials\"\u003e\n                \u003cdiv class=\"container\"\u003e\n                    \u003ch2 style=\"text-align: center; font-size: 2.5em; margin-bottom: 20px;\"\u003eSuccess Stories\u003c/h2\u003e\n                    \u003cdiv class=\"testimonial-grid\"\u003e\n                        \u003cdiv class=\"testimonial\"\u003e\n                            \u003cp\u003e\"MindMend helped me understand my anxiety better. The AI therapist is surprisingly understanding and the video analysis feature helped me recognize emotional patterns I never noticed.\"\u003c/p\u003e\n                            \u003cstrong\u003e- Sarah M.\u003c/strong\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"testimonial\"\u003e\n                            \u003cp\u003e\"My partner and I tried the couples therapy feature and it transformed our communication. The exercises are practical and the AI guidance is spot-on.\"\u003c/p\u003e\n                            \u003cstrong\u003e- David \u0026 Emma\u003c/strong\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"testimonial\"\u003e\n                            \u003cp\u003e\"Having 24/7 access to therapy support has been life-changing. The personalized activities and progress tracking keep me motivated.\"\u003c/p\u003e\n                            \u003cstrong\u003e- Michael R.\u003c/strong\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/section\u003e\n\n            \u003csection class=\"cta\"\u003e\n                \u003cdiv class=\"container\"\u003e\n                    \u003ch2 style=\"font-size: 2.5em; margin-bottom: 20px;\"\u003eReady to Start Your Journey?\u003c/h2\u003e\n                    \u003cp style=\"font-size: 1.2em; margin-bottom: 30px;\"\u003eJoin thousands who have transformed their mental health with MindMend\u003c/p\u003e\n                    \u003ca href=\"/register\" class=\"btn\" style=\"color: #48bb78; font-size: 20px; padding: 20px 40px;\"\u003eCreate Free Account\u003c/a\u003e\n                    \u003cdiv style=\"margin-top: 30px;\"\u003e\n                        \u003ca href=\"/individual\" style=\"color: rgba(255,255,255,0.8); text-decoration: none; margin: 0 20px;\"\u003eTry Individual Therapy\u003c/a\u003e\n                        \u003ca href=\"/video-assessment\" style=\"color: rgba(255,255,255,0.8); text-decoration: none; margin: 0 20px;\"\u003eExperience Video Assessment\u003c/a\u003e\n                        \u003ca href=\"/activities\" style=\"color: rgba(255,255,255,0.8); text-decoration: none; margin: 0 20px;\"\u003eExplore Activities\u003c/a\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/section\u003e\n        \u003c/body\u003e\n        \u003c/html\u003e\n",
                "home_authenticated.html": "\n            \u003c!DOCTYPE html\u003e\n            \u003chtml\u003e\n            \u003chead\u003e\n                \u003ctitle\u003eWelcome Back - MindMend\u003c/title\u003e\n                \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n                \u003cstyle\u003e\n                    body { font-family: Arial, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }\n                    .navbar { background: rgba(255,255,255,0.1); padding: 15px 30px; display: flex; justify-content: space-between; align-items: center; }\n                    .navbar h1 { color: white; margin: 0; }\n                    .navbar a { color: white; text-decoration: none; margin: 0 15px; padding: 8px 16px; border-radius: 20px; transition: background 0.3s; }\n                    .navbar a:hover { background: rgba(255,255,255,0.2); }\n                    .container { max-width: 1200px; margin: 0 auto; padding: 30px; }\n                    .welcome-card { background: white; border-radius: 15px; padding: 30px; margin-bottom: 30px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }\n                    .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 30px 0; }\n                    .stat-card { background: white; border-radius: 15px; padding: 25px; text-align: center; box-shadow: 0 5px 15px rgba(0,0,0,0.1); }\n                    .stat-number { font-size: 2.5em; font-weight: bold; color: #667eea; margin-bottom: 10px; }\n                    .stat-label { color: #666; font-size: 1.1em; }\n                    .actions-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }\n                    .action-card { background: white; border-radius: 15px; padding: 25px; box-shadow: 0 5px 15px rgba(0,0,0,0.1); }\n                    .btn { background: #667eea; color: white; padding: 12px 24px; border: none; border-radius: 8px; text-decoration: none; display: inline-block; font-size: 16px; transition: all 0.3s; }\n                    .btn:hover { background: #5a67d8; transform: translateY(-2px); }\n                    .btn-secondary { background: #48bb78; }\n                    .btn-secondary:hover { background: #38a169; }\n                    .recent-session { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 8px; border-left: 4px solid #667eea; }\n                    .session-date { color: #666; font-size: 0.9em; }\n                    .quick-actions { background: linear-gradient(45deg, #667eea, #764ba2); color: white; border-radius: 15px; padding: 25px; margin-top: 20px; }\n                    .insights-card { background: linear-gradient(45deg, #48bb78, #38a169); color: white; border-radius: 15px; padding: 25px; }\n                \u003c/style\u003e\n            \u003c/head\u003e\n            \u003cbody\u003e\n                \u003cnav class=\"navbar\"\u003e\n                    \u003ch1\u003e MindMend\u003c/h1\u003e\n                    \u003cdiv\u003e\n                        \u003ca href=\"/dashboard\"\u003eDashboard\u003c/a\u003e\n                        \u003ca href=\"/video-assessment\"\u003eVideo Assessment\u003c/a\u003e\n                        \u003ca href=\"/activities\"\u003eActivities\u003c/a\u003e\n                        \u003ca href=\"/logout\"\u003eLogout\u003c/a\u003e\n                    \u003c/div\u003e\n                \u003c/nav\u003e\n\n                \u003cdiv class=\"container\"\u003e\n                    \u003cdiv class=\"welcome-card\"\u003e\n                        \u003ch1\u003eWelcome back, {{ current_user.name }}! \u003c/h1\u003e\n                        \u003cp style=\"font-size: 1.2em; color: #666; margin: 10px 0;\"\u003eReady to continue your mental health journey?\u003c/p\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"stats-grid\"\u003e\n                        \u003cdiv class=\"stat-card\"\u003e\n                            \u003cdiv class=\"stat-number\"\u003e{{ user_stats['total_sessions'] }}\u003c/div\u003e\n                            \u003cdiv class=\"stat-label\"\u003eTotal Sessions\u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"stat-card\"\u003e\n                            \u003cdiv class=\"stat-number\"\u003e{{ user_stats['this_week_sessions'] }}\u003c/div\u003e\n                            \u003cdiv class=\"stat-label\"\u003eThis Week\u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"stat-card\"\u003e\n                            \u003cdiv class=\"stat-number\"\u003e{{ user_stats['streak_days'] }}\u003c/div\u003e\n                            \u003cdiv class=\"stat-label\"\u003eDay Streak\u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"stat-card\"\u003e\n                            \u003cdiv class=\"stat-number\"\u003e{{ user_stats['avg_mood'] }}/10\u003c/div\u003e\n                            \u003cdiv class=\"stat-label\"\u003eAverage Mood\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"actions-grid\"\u003e\n                        \u003cdiv class=\"action-card\"\u003e\n                            \u003ch3\u003e🎯 Start Your Session\u003c/h3\u003e\n                            \u003cp\u003eReady for your next therapy session? Choose the type that fits your needs today.\u003c/p\u003e\n                            \u003ca href=\"/individual\" class=\"btn\"\u003eIndividual Therapy\u003c/a\u003e\n                            \u003ca href=\"/relationship\" class=\"btn btn-secondary\"\u003eCouples Therapy\u003c/a\u003e\n                        \u003c/div\u003e\n\n                        \u003cdiv class=\"action-card\"\u003e\n                            \u003ch3\u003e📊 Track Your Progress\u003c/h3\u003e\n                            \u003cp\u003eMonitor your mental health journey with comprehensive analytics and insights.\u003c/p\u003e\n                            \u003ca href=\"/dashboard\" class=\"btn\"\u003eView Dashboard\u003c/a\u003e\n                            \u003ca href=\"/video-assessment\" class=\"btn btn-secondary\"\u003eVideo Assessment\u003c/a\u003e\n                        \u003c/div\u003e\n\n                        \u003cdiv class=\"action-card\"\u003e\n                            \u003ch3\u003e🧘 Wellness Activities\u003c/h3\u003e\n                            \u003cp\u003eExplore therapeutic activities designed to support your mental health goals.\u003c/p\u003e\n                            \u003ca href=\"/activities\" class=\"btn\"\u003eBrowse Activities\u003c/a\u003e\n                            \u003ca href=\"/emotion-tracking\" class=\"btn btn-secondary\"\u003eEmotion Tracking\u003c/a\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"quick-actions\"\u003e\n                        \u003ch3\u003e⚡ Quick Actions\u003c/h3\u003e\n                        \u003cdiv style=\"display: flex; gap: 15px; flex-wrap: wrap; margin-top: 15px;\"\u003e\n                            \u003ca href=\"/api/session\" onclick=\"startQuickSession()\" class=\"btn\" style=\"background: rgba(255,255,255,0.2);\"\u003eQuick Check-in\u003c/a\u003e\n                            \u003ca href=\"/crisis-support\" class=\"btn\" style=\"background: rgba(255,255,255,0.2);\"\u003eCrisis Support\u003c/a\u003e\n                            \u003ca href=\"/ai-models\" class=\"btn\" style=\"background: rgba(255,255,255,0.2);\"\u003eAI Tools\u003c/a\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    {% if recent_sessions %}\n                    \u003cdiv class=\"action-card\" style=\"margin-top: 20px;\"\u003e\n                        \u003ch3\u003e📈 Recent Sessions\u003c/h3\u003e\n                        {% for session in recent_sessions %}\n                        \u003cdiv class=\"recent-session\"\u003e\u003cstrong\u003e{{ session.session_type.title() }} Session\u003c/strong\u003e\u003cdiv class=\"session-date\"\u003e{{ session.timestamp.strftime(\"%B %d, %Y at %I:%M %p\") }}\u003c/div\u003e\u003c/div\u003e\n                        {% endfor %}\n                    \u003c/div\u003e\n                    {% else %}\n                    \u003cdiv class=\"insights-card\"\u003e\u003ch3\u003e🌟 Ready to Begin?\u003c/h3\u003e\u003cp\u003eWelcome to MindMend! Your mental health journey starts with a single step. Ready to take yours?\u003c/p\u003e\u003ca href=\"/individual\" class=\"btn\" style=\"background: rgba(255,255,255,0.2);\"\u003eStart First Session\u003c/a\u003e\u003c/div\u003e\n                    {% endif %}\n                \u003c/div\u003e\n\n                \u003cscript\u003e\n                    function startQuickSession() {\n                        fetch('/api/session', {\n                            method: 'POST',\n                            headers: { 'Content-Type': 'application/json' },\n                            body: JSON.stringify({\n                                message: 'Quick check-in: How are you feeling today?',\n                                session_type: 'individual',\n                                name: '{{ current_user.name }}'\n                            })\n                        })\n                        .then(response =\u003e response.json())\n                        .then(data =\u003e {\n                            alert('Quick check-in completed! Response: ' + data.response);\n                        })\n                        .catch(error =\u003e console.error('Error:', error));\n                        return false;\n                    }\n                \u003c/script\u003e\n            \u003c/body\u003e\n            \u003c/html\u003e\n",
                "index.html": "{% extends \"base.html\" %}\n\n{% block title %}Mind Mend - AI Mental Health Platform{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"row\"\u003e\n    \u003c!-- Hero Section --\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"jumbotron bg-primary text-white rounded p-4 mb-4\"\u003e\n            \u003cdiv class=\"container text-center\"\u003e\n                \u003cdiv class=\"d-flex align-items-center justify-content-center mb-3\"\u003e\n                    \u003cimg src=\"/static/logos/mindmend_logo_4.svg\" alt=\"Mind Mend\" height=\"80\" class=\"me-3\"\u003e\n                    \u003ch1 class=\"display-4 mb-0\"\u003eMind Mend\u003c/h1\u003e\n                \u003c/div\u003e\n                \u003cp class=\"lead\"\u003eAdvanced AI-powered mental health support with video assessment, biometric integration, and expert human guidance.\u003c/p\u003e\n                \u003chr class=\"my-4\"\u003e\n                \u003cp\u003eExperience comprehensive therapy with real-time emotion analysis, personalized exercises, and 24/7 AI support.\u003c/p\u003e\n                \u003cdiv class=\"mt-3\"\u003e\n                    \u003ca href=\"{{ url_for('subscribe') }}\" class=\"btn btn-warning btn-lg me-3\"\u003e\n                        \u003ci class=\"fas fa-crown me-2\"\u003e\u003c/i\u003eUpgrade to Premium\n                    \u003c/a\u003e\n                    \u003ca href=\"{{ url_for('individual_therapy') }}\" class=\"btn btn-outline-light btn-lg\"\u003e\n                        \u003ci class=\"fas fa-play me-2\"\u003e\u003c/i\u003eStart Free Session\n                    \u003c/a\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"row g-4\"\u003e\n    \u003c!-- Individual Therapy --\u003e\n    \u003cdiv class=\"col-lg-4 col-md-6\"\u003e\n        \u003cdiv class=\"card h-100 border-primary\"\u003e\n            \u003cdiv class=\"card-header bg-primary text-white\"\u003e\n                \u003ch5 class=\"card-title mb-0\"\u003e\n                    \u003ci class=\"fas fa-user me-2\"\u003e\u003c/i\u003eIndividual Therapy\n                \u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cp class=\"card-text\"\u003ePersonal one-on-one AI therapy sessions with advanced emotion recognition and biometric monitoring.\u003c/p\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eVideo emotion analysis\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eHeart rate monitoring\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003ePersonalized exercises\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eCrisis detection\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer\"\u003e\n                \u003ca href=\"{{ url_for('individual_therapy') }}\" class=\"btn btn-primary w-100\"\u003e\n                    \u003ci class=\"fas fa-play me-2\"\u003e\u003c/i\u003eStart Individual Session\n                \u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Relationship Therapy --\u003e\n    \u003cdiv class=\"col-lg-4 col-md-6\"\u003e\n        \u003cdiv class=\"card h-100 border-danger\"\u003e\n            \u003cdiv class=\"card-header bg-danger text-white\"\u003e\n                \u003ch5 class=\"card-title mb-0\"\u003e\n                    \u003ci class=\"fas fa-heart me-2\"\u003e\u003c/i\u003eRelationship Therapy\n                \u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cp class=\"card-text\"\u003eAI-guided couples counseling with communication analysis and relationship dynamics assessment.\u003c/p\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eDual emotion tracking\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eCommunication patterns\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eConflict resolution\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eAttachment analysis\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer\"\u003e\n                \u003ca href=\"{{ url_for('relationship_therapy') }}\" class=\"btn btn-danger w-100\"\u003e\n                    \u003ci class=\"fas fa-play me-2\"\u003e\u003c/i\u003eStart Relationship Session\n                \u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Group Therapy --\u003e\n    \u003cdiv class=\"col-lg-4 col-md-6\"\u003e\n        \u003cdiv class=\"card h-100 border-success\"\u003e\n            \u003cdiv class=\"card-header bg-success text-white\"\u003e\n                \u003ch5 class=\"card-title mb-0\"\u003e\n                    \u003ci class=\"fas fa-users me-2\"\u003e\u003c/i\u003eGroup Therapy\n                \u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cp class=\"card-text\"\u003eFacilitated group sessions with AI moderation and peer support analytics.\u003c/p\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eGroup dynamics AI\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003ePeer support tracking\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eParticipation analysis\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eSocial connection metrics\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer\"\u003e\n                \u003ca href=\"{{ url_for('group_therapy') }}\" class=\"btn btn-success w-100\"\u003e\n                    \u003ci class=\"fas fa-play me-2\"\u003e\u003c/i\u003eJoin Group Session\n                \u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Video Assessment --\u003e\n    \u003cdiv class=\"col-lg-6 col-md-6\"\u003e\n        \u003cdiv class=\"card h-100 border-info\"\u003e\n            \u003cdiv class=\"card-header bg-info text-white\"\u003e\n                \u003ch5 class=\"card-title mb-0\"\u003e\n                    \u003ci class=\"fas fa-video me-2\"\u003e\u003c/i\u003eAI Video Assessment\n                \u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cp class=\"card-text\"\u003eComprehensive AI-powered video interview with microexpression analysis and emotional state evaluation.\u003c/p\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eFacial expression analysis\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eVoice tone analysis\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eEye movement tracking\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eMicroexpression detection\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eReal-time mood assessment\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer\"\u003e\n                \u003ca href=\"{{ url_for('video_assess') }}\" class=\"btn btn-info w-100\"\u003e\n                    \u003ci class=\"fas fa-camera me-2\"\u003e\u003c/i\u003eStart Video Assessment\n                \u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Dashboard --\u003e\n    \u003cdiv class=\"col-lg-6 col-md-6\"\u003e\n        \u003cdiv class=\"card h-100 border-warning\"\u003e\n            \u003cdiv class=\"card-header bg-warning text-dark\"\u003e\n                \u003ch5 class=\"card-title mb-0\"\u003e\n                    \u003ci class=\"fas fa-chart-line me-2\"\u003e\u003c/i\u003eProgress Dashboard\n                \u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cp class=\"card-text\"\u003eTrack your mental health journey with comprehensive analytics and biometric integration.\u003c/p\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eProgress tracking\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eBiometric integration\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eExercise completion\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eMood trends\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eRisk assessment\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer\"\u003e\n                \u003ca href=\"{{ url_for('dashboard') }}\" class=\"btn btn-warning w-100\"\u003e\n                    \u003ci class=\"fas fa-chart-bar me-2\"\u003e\u003c/i\u003eView Dashboard\n                \u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003c!-- Level 2 Premium Features --\u003e\n    \u003cdiv class=\"col-lg-6 col-md-6\"\u003e\n        \u003cdiv class=\"card h-100 border-warning\"\u003e\n            \u003cdiv class=\"card-header bg-warning text-dark\"\u003e\n                \u003ch5 class=\"card-title mb-0\"\u003e\n                    \u003ci class=\"fas fa-user-md me-2\"\u003e\u003c/i\u003eHuman Counselors\n                    \u003cspan class=\"badge bg-danger ms-2\"\u003eLevel 2\u003c/span\u003e\n                \u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cp class=\"card-text\"\u003eConnect with licensed mental health professionals for premium therapy sessions.\u003c/p\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eLicensed therapists\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eVideo sessions\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eInsurance coverage\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003e24/7 crisis support\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-clock text-warning me-2\"\u003e\u003c/i\u003eComing soon\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer\"\u003e\n                \u003ca href=\"{{ url_for('counselor_signup') }}\" class=\"btn btn-warning w-100\"\u003e\n                    \u003ci class=\"fas fa-bell me-2\"\u003e\u003c/i\u003eJoin Waitlist\n                \u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003c!-- Enhanced AI Features --\u003e\n    \u003cdiv class=\"col-lg-6 col-md-6\"\u003e\n        \u003cdiv class=\"card h-100 border-light\"\u003e\n            \u003cdiv class=\"card-header bg-light text-dark\"\u003e\n                \u003ch5 class=\"card-title mb-0\"\u003e\n                    \u003ci class=\"fas fa-brain me-2\"\u003e\u003c/i\u003eEnhanced AI Features\n                    \u003cspan class=\"badge bg-success ms-2\"\u003eLevel 2\u003c/span\u003e\n                \u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cp class=\"card-text\"\u003eReal OpenAI GPT-4o integration with advanced therapeutic capabilities.\u003c/p\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eReal AI responses\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eSession-specific prompts\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eAdvanced crisis detection\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003ePersonalized therapy\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eMicroexpression hooks\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer\"\u003e\n                \u003ca href=\"{{ url_for('individual_therapy') }}\" class=\"btn btn-light w-100\"\u003e\n                    \u003ci class=\"fas fa-robot me-2\"\u003e\u003c/i\u003eTry Enhanced AI\n                \u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Features Section --\u003e\n\u003cdiv class=\"row mt-5\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003ch2 class=\"text-center mb-4\"\u003e\n            \u003ci class=\"fas fa-star me-2\"\u003e\u003c/i\u003eAdvanced AI Features\n        \u003c/h2\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"row g-4\"\u003e\n    \u003cdiv class=\"col-md-3 text-center\"\u003e\n        \u003cdiv class=\"card bg-dark border-0 h-100\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003ci class=\"fas fa-robot fa-3x text-primary mb-3\"\u003e\u003c/i\u003e\n                \u003ch5\u003eMulti-Modal AI\u003c/h5\u003e\n                \u003cp class=\"text-muted\"\u003eCombines text, video, audio, and biometric data for comprehensive analysis.\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"col-md-3 text-center\"\u003e\n        \u003cdiv class=\"card bg-dark border-0 h-100\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003ci class=\"fas fa-heartbeat fa-3x text-danger mb-3\"\u003e\u003c/i\u003e\n                \u003ch5\u003eBiometric Integration\u003c/h5\u003e\n                \u003cp class=\"text-muted\"\u003eReal-time monitoring of heart rate, stress levels, and sleep patterns.\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"col-md-3 text-center\"\u003e\n        \u003cdiv class=\"card bg-dark border-0 h-100\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003ci class=\"fas fa-eye fa-3x text-info mb-3\"\u003e\u003c/i\u003e\n                \u003ch5\u003eMicroexpression Detection\u003c/h5\u003e\n                \u003cp class=\"text-muted\"\u003eAdvanced facial analysis to detect subtle emotional changes.\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"col-md-3 text-center\"\u003e\n        \u003cdiv class=\"card bg-dark border-0 h-100\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003ci class=\"fas fa-shield-alt fa-3x text-success mb-3\"\u003e\u003c/i\u003e\n                \u003ch5\u003eCrisis Prevention\u003c/h5\u003e\n                \u003cp class=\"text-muted\"\u003eAI-powered risk assessment with immediate intervention protocols.\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- CTA Section --\u003e\n\u003cdiv class=\"row mt-5\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card bg-gradient border-0 text-center\"\u003e\n            \u003cdiv class=\"card-body py-5\"\u003e\n                \u003ch3 class=\"text-white mb-3\"\u003eReady to start your mental health journey?\u003c/h3\u003e\n                \u003cp class=\"text-white-50 mb-4\"\u003eExperience the future of therapy with AI-powered insights and human expertise.\u003c/p\u003e\n                \u003cdiv class=\"d-flex justify-content-center gap-3 flex-wrap\"\u003e\n                    \u003ca href=\"{{ url_for('register') }}\" class=\"btn btn-success btn-lg\"\u003e\n                        \u003ci class=\"fas fa-user-plus me-2\"\u003e\u003c/i\u003eCreate Account\n                    \u003c/a\u003e\n                    \u003ca href=\"{{ url_for('login') }}\" class=\"btn btn-primary btn-lg\"\u003e\n                        \u003ci class=\"fas fa-sign-in-alt me-2\"\u003e\u003c/i\u003eSign In\n                    \u003c/a\u003e\n                    \u003ca href=\"{{ url_for('onboarding') }}\" class=\"btn btn-outline-light btn-lg tutorial-btn\"\u003e\n                        \u003ci class=\"fas fa-graduation-cap me-2\"\u003e\u003c/i\u003eInteractive Tutorial\n                    \u003c/a\u003e\n                    \u003ca href=\"{{ url_for('video_assess') }}\" class=\"btn btn-outline-light btn-lg\"\u003e\n                        \u003ci class=\"fas fa-video me-2\"\u003e\u003c/i\u003eVideo Assessment\n                    \u003c/a\u003e\n                    \u003ca href=\"{{ url_for('counselor.employment_opportunities') }}\" class=\"btn btn-warning btn-lg\"\u003e\n                        \u003ci class=\"fas fa-user-md me-2\"\u003e\u003c/i\u003eJoin Our Team\n                    \u003c/a\u003e\n                    \u003ca href=\"/media\" class=\"btn btn-info btn-sm ms-2\"\u003e\n                        \u003ci class=\"fas fa-newspaper me-2\"\u003e\u003c/i\u003eMedia Pack\n                    \u003c/a\u003e\n                    \u003ca href=\"/logos\" class=\"btn btn-secondary btn-sm ms-2\"\u003e\n                        \u003ci class=\"fas fa-palette me-2\"\u003e\u003c/i\u003eLogo Options\n                    \u003c/a\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003cscript\u003e\n// Global function declarations\nfunction showTutorialPrompt() {\n    // Create tutorial prompt modal\n    const modal = document.createElement('div');\n    modal.className = 'tutorial-prompt-modal';\n    modal.innerHTML = `\n        \u003cdiv class=\"tutorial-prompt-overlay\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"tutorial-prompt-content\"\u003e\n            \u003cdiv class=\"tutorial-prompt-header\"\u003e\n                \u003ch3\u003eWelcome to Mind Mend!\u003c/h3\u003e\n                \u003cbutton class=\"tutorial-close-btn\" onclick=\"closeTutorialPrompt()\"\u003e\u0026times;\u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"tutorial-prompt-body\"\u003e\n                \u003cdiv class=\"tutorial-character\"\u003e\n                    \u003cdiv class=\"character-mini\"\u003e\n                        \u003cdiv class=\"eyes-mini\"\u003e\n                            \u003cdiv class=\"eye-mini\"\u003e\u003c/div\u003e\n                            \u003cdiv class=\"eye-mini\"\u003e\u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"mouth-mini\"\u003e\u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"tutorial-message\"\u003e\n                    \u003cp\u003eHi! I'm Alex, your guide. Since this is your first visit, would you like me to show you around the platform?\u003c/p\u003e\n                    \u003cp class=\"tutorial-benefits\"\u003eThe tutorial covers:\u003c/p\u003e\n                    \u003cul\u003e\n                        \u003cli\u003eHow to choose the right therapy type\u003c/li\u003e\n                        \u003cli\u003eMeeting our AI therapists\u003c/li\u003e\n                        \u003cli\u003eInteractive features overview\u003c/li\u003e\n                        \u003cli\u003eSafety and crisis support\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"tutorial-prompt-actions\"\u003e\n                \u003cbutton class=\"tutorial-btn secondary\" onclick=\"startTutorial()\"\u003e\n                    \u003ci class=\"fas fa-graduation-cap\"\u003e\u003c/i\u003e Yes, Show Me Around\n                \u003c/button\u003e\n                \u003cbutton class=\"tutorial-btn primary\" onclick=\"skipAndExplore()\"\u003e\n                    \u003ci class=\"fas fa-compass\"\u003e\u003c/i\u003e Skip, I'll Explore\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    `;\n    \n    document.body.appendChild(modal);\n    \n    // Add styles\n    const style = document.createElement('style');\n    style.textContent = `\n        .tutorial-prompt-modal {\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            z-index: 10000;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            animation: fadeIn 0.3s ease;\n        }\n        \n        .tutorial-prompt-overlay {\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background: rgba(0, 0, 0, 0.7);\n            backdrop-filter: blur(5px);\n        }\n        \n        .tutorial-prompt-content {\n            background: white;\n            border-radius: 20px;\n            padding: 0;\n            max-width: 500px;\n            width: 90%;\n            position: relative;\n            animation: slideUp 0.4s ease;\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n        }\n        \n        .tutorial-prompt-header {\n            background: linear-gradient(135deg, #667eea, #764ba2);\n            color: white;\n            padding: 1.5rem 2rem;\n            border-radius: 20px 20px 0 0;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .tutorial-prompt-header h3 {\n            margin: 0;\n            font-size: 1.5rem;\n        }\n        \n        .tutorial-close-btn {\n            background: none;\n            border: none;\n            color: white;\n            font-size: 1.5rem;\n            cursor: pointer;\n            padding: 0;\n            width: 30px;\n            height: 30px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            border-radius: 50%;\n            transition: background 0.3s ease;\n        }\n        \n        .tutorial-close-btn:hover {\n            background: rgba(255, 255, 255, 0.2);\n        }\n        \n        .tutorial-prompt-body {\n            padding: 2rem;\n            display: flex;\n            gap: 1.5rem;\n            align-items: flex-start;\n        }\n        \n        .tutorial-character {\n            flex-shrink: 0;\n        }\n        \n        .character-mini {\n            width: 60px;\n            height: 60px;\n            background: linear-gradient(135deg, #4CAF50, #45a049);\n            border-radius: 50%;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            animation: bounce 2s infinite;\n        }\n        \n        .eyes-mini {\n            display: flex;\n            gap: 4px;\n            margin-bottom: 4px;\n        }\n        \n        .eye-mini {\n            width: 6px;\n            height: 6px;\n            background: white;\n            border-radius: 50%;\n        }\n        \n        .mouth-mini {\n            width: 8px;\n            height: 4px;\n            border: 1px solid white;\n            border-top: none;\n            border-radius: 0 0 8px 8px;\n        }\n        \n        .tutorial-message {\n            flex: 1;\n        }\n        \n        .tutorial-message p {\n            margin-bottom: 1rem;\n            color: #333;\n            line-height: 1.5;\n        }\n        \n        .tutorial-benefits {\n            font-weight: 600;\n            margin-bottom: 0.5rem !important;\n        }\n        \n        .tutorial-message ul {\n            margin: 0;\n            padding-left: 1.5rem;\n            color: #666;\n        }\n        \n        .tutorial-message li {\n            margin-bottom: 0.5rem;\n            font-size: 0.9rem;\n        }\n        \n        .tutorial-prompt-actions {\n            padding: 1.5rem 2rem 2rem;\n            display: flex;\n            gap: 1rem;\n            justify-content: center;\n        }\n        \n        .tutorial-btn {\n            padding: 0.75rem 1.5rem;\n            border: none;\n            border-radius: 25px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n        }\n        \n        .tutorial-btn.secondary {\n            background: linear-gradient(135deg, #4CAF50, #45a049);\n            color: white;\n        }\n        \n        .tutorial-btn.primary {\n            background: rgba(102, 126, 234, 0.1);\n            color: #667eea;\n            border: 2px solid #667eea;\n        }\n        \n        .tutorial-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);\n        }\n        \n        @keyframes fadeIn {\n            from { opacity: 0; }\n            to { opacity: 1; }\n        }\n        \n        @keyframes slideUp {\n            from {\n                opacity: 0;\n                transform: translateY(30px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n        \n        .tutorial-btn.pulse {\n            animation: tutorialPulse 2s infinite;\n        }\n        \n        @keyframes tutorialPulse {\n            0%, 100% { transform: scale(1); }\n            50% { transform: scale(1.05); }\n        }\n    `;\n    document.head.appendChild(style);\n    \n    // Add pulse animation to tutorial button\n    document.querySelector('.tutorial-btn').classList.add('pulse');\n}\n\nfunction startTutorial() {\n    window.location.href = '/onboarding';\n}\n\nfunction skipAndExplore() {\n    localStorage.setItem('mindMendTutorialCompleted', 'true');\n    closeTutorialPrompt();\n}\n\nfunction closeTutorialPrompt() {\n    const modal = document.querySelector('.tutorial-prompt-modal');\n    if (modal) {\n        modal.style.animation = 'fadeOut 0.3s ease';\n        setTimeout(() =\u003e {\n            modal.remove();\n        }, 300);\n    }\n}\n\n// Add any JavaScript for the home page here\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Check if user is new and show tutorial prompt\n    if (!localStorage.getItem('mindMendTutorialCompleted') \u0026\u0026 !sessionStorage.getItem('tutorialPromptShown')) {\n        sessionStorage.setItem('tutorialPromptShown', 'true');\n        setTimeout(showTutorialPrompt, 1000); // Delay to ensure page is fully loaded\n    }\n    \n    // Animate cards on scroll\n    const cards = document.querySelectorAll('.card');\n    \n    const observer = new IntersectionObserver((entries) =\u003e {\n        entries.forEach(entry =\u003e {\n            if (entry.isIntersecting) {\n                entry.target.style.animation = 'fadeInUp 0.6s ease-out forwards';\n            }\n        });\n    });\n    \n    cards.forEach(card =\u003e {\n        observer.observe(card);\n    });\n});\n\n// Add fadeOut animation\nconst fadeOutStyle = document.createElement('style');\nfadeOutStyle.textContent = `\n    @keyframes fadeOut {\n        from { opacity: 1; }\n        to { opacity: 0; }\n    }\n`;\ndocument.head.appendChild(fadeOutStyle);\n\u003c/script\u003e\n{% endblock %}\n",
                "individual_therapy.html": "{% extends \"base.html\" %}\n\n{% block title %}Individual Therapy - Mind Mend{% endblock %}\n\n{% block head %}\n\u003cstyle\u003e\n    .video-container {\n        position: relative;\n        background: #000;\n        border-radius: 8px;\n        overflow: hidden;\n    }\n    .emotion-overlay {\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        background: rgba(0,0,0,0.8);\n        color: white;\n        padding: 8px 12px;\n        border-radius: 4px;\n        font-size: 0.8em;\n    }\n    .biometric-indicator {\n        display: inline-block;\n        width: 12px;\n        height: 12px;\n        border-radius: 50%;\n        margin-right: 8px;\n    }\n    .status-normal { background-color: #28a745; }\n    .status-elevated { background-color: #ffc107; }\n    .status-high { background-color: #dc3545; }\n\u003c/style\u003e\n{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"row\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"d-flex justify-content-between align-items-center mb-4\"\u003e\n            \u003ch2\u003e\u003ci class=\"fas fa-user me-2\"\u003e\u003c/i\u003eIndividual Therapy Session\u003c/h2\u003e\n            \u003cdiv class=\"d-flex gap-2\"\u003e\n                \u003cbutton class=\"btn btn-outline-primary\" id=\"toggleVideo\" disabled\u003e\n                    \u003ci class=\"fas fa-video me-1\"\u003e\u003c/i\u003eEnable Video\n                \u003c/button\u003e\n                \u003cbutton class=\"btn btn-outline-success\" id=\"toggleBiometric\" disabled\u003e\n                    \u003ci class=\"fas fa-heartbeat me-1\"\u003e\u003c/i\u003eConnect Wearable\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"row g-4\"\u003e\n    \u003c!-- Video and Emotion Analysis --\u003e\n    \u003cdiv class=\"col-lg-6\"\u003e\n        \u003cdiv class=\"card h-100\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-video me-2\"\u003e\u003c/i\u003eVideo Analysis\u003c/h5\u003e\n                \u003csmall class=\"text-muted\"\u003eAI-powered emotion and microexpression detection\u003c/small\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"video-container mb-3\" style=\"height: 300px;\"\u003e\n                    \u003cvideo id=\"videoElement\" width=\"100%\" height=\"100%\" style=\"object-fit: cover;\" muted\u003e\u003c/video\u003e\n                    \u003cdiv class=\"emotion-overlay\" id=\"emotionOverlay\"\u003e\n                        \u003cdiv\u003eEmotion: \u003cspan id=\"currentEmotion\"\u003eNot detected\u003c/span\u003e\u003c/div\u003e\n                        \u003cdiv\u003eConfidence: \u003cspan id=\"emotionConfidence\"\u003e0%\u003c/span\u003e\u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003c!-- Emotion Chart --\u003e\n                \u003ccanvas id=\"emotionChart\" width=\"400\" height=\"200\"\u003e\u003c/canvas\u003e\n                \n                \u003c!-- Video Controls --\u003e\n                \u003cdiv class=\"mt-3\"\u003e\n                    \u003cbutton class=\"btn btn-primary btn-sm\" id=\"startVideo\"\u003e\n                        \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart Video\n                    \u003c/button\u003e\n                    \u003cbutton class=\"btn btn-secondary btn-sm\" id=\"stopVideo\" disabled\u003e\n                        \u003ci class=\"fas fa-stop me-1\"\u003e\u003c/i\u003eStop Video\n                    \u003c/button\u003e\n                    \u003cdiv class=\"form-check form-switch mt-2\"\u003e\n                        \u003cinput class=\"form-check-input\" type=\"checkbox\" id=\"enableMicroexpression\"\u003e\n                        \u003clabel class=\"form-check-label\" for=\"enableMicroexpression\"\u003e\n                            Enable Microexpression Analysis\n                        \u003c/label\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Biometric Monitoring --\u003e\n    \u003cdiv class=\"col-lg-6\"\u003e\n        \u003cdiv class=\"card h-100\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-heartbeat me-2\"\u003e\u003c/i\u003eBiometric Monitoring\u003c/h5\u003e\n                \u003csmall class=\"text-muted\"\u003eReal-time health data integration\u003c/small\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003c!-- Biometric Status --\u003e\n                \u003cdiv class=\"row g-3 mb-4\"\u003e\n                    \u003cdiv class=\"col-6\"\u003e\n                        \u003cdiv class=\"card bg-dark border-0\"\u003e\n                            \u003cdiv class=\"card-body text-center py-2\"\u003e\n                                \u003cdiv class=\"d-flex align-items-center justify-content-center\"\u003e\n                                    \u003cspan class=\"biometric-indicator status-normal\" id=\"hrStatus\"\u003e\u003c/span\u003e\n                                    \u003cdiv\u003e\n                                        \u003cdiv class=\"h4 mb-0\" id=\"heartRate\"\u003e--\u003c/div\u003e\n                                        \u003csmall class=\"text-muted\"\u003eHeart Rate\u003c/small\u003e\n                                    \u003c/div\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-6\"\u003e\n                        \u003cdiv class=\"card bg-dark border-0\"\u003e\n                            \u003cdiv class=\"card-body text-center py-2\"\u003e\n                                \u003cdiv class=\"d-flex align-items-center justify-content-center\"\u003e\n                                    \u003cspan class=\"biometric-indicator status-normal\" id=\"stressStatus\"\u003e\u003c/span\u003e\n                                    \u003cdiv\u003e\n                                        \u003cdiv class=\"h4 mb-0\" id=\"stressLevel\"\u003e--\u003c/div\u003e\n                                        \u003csmall class=\"text-muted\"\u003eStress Level\u003c/small\u003e\n                                    \u003c/div\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003c!-- Biometric Chart --\u003e\n                \u003ccanvas id=\"biometricChart\" width=\"400\" height=\"150\"\u003e\u003c/canvas\u003e\n\n                \u003c!-- Biometric Recommendations --\u003e\n                \u003cdiv class=\"mt-3\" id=\"biometricRecommendations\"\u003e\n                    \u003ch6\u003eCurrent Recommendations:\u003c/h6\u003e\n                    \u003cul class=\"list-unstyled\" id=\"recommendationsList\"\u003e\n                        \u003cli class=\"text-muted\"\u003eConnect a wearable device to see recommendations\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Therapy Session Interface --\u003e\n\u003cdiv class=\"row mt-4\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-comments me-2\"\u003e\u003c/i\u003eTherapy Session\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cform id=\"therapyForm\"\u003e\n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel for=\"patientName\" class=\"form-label\"\u003eYour Name\u003c/label\u003e\n                        \u003cinput type=\"text\" class=\"form-control\" id=\"patientName\" required\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel for=\"sessionInput\" class=\"form-label\"\u003eWhat would you like to discuss today?\u003c/label\u003e\n                        \u003ctextarea class=\"form-control\" id=\"sessionInput\" rows=\"4\" \n                                placeholder=\"Share your thoughts, feelings, or concerns...\" required\u003e\u003c/textarea\u003e\n                        \u003cdiv class=\"form-text\"\u003e\n                            Your input will be analyzed with AI along with video and biometric data for comprehensive support.\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"row g-3 mb-3\"\u003e\n                        \u003cdiv class=\"col-md-6\"\u003e\n                            \u003clabel for=\"moodBefore\" class=\"form-label\"\u003eMood Before Session (1-10)\u003c/label\u003e\n                            \u003cinput type=\"range\" class=\"form-range\" id=\"moodBefore\" min=\"1\" max=\"10\" value=\"5\"\u003e\n                            \u003cdiv class=\"d-flex justify-content-between\"\u003e\n                                \u003csmall\u003eVery Low\u003c/small\u003e\n                                \u003csmall id=\"moodBeforeValue\"\u003e5\u003c/small\u003e\n                                \u003csmall\u003eVery High\u003c/small\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"col-md-6\"\u003e\n                            \u003clabel for=\"sessionGoal\" class=\"form-label\"\u003eSession Goal\u003c/label\u003e\n                            \u003cselect class=\"form-select\" id=\"sessionGoal\"\u003e\n                                \u003coption value=\"general\"\u003eGeneral Support\u003c/option\u003e\n                                \u003coption value=\"anxiety\"\u003eAnxiety Relief\u003c/option\u003e\n                                \u003coption value=\"depression\"\u003eDepression Support\u003c/option\u003e\n                                \u003coption value=\"stress\"\u003eStress Management\u003c/option\u003e\n                                \u003coption value=\"trauma\"\u003eTrauma Processing\u003c/option\u003e\n                                \u003coption value=\"relationships\"\u003eRelationship Issues\u003c/option\u003e\n                                \u003coption value=\"self_esteem\"\u003eSelf-Esteem\u003c/option\u003e\n                            \u003c/select\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"d-grid\"\u003e\n                        \u003cbutton type=\"submit\" class=\"btn btn-primary btn-lg\"\u003e\n                            \u003ci class=\"fas fa-paper-plane me-2\"\u003e\u003c/i\u003eStart AI Analysis\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- AI Response and Analysis --\u003e\n\u003cdiv class=\"row mt-4\" id=\"responseSection\" style=\"display: none;\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card border-primary\"\u003e\n            \u003cdiv class=\"card-header bg-primary text-white\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-robot me-2\"\u003e\u003c/i\u003eAI Therapist Analysis\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv id=\"aiResponse\"\u003e\u003c/div\u003e\n                \n                \u003c!-- Multi-modal Analysis Results --\u003e\n                \u003cdiv class=\"row g-3 mt-3\" id=\"analysisResults\"\u003e\n                    \u003c!-- Will be populated by JavaScript --\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Personalized Exercises --\u003e\n\u003cdiv class=\"row mt-4\" id=\"exercisesSection\" style=\"display: none;\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card border-success\"\u003e\n            \u003cdiv class=\"card-header bg-success text-white\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-dumbbell me-2\"\u003e\u003c/i\u003ePersonalized Exercises\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv id=\"exercisesList\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Health Alerts --\u003e\n\u003cdiv class=\"row mt-4\" id=\"alertsSection\" style=\"display: none;\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card border-warning\"\u003e\n            \u003cdiv class=\"card-header bg-warning text-dark\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-exclamation-triangle me-2\"\u003e\u003c/i\u003eHealth \u0026 Safety Alerts\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv id=\"healthAlerts\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003c!-- Speaking Avatar Integration --\u003e\n\u003cscript src=\"{{ url_for('static', filename='js/speaking-avatar.js') }}\"\u003e\u003c/script\u003e\n\u003c!-- Future integration points for external libraries --\u003e\n\u003c!-- \u003cscript src=\"{{ url_for('static', filename='js/video-processing.js') }}\"\u003e\u003c/script\u003e --\u003e\n\u003c!-- \u003cscript src=\"{{ url_for('static', filename='js/biometric-integration.js') }}\"\u003e\u003c/script\u003e --\u003e\n\u003c!-- \u003cscript src=\"{{ url_for('static', filename='js/real-time-analysis.js') }}\"\u003e\u003c/script\u003e --\u003e\n\n\u003cscript\u003e\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize Speaking Avatar\n    const speakingAvatar = new SpeakingAvatar();\n    speakingAvatar.setPersonality('compassionate');\n\n    // Video Analysis Integration\n    const videoProcessor = {\n        active: false,\n        isActive() { return this.active; },\n        async getCurrentFrame() { \n            // Placeholder for future video frame capture\n            return null;\n        },\n        start() {\n            this.active = true;\n            console.log('Video analysis started');\n        },\n        stop() {\n            this.active = false;\n            console.log('Video analysis stopped');\n        }\n    };\n\n    // Biometric Integration  \n    const biometricIntegrator = {\n        connected: false,\n        isConnected() { return this.connected; },\n        getCurrentData() {\n            // Placeholder for future biometric data integration\n            return null;\n        },\n        connect() {\n            this.connected = true;\n            console.log('Biometric devices connected');\n        },\n        disconnect() {\n            this.connected = false;\n            console.log('Biometric devices disconnected');\n        }\n    };\n\n    // Mood slider\n    const moodSlider = document.getElementById('moodBefore');\n    const moodValue = document.getElementById('moodBeforeValue');\n    moodSlider.addEventListener('input', function() {\n        moodValue.textContent = this.value;\n    });\n\n    // Form submission\n    const therapyForm = document.getElementById('therapyForm');\n    therapyForm.addEventListener('submit', async function(e) {\n        e.preventDefault();\n        \n        const formData = {\n            name: document.getElementById('patientName').value,\n            input: document.getElementById('sessionInput').value,\n            mood_before: document.getElementById('moodBefore').value,\n            session_goal: document.getElementById('sessionGoal').value,\n            session_type: 'individual'\n        };\n\n        // Show loading state\n        const submitBtn = this.querySelector('button[type=\"submit\"]');\n        const originalText = submitBtn.innerHTML;\n        submitBtn.innerHTML = '\u003ci class=\"fas fa-spinner fa-spin me-2\"\u003e\u003c/i\u003eAnalyzing...';\n        submitBtn.disabled = true;\n\n        try {\n            // Start comprehensive analysis\n            await processTherapySession(formData);\n        } catch (error) {\n            console.error('Therapy session error:', error);\n            alert('An error occurred during analysis. Please try again.');\n        } finally {\n            submitBtn.innerHTML = originalText;\n            submitBtn.disabled = false;\n        }\n    });\n\n    async function processTherapySession(formData) {\n        // Prepare therapy session data\n        const sessionData = {\n            message: formData.input,\n            session_type: formData.session_type,\n            patient_name: formData.name,\n            mood_score: parseInt(formData.mood_before),\n            context: {\n                session_goal: formData.session_goal,\n                video_enabled: videoProcessor.isActive(),\n                biometric_enabled: biometricIntegrator.isConnected()\n            }\n        };\n\n        // Get current video frame if available\n        if (videoProcessor.isActive()) {\n            sessionData.context.current_frame = await videoProcessor.getCurrentFrame();\n        }\n\n        // Get current biometric data if available\n        if (biometricIntegrator.isConnected()) {\n            sessionData.context.biometric_data = biometricIntegrator.getCurrentData();\n        }\n\n        // Send to therapy session endpoint\n        const response = await fetch('/api/therapy-session', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(sessionData)\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const result = await response.json();\n        displayAnalysisResults(result, formData);\n    }\n\n    function displayAnalysisResults(result, formData) {\n        // Check if request was successful\n        if (!result.success) {\n            document.getElementById('aiResponse').innerHTML = `\n                \u003cdiv class=\"alert alert-danger\"\u003e\n                    \u003ch6\u003eError:\u003c/h6\u003e\n                    \u003cp\u003e${result.error || 'An error occurred during the session.'}\u003c/p\u003e\n                    ${result.fallback_response ? `\u003chr\u003e\u003cp\u003e\u003cstrong\u003eFallback Response:\u003c/strong\u003e ${result.fallback_response}\u003c/p\u003e` : ''}\n                \u003c/div\u003e\n            `;\n            return;\n        }\n\n        // Display AI therapist response\n        document.getElementById('aiResponse').innerHTML = `\n            \u003cdiv class=\"alert alert-info\"\u003e\n                \u003ch6\u003e\u003ci class=\"fas fa-robot me-2\"\u003e\u003c/i\u003eAI Therapist Response:\u003c/h6\u003e\n                \u003cp\u003e${result.response}\u003c/p\u003e\n                ${result.session_id ? `\u003csmall class=\"text-muted\"\u003eSession ID: ${result.session_id}\u003c/small\u003e` : ''}\n            \u003c/div\u003e\n        `;\n\n        // Have the speaking avatar speak the response\n        if (speakingAvatar \u0026\u0026 result.response) {\n            speakingAvatar.speak(result.response);\n        }\n\n        // Display multi-modal analysis\n        const analysisResults = document.getElementById('analysisResults');\n        let analysisHtml = '';\n\n        // Mood Analysis\n        if (result.mood_analysis) {\n            const mood = result.mood_analysis.mood || 'neutral';\n            const intensity = result.mood_analysis.intensity || 5;\n            const moodColor = mood === 'positive' ? 'success' : mood === 'negative' ? 'warning' : 'info';\n            \n            analysisHtml += `\n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003cdiv class=\"card bg-dark border-0\"\u003e\n                        \u003cdiv class=\"card-body text-center\"\u003e\n                            \u003ci class=\"fas fa-heart fa-2x text-${moodColor} mb-2\"\u003e\u003c/i\u003e\n                            \u003ch6\u003eMood Analysis\u003c/h6\u003e\n                            \u003cp class=\"mb-0 text-${moodColor}\"\u003e${mood.charAt(0).toUpperCase() + mood.slice(1)}\u003c/p\u003e\n                            \u003csmall class=\"text-muted\"\u003eIntensity: ${intensity}/10\u003c/small\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            `;\n        }\n\n        // Crisis Risk Level\n        const riskColor = result.crisis_level === 'high' ? 'danger' : \n                        result.crisis_level === 'medium' ? 'warning' : 'success';\n        analysisHtml += `\n            \u003cdiv class=\"col-md-4\"\u003e\n                \u003cdiv class=\"card bg-dark border-0\"\u003e\n                    \u003cdiv class=\"card-body text-center\"\u003e\n                        \u003ci class=\"fas fa-shield-alt fa-2x text-${riskColor} mb-2\"\u003e\u003c/i\u003e\n                        \u003ch6\u003eCrisis Level\u003c/h6\u003e\n                        \u003cp class=\"mb-0 text-${riskColor}\"\u003e${result.crisis_level || 'Low'}\u003c/p\u003e\n                        \u003csmall class=\"text-muted\"\u003eAssessment: Complete\u003c/small\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            `;\n        }\n\n        // Recommendations\n        if (result.recommendations \u0026\u0026 result.recommendations.length \u003e 0) {\n            analysisHtml += `\n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003cdiv class=\"card bg-dark border-0\"\u003e\n                        \u003cdiv class=\"card-body text-center\"\u003e\n                            \u003ci class=\"fas fa-lightbulb fa-2x text-warning mb-2\"\u003e\u003c/i\u003e\n                            \u003ch6\u003eRecommendations\u003c/h6\u003e\n                            \u003cp class=\"mb-0\"\u003e${result.recommendations[0] || 'Continue current approach'}\u003c/p\u003e\n                            \u003csmall class=\"text-muted\"\u003e${result.recommendations.length} total suggestions\u003c/small\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            `;\n        }\n\n        analysisResults.innerHTML = analysisHtml;\n\n        // Display recommendations as exercises\n        if (result.recommendations \u0026\u0026 result.recommendations.length \u003e 0) {\n            displayRecommendations(result.recommendations);\n        }\n\n        // Display next steps\n        if (result.next_steps \u0026\u0026 result.next_steps.length \u003e 0) {\n            displayNextSteps(result.next_steps);\n        }\n\n        // Show all sections\n        document.getElementById('responseSection').style.display = 'block';\n        if (result.recommendations \u0026\u0026 result.recommendations.length \u003e 0) {\n            document.getElementById('exercisesSection').style.display = 'block';\n        }\n        \n        // Show crisis alerts if high risk\n        if (result.crisis_level === 'high' || result.crisis_level === 'critical') {\n            displayCrisisAlert(result.crisis_level);\n        }\n    }\n\n    function displayRecommendations(recommendations) {\n        const exercisesList = document.getElementById('exercisesList');\n        let exercisesHtml = '\u003ch6 class=\"mb-3\"\u003e\u003ci class=\"fas fa-lightbulb me-2\"\u003e\u003c/i\u003eTherapeutic Recommendations\u003c/h6\u003e';\n\n        recommendations.forEach((recommendation, index) =\u003e {\n            exercisesHtml += `\n                \u003cdiv class=\"card mb-3 bg-dark border-warning\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cdiv class=\"d-flex align-items-center\"\u003e\n                            \u003cdiv class=\"me-3\"\u003e\n                                \u003cspan class=\"badge bg-warning text-dark\"\u003e${index + 1}\u003c/span\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"flex-grow-1\"\u003e\n                                \u003cp class=\"mb-0\"\u003e${recommendation}\u003c/p\u003e\n                            \u003c/div\u003e\n                            \u003cdiv\u003e\n                                \u003cbutton class=\"btn btn-sm btn-outline-warning\" onclick=\"markCompleted(${index})\"\u003e\n                                    \u003ci class=\"fas fa-check\"\u003e\u003c/i\u003e\n                                \u003c/button\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            `;\n        });\n\n        exercisesList.innerHTML = exercisesHtml;\n    }\n\n    function displayNextSteps(nextSteps) {\n        // Add next steps to exercises section if it exists\n        const exercisesList = document.getElementById('exercisesList');\n        if (exercisesList \u0026\u0026 nextSteps.length \u003e 0) {\n            let nextStepsHtml = '\u003ch6 class=\"mt-4 mb-3\"\u003e\u003ci class=\"fas fa-arrow-right me-2\"\u003e\u003c/i\u003eNext Steps\u003c/h6\u003e';\n            \n            nextSteps.forEach((step, index) =\u003e {\n                nextStepsHtml += `\n                    \u003cdiv class=\"card mb-2 bg-dark border-info\"\u003e\n                        \u003cdiv class=\"card-body py-2\"\u003e\n                            \u003cdiv class=\"d-flex align-items-center\"\u003e\n                                \u003cdiv class=\"me-3\"\u003e\n                                    \u003ci class=\"fas fa-step-forward text-info\"\u003e\u003c/i\u003e\n                                \u003c/div\u003e\n                                \u003cdiv class=\"flex-grow-1\"\u003e\n                                    \u003csmall\u003e${step}\u003c/small\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                `;\n            });\n            \n            exercisesList.innerHTML += nextStepsHtml;\n        }\n    }\n\n    function displayCrisisAlert(crisisLevel) {\n        const alertsSection = document.getElementById('alertsSection');\n        if (alertsSection) {\n            const alertColor = crisisLevel === 'critical' ? 'danger' : 'warning';\n            document.getElementById('healthAlerts').innerHTML = `\n                \u003cdiv class=\"alert alert-${alertColor}\"\u003e\n                    \u003ch6\u003e\u003ci class=\"fas fa-exclamation-triangle me-2\"\u003e\u003c/i\u003eCrisis Alert\u003c/h6\u003e\n                    \u003cp\u003e\u003cstrong\u003e${crisisLevel.toUpperCase()} risk level detected.\u003c/strong\u003e\u003c/p\u003e\n                    \u003cp\u003ePlease consider reaching out for immediate support:\u003c/p\u003e\n                    \u003cul\u003e\n                        \u003cli\u003eLifeline Australia: \u003cstrong\u003e13 11 14\u003c/strong\u003e\u003c/li\u003e\n                        \u003cli\u003eCrisis Text Line: \u003cstrong\u003e0477 13 11 14\u003c/strong\u003e\u003c/li\u003e\n                        \u003cli\u003eEmergency Services: \u003cstrong\u003e000\u003c/strong\u003e\u003c/li\u003e\n                        \u003cli\u003eBeyond Blue: \u003cstrong\u003e1300 22 4636\u003c/strong\u003e\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            `;\n            alertsSection.style.display = 'block';\n        }\n    }\n\n    function markCompleted(index) {\n        event.target.innerHTML = '\u003ci class=\"fas fa-check-circle\"\u003e\u003c/i\u003e';\n        event.target.className = 'btn btn-sm btn-success';\n        event.target.disabled = true;\n                            \u003cstrong\u003eInstructions:\u003c/strong\u003e\n                            \u003col class=\"mt-2\"\u003e\n                                ${exercise.instructions.map(step =\u003e `\u003cli\u003e${step}\u003c/li\u003e`).join('')}\n                            \u003c/ol\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                            \u003cdiv\u003e\n                                \u003cstrong\u003eBenefits:\u003c/strong\u003e ${exercise.benefits ? exercise.benefits.join(', ') : 'General wellness'}\n                            \u003c/div\u003e\n                            \u003cbutton class=\"btn btn-success btn-sm\" onclick=\"startExercise(${index})\"\u003e\n                                \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart Exercise\n                            \u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            `;\n        });\n\n        exercisesList.innerHTML = exercisesHtml;\n    }\n\n    function displayHealthAlerts(alerts) {\n        const healthAlerts = document.getElementById('healthAlerts');\n        let alertsHtml = '';\n\n        alerts.forEach(alert =\u003e {\n            const alertClass = alert.severity === 'critical' ? 'danger' : \n                             alert.severity === 'high' ? 'warning' : 'info';\n            alertsHtml += `\n                \u003cdiv class=\"alert alert-${alertClass}\"\u003e\n                    \u003ch6\u003e\u003ci class=\"fas fa-exclamation-triangle me-2\"\u003e\u003c/i\u003e${alert.message}\u003c/h6\u003e\n                    ${alert.action ? `\u003cp class=\"mb-2\"\u003e\u003cstrong\u003eRecommended Action:\u003c/strong\u003e ${alert.action}\u003c/p\u003e` : ''}\n                    ${alert.resources ? `\n                        \u003cdiv class=\"mt-2\"\u003e\n                            \u003cstrong\u003eResources:\u003c/strong\u003e\n                            \u003cul class=\"mb-0\"\u003e\n                                ${alert.resources.map(resource =\u003e `\n                                    \u003cli\u003e${resource.name}: ${resource.contact}\u003c/li\u003e\n                                `).join('')}\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    ` : ''}\n                \u003c/div\u003e\n            `;\n        });\n\n        healthAlerts.innerHTML = alertsHtml;\n    }\n\n    // Global function for exercise interaction\n    window.startExercise = function(index) {\n        // Implementation for starting guided exercises\n        console.log('Starting exercise:', index);\n        // This would integrate with a guided exercise system\n    };\n});\n\u003c/script\u003e\n{% endblock %}\n",
                "login.html": "{% extends \"base.html\" %}\n\n{% block title %}Sign In to Mind Mend{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"login-container\"\u003e\n    \u003cdiv class=\"login-card\"\u003e\n        \u003c!-- Logo and Header --\u003e\n        \u003cdiv class=\"login-header\"\u003e\n            \u003cdiv class=\"logo-section\"\u003e\n                \u003cimg src=\"{{ url_for('static', filename='logos/mindmend_logo_4.svg') }}\" alt=\"Mind Mend\" class=\"login-logo\"\u003e\n                \u003ch2\u003eWelcome Back\u003c/h2\u003e\n                \u003cp\u003eSign in to continue your mental health journey\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Login Form --\u003e\n        \u003cdiv class=\"login-form\"\u003e\n            {% if error %}\n            \u003cdiv class=\"error-message\"\u003e\n                \u003ci class=\"fas fa-exclamation-triangle\"\u003e\u003c/i\u003e\n                {{ error }}\n            \u003c/div\u003e\n            {% endif %}\n\n            \u003cform method=\"POST\" action=\"{{ url_for('login') }}\"\u003e\n                \u003cinput type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token }}\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003clabel for=\"email\"\u003eEmail Address\u003c/label\u003e\n                    \u003cinput type=\"email\" id=\"email\" name=\"email\" required value=\"{{ request.form.email or '' }}\"\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv class=\"form-group\"\u003e\n                    \u003clabel for=\"password\"\u003ePassword\u003c/label\u003e\n                    \u003cdiv class=\"password-input\"\u003e\n                        \u003cinput type=\"password\" id=\"password\" name=\"password\" required\u003e\n                        \u003cbutton type=\"button\" class=\"password-toggle\" onclick=\"togglePassword()\"\u003e\n                            \u003ci class=\"fas fa-eye\" id=\"passwordIcon\"\u003e\u003c/i\u003e\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv class=\"form-options\"\u003e\n                    \u003clabel class=\"remember-me\"\u003e\n                        \u003cinput type=\"checkbox\" name=\"remember\"\u003e\n                        \u003cspan class=\"checkmark\"\u003e\u003c/span\u003e\n                        Remember me\n                    \u003c/label\u003e\n                    \u003ca href=\"{{ url_for('forgot_password') }}\" class=\"forgot-password\"\u003eForgot password?\u003c/a\u003e\n                \u003c/div\u003e\n                \n                \u003cbutton type=\"submit\" class=\"login-btn\"\u003e\n                    \u003ci class=\"fas fa-sign-in-alt\"\u003e\u003c/i\u003e\n                    Sign In\n                \u003c/button\u003e\n            \u003c/form\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Social Login --\u003e\n        \u003cdiv class=\"social-login\"\u003e\n            \u003cdiv class=\"divider\"\u003e\n                \u003cspan\u003eOr continue with\u003c/span\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"social-buttons\"\u003e\n                \u003ca href=\"{{ url_for('oauth.oauth_login', provider='google') }}\" class=\"social-btn google\"\u003e\n                    \u003ci class=\"fab fa-google\"\u003e\u003c/i\u003e\n                    Google\n                \u003c/a\u003e\n                \u003ca href=\"{{ url_for('oauth.oauth_login', provider='facebook') }}\" class=\"social-btn facebook\" style=\"color: #1877f2;\"\u003e\n                    \u003ci class=\"fab fa-facebook\"\u003e\u003c/i\u003e\n                    Facebook\n                \u003c/a\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"social-buttons\" style=\"margin-top: 0.5rem;\"\u003e\n                \u003ca href=\"{{ url_for('oauth.oauth_login', provider='microsoft') }}\" class=\"social-btn microsoft\" style=\"color: #0078d4;\"\u003e\n                    \u003ci class=\"fab fa-microsoft\"\u003e\u003c/i\u003e\n                    Microsoft\n                \u003c/a\u003e\n                \u003ca href=\"{{ url_for('oauth.oauth_login', provider='apple') }}\" class=\"social-btn apple\"\u003e\n                    \u003ci class=\"fab fa-apple\"\u003e\u003c/i\u003e\n                    Apple\n                \u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Registration Link --\u003e\n        \u003cdiv class=\"registration-link\"\u003e\n            \u003cdiv class=\"divider\"\u003e\n                \u003cspan\u003eNew to Mind Mend?\u003c/span\u003e\n            \u003c/div\u003e\n            \u003ca href=\"{{ url_for('register') }}\" class=\"register-link\"\u003e\n                \u003ci class=\"fas fa-user-plus\"\u003e\u003c/i\u003e\n                Create Account\n            \u003c/a\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Quick Access --\u003e\n    \u003cdiv class=\"quick-access\"\u003e\n        \u003ch3\u003eQuick Access\u003c/h3\u003e\n        \u003cdiv class=\"quick-buttons\"\u003e\n            \u003ca href=\"{{ url_for('onboarding') }}\" class=\"quick-btn\"\u003e\n                \u003ci class=\"fas fa-graduation-cap\"\u003e\u003c/i\u003e\n                \u003cspan\u003ePlatform Tour\u003c/span\u003e\n            \u003c/a\u003e\n            \u003ca href=\"{{ url_for('video_assess') }}\" class=\"quick-btn\"\u003e\n                \u003ci class=\"fas fa-video\"\u003e\u003c/i\u003e\n                \u003cspan\u003eVideo Assessment\u003c/span\u003e\n            \u003c/a\u003e\n            \u003ca href=\"/crisis-support\" class=\"quick-btn crisis\"\u003e\n                \u003ci class=\"fas fa-phone\"\u003e\u003c/i\u003e\n                \u003cspan\u003eCrisis Support\u003c/span\u003e\n            \u003c/a\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Crisis Support Banner --\u003e\n    \u003cdiv class=\"crisis-banner\"\u003e\n        \u003ci class=\"fas fa-phone\"\u003e\u003c/i\u003e\n        \u003cspan\u003eNeed immediate help? \u003cstrong\u003eLifeline Australia: 13 11 14\u003c/strong\u003e\u003c/span\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block styles %}\n\u003cstyle\u003e\n.login-container {\n    min-height: 100vh;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 2rem;\n    gap: 2rem;\n}\n\n.login-card {\n    background: white;\n    border-radius: 20px;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);\n    max-width: 400px;\n    width: 100%;\n    overflow: hidden;\n    animation: slideUp 0.6s ease;\n}\n\n.login-header {\n    background: linear-gradient(135deg, #4CAF50, #45a049);\n    color: white;\n    padding: 2rem;\n    text-align: center;\n}\n\n.login-logo {\n    height: 60px;\n    margin-bottom: 1rem;\n    filter: brightness(0) invert(1);\n}\n\n.login-header h2 {\n    margin: 0 0 0.5rem 0;\n    font-size: 2rem;\n    font-weight: 700;\n}\n\n.login-header p {\n    margin: 0;\n    opacity: 0.9;\n    font-size: 1.1rem;\n}\n\n.login-form {\n    padding: 2rem;\n}\n\n.error-message {\n    background: rgba(244, 67, 54, 0.1);\n    color: #f44336;\n    padding: 1rem;\n    border-radius: 8px;\n    margin-bottom: 1.5rem;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.form-group {\n    margin-bottom: 1.5rem;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 0.5rem;\n    color: #333;\n    font-weight: 600;\n}\n\n.form-group input {\n    width: 100%;\n    padding: 0.75rem;\n    border: 2px solid #e0e0e0;\n    border-radius: 10px;\n    font-size: 1rem;\n    transition: all 0.3s ease;\n    box-sizing: border-box;\n}\n\n.form-group input:focus {\n    outline: none;\n    border-color: #4CAF50;\n    box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);\n}\n\n.password-input {\n    position: relative;\n}\n\n.password-toggle {\n    position: absolute;\n    right: 0.75rem;\n    top: 50%;\n    transform: translateY(-50%);\n    background: none;\n    border: none;\n    color: #666;\n    cursor: pointer;\n    padding: 0.25rem;\n}\n\n.form-options {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1.5rem;\n}\n\n.remember-me {\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    font-size: 0.9rem;\n    color: #666;\n}\n\n.remember-me input[type=\"checkbox\"] {\n    width: auto;\n    margin-right: 0.5rem;\n    transform: scale(1.1);\n}\n\n.forgot-password {\n    color: #4CAF50;\n    text-decoration: none;\n    font-size: 0.9rem;\n    font-weight: 600;\n}\n\n.forgot-password:hover {\n    text-decoration: underline;\n}\n\n.login-btn {\n    width: 100%;\n    background: linear-gradient(135deg, #4CAF50, #45a049);\n    color: white;\n    border: none;\n    padding: 1rem;\n    border-radius: 10px;\n    font-size: 1.1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n.login-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);\n}\n\n.social-login {\n    padding: 1.5rem 2rem;\n    background: rgba(76, 175, 80, 0.02);\n    border-top: 1px solid #e0e0e0;\n}\n\n.divider {\n    text-align: center;\n    margin-bottom: 1rem;\n    color: #666;\n    font-size: 0.9rem;\n    position: relative;\n}\n\n.divider::before,\n.divider::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    width: 30%;\n    height: 1px;\n    background: #e0e0e0;\n}\n\n.divider::before {\n    left: 0;\n}\n\n.divider::after {\n    right: 0;\n}\n\n.social-buttons {\n    display: flex;\n    gap: 1rem;\n}\n\n.social-btn {\n    flex: 1;\n    background: white;\n    border: 2px solid #e0e0e0;\n    padding: 0.75rem;\n    border-radius: 10px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n.social-btn:hover {\n    border-color: #4CAF50;\n    transform: translateY(-1px);\n}\n\n.social-btn.google {\n    color: #db4437;\n}\n\n.social-btn.apple {\n    color: #000;\n}\n\n.registration-link {\n    padding: 1.5rem 2rem;\n    background: rgba(76, 175, 80, 0.05);\n    text-align: center;\n}\n\n.register-link {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n    color: #4CAF50;\n    text-decoration: none;\n    font-weight: 600;\n    padding: 0.75rem 1.5rem;\n    border-radius: 25px;\n    transition: all 0.3s ease;\n    border: 2px solid #4CAF50;\n}\n\n.register-link:hover {\n    background: #4CAF50;\n    color: white;\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);\n}\n\n.quick-access {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 20px;\n    padding: 2rem;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);\n    max-width: 300px;\n    width: 100%;\n}\n\n.quick-access h3 {\n    color: #333;\n    margin-bottom: 1.5rem;\n    text-align: center;\n    font-size: 1.3rem;\n}\n\n.quick-buttons {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.quick-btn {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    padding: 1rem;\n    background: white;\n    border: 2px solid #e0e0e0;\n    border-radius: 12px;\n    text-decoration: none;\n    color: #333;\n    transition: all 0.3s ease;\n    font-weight: 600;\n}\n\n.quick-btn:hover {\n    border-color: #4CAF50;\n    background: rgba(76, 175, 80, 0.05);\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.quick-btn.crisis {\n    border-color: #f44336;\n    color: #f44336;\n}\n\n.quick-btn.crisis:hover {\n    border-color: #f44336;\n    background: rgba(244, 67, 54, 0.05);\n}\n\n.quick-btn i {\n    font-size: 1.2rem;\n    width: 24px;\n    text-align: center;\n}\n\n.crisis-banner {\n    position: fixed;\n    bottom: 1rem;\n    left: 1rem;\n    right: 1rem;\n    background: #f44336;\n    color: white;\n    padding: 1rem;\n    border-radius: 10px;\n    text-align: center;\n    box-shadow: 0 4px 20px rgba(244, 67, 54, 0.3);\n    z-index: 1000;\n}\n\n.crisis-banner i {\n    margin-right: 0.5rem;\n}\n\n@keyframes slideUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .login-container {\n        flex-direction: column;\n        padding: 1rem;\n    }\n    \n    .login-card,\n    .quick-access {\n        max-width: 100%;\n    }\n    \n    .quick-access {\n        order: -1;\n        padding: 1.5rem;\n    }\n    \n    .quick-buttons {\n        flex-direction: row;\n        overflow-x: auto;\n        gap: 0.5rem;\n    }\n    \n    .quick-btn {\n        min-width: 120px;\n        flex-direction: column;\n        gap: 0.5rem;\n        text-align: center;\n    }\n    \n    .quick-btn span {\n        font-size: 0.8rem;\n    }\n    \n    .crisis-banner {\n        position: static;\n        margin-top: 1rem;\n    }\n}\n\u003c/style\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003cscript\u003e\nfunction togglePassword() {\n    const passwordInput = document.getElementById('password');\n    const passwordIcon = document.getElementById('passwordIcon');\n    \n    if (passwordInput.type === 'password') {\n        passwordInput.type = 'text';\n        passwordIcon.className = 'fas fa-eye-slash';\n    } else {\n        passwordInput.type = 'password';\n        passwordIcon.className = 'fas fa-eye';\n    }\n}\n\n// OAuth login functions now handled by server-side redirects\n\n// Add form validation\ndocument.addEventListener('DOMContentLoaded', function() {\n    const form = document.querySelector('form');\n    const emailInput = document.getElementById('email');\n    const passwordInput = document.getElementById('password');\n    \n    form.addEventListener('submit', function(e) {\n        let isValid = true;\n        \n        // Email validation\n        if (!emailInput.value.trim() || !emailInput.value.includes('@')) {\n            emailInput.style.borderColor = '#f44336';\n            isValid = false;\n        } else {\n            emailInput.style.borderColor = '#e0e0e0';\n        }\n        \n        // Password validation\n        if (!passwordInput.value.trim()) {\n            passwordInput.style.borderColor = '#f44336';\n            isValid = false;\n        } else {\n            passwordInput.style.borderColor = '#e0e0e0';\n        }\n        \n        if (!isValid) {\n            e.preventDefault();\n        }\n    });\n    \n    // Real-time validation feedback\n    emailInput.addEventListener('input', function() {\n        if (this.value.includes('@') \u0026\u0026 this.value.length \u003e 5) {\n            this.style.borderColor = '#4CAF50';\n        } else {\n            this.style.borderColor = '#e0e0e0';\n        }\n    });\n    \n    passwordInput.addEventListener('input', function() {\n        if (this.value.length \u003e= 6) {\n            this.style.borderColor = '#4CAF50';\n        } else {\n            this.style.borderColor = '#e0e0e0';\n        }\n    });\n});\n\u003c/script\u003e\n{% endblock %}\n",
                "logo_showcase.html": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eMind Mend - Logo Options\u003c/title\u003e\n    \u003clink href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\"\u003e\n    \u003cstyle\u003e\n        body {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        .logo-card {\n            background: rgba(255, 255, 255, 0.95);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            border: 1px solid rgba(255, 255, 255, 0.2);\n            padding: 2rem;\n            margin-bottom: 2rem;\n            transition: all 0.3s ease;\n            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n        }\n        \n        .logo-card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 15px 45px rgba(0, 0, 0, 0.2);\n        }\n        \n        .logo-container {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 120px;\n            background: #f8f9fa;\n            border-radius: 15px;\n            margin-bottom: 1rem;\n            padding: 1rem;\n        }\n        \n        .logo-title {\n            color: #2c3e50;\n            font-weight: 600;\n            margin-bottom: 0.5rem;\n        }\n        \n        .logo-description {\n            color: #6c757d;\n            font-size: 0.9rem;\n            margin-bottom: 1rem;\n        }\n        \n        .btn-select {\n            background: linear-gradient(45deg, #667eea, #764ba2);\n            border: none;\n            color: white;\n            border-radius: 10px;\n            padding: 0.5rem 1.5rem;\n            transition: all 0.3s ease;\n        }\n        \n        .btn-select:hover {\n            transform: scale(1.05);\n            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);\n        }\n        \n        .page-header {\n            text-align: center;\n            color: white;\n            margin-bottom: 3rem;\n        }\n        \n        .page-header h1 {\n            font-size: 3rem;\n            font-weight: 300;\n            margin-bottom: 0.5rem;\n        }\n        \n        .page-header p {\n            opacity: 0.9;\n            font-size: 1.1rem;\n        }\n        \n        .back-btn {\n            position: fixed;\n            top: 20px;\n            left: 20px;\n            background: rgba(255, 255, 255, 0.2);\n            backdrop-filter: blur(10px);\n            border: 1px solid rgba(255, 255, 255, 0.3);\n            color: white;\n            border-radius: 50px;\n            padding: 0.75rem 1.5rem;\n            text-decoration: none;\n            transition: all 0.3s ease;\n        }\n        \n        .back-btn:hover {\n            background: rgba(255, 255, 255, 0.3);\n            color: white;\n            text-decoration: none;\n        }\n        \n        .logo-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\n            gap: 2rem;\n        }\n        \n        @media (max-width: 768px) {\n            .logo-grid {\n                grid-template-columns: 1fr;\n            }\n            .page-header h1 {\n                font-size: 2rem;\n            }\n        }\n    \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003ca href=\"/\" class=\"back-btn\"\u003e\n        \u003ci class=\"fas fa-arrow-left me-2\"\u003e\u003c/i\u003eBack to Home\n    \u003c/a\u003e\n    \n    \u003cdiv class=\"container my-5 pt-4\"\u003e\n        \u003cdiv class=\"page-header\"\u003e\n            \u003ch1\u003eMind Mend Logo Options\u003c/h1\u003e\n            \u003cp\u003eChoose the perfect logo for your AI-powered mental health platform\u003c/p\u003e\n            \u003cdiv class=\"alert alert-success d-inline-block mt-3\"\u003e\n                \u003ci class=\"fas fa-check-circle me-2\"\u003e\u003c/i\u003e\n                \u003cstrong\u003eSelected:\u003c/strong\u003e Logo 4 - Growth \u0026 Healing is now the official Mind Mend logo!\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv class=\"logo-grid\"\u003e\n            \u003c!-- Logo Option 1: Brain + Neural Network --\u003e\n            \u003cdiv class=\"logo-card\"\u003e\n                \u003cdiv class=\"logo-container\"\u003e\n                    \u003cimg src=\"/static/logos/mindmend_logo_1.svg\" alt=\"Mind Mend Logo 1\" style=\"max-width: 100%; height: auto;\"\u003e\n                \u003c/div\u003e\n                \u003ch4 class=\"logo-title\"\u003eNeural Brain Design\u003c/h4\u003e\n                \u003cp class=\"logo-description\"\u003e\n                    Features a stylized brain with neural connections, emphasizing the AI and neuroscience aspects of mental health therapy. Clean and professional with purple gradients.\n                \u003c/p\u003e\n                \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                    \u003cspan class=\"badge bg-primary\"\u003eAI-Focused\u003c/span\u003e\n                    \u003cbutton class=\"btn btn-select\" onclick=\"selectLogo(1)\"\u003e\n                        \u003ci class=\"fas fa-check me-2\"\u003e\u003c/i\u003eSelect This Logo\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003c!-- Logo Option 2: Heart + Brain Fusion --\u003e\n            \u003cdiv class=\"logo-card\"\u003e\n                \u003cdiv class=\"logo-container\"\u003e\n                    \u003cimg src=\"/static/logos/mindmend_logo_2.svg\" alt=\"Mind Mend Logo 2\" style=\"max-width: 100%; height: auto;\"\u003e\n                \u003c/div\u003e\n                \u003ch4 class=\"logo-title\"\u003eHeart-Mind Fusion\u003c/h4\u003e\n                \u003cp class=\"logo-description\"\u003e\n                    Combines heart and brain elements with AI circuit patterns, representing the emotional and logical aspects of mental health care. Warm and approachable design.\n                \u003c/p\u003e\n                \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                    \u003cspan class=\"badge bg-success\"\u003eEmotional\u003c/span\u003e\n                    \u003cbutton class=\"btn btn-select\" onclick=\"selectLogo(2)\"\u003e\n                        \u003ci class=\"fas fa-check me-2\"\u003e\u003c/i\u003eSelect This Logo\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003c!-- Logo Option 3: Circuit Head --\u003e\n            \u003cdiv class=\"logo-card\"\u003e\n                \u003cdiv class=\"logo-container\"\u003e\n                    \u003cimg src=\"/static/logos/mindmend_logo_3.svg\" alt=\"Mind Mend Logo 3\" style=\"max-width: 100%; height: auto;\"\u003e\n                \u003c/div\u003e\n                \u003ch4 class=\"logo-title\"\u003eDigital Mind\u003c/h4\u003e\n                \u003cp class=\"logo-description\"\u003e\n                    Modern AI-focused design with a head silhouette filled with circuit patterns. Emphasizes the technological innovation and next-generation therapy approach.\n                \u003c/p\u003e\n                \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                    \u003cspan class=\"badge bg-info\"\u003eTech-Forward\u003c/span\u003e\n                    \u003cbutton class=\"btn btn-select\" onclick=\"selectLogo(3)\"\u003e\n                        \u003ci class=\"fas fa-check me-2\"\u003e\u003c/i\u003eSelect This Logo\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003c!-- Logo Option 4: Growth Leaf --\u003e\n            \u003cdiv class=\"logo-card\"\u003e\n                \u003cdiv class=\"logo-container\"\u003e\n                    \u003cimg src=\"/static/logos/mindmend_logo_4.svg\" alt=\"Mind Mend Logo 4\" style=\"max-width: 100%; height: auto;\"\u003e\n                \u003c/div\u003e\n                \u003ch4 class=\"logo-title\"\u003eGrowth \u0026 Healing\u003c/h4\u003e\n                \u003cp class=\"logo-description\"\u003e\n                    Nature-inspired leaf design with tech elements, symbolizing growth, healing, and natural mental wellness enhanced by AI technology. Organic and calming.\n                \u003c/p\u003e\n                \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                    \u003cspan class=\"badge bg-warning\"\u003eNatural\u003c/span\u003e\n                    \u003cbutton class=\"btn btn-select\" onclick=\"selectLogo(4)\"\u003e\n                        \u003ci class=\"fas fa-check me-2\"\u003e\u003c/i\u003eSelect This Logo\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003c!-- Logo Option 5: Modern Minimalist --\u003e\n            \u003cdiv class=\"logo-card\"\u003e\n                \u003cdiv class=\"logo-container\"\u003e\n                    \u003cimg src=\"/static/logos/mindmend_logo_5.svg\" alt=\"Mind Mend Logo 5\" style=\"max-width: 100%; height: auto;\"\u003e\n                \u003c/div\u003e\n                \u003ch4 class=\"logo-title\"\u003eMinimalist Professional\u003c/h4\u003e\n                \u003cp class=\"logo-description\"\u003e\n                    Clean, modern geometric design with sophisticated typography. Perfect for enterprise and professional healthcare settings. Emphasizes intelligence and reliability.\n                \u003c/p\u003e\n                \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                    \u003cspan class=\"badge bg-secondary\"\u003eProfessional\u003c/span\u003e\n                    \u003cbutton class=\"btn btn-select\" onclick=\"selectLogo(5)\"\u003e\n                        \u003ci class=\"fas fa-check me-2\"\u003e\u003c/i\u003eSelect This Logo\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv class=\"text-center mt-5\"\u003e\n            \u003cdiv class=\"card bg-white bg-opacity-90 d-inline-block px-4 py-3 rounded-pill\"\u003e\n                \u003cp class=\"mb-2 text-muted\"\u003e\n                    \u003ci class=\"fas fa-palette me-2\"\u003e\u003c/i\u003e\n                    All logos are available in SVG format for perfect scalability\n                \u003c/p\u003e\n                \u003ca href=\"/brand-guide\" class=\"btn btn-primary btn-sm\"\u003e\n                    \u003ci class=\"fas fa-book me-2\"\u003e\u003c/i\u003eView Brand Usage Guide\n                \u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cscript\u003e\n        function selectLogo(logoNumber) {\n            // Show selection confirmation\n            const buttons = document.querySelectorAll('.btn-select');\n            buttons.forEach(btn =\u003e {\n                btn.innerHTML = '\u003ci class=\"fas fa-check me-2\"\u003e\u003c/i\u003eSelect This Logo';\n                btn.classList.remove('btn-success');\n                btn.classList.add('btn-select');\n            });\n            \n            // Mark selected logo\n            event.target.innerHTML = '\u003ci class=\"fas fa-check-circle me-2\"\u003e\u003c/i\u003eSelected!';\n            event.target.classList.remove('btn-select');\n            event.target.classList.add('btn-success');\n            \n            // Store selection (you can add AJAX call here to save preference)\n            localStorage.setItem('selectedLogo', logoNumber);\n            \n            // Show toast notification\n            showToast(`Logo ${logoNumber} selected! This will be used across the platform.`);\n        }\n        \n        function showToast(message) {\n            const toast = document.createElement('div');\n            toast.className = 'position-fixed top-0 end-0 m-4 p-3 bg-success text-white rounded';\n            toast.style.zIndex = '9999';\n            toast.innerHTML = `\u003ci class=\"fas fa-check-circle me-2\"\u003e\u003c/i\u003e${message}`;\n            document.body.appendChild(toast);\n            \n            setTimeout(() =\u003e {\n                toast.remove();\n            }, 3000);\n        }\n        \n        // Load previous selection on page load\n        document.addEventListener('DOMContentLoaded', function() {\n            const selectedLogo = localStorage.getItem('selectedLogo');\n            if (selectedLogo) {\n                const buttons = document.querySelectorAll('.btn-select');\n                if (buttons[selectedLogo - 1]) {\n                    buttons[selectedLogo - 1].click();\n                }\n            }\n        });\n    \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e",
                "media_pack.html": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eMind Mend Media Pack - AI Counseling Platform\u003c/title\u003e\n    \n    \u003c!-- Bootstrap CSS --\u003e\n    \u003clink href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\u003e\n    \n    \u003c!-- Font Awesome --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\"\u003e\n    \n    \u003cstyle\u003e\n        body {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        }\n        \n        .hero-section {\n            text-align: center;\n            padding: 80px 0;\n            color: white;\n        }\n        \n        .hero-title {\n            font-size: 3.5rem;\n            font-weight: 800;\n            margin-bottom: 20px;\n            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n        }\n        \n        .hero-subtitle {\n            font-size: 1.5rem;\n            opacity: 0.9;\n            margin-bottom: 40px;\n        }\n        \n        .media-card {\n            background: rgba(255, 255, 255, 0.95);\n            border-radius: 20px;\n            padding: 40px;\n            margin-bottom: 30px;\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n            transition: transform 0.3s ease, box-shadow 0.3s ease;\n        }\n        \n        .media-card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);\n        }\n        \n        .media-icon {\n            width: 80px;\n            height: 80px;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            border-radius: 20px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-bottom: 20px;\n            font-size: 2rem;\n            color: white;\n        }\n        \n        .media-title {\n            color: #333;\n            font-size: 1.8rem;\n            font-weight: 700;\n            margin-bottom: 15px;\n        }\n        \n        .media-description {\n            color: #666;\n            font-size: 1.1rem;\n            line-height: 1.6;\n            margin-bottom: 25px;\n        }\n        \n        .download-btn {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            border: none;\n            padding: 12px 30px;\n            border-radius: 30px;\n            font-weight: 600;\n            transition: all 0.3s ease;\n            text-decoration: none;\n            display: inline-block;\n        }\n        \n        .download-btn:hover {\n            background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);\n            color: white;\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);\n        }\n        \n        .stats-section {\n            background: rgba(255, 255, 255, 0.1);\n            border-radius: 20px;\n            padding: 40px;\n            margin: 40px 0;\n            color: white;\n        }\n        \n        .stat-item {\n            text-align: center;\n            margin-bottom: 30px;\n        }\n        \n        .stat-value {\n            font-size: 2.5rem;\n            font-weight: 800;\n            display: block;\n        }\n        \n        .stat-label {\n            font-size: 1rem;\n            opacity: 0.8;\n        }\n        \n        .feature-list {\n            list-style: none;\n            padding: 0;\n        }\n        \n        .feature-list li {\n            padding: 10px 0;\n            color: #666;\n            font-size: 1.1rem;\n        }\n        \n        .feature-list i {\n            color: #667eea;\n            margin-right: 10px;\n        }\n        \n        .brand-colors {\n            display: flex;\n            gap: 20px;\n            margin: 20px 0;\n        }\n        \n        .color-box {\n            width: 100px;\n            height: 100px;\n            border-radius: 10px;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-size: 0.9rem;\n            font-weight: 600;\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n        }\n        \n        .footer-section {\n            text-align: center;\n            padding: 40px 0;\n            color: white;\n            opacity: 0.8;\n        }\n        \n        .back-to-top {\n            position: fixed;\n            bottom: 30px;\n            right: 30px;\n            background: rgba(255, 255, 255, 0.9);\n            color: #667eea;\n            width: 50px;\n            height: 50px;\n            border-radius: 50%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 1.5rem;\n            cursor: pointer;\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n            transition: all 0.3s ease;\n        }\n        \n        .back-to-top:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);\n        }\n    \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003c!-- Hero Section --\u003e\n        \u003csection class=\"hero-section\"\u003e\n            \u003ch1 class=\"hero-title\"\u003eMind Mend Media Pack\u003c/h1\u003e\n            \u003cp class=\"hero-subtitle\"\u003eYour AI Mental Health Counselor\u003c/p\u003e\n            \u003cp class=\"lead\"\u003eEverything you need to share the Mind Mend story - focused on our specialized AI counseling technology\u003c/p\u003e\n        \u003c/section\u003e\n        \n        \u003c!-- Stats Section --\u003e\n        \u003csection class=\"stats-section\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-3 col-6\"\u003e\n                    \u003cdiv class=\"stat-item\"\u003e\n                        \u003cspan class=\"stat-value\"\u003e7+\u003c/span\u003e\n                        \u003cspan class=\"stat-label\"\u003eSpecialized AI Counselors\u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-3 col-6\"\u003e\n                    \u003cdiv class=\"stat-item\"\u003e\n                        \u003cspan class=\"stat-value\"\u003e10+\u003c/span\u003e\n                        \u003cspan class=\"stat-label\"\u003eTherapy Modalities\u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-3 col-6\"\u003e\n                    \u003cdiv class=\"stat-item\"\u003e\n                        \u003cspan class=\"stat-value\"\u003e50K+\u003c/span\u003e\n                        \u003cspan class=\"stat-label\"\u003eSessions Completed\u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-3 col-6\"\u003e\n                    \u003cdiv class=\"stat-item\"\u003e\n                        \u003cspan class=\"stat-value\"\u003e4.8/5\u003c/span\u003e\n                        \u003cspan class=\"stat-label\"\u003eUser Rating\u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/section\u003e\n        \n        \u003c!-- Media Resources --\u003e\n        \u003csection class=\"media-resources\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003c!-- Executive Summary --\u003e\n                \u003cdiv class=\"col-lg-6\"\u003e\n                    \u003cdiv class=\"media-card\"\u003e\n                        \u003cdiv class=\"media-icon\"\u003e\n                            \u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch3 class=\"media-title\"\u003eExecutive Summary\u003c/h3\u003e\n                        \u003cp class=\"media-description\"\u003e\n                            Comprehensive overview of Mind Mend's AI counseling platform, including our specialized AI therapists, \n                            therapeutic approaches, and market opportunity. Perfect for investors and partners.\n                        \u003c/p\u003e\n                        \u003cul class=\"feature-list\"\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eCompany overview \u0026 mission\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eAI counselor specializations\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eMarket analysis \u0026 opportunity\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eCompetitive advantages\u003c/li\u003e\n                        \u003c/ul\u003e\n                        \u003ca href=\"/media/api/executive-summary\" class=\"download-btn\"\u003e\n                            \u003ci class=\"fas fa-download me-2\"\u003e\u003c/i\u003eDownload PDF\n                        \u003c/a\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003c!-- Pitch Deck --\u003e\n                \u003cdiv class=\"col-lg-6\"\u003e\n                    \u003cdiv class=\"media-card\"\u003e\n                        \u003cdiv class=\"media-icon\"\u003e\n                            \u003ci class=\"fas fa-presentation\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch3 class=\"media-title\"\u003ePitch Deck Outline\u003c/h3\u003e\n                        \u003cp class=\"media-description\"\u003e\n                            13-slide presentation structure highlighting our AI counseling technology, \n                            specialized therapy programs, and growth potential. Designed for investor meetings.\n                        \u003c/p\u003e\n                        \u003cul class=\"feature-list\"\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eProblem \u0026 solution slides\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eAI technology overview\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eBusiness model \u0026 projections\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eInvestment ask details\u003c/li\u003e\n                        \u003c/ul\u003e\n                        \u003cbutton class=\"download-btn\" onclick=\"viewPitchDeck()\"\u003e\n                            \u003ci class=\"fas fa-eye me-2\"\u003e\u003c/i\u003eView Outline\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003c!-- Fact Sheet --\u003e\n                \u003cdiv class=\"col-lg-6\"\u003e\n                    \u003cdiv class=\"media-card\"\u003e\n                        \u003cdiv class=\"media-icon\"\u003e\n                            \u003ci class=\"fas fa-info-circle\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch3 class=\"media-title\"\u003eCompany Fact Sheet\u003c/h3\u003e\n                        \u003cp class=\"media-description\"\u003e\n                            Quick reference document with key facts about our AI counseling platform, \n                            technology specifications, and impact metrics. Ideal for media and quick reference.\n                        \u003c/p\u003e\n                        \u003cul class=\"feature-list\"\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eAI counselor capabilities\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003ePlatform specifications\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eUser impact statistics\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eTechnology metrics\u003c/li\u003e\n                        \u003c/ul\u003e\n                        \u003cbutton class=\"download-btn\" onclick=\"viewFactSheet()\"\u003e\n                            \u003ci class=\"fas fa-chart-bar me-2\"\u003e\u003c/i\u003eView Facts\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003c!-- Press Release --\u003e\n                \u003cdiv class=\"col-lg-6\"\u003e\n                    \u003cdiv class=\"media-card\"\u003e\n                        \u003cdiv class=\"media-icon\"\u003e\n                            \u003ci class=\"fas fa-newspaper\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch3 class=\"media-title\"\u003ePress Release Template\u003c/h3\u003e\n                        \u003cp class=\"media-description\"\u003e\n                            Ready-to-use press release announcing Mind Mend's AI counseling platform, \n                            featuring our specialized AI therapists and evidence-based approaches.\n                        \u003c/p\u003e\n                        \u003cul class=\"feature-list\"\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eLaunch announcement\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eAI counselor highlights\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eExpert quotes included\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eCompany boilerplate\u003c/li\u003e\n                        \u003c/ul\u003e\n                        \u003cbutton class=\"download-btn\" onclick=\"viewPressRelease()\"\u003e\n                            \u003ci class=\"fas fa-file-lines me-2\"\u003e\u003c/i\u003eView Template\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003c!-- Brand Assets --\u003e\n                \u003cdiv class=\"col-lg-6\"\u003e\n                    \u003cdiv class=\"media-card\"\u003e\n                        \u003cdiv class=\"media-icon\"\u003e\n                            \u003ci class=\"fas fa-palette\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch3 class=\"media-title\"\u003eBrand Guidelines\u003c/h3\u003e\n                        \u003cp class=\"media-description\"\u003e\n                            Complete brand identity package including logo variations, color palette, \n                            typography, and usage guidelines for consistent representation.\n                        \u003c/p\u003e\n                        \u003cdiv class=\"brand-colors\"\u003e\n                            \u003cdiv class=\"color-box\" style=\"background: #667eea;\"\u003e\n                                #667eea\n                            \u003c/div\u003e\n                            \u003cdiv class=\"color-box\" style=\"background: #764ba2;\"\u003e\n                                #764ba2\n                            \u003c/div\u003e\n                            \u003cdiv class=\"color-box\" style=\"background: #3498db;\"\u003e\n                                #3498db\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cbutton class=\"download-btn\" onclick=\"viewBrandAssets()\"\u003e\n                            \u003ci class=\"fas fa-swatchbook me-2\"\u003e\u003c/i\u003eView Guidelines\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003c!-- Social Media Kit --\u003e\n                \u003cdiv class=\"col-lg-6\"\u003e\n                    \u003cdiv class=\"media-card\"\u003e\n                        \u003cdiv class=\"media-icon\"\u003e\n                            \u003ci class=\"fas fa-share-nodes\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch3 class=\"media-title\"\u003eSocial Media Kit\u003c/h3\u003e\n                        \u003cp class=\"media-description\"\u003e\n                            Pre-written social media posts, hashtags, and content templates for LinkedIn, \n                            Twitter/X, Instagram, and Facebook. Focus on AI counseling innovation.\n                        \u003c/p\u003e\n                        \u003cul class=\"feature-list\"\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003ePlatform-specific posts\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eAI counselor spotlights\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eEngagement hashtags\u003c/li\u003e\n                            \u003cli\u003e\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003eVisual guidelines\u003c/li\u003e\n                        \u003c/ul\u003e\n                        \u003cbutton class=\"download-btn\" onclick=\"viewSocialKit()\"\u003e\n                            \u003ci class=\"fas fa-hashtag me-2\"\u003e\u003c/i\u003eView Kit\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/section\u003e\n        \n        \u003c!-- Footer --\u003e\n        \u003cfooter class=\"footer-section\"\u003e\n            \u003cp\u003e\u0026copy; 2024 Mind Mend by Sticky Pty Ltd. All rights reserved.\u003c/p\u003e\n            \u003cp\u003eContact: media@mindmend.com.au | mindmend.com.au\u003c/p\u003e\n        \u003c/footer\u003e\n    \u003c/div\u003e\n    \n    \u003c!-- Back to Top --\u003e\n    \u003cdiv class=\"back-to-top\" onclick=\"window.scrollTo({top: 0, behavior: 'smooth'})\"\u003e\n        \u003ci class=\"fas fa-arrow-up\"\u003e\u003c/i\u003e\n    \u003c/div\u003e\n    \n    \u003c!-- Modals for viewing content --\u003e\n    \u003cdiv class=\"modal fade\" id=\"contentModal\" tabindex=\"-1\"\u003e\n        \u003cdiv class=\"modal-dialog modal-xl\"\u003e\n            \u003cdiv class=\"modal-content\"\u003e\n                \u003cdiv class=\"modal-header\"\u003e\n                    \u003ch5 class=\"modal-title\" id=\"modalTitle\"\u003eContent\u003c/h5\u003e\n                    \u003cbutton type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"\u003e\u003c/button\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"modal-body\" id=\"modalContent\"\u003e\n                    \u003c!-- Content will be loaded here --\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"modal-footer\"\u003e\n                    \u003cbutton type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\"\u003eClose\u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003c!-- Bootstrap JS --\u003e\n    \u003cscript src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"\u003e\u003c/script\u003e\n    \n    \u003cscript\u003e\n        const modal = new bootstrap.Modal(document.getElementById('contentModal'));\n        \n        function showModal(title, content) {\n            document.getElementById('modalTitle').textContent = title;\n            document.getElementById('modalContent').innerHTML = content;\n            modal.show();\n        }\n        \n        function viewPitchDeck() {\n            fetch('/media/api/pitch-deck')\n                .then(response =\u003e response.json())\n                .then(data =\u003e {\n                    let content = '\u003cdiv class=\"pitch-deck-outline\"\u003e';\n                    data.slides.forEach(slide =\u003e {\n                        content += `\n                            \u003cdiv class=\"mb-4 p-3 border rounded\"\u003e\n                                \u003ch5\u003eSlide ${slide.number}: ${slide.title}\u003c/h5\u003e\n                                \u003cp class=\"text-muted\"\u003e${slide.subtitle}\u003c/p\u003e\n                                \u003cul\u003e\n                                    ${slide.content.map(item =\u003e `\u003cli\u003e${item}\u003c/li\u003e`).join('')}\n                                \u003c/ul\u003e\n                                \u003cp\u003e\u003cem\u003eVisual: ${slide.visual}\u003c/em\u003e\u003c/p\u003e\n                            \u003c/div\u003e\n                        `;\n                    });\n                    content += '\u003c/div\u003e';\n                    showModal('Pitch Deck Outline', content);\n                });\n        }\n        \n        function viewFactSheet() {\n            fetch('/media/api/fact-sheet')\n                .then(response =\u003e response.json())\n                .then(data =\u003e {\n                    let content = '\u003cdiv class=\"fact-sheet\"\u003e';\n                    Object.entries(data).forEach(([category, facts]) =\u003e {\n                        content += `\u003ch5 class=\"mt-3\"\u003e${category.charAt(0).toUpperCase() + category.slice(1).replace('_', ' ')}\u003c/h5\u003e`;\n                        content += '\u003ctable class=\"table table-striped\"\u003e';\n                        Object.entries(facts).forEach(([key, value]) =\u003e {\n                            content += `\u003ctr\u003e\u003ctd\u003e${key.replace(/_/g, ' ').replace(/\\b\\w/g, l =\u003e l.toUpperCase())}\u003c/td\u003e\u003ctd\u003e\u003cstrong\u003e${value}\u003c/strong\u003e\u003c/td\u003e\u003c/tr\u003e`;\n                        });\n                        content += '\u003c/table\u003e';\n                    });\n                    content += '\u003c/div\u003e';\n                    showModal('Company Fact Sheet', content);\n                });\n        }\n        \n        function viewPressRelease() {\n            fetch('/media/api/press-release')\n                .then(response =\u003e response.json())\n                .then(data =\u003e {\n                    let content = '\u003cdiv class=\"press-release\"\u003e';\n                    content += `\u003ch4\u003e${data.headline}\u003c/h4\u003e`;\n                    content += `\u003cp class=\"text-muted\"\u003e${data.subheadline}\u003c/p\u003e`;\n                    content += `\u003cp\u003e\u003cstrong\u003e${data.dateline}\u003c/strong\u003e\u003c/p\u003e`;\n                    data.body.forEach(para =\u003e {\n                        content += `\u003cp\u003e${para.content.replace(/\\n/g, '\u003cbr\u003e')}\u003c/p\u003e`;\n                    });\n                    content += `\u003chr\u003e\u003cp\u003e\u003cem\u003e${data.boilerplate}\u003c/em\u003e\u003c/p\u003e`;\n                    content += '\u003cp\u003e\u003cstrong\u003eContact:\u003c/strong\u003e\u003cbr\u003e';\n                    Object.entries(data.contact).forEach(([key, value]) =\u003e {\n                        content += `${key.charAt(0).toUpperCase() + key.slice(1)}: ${value}\u003cbr\u003e`;\n                    });\n                    content += '\u003c/p\u003e\u003c/div\u003e';\n                    showModal('Press Release Template', content);\n                });\n        }\n        \n        function viewBrandAssets() {\n            fetch('/media/api/brand-assets')\n                .then(response =\u003e response.json())\n                .then(data =\u003e {\n                    let content = '\u003cdiv class=\"brand-assets\"\u003e';\n                    \n                    // Logo variations\n                    content += '\u003ch5\u003eLogo Variations\u003c/h5\u003e';\n                    content += '\u003cdiv class=\"row mb-4\"\u003e';\n                    data.logo_variations.forEach(logo =\u003e {\n                        content += `\n                            \u003cdiv class=\"col-md-6 mb-3\"\u003e\n                                \u003cdiv class=\"border rounded p-3\"\u003e\n                                    \u003ch6\u003e${logo.name}\u003c/h6\u003e\n                                    \u003cp class=\"text-muted\"\u003e${logo.description}\u003c/p\u003e\n                                    \u003csmall\u003eFile: ${logo.file}\u003c/small\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        `;\n                    });\n                    content += '\u003c/div\u003e';\n                    \n                    // Color palette\n                    content += '\u003ch5\u003eColor Palette\u003c/h5\u003e';\n                    Object.entries(data.color_palette).forEach(([type, colors]) =\u003e {\n                        content += `\u003ch6 class=\"mt-3\"\u003e${type.charAt(0).toUpperCase() + type.slice(1)} Colors\u003c/h6\u003e`;\n                        content += '\u003cdiv class=\"row\"\u003e';\n                        colors.forEach(color =\u003e {\n                            content += `\n                                \u003cdiv class=\"col-md-4 mb-3\"\u003e\n                                    \u003cdiv class=\"d-flex align-items-center\"\u003e\n                                        \u003cdiv style=\"width: 40px; height: 40px; background: ${color.hex}; border-radius: 5px; margin-right: 10px;\"\u003e\u003c/div\u003e\n                                        \u003cdiv\u003e\n                                            \u003cstrong\u003e${color.name}\u003c/strong\u003e\u003cbr\u003e\n                                            \u003csmall\u003e${color.hex} | ${color.rgb}\u003cbr\u003e${color.usage}\u003c/small\u003e\n                                        \u003c/div\u003e\n                                    \u003c/div\u003e\n                                \u003c/div\u003e\n                            `;\n                        });\n                        content += '\u003c/div\u003e';\n                    });\n                    \n                    content += '\u003c/div\u003e';\n                    showModal('Brand Guidelines', content);\n                });\n        }\n        \n        function viewSocialKit() {\n            fetch('/media/api/social-media')\n                .then(response =\u003e response.json())\n                .then(data =\u003e {\n                    let content = '\u003cdiv class=\"social-kit\"\u003e';\n                    \n                    content += '\u003ch5\u003eProfile Setup\u003c/h5\u003e';\n                    content += `\u003cp\u003e\u003cstrong\u003eTagline:\u003c/strong\u003e ${data.profiles.tagline}\u003c/p\u003e`;\n                    content += `\u003cp\u003e\u003cstrong\u003eBio:\u003c/strong\u003e ${data.profiles.bio}\u003c/p\u003e`;\n                    content += `\u003cp\u003e\u003cstrong\u003eHashtags:\u003c/strong\u003e ${data.profiles.hashtags.join(' ')}\u003c/p\u003e`;\n                    \n                    content += '\u003ch5 class=\"mt-4\"\u003ePost Templates\u003c/h5\u003e';\n                    data.post_templates.forEach(post =\u003e {\n                        content += `\n                            \u003cdiv class=\"border rounded p-3 mb-3\"\u003e\n                                \u003ch6\u003e${post.platform} - ${post.type}\u003c/h6\u003e\n                                \u003cp\u003e${post.content}\u003c/p\u003e\n                            \u003c/div\u003e\n                        `;\n                    });\n                    \n                    content += '\u003c/div\u003e';\n                    showModal('Social Media Kit', content);\n                });\n        }\n    \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e",
                "onboarding.html": "{% extends \"base.html\" %}\n\n{% block title %}Welcome to Mind Mend - Interactive Tutorial{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"onboarding-container\"\u003e\n    \u003c!-- Tutorial Progress Bar --\u003e\n    \u003cdiv class=\"tutorial-progress\"\u003e\n        \u003cdiv class=\"progress-bar\" id=\"progressBar\"\u003e\n            \u003cdiv class=\"progress-fill\" id=\"progressFill\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"progress-text\"\u003e\n            \u003cspan id=\"currentStep\"\u003e1\u003c/span\u003e of \u003cspan id=\"totalSteps\"\u003e6\u003c/span\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Animated Character Guide --\u003e\n    \u003cdiv class=\"character-guide\" id=\"characterGuide\"\u003e\n        \u003cdiv class=\"character-avatar\"\u003e\n            \u003cdiv class=\"avatar-face\"\u003e\n                \u003cdiv class=\"eyes\"\u003e\n                    \u003cdiv class=\"eye left-eye\"\u003e\n                        \u003cdiv class=\"pupil\"\u003e\u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"eye right-eye\"\u003e\n                        \u003cdiv class=\"pupil\"\u003e\u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"mouth\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"speech-bubble\" id=\"speechBubble\"\u003e\n            \u003cdiv class=\"bubble-content\" id=\"bubbleContent\"\u003e\n                Welcome to Mind Mend! I'm Alex, your personal guide. Let's explore how our AI-powered therapy platform can help you on your mental health journey.\n            \u003c/div\u003e\n            \u003cdiv class=\"bubble-arrow\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Tutorial Steps Container --\u003e\n    \u003cdiv class=\"tutorial-steps\" id=\"tutorialSteps\"\u003e\n        \n        \u003c!-- Step 1: Welcome --\u003e\n        \u003cdiv class=\"tutorial-step active\" data-step=\"1\"\u003e\n            \u003cdiv class=\"step-content\"\u003e\n                \u003ch2\u003eWelcome to Mind Mend\u003c/h2\u003e\n                \u003cp\u003eYour AI-powered mental health companion that combines cutting-edge technology with evidence-based therapy approaches.\u003c/p\u003e\n                \u003cdiv class=\"feature-highlights\"\u003e\n                    \u003cdiv class=\"highlight-item\"\u003e\n                        \u003ci class=\"fas fa-brain\"\u003e\u003c/i\u003e\n                        \u003cspan\u003eAI Therapists trained in CBT, DBT, and more\u003c/span\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"highlight-item\"\u003e\n                        \u003ci class=\"fas fa-users\"\u003e\u003c/i\u003e\n                        \u003cspan\u003eIndividual, couple, and group sessions\u003c/span\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"highlight-item\"\u003e\n                        \u003ci class=\"fas fa-shield-alt\"\u003e\u003c/i\u003e\n                        \u003cspan\u003eCrisis detection and 24/7 support\u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Step 2: Choose Session Type --\u003e\n        \u003cdiv class=\"tutorial-step\" data-step=\"2\"\u003e\n            \u003cdiv class=\"step-content\"\u003e\n                \u003ch2\u003eChoose Your Session Type\u003c/h2\u003e\n                \u003cp\u003eSelect the type of therapy session that best fits your needs:\u003c/p\u003e\n                \u003cdiv class=\"session-types\"\u003e\n                    \u003cdiv class=\"session-card\" data-type=\"individual\"\u003e\n                        \u003cdiv class=\"session-icon\"\u003e\n                            \u003ci class=\"fas fa-user\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch3\u003eIndividual Therapy\u003c/h3\u003e\n                        \u003cp\u003eOne-on-one sessions with AI therapists specialized in your specific needs\u003c/p\u003e\n                        \u003cdiv class=\"session-features\"\u003e\n                            \u003cspan\u003e• Personalized treatment plans\u003c/span\u003e\n                            \u003cspan\u003e• Mood tracking\u003c/span\u003e\n                            \u003cspan\u003e• Progress monitoring\u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"session-card\" data-type=\"couples\"\u003e\n                        \u003cdiv class=\"session-icon\"\u003e\n                            \u003ci class=\"fas fa-heart\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch3\u003eCouples Therapy\u003c/h3\u003e\n                        \u003cp\u003eRelationship counseling with Gottman Method-trained AI\u003c/p\u003e\n                        \u003cdiv class=\"session-features\"\u003e\n                            \u003cspan\u003e• Communication strategies\u003c/span\u003e\n                            \u003cspan\u003e• Conflict resolution\u003c/span\u003e\n                            \u003cspan\u003e• Relationship strengthening\u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"session-card\" data-type=\"group\"\u003e\n                        \u003cdiv class=\"session-icon\"\u003e\n                            \u003ci class=\"fas fa-users\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch3\u003eGroup Therapy\u003c/h3\u003e\n                        \u003cp\u003eConnect with others in supportive group sessions\u003c/p\u003e\n                        \u003cdiv class=\"session-features\"\u003e\n                            \u003cspan\u003e• Peer support\u003c/span\u003e\n                            \u003cspan\u003e• Shared experiences\u003c/span\u003e\n                            \u003cspan\u003e• Community healing\u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Step 3: AI Therapists --\u003e\n        \u003cdiv class=\"tutorial-step\" data-step=\"3\"\u003e\n            \u003cdiv class=\"step-content\"\u003e\n                \u003ch2\u003eMeet Your AI Therapists\u003c/h2\u003e\n                \u003cp\u003eOur AI therapists are trained in various therapeutic approaches to provide you with the best care:\u003c/p\u003e\n                \u003cdiv class=\"therapist-grid\"\u003e\n                    \u003cdiv class=\"therapist-card\"\u003e\n                        \u003cdiv class=\"therapist-avatar\"\u003e\n                            \u003ci class=\"fas fa-user-md\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch4\u003eDr. Sarah Chen\u003c/h4\u003e\n                        \u003cp\u003eCognitive Behavioral Therapy (CBT)\u003c/p\u003e\n                        \u003cspan class=\"specialty\"\u003eAnxiety \u0026 Depression\u003c/span\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"therapist-card\"\u003e\n                        \u003cdiv class=\"therapist-avatar\"\u003e\n                            \u003ci class=\"fas fa-heart\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch4\u003eDr. Michael Rivera\u003c/h4\u003e\n                        \u003cp\u003eDialectical Behavior Therapy (DBT)\u003c/p\u003e\n                        \u003cspan class=\"specialty\"\u003eEmotional Regulation\u003c/span\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"therapist-card\"\u003e\n                        \u003cdiv class=\"therapist-avatar\"\u003e\n                            \u003ci class=\"fas fa-leaf\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch4\u003eDr. Lisa Thompson\u003c/h4\u003e\n                        \u003cp\u003eMindfulness-Based Stress Reduction\u003c/p\u003e\n                        \u003cspan class=\"specialty\"\u003eStress \u0026 Trauma\u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Step 4: Interactive Features --\u003e\n        \u003cdiv class=\"tutorial-step\" data-step=\"4\"\u003e\n            \u003cdiv class=\"step-content\"\u003e\n                \u003ch2\u003eInteractive Features\u003c/h2\u003e\n                \u003cp\u003eDiscover the powerful tools that enhance your therapy experience:\u003c/p\u003e\n                \u003cdiv class=\"features-demo\"\u003e\n                    \u003cdiv class=\"feature-demo\" data-feature=\"video\"\u003e\n                        \u003cdiv class=\"demo-icon\"\u003e\n                            \u003ci class=\"fas fa-video\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch4\u003eVideo Assessment\u003c/h4\u003e\n                        \u003cp\u003eAI analyzes facial expressions and emotions in real-time\u003c/p\u003e\n                        \u003cbutton class=\"demo-btn\" onclick=\"demoFeature('video')\"\u003eTry Demo\u003c/button\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"feature-demo\" data-feature=\"biometric\"\u003e\n                        \u003cdiv class=\"demo-icon\"\u003e\n                            \u003ci class=\"fas fa-heartbeat\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch4\u003eBiometric Monitoring\u003c/h4\u003e\n                        \u003cp\u003eConnect wearables to track stress, heart rate, and sleep\u003c/p\u003e\n                        \u003cbutton class=\"demo-btn\" onclick=\"demoFeature('biometric')\"\u003eTry Demo\u003c/button\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"feature-demo\" data-feature=\"exercises\"\u003e\n                        \u003cdiv class=\"demo-icon\"\u003e\n                            \u003ci class=\"fas fa-dumbbell\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003ch4\u003eTherapeutic Exercises\u003c/h4\u003e\n                        \u003cp\u003eAI-generated activities tailored to your progress\u003c/p\u003e\n                        \u003cbutton class=\"demo-btn\" onclick=\"demoFeature('exercises')\"\u003eTry Demo\u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Step 5: Safety \u0026 Crisis Support --\u003e\n        \u003cdiv class=\"tutorial-step\" data-step=\"5\"\u003e\n            \u003cdiv class=\"step-content\"\u003e\n                \u003ch2\u003eSafety \u0026 Crisis Support\u003c/h2\u003e\n                \u003cp\u003eYour safety is our priority. Here's how we provide 24/7 support:\u003c/p\u003e\n                \u003cdiv class=\"safety-features\"\u003e\n                    \u003cdiv class=\"safety-item\"\u003e\n                        \u003cdiv class=\"safety-icon\"\u003e\n                            \u003ci class=\"fas fa-shield-alt text-success\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"safety-content\"\u003e\n                            \u003ch4\u003eAI Crisis Detection\u003c/h4\u003e\n                            \u003cp\u003eOur AI continuously monitors conversations for signs of distress and immediately offers support resources.\u003c/p\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"safety-item\"\u003e\n                        \u003cdiv class=\"safety-icon\"\u003e\n                            \u003ci class=\"fas fa-phone text-warning\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"safety-content\"\u003e\n                            \u003ch4\u003eEmergency Contacts\u003c/h4\u003e\n                            \u003cp\u003eQuick access to crisis helplines and emergency services in your area.\u003c/p\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"safety-item\"\u003e\n                        \u003cdiv class=\"safety-icon\"\u003e\n                            \u003ci class=\"fas fa-user-md text-info\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"safety-content\"\u003e\n                            \u003ch4\u003eHuman Counselor Backup\u003c/h4\u003e\n                            \u003cp\u003eWhen needed, you can be connected to licensed human therapists.\u003c/p\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Step 6: Get Started --\u003e\n        \u003cdiv class=\"tutorial-step\" data-step=\"6\"\u003e\n            \u003cdiv class=\"step-content\"\u003e\n                \u003ch2\u003eReady to Begin Your Journey?\u003c/h2\u003e\n                \u003cp\u003eYou're all set! Choose how you'd like to start your mental health journey with Mind Mend:\u003c/p\u003e\n                \u003cdiv class=\"getting-started\"\u003e\n                    \u003cdiv class=\"start-option\" onclick=\"startSession('individual')\"\u003e\n                        \u003ci class=\"fas fa-play-circle\"\u003e\u003c/i\u003e\n                        \u003ch4\u003eStart Individual Session\u003c/h4\u003e\n                        \u003cp\u003eBegin with a personalized AI therapy session\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"start-option\" onclick=\"startSession('assessment')\"\u003e\n                        \u003ci class=\"fas fa-clipboard-check\"\u003e\u003c/i\u003e\n                        \u003ch4\u003eTake Assessment\u003c/h4\u003e\n                        \u003cp\u003eComplete a video assessment to personalize your experience\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"start-option\" onclick=\"startSession('explore')\"\u003e\n                        \u003ci class=\"fas fa-compass\"\u003e\u003c/i\u003e\n                        \u003ch4\u003eExplore Platform\u003c/h4\u003e\n                        \u003cp\u003eBrowse features and settings at your own pace\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Navigation Controls --\u003e\n    \u003cdiv class=\"tutorial-navigation\"\u003e\n        \u003cbutton class=\"nav-btn\" id=\"prevBtn\" onclick=\"previousStep()\" disabled\u003e\n            \u003ci class=\"fas fa-chevron-left\"\u003e\u003c/i\u003e Previous\n        \u003c/button\u003e\n        \u003cbutton class=\"nav-btn skip-btn\" onclick=\"skipTutorial()\"\u003e\n            Skip Tutorial\n        \u003c/button\u003e\n        \u003cbutton class=\"nav-btn primary\" id=\"nextBtn\" onclick=\"nextStep()\"\u003e\n            Next \u003ci class=\"fas fa-chevron-right\"\u003e\u003c/i\u003e\n        \u003c/button\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block styles %}\n\u003cstyle\u003e\n.onboarding-container {\n    min-height: 100vh;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    padding: 2rem;\n    position: relative;\n    overflow-x: hidden;\n}\n\n/* Tutorial Progress */\n.tutorial-progress {\n    position: fixed;\n    top: 2rem;\n    left: 2rem;\n    right: 2rem;\n    z-index: 1000;\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border-radius: 10px;\n    padding: 1rem;\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.progress-bar {\n    flex: 1;\n    height: 8px;\n    background: rgba(255, 255, 255, 0.2);\n    border-radius: 4px;\n    overflow: hidden;\n}\n\n.progress-fill {\n    height: 100%;\n    background: linear-gradient(90deg, #4CAF50, #45a049);\n    border-radius: 4px;\n    transition: width 0.5s ease;\n    width: 16.67%; /* 1/6 steps */\n}\n\n.progress-text {\n    color: white;\n    font-weight: 600;\n    font-size: 14px;\n}\n\n/* Character Guide */\n.character-guide {\n    position: fixed;\n    bottom: 2rem;\n    right: 2rem;\n    z-index: 1000;\n    display: flex;\n    align-items: flex-end;\n    gap: 1rem;\n}\n\n.character-avatar {\n    width: 80px;\n    height: 80px;\n    background: linear-gradient(135deg, #4CAF50, #45a049);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    animation: bounce 2s infinite;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n}\n\n.avatar-face {\n    color: white;\n    font-size: 1.5rem;\n}\n\n.eyes {\n    display: flex;\n    gap: 8px;\n    margin-bottom: 8px;\n    justify-content: center;\n}\n\n.eye {\n    width: 8px;\n    height: 8px;\n    background: white;\n    border-radius: 50%;\n    position: relative;\n    animation: blink 3s infinite;\n}\n\n.pupil {\n    width: 4px;\n    height: 4px;\n    background: #333;\n    border-radius: 50%;\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    animation: eyeMove 4s infinite;\n}\n\n.mouth {\n    width: 12px;\n    height: 6px;\n    border: 2px solid white;\n    border-top: none;\n    border-radius: 0 0 12px 12px;\n    margin: 0 auto;\n    animation: talk 2s infinite;\n}\n\n.speech-bubble {\n    max-width: 300px;\n    background: white;\n    border-radius: 20px;\n    padding: 1rem 1.5rem;\n    position: relative;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n    animation: fadeInUp 0.5s ease;\n}\n\n.bubble-content {\n    font-size: 14px;\n    line-height: 1.4;\n    color: #333;\n}\n\n.bubble-arrow {\n    position: absolute;\n    bottom: -8px;\n    right: 2rem;\n    width: 0;\n    height: 0;\n    border-left: 8px solid transparent;\n    border-right: 8px solid transparent;\n    border-top: 8px solid white;\n}\n\n/* Tutorial Steps */\n.tutorial-steps {\n    max-width: 1000px;\n    margin: 8rem auto 6rem;\n    padding: 0 2rem;\n}\n\n.tutorial-step {\n    display: none;\n    animation: fadeInUp 0.6s ease;\n}\n\n.tutorial-step.active {\n    display: block;\n}\n\n.step-content {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 20px;\n    padding: 3rem;\n    text-align: center;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);\n}\n\n.step-content h2 {\n    color: #333;\n    font-size: 2.5rem;\n    margin-bottom: 1rem;\n    font-weight: 700;\n}\n\n.step-content p {\n    color: #666;\n    font-size: 1.2rem;\n    margin-bottom: 2rem;\n    line-height: 1.6;\n}\n\n/* Feature Highlights */\n.feature-highlights {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 2rem;\n    justify-content: center;\n    margin-top: 2rem;\n}\n\n.highlight-item {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    background: rgba(102, 126, 234, 0.1);\n    padding: 1rem 1.5rem;\n    border-radius: 50px;\n    color: #667eea;\n    font-weight: 600;\n}\n\n.highlight-item i {\n    font-size: 1.2rem;\n}\n\n/* Session Types */\n.session-types {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 2rem;\n    margin-top: 2rem;\n}\n\n.session-card {\n    background: white;\n    border-radius: 15px;\n    padding: 2rem;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s ease;\n    cursor: pointer;\n    border: 3px solid transparent;\n}\n\n.session-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 20px 50px rgba(0, 0, 0, 0.15);\n    border-color: #667eea;\n}\n\n.session-icon {\n    width: 60px;\n    height: 60px;\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto 1rem;\n    color: white;\n    font-size: 1.5rem;\n}\n\n.session-card h3 {\n    color: #333;\n    margin-bottom: 1rem;\n    font-size: 1.4rem;\n}\n\n.session-card p {\n    color: #666;\n    margin-bottom: 1rem;\n    font-size: 1rem;\n}\n\n.session-features {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n    text-align: left;\n}\n\n.session-features span {\n    color: #4CAF50;\n    font-size: 0.9rem;\n}\n\n/* Therapist Grid */\n.therapist-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 2rem;\n    margin-top: 2rem;\n}\n\n.therapist-card {\n    background: white;\n    border-radius: 15px;\n    padding: 2rem;\n    text-align: center;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s ease;\n}\n\n.therapist-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 20px 50px rgba(0, 0, 0, 0.15);\n}\n\n.therapist-avatar {\n    width: 80px;\n    height: 80px;\n    background: linear-gradient(135deg, #4CAF50, #45a049);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto 1rem;\n    color: white;\n    font-size: 2rem;\n}\n\n.therapist-card h4 {\n    color: #333;\n    margin-bottom: 0.5rem;\n    font-size: 1.3rem;\n}\n\n.therapist-card p {\n    color: #666;\n    margin-bottom: 1rem;\n    font-size: 1rem;\n}\n\n.specialty {\n    background: rgba(102, 126, 234, 0.1);\n    color: #667eea;\n    padding: 0.5rem 1rem;\n    border-radius: 20px;\n    font-size: 0.9rem;\n    font-weight: 600;\n}\n\n/* Features Demo */\n.features-demo {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 2rem;\n    margin-top: 2rem;\n}\n\n.feature-demo {\n    background: white;\n    border-radius: 15px;\n    padding: 2rem;\n    text-align: center;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s ease;\n}\n\n.demo-icon {\n    width: 60px;\n    height: 60px;\n    background: linear-gradient(135deg, #FF6B6B, #EE5A52);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto 1rem;\n    color: white;\n    font-size: 1.5rem;\n}\n\n.demo-btn {\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    color: white;\n    border: none;\n    padding: 0.75rem 1.5rem;\n    border-radius: 25px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    margin-top: 1rem;\n}\n\n.demo-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);\n}\n\n/* Safety Features */\n.safety-features {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    margin-top: 2rem;\n}\n\n.safety-item {\n    display: flex;\n    align-items: flex-start;\n    gap: 1.5rem;\n    background: white;\n    border-radius: 15px;\n    padding: 2rem;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n    text-align: left;\n}\n\n.safety-icon {\n    width: 60px;\n    height: 60px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.5rem;\n    flex-shrink: 0;\n    background: rgba(255, 255, 255, 0.1);\n}\n\n.safety-content h4 {\n    color: #333;\n    margin-bottom: 0.5rem;\n    font-size: 1.3rem;\n}\n\n.safety-content p {\n    color: #666;\n    margin: 0;\n    font-size: 1rem;\n}\n\n/* Getting Started */\n.getting-started {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 2rem;\n    margin-top: 2rem;\n}\n\n.start-option {\n    background: white;\n    border-radius: 15px;\n    padding: 2rem;\n    text-align: center;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s ease;\n    cursor: pointer;\n    border: 3px solid transparent;\n}\n\n.start-option:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 20px 50px rgba(0, 0, 0, 0.15);\n    border-color: #4CAF50;\n}\n\n.start-option i {\n    font-size: 3rem;\n    color: #4CAF50;\n    margin-bottom: 1rem;\n}\n\n.start-option h4 {\n    color: #333;\n    margin-bottom: 1rem;\n    font-size: 1.3rem;\n}\n\n.start-option p {\n    color: #666;\n    margin: 0;\n    font-size: 1rem;\n}\n\n/* Navigation */\n.tutorial-navigation {\n    position: fixed;\n    bottom: 2rem;\n    left: 2rem;\n    right: 2rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border-radius: 15px;\n    padding: 1rem 2rem;\n    z-index: 1000;\n}\n\n.nav-btn {\n    background: rgba(255, 255, 255, 0.2);\n    color: white;\n    border: none;\n    padding: 0.75rem 1.5rem;\n    border-radius: 25px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.nav-btn:hover:not(:disabled) {\n    background: rgba(255, 255, 255, 0.3);\n    transform: translateY(-2px);\n}\n\n.nav-btn:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}\n\n.nav-btn.primary {\n    background: linear-gradient(135deg, #4CAF50, #45a049);\n}\n\n.nav-btn.skip-btn {\n    background: transparent;\n    border: 2px solid rgba(255, 255, 255, 0.3);\n}\n\n/* Animations */\n@keyframes bounce {\n    0%, 20%, 50%, 80%, 100% {\n        transform: translateY(0);\n    }\n    40% {\n        transform: translateY(-10px);\n    }\n    60% {\n        transform: translateY(-5px);\n    }\n}\n\n@keyframes blink {\n    0%, 95%, 100% {\n        transform: scaleY(1);\n    }\n    97.5% {\n        transform: scaleY(0.1);\n    }\n}\n\n@keyframes eyeMove {\n    0%, 100% {\n        transform: translate(2px, 2px);\n    }\n    25% {\n        transform: translate(1px, 2px);\n    }\n    50% {\n        transform: translate(3px, 1px);\n    }\n    75% {\n        transform: translate(2px, 3px);\n    }\n}\n\n@keyframes talk {\n    0%, 100% {\n        transform: scaleY(1);\n    }\n    50% {\n        transform: scaleY(0.7);\n    }\n}\n\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .onboarding-container {\n        padding: 1rem;\n    }\n    \n    .tutorial-progress {\n        top: 1rem;\n        left: 1rem;\n        right: 1rem;\n        padding: 0.75rem;\n    }\n    \n    .character-guide {\n        bottom: 8rem;\n        right: 1rem;\n    }\n    \n    .speech-bubble {\n        max-width: 250px;\n    }\n    \n    .tutorial-steps {\n        margin: 6rem auto 8rem;\n        padding: 0 1rem;\n    }\n    \n    .step-content {\n        padding: 2rem 1.5rem;\n    }\n    \n    .step-content h2 {\n        font-size: 2rem;\n    }\n    \n    .tutorial-navigation {\n        bottom: 1rem;\n        left: 1rem;\n        right: 1rem;\n        padding: 1rem;\n        flex-wrap: wrap;\n        gap: 1rem;\n    }\n    \n    .safety-item {\n        flex-direction: column;\n        text-align: center;\n    }\n    \n    .session-types,\n    .therapist-grid,\n    .features-demo,\n    .getting-started {\n        grid-template-columns: 1fr;\n    }\n}\n\u003c/style\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003cscript\u003e\nlet currentStep = 1;\nconst totalSteps = 6;\n\nconst tutorialContent = {\n    1: \"Welcome to Mind Mend! I'm Alex, your personal guide. Let's explore how our AI-powered therapy platform can help you on your mental health journey.\",\n    2: \"Choose the therapy type that feels right for you. Each option offers specialized support tailored to your unique needs.\",\n    3: \"Meet our AI therapists! Each one is trained in different therapeutic approaches. Don't worry - they're here to help, not replace human connection.\",\n    4: \"These interactive features make your therapy experience more engaging and effective. Try the demos to see how they work!\",\n    5: \"Your safety is our top priority. Our AI constantly monitors for signs of distress and can connect you with help immediately if needed.\",\n    6: \"Congratulations! You're ready to start your mental health journey. Choose your preferred way to begin, and remember - I'm always here to help guide you.\"\n};\n\nfunction updateProgress() {\n    const progressFill = document.getElementById('progressFill');\n    const currentStepSpan = document.getElementById('currentStep');\n    const percentage = (currentStep / totalSteps) * 100;\n    \n    progressFill.style.width = percentage + '%';\n    currentStepSpan.textContent = currentStep;\n}\n\nfunction updateCharacterSpeech() {\n    const bubbleContent = document.getElementById('bubbleContent');\n    const avatar = document.querySelector('.character-avatar');\n    \n    // Add talking animation\n    avatar.style.animation = 'bounce 0.5s ease, talk 0.3s ease infinite';\n    \n    // Type out the message\n    bubbleContent.textContent = '';\n    const message = tutorialContent[currentStep];\n    let i = 0;\n    \n    const typeInterval = setInterval(() =\u003e {\n        bubbleContent.textContent += message[i];\n        i++;\n        if (i \u003e= message.length) {\n            clearInterval(typeInterval);\n            // Reset avatar animation\n            setTimeout(() =\u003e {\n                avatar.style.animation = 'bounce 2s infinite';\n            }, 1000);\n        }\n    }, 30);\n}\n\nfunction showStep(stepNumber) {\n    // Hide all steps\n    document.querySelectorAll('.tutorial-step').forEach(step =\u003e {\n        step.classList.remove('active');\n    });\n    \n    // Show current step\n    const currentStepElement = document.querySelector(`[data-step=\"${stepNumber}\"]`);\n    if (currentStepElement) {\n        currentStepElement.classList.add('active');\n    }\n    \n    // Update navigation buttons\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    \n    prevBtn.disabled = stepNumber === 1;\n    \n    if (stepNumber === totalSteps) {\n        nextBtn.textContent = 'Get Started!';\n        nextBtn.innerHTML = 'Get Started! \u003ci class=\"fas fa-rocket\"\u003e\u003c/i\u003e';\n    } else {\n        nextBtn.innerHTML = 'Next \u003ci class=\"fas fa-chevron-right\"\u003e\u003c/i\u003e';\n    }\n    \n    updateProgress();\n    updateCharacterSpeech();\n}\n\nfunction nextStep() {\n    if (currentStep \u003c totalSteps) {\n        currentStep++;\n        showStep(currentStep);\n    } else {\n        // Tutorial completed\n        completeTutorial();\n    }\n}\n\nfunction previousStep() {\n    if (currentStep \u003e 1) {\n        currentStep--;\n        showStep(currentStep);\n    }\n}\n\nfunction skipTutorial() {\n    if (confirm('Are you sure you want to skip the tutorial? You can always access it later from the help menu.')) {\n        window.location.href = '/';\n    }\n}\n\nfunction completeTutorial() {\n    // Mark tutorial as completed\n    localStorage.setItem('mindMendTutorialCompleted', 'true');\n    \n    // Show completion message\n    showCompletionMessage();\n}\n\nfunction showCompletionMessage() {\n    const container = document.querySelector('.onboarding-container');\n    container.innerHTML = `\n        \u003cdiv class=\"completion-screen\"\u003e\n            \u003cdiv class=\"completion-content\"\u003e\n                \u003cdiv class=\"success-animation\"\u003e\n                    \u003ci class=\"fas fa-check-circle\"\u003e\u003c/i\u003e\n                \u003c/div\u003e\n                \u003ch2\u003eTutorial Complete!\u003c/h2\u003e\n                \u003cp\u003eYou're now ready to explore Mind Mend and begin your mental health journey.\u003c/p\u003e\n                \u003cdiv class=\"completion-buttons\"\u003e\n                    \u003cbutton class=\"completion-btn primary\" onclick=\"window.location.href='/individual'\"\u003e\n                        \u003ci class=\"fas fa-play\"\u003e\u003c/i\u003e Start First Session\n                    \u003c/button\u003e\n                    \u003cbutton class=\"completion-btn secondary\" onclick=\"window.location.href='/'\"\u003e\n                        \u003ci class=\"fas fa-home\"\u003e\u003c/i\u003e Go to Homepage\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    `;\n    \n    // Add completion styles\n    const style = document.createElement('style');\n    style.textContent = `\n        .completion-screen {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            min-height: 100vh;\n            text-align: center;\n        }\n        \n        .completion-content {\n            background: rgba(255, 255, 255, 0.95);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 4rem;\n            max-width: 500px;\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);\n        }\n        \n        .success-animation {\n            font-size: 5rem;\n            color: #4CAF50;\n            margin-bottom: 2rem;\n            animation: successPulse 1s ease infinite alternate;\n        }\n        \n        .completion-content h2 {\n            color: #333;\n            font-size: 2.5rem;\n            margin-bottom: 1rem;\n        }\n        \n        .completion-content p {\n            color: #666;\n            font-size: 1.2rem;\n            margin-bottom: 2rem;\n        }\n        \n        .completion-buttons {\n            display: flex;\n            gap: 1rem;\n            flex-wrap: wrap;\n            justify-content: center;\n        }\n        \n        .completion-btn {\n            padding: 1rem 2rem;\n            border: none;\n            border-radius: 25px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n        }\n        \n        .completion-btn.primary {\n            background: linear-gradient(135deg, #4CAF50, #45a049);\n            color: white;\n        }\n        \n        .completion-btn.secondary {\n            background: rgba(102, 126, 234, 0.1);\n            color: #667eea;\n            border: 2px solid #667eea;\n        }\n        \n        .completion-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);\n        }\n        \n        @keyframes successPulse {\n            from { transform: scale(1); }\n            to { transform: scale(1.1); }\n        }\n    `;\n    document.head.appendChild(style);\n}\n\nfunction demoFeature(feature) {\n    const demoMessages = {\n        video: \"This would activate your camera to demonstrate real-time emotion analysis!\",\n        biometric: \"This would show how to connect your smartwatch or fitness tracker!\",\n        exercises: \"This would generate a personalized breathing exercise based on your current mood!\"\n    };\n    \n    alert(demoMessages[feature]);\n}\n\nfunction startSession(type) {\n    const routes = {\n        individual: '/individual',\n        assessment: '/video-assess',\n        explore: '/'\n    };\n    \n    localStorage.setItem('mindMendTutorialCompleted', 'true');\n    window.location.href = routes[type];\n}\n\n// Interactive elements\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize tutorial\n    showStep(1);\n    \n    // Add click handlers for session cards\n    document.querySelectorAll('.session-card').forEach(card =\u003e {\n        card.addEventListener('click', function() {\n            // Remove active class from all cards\n            document.querySelectorAll('.session-card').forEach(c =\u003e c.classList.remove('selected'));\n            // Add active class to clicked card\n            this.classList.add('selected');\n            \n            // Add selected styling\n            const style = document.createElement('style');\n            style.textContent = `\n                .session-card.selected {\n                    border-color: #4CAF50 !important;\n                    background: linear-gradient(135deg, rgba(76, 175, 80, 0.1), rgba(76, 175, 80, 0.05));\n                }\n            `;\n            if (!document.querySelector('#session-selected-style')) {\n                style.id = 'session-selected-style';\n                document.head.appendChild(style);\n            }\n        });\n    });\n    \n    // Add click handlers for therapist cards\n    document.querySelectorAll('.therapist-card').forEach(card =\u003e {\n        card.addEventListener('click', function() {\n            // Remove active class from all cards\n            document.querySelectorAll('.therapist-card').forEach(c =\u003e c.classList.remove('selected'));\n            // Add active class to clicked card\n            this.classList.add('selected');\n            \n            // Add selected styling for therapist cards\n            const style = document.createElement('style');\n            style.textContent = `\n                .therapist-card.selected {\n                    border: 3px solid #4CAF50;\n                    background: linear-gradient(135deg, rgba(76, 175, 80, 0.1), rgba(76, 175, 80, 0.05));\n                }\n            `;\n            if (!document.querySelector('#therapist-selected-style')) {\n                style.id = 'therapist-selected-style';\n                document.head.appendChild(style);\n            }\n        });\n    });\n    \n    // Eye tracking effect\n    document.addEventListener('mousemove', function(e) {\n        const eyes = document.querySelectorAll('.pupil');\n        eyes.forEach(eye =\u003e {\n            const rect = eye.getBoundingClientRect();\n            const eyeCenterX = rect.left + rect.width / 2;\n            const eyeCenterY = rect.top + rect.height / 2;\n            \n            const angle = Math.atan2(e.clientY - eyeCenterY, e.clientX - eyeCenterX);\n            const distance = Math.min(2, Math.sqrt(Math.pow(e.clientX - eyeCenterX, 2) + Math.pow(e.clientY - eyeCenterY, 2)) / 10);\n            \n            const x = Math.cos(angle) * distance;\n            const y = Math.sin(angle) * distance;\n            \n            eye.style.transform = `translate(${x}px, ${y}px)`;\n        });\n    });\n});\n\n// Keyboard navigation\ndocument.addEventListener('keydown', function(e) {\n    if (e.key === 'ArrowRight' || e.key === ' ') {\n        e.preventDefault();\n        nextStep();\n    } else if (e.key === 'ArrowLeft') {\n        e.preventDefault();\n        previousStep();\n    } else if (e.key === 'Escape') {\n        skipTutorial();\n    }\n});\n\u003c/script\u003e\n{% endblock %}",
                "onboarding_reformed.html": "{% extends \"base.html\" %}\n\n{% block title %}Welcome to MindMend - Let's Get Started{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"modern-onboarding\"\u003e\n    \u003c!-- Progress Indicator --\u003e\n    \u003cdiv class=\"progress-header\"\u003e\n        \u003cdiv class=\"progress-container\"\u003e\n            \u003cdiv class=\"progress-bar\"\u003e\n                \u003cdiv class=\"progress-fill\" id=\"progressFill\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"progress-info\"\u003e\n                \u003cspan class=\"step-counter\" id=\"stepCounter\"\u003e1 of 5\u003c/span\u003e\n                \u003cspan class=\"estimated-time\"\u003e~3 min\u003c/span\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cbutton class=\"skip-button\" onclick=\"skipOnboarding()\"\u003eSkip Setup\u003c/button\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Onboarding Steps --\u003e\n    \u003cdiv class=\"onboarding-content\" id=\"onboardingContent\"\u003e\n        \n        \u003c!-- Step 1: Welcome \u0026 Quick Overview --\u003e\n        \u003cdiv class=\"step-panel active\" data-step=\"1\"\u003e\n            \u003cdiv class=\"step-header\"\u003e\n                \u003cdiv class=\"welcome-illustration\"\u003e\n                    \u003cdiv class=\"floating-emoji\"\u003e🧠\u003c/div\u003e\n                    \u003cdiv class=\"floating-emoji delayed\"\u003e💚\u003c/div\u003e\n                    \u003cdiv class=\"floating-emoji extra-delayed\"\u003e✨\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ch1\u003eWelcome to MindMend\u003c/h1\u003e\n                \u003cp class=\"subtitle\"\u003eAI-powered mental health support, available 24/7\u003c/p\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"quick-features\"\u003e\n                \u003cdiv class=\"feature-item\"\u003e\n                    \u003cdiv class=\"feature-icon\"\u003e🤖\u003c/div\u003e\n                    \u003cspan\u003eExpert AI Therapists\u003c/span\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"feature-item\"\u003e\n                    \u003cdiv class=\"feature-icon\"\u003e🔒\u003c/div\u003e\n                    \u003cspan\u003e100% Private \u0026 Secure\u003c/span\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"feature-item\"\u003e\n                    \u003cdiv class=\"feature-icon\"\u003e⚡\u003c/div\u003e\n                    \u003cspan\u003eInstant Support\u003c/span\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"feature-item\"\u003e\n                    \u003cdiv class=\"feature-icon\"\u003e📱\u003c/div\u003e\n                    \u003cspan\u003eWorks Everywhere\u003c/span\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Step 2: Choose Your Focus --\u003e\n        \u003cdiv class=\"step-panel\" data-step=\"2\"\u003e\n            \u003cdiv class=\"step-header\"\u003e\n                \u003ch2\u003eWhat brings you here today?\u003c/h2\u003e\n                \u003cp\u003eHelp us personalize your experience\u003c/p\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"focus-grid\"\u003e\n                \u003cdiv class=\"focus-card\" data-focus=\"anxiety\"\u003e\n                    \u003cdiv class=\"focus-icon\"\u003e😰\u003c/div\u003e\n                    \u003ch3\u003eAnxiety \u0026 Stress\u003c/h3\u003e\n                    \u003cp\u003eFeeling overwhelmed, worried, or stressed\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"focus-card\" data-focus=\"depression\"\u003e\n                    \u003cdiv class=\"focus-icon\"\u003e😢\u003c/div\u003e\n                    \u003ch3\u003eDepression \u0026 Mood\u003c/h3\u003e\n                    \u003cp\u003eFeeling down, unmotivated, or empty\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"focus-card\" data-focus=\"relationships\"\u003e\n                    \u003cdiv class=\"focus-icon\"\u003e💔\u003c/div\u003e\n                    \u003ch3\u003eRelationships\u003c/h3\u003e\n                    \u003cp\u003eCouple issues or social difficulties\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"focus-card\" data-focus=\"trauma\"\u003e\n                    \u003cdiv class=\"focus-icon\"\u003e⚡\u003c/div\u003e\n                    \u003ch3\u003eTrauma \u0026 PTSD\u003c/h3\u003e\n                    \u003cp\u003eProcessing difficult experiences\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"focus-card\" data-focus=\"general\"\u003e\n                    \u003cdiv class=\"focus-icon\"\u003e🌱\u003c/div\u003e\n                    \u003ch3\u003eGeneral Wellness\u003c/h3\u003e\n                    \u003cp\u003eSelf-improvement and mental fitness\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"focus-card\" data-focus=\"crisis\"\u003e\n                    \u003cdiv class=\"focus-icon\"\u003e🚨\u003c/div\u003e\n                    \u003ch3\u003eCrisis Support\u003c/h3\u003e\n                    \u003cp\u003eNeed immediate help right now\u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Step 3: Preferred Session Type --\u003e\n        \u003cdiv class=\"step-panel\" data-step=\"3\"\u003e\n            \u003cdiv class=\"step-header\"\u003e\n                \u003ch2\u003eHow would you like to get help?\u003c/h2\u003e\n                \u003cp\u003eChoose your preferred therapy format\u003c/p\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"session-options\"\u003e\n                \u003cdiv class=\"session-option\" data-session=\"individual\"\u003e\n                    \u003cdiv class=\"session-visual\"\u003e\n                        \u003cdiv class=\"person-icon solo\"\u003e👤\u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"session-details\"\u003e\n                        \u003ch3\u003eIndividual Therapy\u003c/h3\u003e\n                        \u003cp\u003ePrivate one-on-one sessions with AI therapists\u003c/p\u003e\n                        \u003cdiv class=\"session-features\"\u003e\n                            \u003cspan class=\"feature-tag\"\u003eMost Popular\u003c/span\u003e\n                            \u003cspan class=\"feature-tag\"\u003ePersonalized\u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"session-option\" data-session=\"couples\"\u003e\n                    \u003cdiv class=\"session-visual\"\u003e\n                        \u003cdiv class=\"person-icon duo\"\u003e👥\u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"session-details\"\u003e\n                        \u003ch3\u003eCouples Therapy\u003c/h3\u003e\n                        \u003cp\u003eRelationship counseling for you and your partner\u003c/p\u003e\n                        \u003cdiv class=\"session-features\"\u003e\n                            \u003cspan class=\"feature-tag\"\u003eRelationship Focus\u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"session-option\" data-session=\"group\"\u003e\n                    \u003cdiv class=\"session-visual\"\u003e\n                        \u003cdiv class=\"person-icon group\"\u003e👥\u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"session-details\"\u003e\n                        \u003ch3\u003eGroup Support\u003c/h3\u003e\n                        \u003cp\u003eConnect with others in supportive group sessions\u003c/p\u003e\n                        \u003cdiv class=\"session-features\"\u003e\n                            \u003cspan class=\"feature-tag\"\u003eCommunity\u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Step 4: AI Therapist Matching --\u003e\n        \u003cdiv class=\"step-panel\" data-step=\"4\"\u003e\n            \u003cdiv class=\"step-header\"\u003e\n                \u003ch2\u003eMeet Your AI Therapist\u003c/h2\u003e\n                \u003cp\u003eWe'll match you with the best AI therapist for your needs\u003c/p\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"therapist-matching\"\u003e\n                \u003cdiv class=\"matching-animation\" id=\"matchingAnimation\"\u003e\n                    \u003cdiv class=\"matching-spinner\"\u003e\n                        \u003cdiv class=\"spinner-ring\"\u003e\u003c/div\u003e\n                        \u003cdiv class=\"matching-icon\"\u003e🔍\u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"matching-text\"\u003e\n                        \u003ch3 id=\"matchingText\"\u003eAnalyzing your preferences...\u003c/h3\u003e\n                        \u003cp id=\"matchingSubtext\"\u003eFinding your perfect AI therapist match\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"therapist-result\" id=\"therapistResult\" style=\"display: none;\"\u003e\n                    \u003cdiv class=\"therapist-card matched\"\u003e\n                        \u003cdiv class=\"therapist-avatar\"\u003e\n                            \u003cimg src=\"/static/images/ai-therapist.png\" alt=\"AI Therapist\" onerror=\"this.style.display='none'; this.nextElementSibling.style.display='flex';\"\u003e\n                            \u003cdiv class=\"avatar-fallback\"\u003e🤖\u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"therapist-info\"\u003e\n                            \u003ch3 id=\"therapistName\"\u003eDr. Maya Chen\u003c/h3\u003e\n                            \u003cp id=\"therapistSpecialty\"\u003eCognitive Behavioral Therapy Specialist\u003c/p\u003e\n                            \u003cdiv class=\"match-score\"\u003e\n                                \u003cdiv class=\"match-percentage\"\u003e95% Match\u003c/div\u003e\n                                \u003cdiv class=\"match-reasons\" id=\"matchReasons\"\u003e\n                                    \u003cspan\u003eSpecializes in anxiety\u003c/span\u003e\n                                    \u003cspan\u003eCBT approach\u003c/span\u003e\n                                    \u003cspan\u003eIndividual therapy expert\u003c/span\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Step 5: Ready to Start --\u003e\n        \u003cdiv class=\"step-panel\" data-step=\"5\"\u003e\n            \u003cdiv class=\"step-header\"\u003e\n                \u003cdiv class=\"success-icon\"\u003e🎉\u003c/div\u003e\n                \u003ch2\u003eYou're All Set!\u003c/h2\u003e\n                \u003cp\u003eYour personalized MindMend experience is ready\u003c/p\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"setup-summary\" id=\"setupSummary\"\u003e\n                \u003cdiv class=\"summary-card\"\u003e\n                    \u003ch3\u003eYour Setup:\u003c/h3\u003e\n                    \u003cdiv class=\"summary-items\"\u003e\n                        \u003cdiv class=\"summary-item\"\u003e\n                            \u003cspan class=\"summary-label\"\u003eFocus:\u003c/span\u003e\n                            \u003cspan class=\"summary-value\" id=\"selectedFocus\"\u003eAnxiety \u0026 Stress\u003c/span\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"summary-item\"\u003e\n                            \u003cspan class=\"summary-label\"\u003eSession Type:\u003c/span\u003e\n                            \u003cspan class=\"summary-value\" id=\"selectedSession\"\u003eIndividual Therapy\u003c/span\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"summary-item\"\u003e\n                            \u003cspan class=\"summary-label\"\u003eAI Therapist:\u003c/span\u003e\n                            \u003cspan class=\"summary-value\" id=\"selectedTherapist\"\u003eDr. Maya Chen\u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"start-options\"\u003e\n                \u003cbutton class=\"start-button primary\" onclick=\"startFirstSession()\"\u003e\n                    \u003cspan class=\"button-icon\"\u003e🚀\u003c/span\u003e\n                    Start My First Session\n                \u003c/button\u003e\n                \u003cbutton class=\"start-button secondary\" onclick=\"takeTour()\"\u003e\n                    \u003cspan class=\"button-icon\"\u003e👋\u003c/span\u003e\n                    Take a Quick Tour First\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Navigation Controls --\u003e\n    \u003cdiv class=\"navigation-controls\"\u003e\n        \u003cbutton class=\"nav-btn secondary\" id=\"backButton\" onclick=\"previousStep()\" disabled\u003e\n            \u003cspan\u003e← Back\u003c/span\u003e\n        \u003c/button\u003e\n        \u003cbutton class=\"nav-btn primary\" id=\"nextButton\" onclick=\"nextStep()\"\u003e\n            \u003cspan\u003eContinue →\u003c/span\u003e\n        \u003c/button\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Quick Help --\u003e\n    \u003cdiv class=\"quick-help\"\u003e\n        \u003cbutton class=\"help-button\" onclick=\"toggleHelp()\"\u003e\n            \u003cspan class=\"help-icon\"\u003e?\u003c/span\u003e\n        \u003c/button\u003e\n        \u003cdiv class=\"help-tooltip\" id=\"helpTooltip\"\u003e\n            \u003cp\u003eNeed help? Use arrow keys to navigate or click \"Skip Setup\" to go directly to the platform.\u003c/p\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Crisis Support (Always Visible) --\u003e\n    \u003cdiv class=\"crisis-banner\"\u003e\n        \u003cspan class=\"crisis-text\"\u003eIn crisis? Get immediate help:\u003c/span\u003e\n        \u003ca href=\"tel:131114\" class=\"crisis-link\"\u003eCall 13 11 14\u003c/a\u003e\n        \u003ca href=\"#\" class=\"crisis-link\" onclick=\"showCrisisModal()\"\u003eChat Now\u003c/a\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block styles %}\n\u003cstyle\u003e\n/* Modern Onboarding Styles */\n.modern-onboarding {\n    min-height: 100vh;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\n/* Progress Header */\n.progress-header {\n    position: sticky;\n    top: 0;\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(20px);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n    padding: 1rem 2rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    z-index: 100;\n}\n\n.progress-container {\n    flex: 1;\n    max-width: 400px;\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.progress-bar {\n    flex: 1;\n    height: 8px;\n    background: rgba(102, 126, 234, 0.2);\n    border-radius: 10px;\n    overflow: hidden;\n}\n\n.progress-fill {\n    height: 100%;\n    background: linear-gradient(90deg, #667eea, #764ba2);\n    border-radius: 10px;\n    transition: width 0.6s ease;\n    width: 20%;\n}\n\n.progress-info {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-size: 0.875rem;\n    color: #666;\n}\n\n.step-counter {\n    font-weight: 600;\n    color: #333;\n}\n\n.estimated-time {\n    font-size: 0.75rem;\n    opacity: 0.7;\n}\n\n.skip-button {\n    background: none;\n    border: 2px solid #ddd;\n    color: #666;\n    padding: 0.5rem 1rem;\n    border-radius: 20px;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.skip-button:hover {\n    border-color: #667eea;\n    color: #667eea;\n}\n\n/* Main Content */\n.onboarding-content {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 2rem;\n    position: relative;\n}\n\n.step-panel {\n    display: none;\n    max-width: 800px;\n    width: 100%;\n    animation: slideIn 0.5s ease;\n}\n\n.step-panel.active {\n    display: block;\n}\n\n.step-header {\n    text-align: center;\n    margin-bottom: 2rem;\n    color: white;\n}\n\n.step-header h1 {\n    font-size: 3rem;\n    font-weight: 700;\n    margin-bottom: 0.5rem;\n    background: linear-gradient(45deg, #fff, #f0f8ff);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n}\n\n.step-header h2 {\n    font-size: 2.5rem;\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n    color: white;\n}\n\n.step-header p,\n.subtitle {\n    font-size: 1.2rem;\n    color: rgba(255, 255, 255, 0.9);\n    margin-bottom: 0;\n}\n\n/* Welcome Animations */\n.welcome-illustration {\n    margin-bottom: 2rem;\n    position: relative;\n    height: 100px;\n}\n\n.floating-emoji {\n    position: absolute;\n    font-size: 3rem;\n    animation: float 3s ease-in-out infinite;\n}\n\n.floating-emoji:nth-child(1) {\n    left: 50%;\n    transform: translateX(-50%);\n    animation-delay: 0s;\n}\n\n.floating-emoji:nth-child(2) {\n    left: 30%;\n    animation-delay: 1s;\n}\n\n.floating-emoji:nth-child(3) {\n    right: 30%;\n    animation-delay: 2s;\n}\n\n.quick-features {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n    gap: 1rem;\n    margin-top: 2rem;\n}\n\n.feature-item {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 15px;\n    padding: 1.5rem;\n    text-align: center;\n    color: white;\n    transition: all 0.3s ease;\n}\n\n.feature-item:hover {\n    background: rgba(255, 255, 255, 0.2);\n    transform: translateY(-5px);\n}\n\n.feature-icon {\n    font-size: 2rem;\n    margin-bottom: 0.5rem;\n}\n\n/* Focus Selection */\n.focus-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 1rem;\n    max-width: 900px;\n    margin: 0 auto;\n}\n\n.focus-card {\n    background: rgba(255, 255, 255, 0.95);\n    border-radius: 20px;\n    padding: 1.5rem;\n    text-align: center;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    border: 3px solid transparent;\n    position: relative;\n    overflow: hidden;\n}\n\n.focus-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: linear-gradient(90deg, #667eea, #764ba2);\n    transform: translateX(-100%);\n    transition: transform 0.3s ease;\n}\n\n.focus-card:hover::before {\n    transform: translateX(0);\n}\n\n.focus-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n}\n\n.focus-card.selected {\n    border-color: #667eea;\n    background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(255, 255, 255, 0.95));\n}\n\n.focus-icon {\n    font-size: 2.5rem;\n    margin-bottom: 1rem;\n}\n\n.focus-card h3 {\n    color: #333;\n    font-size: 1.3rem;\n    margin-bottom: 0.5rem;\n    font-weight: 600;\n}\n\n.focus-card p {\n    color: #666;\n    font-size: 0.95rem;\n    margin: 0;\n    line-height: 1.4;\n}\n\n/* Session Options */\n.session-options {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    max-width: 600px;\n    margin: 0 auto;\n}\n\n.session-option {\n    background: rgba(255, 255, 255, 0.95);\n    border-radius: 20px;\n    padding: 1.5rem;\n    display: flex;\n    align-items: center;\n    gap: 1.5rem;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    border: 3px solid transparent;\n}\n\n.session-option:hover {\n    transform: translateX(10px);\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n}\n\n.session-option.selected {\n    border-color: #667eea;\n    background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(255, 255, 255, 0.95));\n}\n\n.session-visual {\n    flex-shrink: 0;\n}\n\n.person-icon {\n    width: 60px;\n    height: 60px;\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.5rem;\n    color: white;\n}\n\n.session-details h3 {\n    color: #333;\n    font-size: 1.4rem;\n    margin-bottom: 0.5rem;\n    font-weight: 600;\n}\n\n.session-details p {\n    color: #666;\n    margin-bottom: 1rem;\n    line-height: 1.4;\n}\n\n.session-features {\n    display: flex;\n    gap: 0.5rem;\n    flex-wrap: wrap;\n}\n\n.feature-tag {\n    background: rgba(102, 126, 234, 0.1);\n    color: #667eea;\n    padding: 0.25rem 0.75rem;\n    border-radius: 15px;\n    font-size: 0.8rem;\n    font-weight: 500;\n}\n\n/* Therapist Matching */\n.therapist-matching {\n    max-width: 500px;\n    margin: 0 auto;\n    text-align: center;\n}\n\n.matching-animation {\n    padding: 3rem 0;\n}\n\n.matching-spinner {\n    position: relative;\n    width: 100px;\n    height: 100px;\n    margin: 0 auto 2rem;\n}\n\n.spinner-ring {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    border: 4px solid rgba(255, 255, 255, 0.3);\n    border-top: 4px solid white;\n    border-radius: 50%;\n    animation: spin 2s linear infinite;\n}\n\n.matching-icon {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 2rem;\n    background: white;\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.matching-text {\n    color: white;\n}\n\n.matching-text h3 {\n    font-size: 1.5rem;\n    margin-bottom: 0.5rem;\n    font-weight: 600;\n}\n\n.matching-text p {\n    font-size: 1rem;\n    opacity: 0.8;\n}\n\n.therapist-result {\n    animation: fadeInUp 0.6s ease;\n}\n\n.therapist-card {\n    background: rgba(255, 255, 255, 0.95);\n    border-radius: 20px;\n    padding: 2rem;\n    display: flex;\n    align-items: center;\n    gap: 1.5rem;\n    text-align: left;\n}\n\n.therapist-avatar {\n    position: relative;\n    width: 80px;\n    height: 80px;\n    border-radius: 50%;\n    overflow: hidden;\n    flex-shrink: 0;\n}\n\n.therapist-avatar img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n}\n\n.avatar-fallback {\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 2rem;\n    color: white;\n}\n\n.therapist-info h3 {\n    color: #333;\n    font-size: 1.4rem;\n    margin-bottom: 0.5rem;\n    font-weight: 600;\n}\n\n.therapist-info p {\n    color: #666;\n    margin-bottom: 1rem;\n}\n\n.match-score {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n}\n\n.match-percentage {\n    background: linear-gradient(135deg, #4CAF50, #45a049);\n    color: white;\n    padding: 0.25rem 0.75rem;\n    border-radius: 15px;\n    font-size: 0.9rem;\n    font-weight: 600;\n    width: fit-content;\n}\n\n.match-reasons {\n    display: flex;\n    gap: 0.5rem;\n    flex-wrap: wrap;\n}\n\n.match-reasons span {\n    background: rgba(102, 126, 234, 0.1);\n    color: #667eea;\n    padding: 0.25rem 0.5rem;\n    border-radius: 10px;\n    font-size: 0.8rem;\n}\n\n/* Setup Summary */\n.setup-summary {\n    max-width: 400px;\n    margin: 0 auto 2rem;\n}\n\n.summary-card {\n    background: rgba(255, 255, 255, 0.95);\n    border-radius: 20px;\n    padding: 2rem;\n    text-align: left;\n}\n\n.summary-card h3 {\n    color: #333;\n    margin-bottom: 1rem;\n    font-size: 1.3rem;\n    font-weight: 600;\n}\n\n.summary-items {\n    display: flex;\n    flex-direction: column;\n    gap: 0.75rem;\n}\n\n.summary-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.summary-label {\n    color: #666;\n    font-weight: 500;\n}\n\n.summary-value {\n    color: #333;\n    font-weight: 600;\n}\n\n.success-icon {\n    font-size: 4rem;\n    margin-bottom: 1rem;\n    animation: bounce 1s ease infinite alternate;\n}\n\n/* Start Options */\n.start-options {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    max-width: 400px;\n    margin: 0 auto;\n}\n\n.start-button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.75rem;\n    padding: 1rem 2rem;\n    border: none;\n    border-radius: 25px;\n    font-size: 1.1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    text-decoration: none;\n}\n\n.start-button.primary {\n    background: linear-gradient(135deg, #4CAF50, #45a049);\n    color: white;\n    box-shadow: 0 4px 20px rgba(76, 175, 80, 0.3);\n}\n\n.start-button.primary:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 30px rgba(76, 175, 80, 0.4);\n}\n\n.start-button.secondary {\n    background: rgba(255, 255, 255, 0.9);\n    color: #667eea;\n    border: 2px solid rgba(102, 126, 234, 0.3);\n}\n\n.start-button.secondary:hover {\n    background: white;\n    border-color: #667eea;\n    transform: translateY(-2px);\n}\n\n.button-icon {\n    font-size: 1.2rem;\n}\n\n/* Navigation Controls */\n.navigation-controls {\n    position: sticky;\n    bottom: 0;\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(20px);\n    border-top: 1px solid rgba(255, 255, 255, 0.2);\n    padding: 1rem 2rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.nav-btn {\n    padding: 0.75rem 1.5rem;\n    border: none;\n    border-radius: 20px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.nav-btn.primary {\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    color: white;\n}\n\n.nav-btn.primary:hover:not(:disabled) {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);\n}\n\n.nav-btn.secondary {\n    background: transparent;\n    color: #666;\n    border: 2px solid #ddd;\n}\n\n.nav-btn.secondary:hover:not(:disabled) {\n    border-color: #667eea;\n    color: #667eea;\n}\n\n.nav-btn:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none !important;\n}\n\n/* Quick Help */\n.quick-help {\n    position: fixed;\n    bottom: 100px;\n    right: 2rem;\n    z-index: 1000;\n}\n\n.help-button {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    background: linear-gradient(135deg, #FF6B6B, #EE5A52);\n    color: white;\n    border: none;\n    cursor: pointer;\n    font-weight: 600;\n    font-size: 1.2rem;\n    box-shadow: 0 4px 20px rgba(255, 107, 107, 0.3);\n    transition: all 0.3s ease;\n}\n\n.help-button:hover {\n    transform: scale(1.1);\n}\n\n.help-tooltip {\n    position: absolute;\n    bottom: 60px;\n    right: 0;\n    background: rgba(0, 0, 0, 0.9);\n    color: white;\n    padding: 1rem;\n    border-radius: 10px;\n    width: 250px;\n    font-size: 0.9rem;\n    display: none;\n    animation: fadeInUp 0.3s ease;\n}\n\n.help-tooltip::after {\n    content: '';\n    position: absolute;\n    top: 100%;\n    right: 20px;\n    border: 8px solid transparent;\n    border-top: 8px solid rgba(0, 0, 0, 0.9);\n}\n\n/* Crisis Banner */\n.crisis-banner {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    background: linear-gradient(135deg, #FF6B6B, #EE5A52);\n    color: white;\n    padding: 0.5rem;\n    text-align: center;\n    font-size: 0.9rem;\n    font-weight: 500;\n    z-index: 200;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 1rem;\n    transform: translateY(-100%);\n    transition: transform 0.3s ease;\n}\n\n.crisis-banner.show {\n    transform: translateY(0);\n}\n\n.crisis-link {\n    color: white;\n    text-decoration: none;\n    background: rgba(255, 255, 255, 0.2);\n    padding: 0.25rem 0.75rem;\n    border-radius: 15px;\n    font-weight: 600;\n    transition: all 0.3s ease;\n}\n\n.crisis-link:hover {\n    background: rgba(255, 255, 255, 0.3);\n    color: white;\n}\n\n/* Animations */\n@keyframes slideIn {\n    from {\n        opacity: 0;\n        transform: translateX(50px);\n    }\n    to {\n        opacity: 1;\n        transform: translateX(0);\n    }\n}\n\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n@keyframes float {\n    0%, 100% {\n        transform: translateY(0px);\n    }\n    50% {\n        transform: translateY(-20px);\n    }\n}\n\n@keyframes spin {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n@keyframes bounce {\n    from {\n        transform: scale(1);\n    }\n    to {\n        transform: scale(1.1);\n    }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .progress-header {\n        padding: 1rem;\n        flex-direction: column;\n        gap: 1rem;\n    }\n\n    .progress-container {\n        max-width: 100%;\n    }\n\n    .onboarding-content {\n        padding: 1rem;\n    }\n\n    .step-header h1 {\n        font-size: 2.2rem;\n    }\n\n    .step-header h2 {\n        font-size: 1.8rem;\n    }\n\n    .focus-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .session-option {\n        flex-direction: column;\n        text-align: center;\n        gap: 1rem;\n    }\n\n    .therapist-card {\n        flex-direction: column;\n        text-align: center;\n    }\n\n    .navigation-controls {\n        padding: 1rem;\n    }\n\n    .quick-help {\n        bottom: 80px;\n        right: 1rem;\n    }\n\n    .start-options {\n        gap: 0.75rem;\n    }\n}\n\n/* Dark mode support */\n@media (prefers-color-scheme: dark) {\n    .focus-card,\n    .session-option,\n    .therapist-card,\n    .summary-card {\n        background: rgba(255, 255, 255, 0.1);\n        color: white;\n    }\n\n    .focus-card h3,\n    .session-details h3,\n    .therapist-info h3,\n    .summary-card h3 {\n        color: white;\n    }\n\n    .focus-card p,\n    .session-details p,\n    .therapist-info p {\n        color: rgba(255, 255, 255, 0.8);\n    }\n}\n\u003c/style\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003cscript\u003e\n// Modern Onboarding JavaScript\nclass ModernOnboarding {\n    constructor() {\n        this.currentStep = 1;\n        this.totalSteps = 5;\n        this.userPreferences = {\n            focus: null,\n            sessionType: null,\n            therapist: null\n        };\n        this.init();\n    }\n\n    init() {\n        this.bindEvents();\n        this.updateProgress();\n        this.showCrisisBannerIfNeeded();\n    }\n\n    bindEvents() {\n        // Focus cards\n        document.querySelectorAll('.focus-card').forEach(card =\u003e {\n            card.addEventListener('click', (e) =\u003e this.selectFocus(e));\n        });\n\n        // Session options\n        document.querySelectorAll('.session-option').forEach(option =\u003e {\n            option.addEventListener('click', (e) =\u003e this.selectSession(e));\n        });\n\n        // Keyboard navigation\n        document.addEventListener('keydown', (e) =\u003e {\n            if (e.key === 'ArrowRight' || e.key === ' ') {\n                e.preventDefault();\n                this.nextStep();\n            } else if (e.key === 'ArrowLeft') {\n                e.preventDefault();\n                this.previousStep();\n            } else if (e.key === 'Escape') {\n                this.skipOnboarding();\n            }\n        });\n\n        // Auto-advance when selections are made\n        this.setupAutoAdvance();\n    }\n\n    selectFocus(e) {\n        const card = e.currentTarget;\n        const focus = card.dataset.focus;\n\n        // Remove previous selection\n        document.querySelectorAll('.focus-card').forEach(c =\u003e c.classList.remove('selected'));\n        \n        // Add selection to clicked card\n        card.classList.add('selected');\n        \n        // Store preference\n        this.userPreferences.focus = focus;\n\n        // Auto-advance after short delay\n        setTimeout(() =\u003e {\n            this.nextStep();\n        }, 800);\n    }\n\n    selectSession(e) {\n        const option = e.currentTarget;\n        const session = option.dataset.session;\n\n        // Remove previous selection\n        document.querySelectorAll('.session-option').forEach(o =\u003e o.classList.remove('selected'));\n        \n        // Add selection to clicked option\n        option.classList.add('selected');\n        \n        // Store preference\n        this.userPreferences.sessionType = session;\n\n        // Auto-advance after short delay\n        setTimeout(() =\u003e {\n            this.nextStep();\n        }, 800);\n    }\n\n    setupAutoAdvance() {\n        // Advanced to step 4 automatically triggers matching\n        document.addEventListener('stepChanged', (e) =\u003e {\n            if (e.detail.step === 4) {\n                this.startTherapistMatching();\n            }\n        });\n    }\n\n    startTherapistMatching() {\n        const matchingText = document.getElementById('matchingText');\n        const matchingSubtext = document.getElementById('matchingSubtext');\n        const matchingAnimation = document.getElementById('matchingAnimation');\n        const therapistResult = document.getElementById('therapistResult');\n\n        const stages = [\n            { text: 'Analyzing your preferences...', subtext: 'Processing your focus area and session type' },\n            { text: 'Finding compatible therapists...', subtext: 'Searching our database of AI specialists' },\n            { text: 'Calculating match scores...', subtext: 'Using advanced algorithms to find your perfect match' },\n            { text: 'Perfect match found!', subtext: 'We found an AI therapist that\\'s 95% compatible with you' }\n        ];\n\n        let currentStage = 0;\n        \n        const updateStage = () =\u003e {\n            if (currentStage \u003c stages.length - 1) {\n                matchingText.textContent = stages[currentStage].text;\n                matchingSubtext.textContent = stages[currentStage].subtext;\n                currentStage++;\n                setTimeout(updateStage, 1500);\n            } else {\n                // Show final stage and then reveal result\n                matchingText.textContent = stages[currentStage].text;\n                matchingSubtext.textContent = stages[currentStage].subtext;\n                \n                setTimeout(() =\u003e {\n                    matchingAnimation.style.display = 'none';\n                    therapistResult.style.display = 'block';\n                    this.customizeTherapistMatch();\n                    \n                    // Auto-advance to final step\n                    setTimeout(() =\u003e {\n                        this.nextStep();\n                    }, 2000);\n                }, 1000);\n            }\n        };\n\n        updateStage();\n    }\n\n    customizeTherapistMatch() {\n        const therapistName = document.getElementById('therapistName');\n        const therapistSpecialty = document.getElementById('therapistSpecialty');\n        const matchReasons = document.getElementById('matchReasons');\n\n        // Customize based on user preferences\n        const therapists = {\n            anxiety: {\n                name: 'Dr. Maya Chen',\n                specialty: 'Cognitive Behavioral Therapy Specialist',\n                reasons: ['Specializes in anxiety', 'CBT approach', 'Individual therapy expert']\n            },\n            depression: {\n                name: 'Dr. James Wilson',\n                specialty: 'Depression \u0026 Mood Disorder Expert',\n                reasons: ['Depression specialist', 'DBT training', 'Supportive approach']\n            },\n            relationships: {\n                name: 'Dr. Sarah Martinez',\n                specialty: 'Relationship \u0026 Couples Counselor',\n                reasons: ['Gottman Method trained', 'Couples specialist', 'Communication expert']\n            },\n            trauma: {\n                name: 'Dr. Michael Thompson',\n                specialty: 'Trauma \u0026 PTSD Specialist',\n                reasons: ['EMDR certified', 'Trauma-informed', 'PTSD expert']\n            },\n            general: {\n                name: 'Dr. Lisa Rodriguez',\n                specialty: 'General Mental Health \u0026 Wellness',\n                reasons: ['Holistic approach', 'Wellness focused', 'Preventive care']\n            },\n            crisis: {\n                name: 'Dr. David Kim',\n                specialty: 'Crisis Intervention Specialist',\n                reasons: ['Crisis certified', '24/7 available', 'Emergency trained']\n            }\n        };\n\n        const selectedTherapist = therapists[this.userPreferences.focus] || therapists.general;\n        \n        therapistName.textContent = selectedTherapist.name;\n        therapistSpecialty.textContent = selectedTherapist.specialty;\n        \n        matchReasons.innerHTML = '';\n        selectedTherapist.reasons.forEach(reason =\u003e {\n            const span = document.createElement('span');\n            span.textContent = reason;\n            matchReasons.appendChild(span);\n        });\n\n        // Store therapist preference\n        this.userPreferences.therapist = selectedTherapist.name;\n    }\n\n    nextStep() {\n        if (this.currentStep \u003c this.totalSteps) {\n            this.currentStep++;\n            this.showStep(this.currentStep);\n        }\n    }\n\n    previousStep() {\n        if (this.currentStep \u003e 1) {\n            this.currentStep--;\n            this.showStep(this.currentStep);\n        }\n    }\n\n    showStep(stepNumber) {\n        // Hide all steps\n        document.querySelectorAll('.step-panel').forEach(panel =\u003e {\n            panel.classList.remove('active');\n        });\n\n        // Show current step\n        const currentPanel = document.querySelector(`[data-step=\"${stepNumber}\"]`);\n        if (currentPanel) {\n            currentPanel.classList.add('active');\n        }\n\n        // Update navigation\n        this.updateNavigation();\n        this.updateProgress();\n        \n        // Update summary if on final step\n        if (stepNumber === 5) {\n            this.updateSummary();\n        }\n\n        // Dispatch custom event\n        document.dispatchEvent(new CustomEvent('stepChanged', {\n            detail: { step: stepNumber }\n        }));\n    }\n\n    updateNavigation() {\n        const backButton = document.getElementById('backButton');\n        const nextButton = document.getElementById('nextButton');\n\n        backButton.disabled = this.currentStep === 1;\n        \n        if (this.currentStep === this.totalSteps) {\n            nextButton.style.display = 'none';\n        } else {\n            nextButton.style.display = 'flex';\n            \n            // Update button text based on step\n            const buttonTexts = {\n                1: 'Get Started →',\n                2: 'Continue →',\n                3: 'Continue →',\n                4: 'Continue →'\n            };\n            \n            nextButton.querySelector('span').textContent = buttonTexts[this.currentStep] || 'Continue →';\n        }\n    }\n\n    updateProgress() {\n        const progressFill = document.getElementById('progressFill');\n        const stepCounter = document.getElementById('stepCounter');\n        \n        const percentage = (this.currentStep / this.totalSteps) * 100;\n        progressFill.style.width = `${percentage}%`;\n        stepCounter.textContent = `${this.currentStep} of ${this.totalSteps}`;\n    }\n\n    updateSummary() {\n        const focusMap = {\n            anxiety: 'Anxiety \u0026 Stress',\n            depression: 'Depression \u0026 Mood',\n            relationships: 'Relationships',\n            trauma: 'Trauma \u0026 PTSD',\n            general: 'General Wellness',\n            crisis: 'Crisis Support'\n        };\n\n        const sessionMap = {\n            individual: 'Individual Therapy',\n            couples: 'Couples Therapy',\n            group: 'Group Support'\n        };\n\n        document.getElementById('selectedFocus').textContent = \n            focusMap[this.userPreferences.focus] || 'Not selected';\n        document.getElementById('selectedSession').textContent = \n            sessionMap[this.userPreferences.sessionType] || 'Not selected';\n        document.getElementById('selectedTherapist').textContent = \n            this.userPreferences.therapist || 'Not assigned';\n    }\n\n    showCrisisBannerIfNeeded() {\n        // Show crisis banner if user selected crisis or if it's after hours\n        const hour = new Date().getHours();\n        const isAfterHours = hour \u003c 8 || hour \u003e 18;\n        \n        if (this.userPreferences.focus === 'crisis' || isAfterHours) {\n            const banner = document.querySelector('.crisis-banner');\n            banner.classList.add('show');\n        }\n    }\n\n    skipOnboarding() {\n        if (confirm('Are you sure you want to skip the setup? You can always complete it later from your settings.')) {\n            this.savePreferences();\n            window.location.href = '/';\n        }\n    }\n\n    savePreferences() {\n        // Save user preferences to localStorage\n        localStorage.setItem('mindmend_onboarding_completed', 'true');\n        localStorage.setItem('mindmend_user_preferences', JSON.stringify(this.userPreferences));\n        \n        // Send to backend if user is logged in\n        if (window.user_id) {\n            fetch('/api/user/preferences', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(this.userPreferences)\n            }).catch(err =\u003e console.warn('Failed to save preferences:', err));\n        }\n    }\n\n    complete() {\n        this.savePreferences();\n        \n        // Show success message\n        this.showSuccessMessage();\n    }\n\n    showSuccessMessage() {\n        const content = document.getElementById('onboardingContent');\n        content.innerHTML = `\n            \u003cdiv class=\"completion-screen\"\u003e\n                \u003cdiv class=\"success-animation\"\u003e\n                    \u003cdiv class=\"checkmark\"\u003e✓\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ch2\u003eWelcome to MindMend!\u003c/h2\u003e\n                \u003cp\u003eYour personalized mental health journey starts now.\u003c/p\u003e\n                \u003cdiv class=\"completion-actions\"\u003e\n                    \u003cbutton class=\"start-button primary\" onclick=\"window.location.href='/individual'\"\u003e\n                        \u003cspan class=\"button-icon\"\u003e🚀\u003c/span\u003e\n                        Start My First Session\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        `;\n\n        // Hide navigation\n        document.querySelector('.navigation-controls').style.display = 'none';\n    }\n}\n\n// Global functions\nfunction skipOnboarding() {\n    onboarding.skipOnboarding();\n}\n\nfunction nextStep() {\n    onboarding.nextStep();\n}\n\nfunction previousStep() {\n    onboarding.previousStep();\n}\n\nfunction startFirstSession() {\n    onboarding.savePreferences();\n    window.location.href = '/individual';\n}\n\nfunction takeTour() {\n    onboarding.savePreferences();\n    window.location.href = '/?tour=true';\n}\n\nfunction toggleHelp() {\n    const tooltip = document.getElementById('helpTooltip');\n    tooltip.style.display = tooltip.style.display === 'block' ? 'none' : 'block';\n}\n\nfunction showCrisisModal() {\n    // Implement crisis modal\n    alert('Crisis support coming soon. For immediate help, call Lifeline Australia: 13 11 14');\n}\n\n// Initialize when DOM is loaded\nlet onboarding;\ndocument.addEventListener('DOMContentLoaded', function() {\n    onboarding = new ModernOnboarding();\n    \n    // Auto-focus on first interactive element\n    const firstFocusCard = document.querySelector('.focus-card');\n    if (firstFocusCard \u0026\u0026 !window.matchMedia('(max-width: 768px)').matches) {\n        firstFocusCard.focus();\n    }\n});\n\n// Analytics tracking (placeholder)\nfunction trackOnboardingEvent(event, data = {}) {\n    if (window.gtag) {\n        gtag('event', event, {\n            event_category: 'onboarding',\n            ...data\n        });\n    }\n}\n\u003c/script\u003e\n{% endblock %}",
                "premium.html": "{% extends \"base.html\" %}\n\n{% block title %}Premium Features - Mind Mend{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"row\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"text-center mb-5\"\u003e\n            \u003ch1\u003e\u003ci class=\"fas fa-crown text-warning me-2\"\u003e\u003c/i\u003eMind Mend Premium\u003c/h1\u003e\n            \u003cp class=\"lead\"\u003eUnlock advanced AI features and connect with licensed human therapists\u003c/p\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Pricing Plans --\u003e\n\u003cdiv class=\"row g-4 mb-5\"\u003e\n    \u003cdiv class=\"col-lg-4\"\u003e\n        \u003cdiv class=\"card h-100\"\u003e\n            \u003cdiv class=\"card-header text-center\"\u003e\n                \u003ch4\u003eFree Tier\u003c/h4\u003e\n                \u003cdiv class=\"h2 mb-0\"\u003e$0\u003csmall class=\"text-muted\"\u003e/month\u003c/small\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eBasic AI therapy sessions\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eText-based analysis\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eBasic exercises\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eProgress tracking\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eCrisis detection\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer\"\u003e\n                \u003cbutton class=\"btn btn-outline-secondary w-100\" disabled\u003e\n                    Current Plan\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"col-lg-4\"\u003e\n        \u003cdiv class=\"card h-100 border-warning\"\u003e\n            \u003cdiv class=\"card-header text-center bg-warning text-dark\"\u003e\n                \u003ch4\u003ePremium AI\u003c/h4\u003e\n                \u003cdiv class=\"h2 mb-0\"\u003e$29\u003csmall class=\"text-muted\"\u003e/month\u003c/small\u003e\u003c/div\u003e\n                \u003cspan class=\"badge bg-dark\"\u003eMost Popular\u003c/span\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eEverything in Free\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eAdvanced video analysis\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eMicroexpression detection\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eBiometric integration\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eUnlimited sessions\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003ePersonalized exercise library\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eAdvanced analytics\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eExport data\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer\"\u003e\n                \u003cbutton class=\"btn btn-warning w-100\" onclick=\"upgradeToPremium('premium_ai')\"\u003e\n                    \u003ci class=\"fas fa-crown me-1\"\u003e\u003c/i\u003eUpgrade Now\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"col-lg-4\"\u003e\n        \u003cdiv class=\"card h-100 border-primary\"\u003e\n            \u003cdiv class=\"card-header text-center bg-primary text-white\"\u003e\n                \u003ch4\u003ePremium Plus\u003c/h4\u003e\n                \u003cdiv class=\"h2 mb-0\"\u003e$99\u003csmall class=\"text-muted\"\u003e/month\u003c/small\u003e\u003c/div\u003e\n                \u003cspan class=\"badge bg-warning text-dark\"\u003eHuman + AI\u003c/span\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eEverything in Premium AI\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eLicensed human therapists\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003e4 human sessions/month\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eCrisis intervention\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eAI-human collaboration\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003ePriority support\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eFamily therapy options\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eCustom treatment plans\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer\"\u003e\n                \u003cbutton class=\"btn btn-primary w-100\" onclick=\"upgradeToPremium('premium_plus')\"\u003e\n                    \u003ci class=\"fas fa-user-md me-1\"\u003e\u003c/i\u003eGet Human Support\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Premium Features Showcase --\u003e\n\u003cdiv class=\"row mb-5\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003ch2 class=\"text-center mb-4\"\u003ePremium Features\u003c/h2\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"row g-4 mb-5\"\u003e\n    \u003cdiv class=\"col-lg-6\"\u003e\n        \u003cdiv class=\"card h-100\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"d-flex align-items-center mb-3\"\u003e\n                    \u003ci class=\"fas fa-video fa-2x text-primary me-3\"\u003e\u003c/i\u003e\n                    \u003ch5 class=\"mb-0\"\u003eAdvanced Video Analysis\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cp class=\"text-muted\"\u003eReal-time emotion detection, microexpression analysis, and voice sentiment tracking with 95% accuracy.\u003c/p\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eFacial expression mapping\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eEye movement tracking\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eVoice tone analysis\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eMicro-emotion detection\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"col-lg-6\"\u003e\n        \u003cdiv class=\"card h-100\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"d-flex align-items-center mb-3\"\u003e\n                    \u003ci class=\"fas fa-heartbeat fa-2x text-danger me-3\"\u003e\u003c/i\u003e\n                    \u003ch5 class=\"mb-0\"\u003eBiometric Integration\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cp class=\"text-muted\"\u003eConnect your wearable devices for comprehensive health monitoring during therapy sessions.\u003c/p\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eApple Watch integration\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eHeart rate monitoring\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eStress level tracking\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eSleep quality analysis\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"col-lg-6\"\u003e\n        \u003cdiv class=\"card h-100\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"d-flex align-items-center mb-3\"\u003e\n                    \u003ci class=\"fas fa-user-md fa-2x text-success me-3\"\u003e\u003c/i\u003e\n                    \u003ch5 class=\"mb-0\"\u003eLicensed Human Therapists\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cp class=\"text-muted\"\u003eConnect with board-certified therapists who work alongside our AI for comprehensive care.\u003c/p\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eLicensed professionals\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eAI-assisted sessions\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eCrisis intervention\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003ePersonalized treatment\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"col-lg-6\"\u003e\n        \u003cdiv class=\"card h-100\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"d-flex align-items-center mb-3\"\u003e\n                    \u003ci class=\"fas fa-brain fa-2x text-info me-3\"\u003e\u003c/i\u003e\n                    \u003ch5 class=\"mb-0\"\u003eAI-Human Collaboration\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cp class=\"text-muted\"\u003eUnique hybrid approach combining AI insights with human empathy and expertise.\u003c/p\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eContinuous monitoring\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eReal-time insights\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eProgress optimization\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003ePredictive interventions\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Human Therapist Directory --\u003e\n\u003cdiv class=\"row mb-5\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-users me-2\"\u003e\u003c/i\u003eMeet Our Licensed Therapists\u003c/h5\u003e\n                \u003csmall class=\"text-muted\"\u003eAvailable for Premium Plus subscribers\u003c/small\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"row g-4\"\u003e\n                    \u003cdiv class=\"col-lg-4\"\u003e\n                        \u003cdiv class=\"card bg-dark border-0\"\u003e\n                            \u003cdiv class=\"card-body text-center\"\u003e\n                                \u003cdiv class=\"rounded-circle bg-primary d-flex align-items-center justify-content-center mx-auto mb-3\" style=\"width: 60px; height: 60px;\"\u003e\n                                    \u003ci class=\"fas fa-user-md fa-lg text-white\"\u003e\u003c/i\u003e\n                                \u003c/div\u003e\n                                \u003ch6\u003eDr. Sarah Mitchell\u003c/h6\u003e\n                                \u003cp class=\"text-muted small\"\u003eLicensed Clinical Psychologist\u003c/p\u003e\n                                \u003cp class=\"small\"\u003eSpecializes in anxiety, depression, and cognitive behavioral therapy. 10+ years experience.\u003c/p\u003e\n                                \u003cdiv class=\"d-flex justify-content-center gap-1 mb-2\"\u003e\n                                    \u003cspan class=\"badge bg-info\"\u003eCBT\u003c/span\u003e\n                                    \u003cspan class=\"badge bg-info\"\u003eAnxiety\u003c/span\u003e\n                                    \u003cspan class=\"badge bg-info\"\u003eDepression\u003c/span\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"col-lg-4\"\u003e\n                        \u003cdiv class=\"card bg-dark border-0\"\u003e\n                            \u003cdiv class=\"card-body text-center\"\u003e\n                                \u003cdiv class=\"rounded-circle bg-success d-flex align-items-center justify-content-center mx-auto mb-3\" style=\"width: 60px; height: 60px;\"\u003e\n                                    \u003ci class=\"fas fa-user-md fa-lg text-white\"\u003e\u003c/i\u003e\n                                \u003c/div\u003e\n                                \u003ch6\u003eDr. Michael Chen\u003c/h6\u003e\n                                \u003cp class=\"text-muted small\"\u003eLicensed Marriage \u0026 Family Therapist\u003c/p\u003e\n                                \u003cp class=\"small\"\u003eExpert in couples therapy, family dynamics, and relationship counseling. 8+ years experience.\u003c/p\u003e\n                                \u003cdiv class=\"d-flex justify-content-center gap-1 mb-2\"\u003e\n                                    \u003cspan class=\"badge bg-success\"\u003eCouples\u003c/span\u003e\n                                    \u003cspan class=\"badge bg-success\"\u003eFamily\u003c/span\u003e\n                                    \u003cspan class=\"badge bg-success\"\u003eEFT\u003c/span\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"col-lg-4\"\u003e\n                        \u003cdiv class=\"card bg-dark border-0\"\u003e\n                            \u003cdiv class=\"card-body text-center\"\u003e\n                                \u003cdiv class=\"rounded-circle bg-warning d-flex align-items-center justify-content-center mx-auto mb-3\" style=\"width: 60px; height: 60px;\"\u003e\n                                    \u003ci class=\"fas fa-user-md fa-lg text-dark\"\u003e\u003c/i\u003e\n                                \u003c/div\u003e\n                                \u003ch6\u003eDr. Emily Rodriguez\u003c/h6\u003e\n                                \u003cp class=\"text-muted small\"\u003eLicensed Clinical Social Worker\u003c/p\u003e\n                                \u003cp class=\"small\"\u003eTrauma specialist with expertise in PTSD, addiction recovery, and crisis intervention.\u003c/p\u003e\n                                \u003cdiv class=\"d-flex justify-content-center gap-1 mb-2\"\u003e\n                                    \u003cspan class=\"badge bg-warning text-dark\"\u003eTrauma\u003c/span\u003e\n                                    \u003cspan class=\"badge bg-warning text-dark\"\u003ePTSD\u003c/span\u003e\n                                    \u003cspan class=\"badge bg-warning text-dark\"\u003eCrisis\u003c/span\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Testimonials --\u003e\n\u003cdiv class=\"row mb-5\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003ch3 class=\"text-center mb-4\"\u003eWhat Our Premium Users Say\u003c/h3\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"row g-4 mb-5\"\u003e\n    \u003cdiv class=\"col-lg-4\"\u003e\n        \u003cdiv class=\"card h-100\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"d-flex align-items-center mb-3\"\u003e\n                    \u003cdiv class=\"rounded-circle bg-primary d-flex align-items-center justify-content-center me-3\" style=\"width: 40px; height: 40px;\"\u003e\n                        \u003ci class=\"fas fa-user text-white\"\u003e\u003c/i\u003e\n                    \u003c/div\u003e\n                    \u003cdiv\u003e\n                        \u003ch6 class=\"mb-0\"\u003eAlex M.\u003c/h6\u003e\n                        \u003csmall class=\"text-muted\"\u003ePremium AI User\u003c/small\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cp class=\"text-muted\"\u003e\"The video analysis features are incredible. The AI picks up on emotions I didn't even realize I was expressing. It's like having a therapist who never misses anything.\"\u003c/p\u003e\n                \u003cdiv class=\"text-warning\"\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"col-lg-4\"\u003e\n        \u003cdiv class=\"card h-100\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"d-flex align-items-center mb-3\"\u003e\n                    \u003cdiv class=\"rounded-circle bg-success d-flex align-items-center justify-content-center me-3\" style=\"width: 40px; height: 40px;\"\u003e\n                        \u003ci class=\"fas fa-user text-white\"\u003e\u003c/i\u003e\n                    \u003c/div\u003e\n                    \u003cdiv\u003e\n                        \u003ch6 class=\"mb-0\"\u003eJordan \u0026 Sam\u003c/h6\u003e\n                        \u003csmall class=\"text-muted\"\u003ePremium Plus Couple\u003c/small\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cp class=\"text-muted\"\u003e\"Having both AI insights and human guidance saved our marriage. Dr. Chen works with the AI data to give us exactly what we need in each session.\"\u003c/p\u003e\n                \u003cdiv class=\"text-warning\"\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"col-lg-4\"\u003e\n        \u003cdiv class=\"card h-100\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"d-flex align-items-center mb-3\"\u003e\n                    \u003cdiv class=\"rounded-circle bg-info d-flex align-items-center justify-content-center me-3\" style=\"width: 40px; height: 40px;\"\u003e\n                        \u003ci class=\"fas fa-user text-white\"\u003e\u003c/i\u003e\n                    \u003c/div\u003e\n                    \u003cdiv\u003e\n                        \u003ch6 class=\"mb-0\"\u003eTaylor K.\u003c/h6\u003e\n                        \u003csmall class=\"text-muted\"\u003ePremium Plus User\u003c/small\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cp class=\"text-muted\"\u003e\"The biometric integration is a game-changer. My therapist can see how my anxiety affects my heart rate in real-time and adjust our approach accordingly.\"\u003c/p\u003e\n                \u003cdiv class=\"text-warning\"\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                    \u003ci class=\"fas fa-star\"\u003e\u003c/i\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- FAQ Section --\u003e\n\u003cdiv class=\"row mb-5\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003ch3 class=\"text-center mb-4\"\u003eFrequently Asked Questions\u003c/h3\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"row\"\u003e\n    \u003cdiv class=\"col-lg-8 mx-auto\"\u003e\n        \u003cdiv class=\"accordion\" id=\"faqAccordion\"\u003e\n            \u003cdiv class=\"accordion-item\"\u003e\n                \u003ch2 class=\"accordion-header\"\u003e\n                    \u003cbutton class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#faq1\"\u003e\n                        How does the AI-human collaboration work?\n                    \u003c/button\u003e\n                \u003c/h2\u003e\n                \u003cdiv id=\"faq1\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#faqAccordion\"\u003e\n                    \u003cdiv class=\"accordion-body\"\u003e\n                        Our AI continuously analyzes your verbal, visual, and biometric data during sessions. Licensed therapists receive real-time insights and historical patterns to inform their therapeutic approach. This creates a uniquely personalized and data-driven treatment experience.\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"accordion-item\"\u003e\n                \u003ch2 class=\"accordion-header\"\u003e\n                    \u003cbutton class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#faq2\"\u003e\n                        Is my biometric data secure and private?\n                    \u003c/button\u003e\n                \u003c/h2\u003e\n                \u003cdiv id=\"faq2\" class=\"accordion-collapse collapse\" data-bs-parent=\"#faqAccordion\"\u003e\n                    \u003cdiv class=\"accordion-body\"\u003e\n                        Absolutely. All biometric data is encrypted in transit and at rest. We follow HIPAA compliance standards and never share your data with third parties. You maintain full control over your data and can delete it at any time.\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"accordion-item\"\u003e\n                \u003ch2 class=\"accordion-header\"\u003e\n                    \u003cbutton class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#faq3\"\u003e\n                        Can I switch between plans?\n                    \u003c/button\u003e\n                \u003c/h2\u003e\n                \u003cdiv id=\"faq3\" class=\"accordion-collapse collapse\" data-bs-parent=\"#faqAccordion\"\u003e\n                    \u003cdiv class=\"accordion-body\"\u003e\n                        Yes, you can upgrade or downgrade your plan at any time. When upgrading, new features become available immediately. When downgrading, you'll retain access to premium features until your current billing cycle ends.\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"accordion-item\"\u003e\n                \u003ch2 class=\"accordion-header\"\u003e\n                    \u003cbutton class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#faq4\"\u003e\n                        How do I connect my wearable devices?\n                    \u003c/button\u003e\n                \u003c/h2\u003e\n                \u003cdiv id=\"faq4\" class=\"accordion-collapse collapse\" data-bs-parent=\"#faqAccordion\"\u003e\n                    \u003cdiv class=\"accordion-body\"\u003e\n                        Premium subscribers can connect devices through our integrations page. We support Apple Watch, Fitbit, Garmin, and other major wearable brands. Setup takes just a few minutes and data syncs automatically.\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"accordion-item\"\u003e\n                \u003ch2 class=\"accordion-header\"\u003e\n                    \u003cbutton class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#faq5\"\u003e\n                        What happens if I need crisis support?\n                    \u003c/button\u003e\n                \u003c/h2\u003e\n                \u003cdiv id=\"faq5\" class=\"accordion-collapse collapse\" data-bs-parent=\"#faqAccordion\"\u003e\n                    \u003cdiv class=\"accordion-body\"\u003e\n                        Our AI constantly monitors for crisis indicators. Premium Plus subscribers get immediate access to crisis counselors. All users have access to emergency resources and our AI will always recommend professional help when needed.\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- CTA Section --\u003e\n\u003cdiv class=\"row mt-5\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card bg-gradient border-0 text-center\"\u003e\n            \u003cdiv class=\"card-body py-5\"\u003e\n                \u003ch3 class=\"text-white mb-3\"\u003eReady to Transform Your Mental Health Journey?\u003c/h3\u003e\n                \u003cp class=\"text-white-50 mb-4\"\u003eJoin thousands who have upgraded to premium AI-powered therapy with human expertise.\u003c/p\u003e\n                \u003cdiv class=\"d-flex justify-content-center gap-3 flex-wrap\"\u003e\n                    \u003cbutton class=\"btn btn-warning btn-lg\" onclick=\"upgradeToPremium('premium_ai')\"\u003e\n                        \u003ci class=\"fas fa-crown me-2\"\u003e\u003c/i\u003eTry Premium AI - $29/month\n                    \u003c/button\u003e\n                    \u003cbutton class=\"btn btn-outline-light btn-lg\" onclick=\"upgradeToPremium('premium_plus')\"\u003e\n                        \u003ci class=\"fas fa-user-md me-2\"\u003e\u003c/i\u003eGet Human Support - $99/month\n                    \u003c/button\u003e\n                \u003c/div\u003e\n                \u003cp class=\"text-white-50 mt-3 mb-0\"\u003e\n                    \u003csmall\u003e30-day money-back guarantee • Cancel anytime • HIPAA compliant\u003c/small\u003e\n                \u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003cscript\u003e\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Add any JavaScript for premium page functionality\n});\n\nfunction upgradeToPremium(planType) {\n    // In a real implementation, this would integrate with Stripe\n    // For now, show a placeholder\n    \n    const planNames = {\n        'premium_ai': 'Premium AI',\n        'premium_plus': 'Premium Plus'\n    };\n    \n    const planPrices = {\n        'premium_ai': 29,\n        'premium_plus': 99\n    };\n    \n    if (confirm(`Upgrade to ${planNames[planType]} for $${planPrices[planType]}/month?`)) {\n        // Here you would redirect to Stripe checkout or handle payment\n        alert(`Redirecting to secure checkout for ${planNames[planType]}...`);\n        \n        // In a real implementation:\n        // window.location.href = `/checkout/${planType}`;\n        \n        // For demonstration, show success message\n        setTimeout(() =\u003e {\n            alert('Payment integration will be available soon! Thank you for your interest.');\n        }, 1000);\n    }\n}\n\n// Smooth scrolling for internal links\ndocument.querySelectorAll('a[href^=\"#\"]').forEach(anchor =\u003e {\n    anchor.addEventListener('click', function (e) {\n        e.preventDefault();\n        document.querySelector(this.getAttribute('href')).scrollIntoView({\n            behavior: 'smooth'\n        });\n    });\n});\n\u003c/script\u003e\n{% endblock %}\n",
                "premium_session.html": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003ePremium Human Sessions - Mind Mend\u003c/title\u003e\n    \u003clink href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\"\u003e\n    \u003cstyle\u003e\n        body {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            font-family: 'Arial', sans-serif;\n        }\n        .session-container {\n            background: rgba(255, 255, 255, 0.95);\n            border-radius: 20px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            padding: 2rem;\n            margin: 2rem auto;\n            max-width: 900px;\n        }\n        .coming-soon-badge {\n            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n            color: white;\n            border-radius: 50px;\n            padding: 10px 20px;\n            display: inline-block;\n            margin-bottom: 1rem;\n            font-weight: bold;\n        }\n        .therapist-card {\n            background: #f8f9fa;\n            border-radius: 15px;\n            padding: 1.5rem;\n            margin: 1rem 0;\n            transition: transform 0.3s ease;\n            border: 2px solid transparent;\n        }\n        .therapist-card:hover {\n            transform: translateY(-3px);\n            border-color: #667eea;\n        }\n        .session-placeholder {\n            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n            color: white;\n            border-radius: 15px;\n            padding: 2rem;\n            text-align: center;\n            margin: 2rem 0;\n        }\n        .video-call-placeholder {\n            background: #f8f9fa;\n            border: 3px dashed #dee2e6;\n            border-radius: 15px;\n            height: 400px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            flex-direction: column;\n            margin: 2rem 0;\n        }\n        .btn-book-session {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            border: none;\n            padding: 12px 25px;\n            border-radius: 50px;\n            color: white;\n            font-weight: bold;\n            transition: all 0.3s ease;\n        }\n        .btn-book-session:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 8px 16px rgba(102, 126, 234, 0.3);\n            color: white;\n        }\n    \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"session-container\"\u003e\n            \u003cdiv class=\"text-center mb-4\"\u003e\n                \u003cdiv class=\"coming-soon-badge\"\u003e\n                    \u003ci class=\"fas fa-clock me-2\"\u003e\u003c/i\u003eComing Soon\n                \u003c/div\u003e\n                \u003ch1 class=\"display-4 text-primary\"\u003e\n                    \u003ci class=\"fas fa-video me-3\"\u003e\u003c/i\u003ePremium Human Sessions\n                \u003c/h1\u003e\n                \u003cp class=\"lead text-muted\"\u003eConnect with licensed mental health professionals\u003c/p\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Video Session Placeholder --\u003e\n            \u003cdiv class=\"video-call-placeholder\"\u003e\n                \u003ci class=\"fas fa-video fa-4x text-muted mb-3\"\u003e\u003c/i\u003e\n                \u003ch4 class=\"text-muted\"\u003eVideo Session Platform\u003c/h4\u003e\n                \u003cp class=\"text-muted\"\u003eSecure video calling with licensed therapists\u003c/p\u003e\n                \u003csmall class=\"text-muted\"\u003eWebRTC integration coming in Level 3+\u003c/small\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Available Therapists --\u003e\n            \u003ch3 class=\"mb-4\"\u003e\u003ci class=\"fas fa-users me-2\"\u003e\u003c/i\u003eAvailable Therapists (Preview)\u003c/h3\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003cdiv class=\"therapist-card\"\u003e\n                        \u003cdiv class=\"d-flex align-items-center mb-3\"\u003e\n                            \u003cdiv class=\"bg-primary rounded-circle p-3 me-3\"\u003e\n                                \u003ci class=\"fas fa-user-md text-white\"\u003e\u003c/i\u003e\n                            \u003c/div\u003e\n                            \u003cdiv\u003e\n                                \u003ch5 class=\"mb-0\"\u003eDr. Sarah Johnson\u003c/h5\u003e\n                                \u003csmall class=\"text-muted\"\u003eLicensed Clinical Psychologist\u003c/small\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cp class=\"small\"\u003eSpecializes in anxiety, depression, and cognitive behavioral therapy. 15+ years experience.\u003c/p\u003e\n                        \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                            \u003cdiv\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003csmall class=\"text-muted ms-1\"\u003e4.9 (127 reviews)\u003c/small\u003e\n                            \u003c/div\u003e\n                            \u003cbutton class=\"btn btn-book-session btn-sm\" onclick=\"showBookingModal('Dr. Sarah Johnson')\"\u003e\n                                Book Session\n                            \u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003cdiv class=\"therapist-card\"\u003e\n                        \u003cdiv class=\"d-flex align-items-center mb-3\"\u003e\n                            \u003cdiv class=\"bg-success rounded-circle p-3 me-3\"\u003e\n                                \u003ci class=\"fas fa-heart text-white\"\u003e\u003c/i\u003e\n                            \u003c/div\u003e\n                            \u003cdiv\u003e\n                                \u003ch5 class=\"mb-0\"\u003eDr. Michael Chen\u003c/h5\u003e\n                                \u003csmall class=\"text-muted\"\u003eMarriage \u0026 Family Therapist\u003c/small\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cp class=\"small\"\u003eRelationship counseling, couples therapy, and family dynamics. Bilingual (English/Mandarin).\u003c/p\u003e\n                        \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                            \u003cdiv\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003csmall class=\"text-muted ms-1\"\u003e4.8 (89 reviews)\u003c/small\u003e\n                            \u003c/div\u003e\n                            \u003cbutton class=\"btn btn-book-session btn-sm\" onclick=\"showBookingModal('Dr. Michael Chen')\"\u003e\n                                Book Session\n                            \u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003cdiv class=\"therapist-card\"\u003e\n                        \u003cdiv class=\"d-flex align-items-center mb-3\"\u003e\n                            \u003cdiv class=\"bg-info rounded-circle p-3 me-3\"\u003e\n                                \u003ci class=\"fas fa-brain text-white\"\u003e\u003c/i\u003e\n                            \u003c/div\u003e\n                            \u003cdiv\u003e\n                                \u003ch5 class=\"mb-0\"\u003eDr. Emily Rodriguez\u003c/h5\u003e\n                                \u003csmall class=\"text-muted\"\u003eTrauma \u0026 PTSD Specialist\u003c/small\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cp class=\"small\"\u003eEMDR therapy, trauma recovery, and post-traumatic stress treatment. Military veteran support.\u003c/p\u003e\n                        \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                            \u003cdiv\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003csmall class=\"text-muted ms-1\"\u003e4.9 (156 reviews)\u003c/small\u003e\n                            \u003c/div\u003e\n                            \u003cbutton class=\"btn btn-book-session btn-sm\" onclick=\"showBookingModal('Dr. Emily Rodriguez')\"\u003e\n                                Book Session\n                            \u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003cdiv class=\"therapist-card\"\u003e\n                        \u003cdiv class=\"d-flex align-items-center mb-3\"\u003e\n                            \u003cdiv class=\"bg-warning rounded-circle p-3 me-3\"\u003e\n                                \u003ci class=\"fas fa-child text-white\"\u003e\u003c/i\u003e\n                            \u003c/div\u003e\n                            \u003cdiv\u003e\n                                \u003ch5 class=\"mb-0\"\u003eDr. James Wilson\u003c/h5\u003e\n                                \u003csmall class=\"text-muted\"\u003eChild \u0026 Adolescent Psychologist\u003c/small\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cp class=\"small\"\u003eYouth counseling, behavioral issues, ADHD, and developmental disorders. Ages 5-18.\u003c/p\u003e\n                        \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                            \u003cdiv\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003ci class=\"fas fa-star text-warning\"\u003e\u003c/i\u003e\n                                \u003csmall class=\"text-muted ms-1\"\u003e4.7 (94 reviews)\u003c/small\u003e\n                            \u003c/div\u003e\n                            \u003cbutton class=\"btn btn-book-session btn-sm\" onclick=\"showBookingModal('Dr. James Wilson')\"\u003e\n                                Book Session\n                            \u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Session Features --\u003e\n            \u003cdiv class=\"session-placeholder\"\u003e\n                \u003ch3\u003e\u003ci class=\"fas fa-shield-alt me-2\"\u003e\u003c/i\u003eSecure \u0026 Professional\u003c/h3\u003e\n                \u003cp class=\"mb-3\"\u003ePremium features for human counselor sessions:\u003c/p\u003e\n                \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-md-3 text-center mb-2\"\u003e\n                        \u003ci class=\"fas fa-lock fa-2x mb-2\"\u003e\u003c/i\u003e\n                        \u003cp\u003eHIPAA Compliant\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-3 text-center mb-2\"\u003e\n                        \u003ci class=\"fas fa-calendar-alt fa-2x mb-2\"\u003e\u003c/i\u003e\n                        \u003cp\u003eFlexible Scheduling\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-3 text-center mb-2\"\u003e\n                        \u003ci class=\"fas fa-mobile-alt fa-2x mb-2\"\u003e\u003c/i\u003e\n                        \u003cp\u003eMobile \u0026 Desktop\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-3 text-center mb-2\"\u003e\n                        \u003ci class=\"fas fa-clock fa-2x mb-2\"\u003e\u003c/i\u003e\n                        \u003cp\u003e24/7 Crisis Support\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Session Types --\u003e\n            \u003cdiv class=\"row mb-4\"\u003e\n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003cdiv class=\"card h-100 text-center\"\u003e\n                        \u003cdiv class=\"card-body\"\u003e\n                            \u003ci class=\"fas fa-user fa-3x text-primary mb-3\"\u003e\u003c/i\u003e\n                            \u003ch5\u003eIndividual Session\u003c/h5\u003e\n                            \u003cp class=\"text-muted\"\u003eOne-on-one therapy with licensed professional\u003c/p\u003e\n                            \u003ch4 class=\"text-primary\"\u003e$120\u003csmall\u003e/session\u003c/small\u003e\u003c/h4\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003cdiv class=\"card h-100 text-center\"\u003e\n                        \u003cdiv class=\"card-body\"\u003e\n                            \u003ci class=\"fas fa-heart fa-3x text-danger mb-3\"\u003e\u003c/i\u003e\n                            \u003ch5\u003eCouples Session\u003c/h5\u003e\n                            \u003cp class=\"text-muted\"\u003eRelationship counseling for couples\u003c/p\u003e\n                            \u003ch4 class=\"text-primary\"\u003e$180\u003csmall\u003e/session\u003c/small\u003e\u003c/h4\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003cdiv class=\"card h-100 text-center\"\u003e\n                        \u003cdiv class=\"card-body\"\u003e\n                            \u003ci class=\"fas fa-users fa-3x text-success mb-3\"\u003e\u003c/i\u003e\n                            \u003ch5\u003eGroup Session\u003c/h5\u003e\n                            \u003cp class=\"text-muted\"\u003eGroup therapy with shared experiences\u003c/p\u003e\n                            \u003ch4 class=\"text-primary\"\u003e$60\u003csmall\u003e/session\u003c/small\u003e\u003c/h4\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Navigation --\u003e\n            \u003cdiv class=\"text-center\"\u003e\n                \u003ca href=\"/\" class=\"btn btn-outline-primary me-2\"\u003e\n                    \u003ci class=\"fas fa-home me-1\"\u003e\u003c/i\u003eBack to Home\n                \u003c/a\u003e\n                \u003ca href=\"/counselor_signup\" class=\"btn btn-outline-success me-2\"\u003e\n                    \u003ci class=\"fas fa-user-plus me-1\"\u003e\u003c/i\u003eSign Up for Access\n                \u003c/a\u003e\n                \u003cbutton class=\"btn btn-book-session\" onclick=\"showComingSoon()\"\u003e\n                    \u003ci class=\"fas fa-calendar-plus me-1\"\u003e\u003c/i\u003eBook Session\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cscript src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        function showBookingModal(therapistName) {\n            alert(`📅 Booking with ${therapistName}\\n\\nComing Soon in Level 3+!\\n\\nFeatures being developed:\\n• Real-time scheduling system\\n• Payment processing\\n• Video call integration\\n• Secure messaging\\n• Session notes and progress tracking\\n\\nJoin our waitlist to be notified when human counselor services launch!`);\n        }\n\n        function showComingSoon() {\n            alert('🚀 Premium Human Sessions Coming Soon!\\n\\nWe\\'re working on:\\n• Licensed therapist network\\n• Secure video platform\\n• Insurance integration\\n• Flexible scheduling\\n• Crisis support hotline\\n\\nFor now, try our AI-powered therapy sessions for immediate support!');\n        }\n\n        // Placeholder for future video calling integration\n        class VideoSessionManager {\n            constructor() {\n                this.isConnected = false;\n                this.currentSession = null;\n                this.therapistId = null;\n            }\n\n            initializeSession(therapistId, sessionType) {\n                // Future WebRTC implementation\n                console.log(`Initializing ${sessionType} session with therapist ${therapistId}`);\n                return {\n                    sessionId: null,\n                    connectionStatus: 'not_implemented',\n                    message: 'Video sessions coming in Level 3+'\n                };\n            }\n\n            startVideoCall() {\n                // Future video call implementation\n                console.log('Video call functionality will be implemented here');\n            }\n\n            endSession() {\n                // Future session cleanup\n                console.log('Session cleanup and notes saving will be implemented here');\n            }\n\n            sendSecureMessage(message) {\n                // Future secure messaging\n                return {\n                    sent: false,\n                    encrypted: false,\n                    message: 'Secure messaging coming soon'\n                };\n            }\n        }\n\n        // Initialize placeholder video system\n        const videoSession = new VideoSessionManager();\n        console.log('Video session system ready for Level 3+ implementation');\n    \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e",
                "register.html": "{% extends \"base.html\" %}\n\n{% block title %}Join Mind Mend - Create Your Account{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"registration-container\"\u003e\n    \u003cdiv class=\"registration-card\"\u003e\n        \u003c!-- Logo and Header --\u003e\n        \u003cdiv class=\"registration-header\"\u003e\n            \u003cdiv class=\"logo-section\"\u003e\n                \u003cimg src=\"{{ url_for('static', filename='logos/mindmend_logo_4.svg') }}\" alt=\"Mind Mend\" class=\"registration-logo\"\u003e\n                \u003ch2\u003eJoin Mind Mend\u003c/h2\u003e\n                \u003cp\u003eStart your mental health journey with AI-powered therapy\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Registration Form --\u003e\n        \u003cdiv class=\"registration-form\"\u003e\n            \u003cform id=\"registrationForm\" method=\"POST\" action=\"{{ url_for('register') }}\"\u003e\n                \u003cinput type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token }}\"\u003e\n                \u003c!-- Step 1: Basic Information --\u003e\n                \u003cdiv class=\"form-step active\" data-step=\"1\"\u003e\n                    \u003ch3\u003eBasic Information\u003c/h3\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"firstName\"\u003eFirst Name\u003c/label\u003e\n                        \u003cinput type=\"text\" id=\"firstName\" name=\"firstName\" required\u003e\n                        \u003cdiv class=\"form-hint\"\u003eYour first name helps us personalize your experience\u003c/div\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"lastName\"\u003eLast Name\u003c/label\u003e\n                        \u003cinput type=\"text\" id=\"lastName\" name=\"lastName\" required\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"email\"\u003eEmail Address\u003c/label\u003e\n                        \u003cinput type=\"email\" id=\"email\" name=\"email\" required\u003e\n                        \u003cdiv class=\"form-hint\"\u003eWe'll use this for secure login and important updates\u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003c!-- Step 2: Secure Login --\u003e\n                \u003cdiv class=\"form-step\" data-step=\"2\"\u003e\n                    \u003ch3\u003eSecure Login\u003c/h3\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"password\"\u003ePassword\u003c/label\u003e\n                        \u003cinput type=\"password\" id=\"password\" name=\"password\" required minlength=\"8\"\u003e\n                        \u003cdiv class=\"password-requirements\"\u003e\n                            \u003cdiv class=\"requirement\" id=\"length\"\u003e✓ At least 8 characters\u003c/div\u003e\n                            \u003cdiv class=\"requirement\" id=\"uppercase\"\u003e✓ One uppercase letter\u003c/div\u003e\n                            \u003cdiv class=\"requirement\" id=\"lowercase\"\u003e✓ One lowercase letter\u003c/div\u003e\n                            \u003cdiv class=\"requirement\" id=\"number\"\u003e✓ One number\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"confirmPassword\"\u003eConfirm Password\u003c/label\u003e\n                        \u003cinput type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" required\u003e\n                        \u003cdiv class=\"form-hint\" id=\"passwordMatch\"\u003ePasswords must match\u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003c!-- Step 3: Personal Profile --\u003e\n                \u003cdiv class=\"form-step\" data-step=\"3\"\u003e\n                    \u003ch3\u003ePersonal Profile\u003c/h3\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"dateOfBirth\"\u003eDate of Birth\u003c/label\u003e\n                        \u003cinput type=\"date\" id=\"dateOfBirth\" name=\"dateOfBirth\" required\u003e\n                        \u003cdiv class=\"form-hint\"\u003eRequired to ensure age-appropriate care\u003c/div\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"gender\"\u003eGender (Optional)\u003c/label\u003e\n                        \u003cselect id=\"gender\" name=\"gender\"\u003e\n                            \u003coption value=\"\"\u003ePrefer not to say\u003c/option\u003e\n                            \u003coption value=\"female\"\u003eFemale\u003c/option\u003e\n                            \u003coption value=\"male\"\u003eMale\u003c/option\u003e\n                            \u003coption value=\"non-binary\"\u003eNon-binary\u003c/option\u003e\n                            \u003coption value=\"other\"\u003eOther\u003c/option\u003e\n                        \u003c/select\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"location\"\u003eLocation (Optional)\u003c/label\u003e\n                        \u003cselect id=\"location\" name=\"location\"\u003e\n                            \u003coption value=\"\"\u003eSelect your location\u003c/option\u003e\n                            \u003coption value=\"US\"\u003eUnited States\u003c/option\u003e\n                            \u003coption value=\"CA\"\u003eCanada\u003c/option\u003e\n                            \u003coption value=\"UK\"\u003eUnited Kingdom\u003c/option\u003e\n                            \u003coption value=\"AU\"\u003eAustralia\u003c/option\u003e\n                            \u003coption value=\"NZ\"\u003eNew Zealand\u003c/option\u003e\n                            \u003coption value=\"DE\"\u003eGermany\u003c/option\u003e\n                            \u003coption value=\"FR\"\u003eFrance\u003c/option\u003e\n                            \u003coption value=\"other\"\u003eOther\u003c/option\u003e\n                        \u003c/select\u003e\n                        \u003cdiv class=\"form-hint\"\u003eHelps us provide relevant resources and crisis support\u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003c!-- Step 4: Mental Health Goals --\u003e\n                \u003cdiv class=\"form-step\" data-step=\"4\"\u003e\n                    \u003ch3\u003eYour Mental Health Goals\u003c/h3\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel\u003eWhat brings you to Mind Mend? (Select all that apply)\u003c/label\u003e\n                        \u003cdiv class=\"checkbox-group\"\u003e\n                            \u003clabel class=\"checkbox-item\"\u003e\n                                \u003cinput type=\"checkbox\" name=\"goals\" value=\"anxiety\"\u003e\n                                \u003cspan class=\"checkmark\"\u003e\u003c/span\u003e\n                                Managing anxiety\n                            \u003c/label\u003e\n                            \u003clabel class=\"checkbox-item\"\u003e\n                                \u003cinput type=\"checkbox\" name=\"goals\" value=\"depression\"\u003e\n                                \u003cspan class=\"checkmark\"\u003e\u003c/span\u003e\n                                Dealing with depression\n                            \u003c/label\u003e\n                            \u003clabel class=\"checkbox-item\"\u003e\n                                \u003cinput type=\"checkbox\" name=\"goals\" value=\"stress\"\u003e\n                                \u003cspan class=\"checkmark\"\u003e\u003c/span\u003e\n                                Stress management\n                            \u003c/label\u003e\n                            \u003clabel class=\"checkbox-item\"\u003e\n                                \u003cinput type=\"checkbox\" name=\"goals\" value=\"relationships\"\u003e\n                                \u003cspan class=\"checkmark\"\u003e\u003c/span\u003e\n                                Relationship issues\n                            \u003c/label\u003e\n                            \u003clabel class=\"checkbox-item\"\u003e\n                                \u003cinput type=\"checkbox\" name=\"goals\" value=\"self-esteem\"\u003e\n                                \u003cspan class=\"checkmark\"\u003e\u003c/span\u003e\n                                Building self-esteem\n                            \u003c/label\u003e\n                            \u003clabel class=\"checkbox-item\"\u003e\n                                \u003cinput type=\"checkbox\" name=\"goals\" value=\"trauma\"\u003e\n                                \u003cspan class=\"checkmark\"\u003e\u003c/span\u003e\n                                Processing trauma\n                            \u003c/label\u003e\n                            \u003clabel class=\"checkbox-item\"\u003e\n                                \u003cinput type=\"checkbox\" name=\"goals\" value=\"general\"\u003e\n                                \u003cspan class=\"checkmark\"\u003e\u003c/span\u003e\n                                General mental wellness\n                            \u003c/label\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003c!-- Step 5: Privacy \u0026 Consent --\u003e\n                \u003cdiv class=\"form-step\" data-step=\"5\"\u003e\n                    \u003ch3\u003ePrivacy \u0026 Consent\u003c/h3\u003e\n                    \u003cdiv class=\"privacy-notice\"\u003e\n                        \u003ch4\u003eYour Privacy Matters\u003c/h4\u003e\n                        \u003cp\u003eMind Mend is committed to protecting your privacy and maintaining the highest standards of data security.\u003c/p\u003e\n                        \n                        \u003cdiv class=\"privacy-highlights\"\u003e\n                            \u003cdiv class=\"privacy-item\"\u003e\n                                \u003ci class=\"fas fa-shield-alt\"\u003e\u003c/i\u003e\n                                \u003cspan\u003eAll data is encrypted and stored securely\u003c/span\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"privacy-item\"\u003e\n                                \u003ci class=\"fas fa-user-lock\"\u003e\u003c/i\u003e\n                                \u003cspan\u003eYour conversations remain private\u003c/span\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"privacy-item\"\u003e\n                                \u003ci class=\"fas fa-globe-americas\"\u003e\u003c/i\u003e\n                                \u003cspan\u003eData stored securely with global compliance\u003c/span\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"consent-checkboxes\"\u003e\n                        \u003clabel class=\"checkbox-item required\"\u003e\n                            \u003cinput type=\"checkbox\" name=\"termsAccepted\" required\u003e\n                            \u003cspan class=\"checkmark\"\u003e\u003c/span\u003e\n                            I agree to the \u003ca href=\"/terms\" target=\"_blank\"\u003eTerms of Service\u003c/a\u003e and \u003ca href=\"/privacy\" target=\"_blank\"\u003ePrivacy Policy\u003c/a\u003e\n                        \u003c/label\u003e\n                        \n                        \u003clabel class=\"checkbox-item required\"\u003e\n                            \u003cinput type=\"checkbox\" name=\"ageConfirmed\" required\u003e\n                            \u003cspan class=\"checkmark\"\u003e\u003c/span\u003e\n                            I confirm that I am 18+ years old or have parental consent\n                        \u003c/label\u003e\n                        \n                        \u003clabel class=\"checkbox-item\"\u003e\n                            \u003cinput type=\"checkbox\" name=\"marketingConsent\"\u003e\n                            \u003cspan class=\"checkmark\"\u003e\u003c/span\u003e\n                            Send me helpful mental health tips and platform updates (optional)\n                        \u003c/label\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003c!-- Navigation Buttons --\u003e\n                \u003cdiv class=\"form-navigation\"\u003e\n                    \u003cbutton type=\"button\" id=\"prevBtn\" onclick=\"previousStep()\" disabled\u003e\n                        \u003ci class=\"fas fa-chevron-left\"\u003e\u003c/i\u003e Previous\n                    \u003c/button\u003e\n                    \n                    \u003cdiv class=\"step-indicator\"\u003e\n                        \u003cspan class=\"step-dot active\" data-step=\"1\"\u003e\u003c/span\u003e\n                        \u003cspan class=\"step-dot\" data-step=\"2\"\u003e\u003c/span\u003e\n                        \u003cspan class=\"step-dot\" data-step=\"3\"\u003e\u003c/span\u003e\n                        \u003cspan class=\"step-dot\" data-step=\"4\"\u003e\u003c/span\u003e\n                        \u003cspan class=\"step-dot\" data-step=\"5\"\u003e\u003c/span\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cbutton type=\"button\" id=\"nextBtn\" onclick=\"nextStep()\"\u003e\n                        Next \u003ci class=\"fas fa-chevron-right\"\u003e\u003c/i\u003e\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/form\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Alternative Login --\u003e\n        \u003cdiv class=\"alternative-login\"\u003e\n            \u003cdiv class=\"divider\"\u003e\n                \u003cspan\u003eAlready have an account?\u003c/span\u003e\n            \u003c/div\u003e\n            \u003ca href=\"{{ url_for('login') }}\" class=\"login-link\"\u003e\n                \u003ci class=\"fas fa-sign-in-alt\"\u003e\u003c/i\u003e Sign In\n            \u003c/a\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Crisis Support Banner --\u003e\n    \u003cdiv class=\"crisis-banner\"\u003e\n        \u003ci class=\"fas fa-phone\"\u003e\u003c/i\u003e\n        \u003cspan\u003eNeed immediate help? \u003cstrong\u003eLifeline Australia: 13 11 14\u003c/strong\u003e\u003c/span\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block styles %}\n\u003cstyle\u003e\n.registration-container {\n    min-height: 100vh;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 2rem;\n    position: relative;\n}\n\n.registration-card {\n    background: white;\n    border-radius: 20px;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);\n    max-width: 500px;\n    width: 100%;\n    overflow: hidden;\n    animation: slideUp 0.6s ease;\n}\n\n.registration-header {\n    background: linear-gradient(135deg, #4CAF50, #45a049);\n    color: white;\n    padding: 2rem;\n    text-align: center;\n}\n\n.registration-logo {\n    height: 60px;\n    margin-bottom: 1rem;\n    filter: brightness(0) invert(1);\n}\n\n.registration-header h2 {\n    margin: 0 0 0.5rem 0;\n    font-size: 2rem;\n    font-weight: 700;\n}\n\n.registration-header p {\n    margin: 0;\n    opacity: 0.9;\n    font-size: 1.1rem;\n}\n\n.registration-form {\n    padding: 2rem;\n}\n\n.form-step {\n    display: none;\n}\n\n.form-step.active {\n    display: block;\n    animation: fadeInUp 0.4s ease;\n}\n\n.form-step h3 {\n    color: #333;\n    margin-bottom: 1.5rem;\n    font-size: 1.4rem;\n    text-align: center;\n}\n\n.form-group {\n    margin-bottom: 1.5rem;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 0.5rem;\n    color: #333;\n    font-weight: 600;\n}\n\n.form-group input,\n.form-group select {\n    width: 100%;\n    padding: 0.75rem;\n    border: 2px solid #e0e0e0;\n    border-radius: 10px;\n    font-size: 1rem;\n    transition: all 0.3s ease;\n    box-sizing: border-box;\n}\n\n.form-group input:focus,\n.form-group select:focus {\n    outline: none;\n    border-color: #4CAF50;\n    box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);\n}\n\n.form-hint {\n    font-size: 0.85rem;\n    color: #666;\n    margin-top: 0.25rem;\n}\n\n.password-requirements {\n    margin-top: 0.5rem;\n}\n\n.requirement {\n    font-size: 0.85rem;\n    color: #999;\n    margin-bottom: 0.25rem;\n}\n\n.requirement.valid {\n    color: #4CAF50;\n}\n\n.requirement.invalid {\n    color: #f44336;\n}\n\n.checkbox-group {\n    display: flex;\n    flex-direction: column;\n    gap: 0.75rem;\n    margin-top: 0.5rem;\n}\n\n.checkbox-item {\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    padding: 0.5rem;\n    border-radius: 8px;\n    transition: background 0.3s ease;\n}\n\n.checkbox-item:hover {\n    background: rgba(76, 175, 80, 0.05);\n}\n\n.checkbox-item input[type=\"checkbox\"] {\n    width: auto;\n    margin-right: 0.75rem;\n    transform: scale(1.2);\n}\n\n.checkbox-item.required {\n    background: rgba(76, 175, 80, 0.02);\n    border: 1px solid rgba(76, 175, 80, 0.2);\n}\n\n.privacy-notice {\n    background: rgba(76, 175, 80, 0.05);\n    padding: 1.5rem;\n    border-radius: 10px;\n    margin-bottom: 1.5rem;\n}\n\n.privacy-notice h4 {\n    color: #333;\n    margin-bottom: 0.5rem;\n}\n\n.privacy-notice p {\n    color: #666;\n    margin-bottom: 1rem;\n}\n\n.privacy-highlights {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n}\n\n.privacy-item {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    color: #4CAF50;\n    font-size: 0.9rem;\n}\n\n.consent-checkboxes {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.consent-checkboxes a {\n    color: #4CAF50;\n    text-decoration: underline;\n}\n\n.form-navigation {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 2rem;\n    padding-top: 1.5rem;\n    border-top: 1px solid #e0e0e0;\n}\n\n.form-navigation button {\n    background: linear-gradient(135deg, #4CAF50, #45a049);\n    color: white;\n    border: none;\n    padding: 0.75rem 1.5rem;\n    border-radius: 25px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.form-navigation button:hover:not(:disabled) {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);\n}\n\n.form-navigation button:disabled {\n    background: #ccc;\n    cursor: not-allowed;\n    transform: none;\n    box-shadow: none;\n}\n\n.step-indicator {\n    display: flex;\n    gap: 0.5rem;\n}\n\n.step-dot {\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    background: #e0e0e0;\n    transition: all 0.3s ease;\n    cursor: pointer;\n}\n\n.step-dot.active {\n    background: #4CAF50;\n}\n\n.step-dot.completed {\n    background: #45a049;\n}\n\n.alternative-login {\n    padding: 1.5rem 2rem;\n    background: rgba(76, 175, 80, 0.05);\n    text-align: center;\n}\n\n.divider {\n    margin-bottom: 1rem;\n    color: #666;\n    font-size: 0.9rem;\n}\n\n.login-link {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n    color: #4CAF50;\n    text-decoration: none;\n    font-weight: 600;\n    padding: 0.5rem 1rem;\n    border-radius: 20px;\n    transition: all 0.3s ease;\n}\n\n.login-link:hover {\n    background: rgba(76, 175, 80, 0.1);\n    transform: translateY(-1px);\n}\n\n.crisis-banner {\n    position: fixed;\n    bottom: 1rem;\n    left: 1rem;\n    right: 1rem;\n    background: #f44336;\n    color: white;\n    padding: 1rem;\n    border-radius: 10px;\n    text-align: center;\n    box-shadow: 0 4px 20px rgba(244, 67, 54, 0.3);\n    z-index: 1000;\n}\n\n.crisis-banner i {\n    margin-right: 0.5rem;\n}\n\n@keyframes slideUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .registration-container {\n        padding: 1rem;\n    }\n    \n    .registration-card {\n        max-width: 100%;\n    }\n    \n    .registration-form {\n        padding: 1.5rem;\n    }\n    \n    .form-navigation {\n        flex-direction: column;\n        gap: 1rem;\n    }\n    \n    .step-indicator {\n        order: -1;\n    }\n    \n    .crisis-banner {\n        position: static;\n        margin-top: 1rem;\n    }\n}\n\u003c/style\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003cscript\u003e\nlet currentStep = 1;\nconst totalSteps = 5;\n\nfunction showStep(stepNumber) {\n    // Hide all steps\n    document.querySelectorAll('.form-step').forEach(step =\u003e {\n        step.classList.remove('active');\n    });\n    \n    // Show current step\n    const currentStepElement = document.querySelector(`[data-step=\"${stepNumber}\"]`);\n    if (currentStepElement) {\n        currentStepElement.classList.add('active');\n    }\n    \n    // Update step indicators\n    document.querySelectorAll('.step-dot').forEach((dot, index) =\u003e {\n        dot.classList.remove('active', 'completed');\n        if (index + 1 === stepNumber) {\n            dot.classList.add('active');\n        } else if (index + 1 \u003c stepNumber) {\n            dot.classList.add('completed');\n        }\n    });\n    \n    // Update navigation buttons\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    \n    prevBtn.disabled = stepNumber === 1;\n    \n    if (stepNumber === totalSteps) {\n        nextBtn.textContent = 'Create Account';\n        nextBtn.innerHTML = 'Create Account \u003ci class=\"fas fa-user-plus\"\u003e\u003c/i\u003e';\n        nextBtn.onclick = submitForm;\n    } else {\n        nextBtn.innerHTML = 'Next \u003ci class=\"fas fa-chevron-right\"\u003e\u003c/i\u003e';\n        nextBtn.onclick = nextStep;\n    }\n}\n\nfunction nextStep() {\n    if (validateCurrentStep()) {\n        if (currentStep \u003c totalSteps) {\n            currentStep++;\n            showStep(currentStep);\n        }\n    }\n}\n\nfunction previousStep() {\n    if (currentStep \u003e 1) {\n        currentStep--;\n        showStep(currentStep);\n    }\n}\n\nfunction validateCurrentStep() {\n    const currentStepElement = document.querySelector(`[data-step=\"${currentStep}\"]`);\n    const requiredFields = currentStepElement.querySelectorAll('input[required], select[required]');\n    let isValid = true;\n    \n    requiredFields.forEach(field =\u003e {\n        if (!field.value.trim()) {\n            field.style.borderColor = '#f44336';\n            isValid = false;\n        } else {\n            field.style.borderColor = '#e0e0e0';\n        }\n    });\n    \n    // Special validation for step 2 (password)\n    if (currentStep === 2) {\n        const password = document.getElementById('password').value;\n        const confirmPassword = document.getElementById('confirmPassword').value;\n        \n        if (password !== confirmPassword) {\n            document.getElementById('confirmPassword').style.borderColor = '#f44336';\n            document.getElementById('passwordMatch').style.color = '#f44336';\n            document.getElementById('passwordMatch').textContent = 'Passwords do not match';\n            isValid = false;\n        } else {\n            document.getElementById('confirmPassword').style.borderColor = '#4CAF50';\n            document.getElementById('passwordMatch').style.color = '#4CAF50';\n            document.getElementById('passwordMatch').textContent = 'Passwords match';\n        }\n    }\n    \n    // Special validation for step 5 (required checkboxes)\n    if (currentStep === 5) {\n        const requiredCheckboxes = currentStepElement.querySelectorAll('input[type=\"checkbox\"][required]');\n        requiredCheckboxes.forEach(checkbox =\u003e {\n            if (!checkbox.checked) {\n                checkbox.parentElement.style.borderColor = '#f44336';\n                isValid = false;\n            } else {\n                checkbox.parentElement.style.borderColor = 'transparent';\n            }\n        });\n    }\n    \n    return isValid;\n}\n\nfunction submitForm() {\n    if (validateCurrentStep()) {\n        document.getElementById('registrationForm').submit();\n    }\n}\n\n// Password strength validation\ndocument.getElementById('password').addEventListener('input', function() {\n    const password = this.value;\n    const requirements = {\n        length: password.length \u003e= 8,\n        uppercase: /[A-Z]/.test(password),\n        lowercase: /[a-z]/.test(password),\n        number: /\\d/.test(password)\n    };\n    \n    Object.keys(requirements).forEach(req =\u003e {\n        const element = document.getElementById(req);\n        if (requirements[req]) {\n            element.classList.add('valid');\n            element.classList.remove('invalid');\n        } else {\n            element.classList.add('invalid');\n            element.classList.remove('valid');\n        }\n    });\n});\n\n// Age validation\ndocument.getElementById('dateOfBirth').addEventListener('change', function() {\n    const birthDate = new Date(this.value);\n    const today = new Date();\n    const age = today.getFullYear() - birthDate.getFullYear();\n    const monthDiff = today.getMonth() - birthDate.getMonth();\n    \n    if (monthDiff \u003c 0 || (monthDiff === 0 \u0026\u0026 today.getDate() \u003c birthDate.getDate())) {\n        age--;\n    }\n    \n    if (age \u003c 13) {\n        this.style.borderColor = '#f44336';\n        alert('Mind Mend is designed for users 13 and older. If you are under 18, please ensure you have parental consent.');\n    } else {\n        this.style.borderColor = '#4CAF50';\n    }\n});\n\n// Initialize form\ndocument.addEventListener('DOMContentLoaded', function() {\n    showStep(1);\n    \n    // Add step dot click handlers\n    document.querySelectorAll('.step-dot').forEach((dot, index) =\u003e {\n        dot.addEventListener('click', function() {\n            if (index + 1 \u003c= currentStep || validateStepsUpTo(index + 1)) {\n                currentStep = index + 1;\n                showStep(currentStep);\n            }\n        });\n    });\n});\n\nfunction validateStepsUpTo(stepNumber) {\n    for (let i = 1; i \u003c stepNumber; i++) {\n        const stepElement = document.querySelector(`[data-step=\"${i}\"]`);\n        const requiredFields = stepElement.querySelectorAll('input[required], select[required]');\n        \n        for (let field of requiredFields) {\n            if (!field.value.trim()) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\u003c/script\u003e\n{% endblock %}\n",
                "relationship_therapy.html": "{% extends \"base.html\" %}\n\n{% block title %}Relationship Therapy - Mind Mend{% endblock %}\n\n{% block head %}\n\u003cstyle\u003e\n    .partner-section {\n        border: 2px solid var(--bs-border-color);\n        border-radius: 8px;\n        position: relative;\n    }\n    .partner-label {\n        position: absolute;\n        top: -12px;\n        left: 20px;\n        background: var(--bs-body-bg);\n        padding: 0 10px;\n        font-weight: bold;\n        color: var(--bs-primary);\n    }\n    .communication-flow {\n        border: 1px dashed var(--bs-border-color);\n        border-radius: 8px;\n        background: rgba(var(--bs-primary-rgb), 0.1);\n    }\n    .emotion-match {\n        background: rgba(var(--bs-success-rgb), 0.2);\n        border: 1px solid var(--bs-success);\n    }\n    .emotion-conflict {\n        background: rgba(var(--bs-danger-rgb), 0.2);\n        border: 1px solid var(--bs-danger);\n    }\n\u003c/style\u003e\n{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"row\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"d-flex justify-content-between align-items-center mb-4\"\u003e\n            \u003ch2\u003e\u003ci class=\"fas fa-heart me-2\"\u003e\u003c/i\u003eRelationship Therapy Session\u003c/h2\u003e\n            \u003cdiv class=\"d-flex gap-2\"\u003e\n                \u003cbutton class=\"btn btn-outline-primary\" id=\"toggleDualVideo\"\u003e\n                    \u003ci class=\"fas fa-video me-1\"\u003e\u003c/i\u003eDual Video Analysis\n                \u003c/button\u003e\n                \u003cbutton class=\"btn btn-outline-info\" id=\"communicationAnalysis\"\u003e\n                    \u003ci class=\"fas fa-comments me-1\"\u003e\u003c/i\u003eCommunication Patterns\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Partner Video Analysis --\u003e\n\u003cdiv class=\"row g-4 mb-4\"\u003e\n    \u003cdiv class=\"col-lg-6\"\u003e\n        \u003cdiv class=\"partner-section p-3\"\u003e\n            \u003cdiv class=\"partner-label\"\u003ePartner 1\u003c/div\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-header\"\u003e\n                    \u003ch6\u003e\u003ci class=\"fas fa-user me-2\"\u003e\u003c/i\u003eVideo \u0026 Emotion Analysis\u003c/h6\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cdiv class=\"video-container mb-3\" style=\"height: 200px; background: #000; border-radius: 4px;\"\u003e\n                        \u003cvideo id=\"videoPartner1\" width=\"100%\" height=\"100%\" style=\"object-fit: cover;\" muted\u003e\u003c/video\u003e\n                        \u003cdiv class=\"emotion-overlay\" style=\"position: absolute; top: 10px; right: 10px; background: rgba(0,0,0,0.8); color: white; padding: 4px 8px; border-radius: 4px; font-size: 0.8em;\"\u003e\n                            \u003cdiv id=\"emotion1\"\u003eNeutral\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"d-flex justify-content-between text-center\"\u003e\n                        \u003cdiv\u003e\n                            \u003cdiv class=\"h6 mb-0\" id=\"engagement1\"\u003e75%\u003c/div\u003e\n                            \u003csmall class=\"text-muted\"\u003eEngagement\u003c/small\u003e\n                        \u003c/div\u003e\n                        \u003cdiv\u003e\n                            \u003cdiv class=\"h6 mb-0\" id=\"stress1\"\u003eLow\u003c/div\u003e\n                            \u003csmall class=\"text-muted\"\u003eStress\u003c/small\u003e\n                        \u003c/div\u003e\n                        \u003cdiv\u003e\n                            \u003cdiv class=\"h6 mb-0\" id=\"receptivity1\"\u003eHigh\u003c/div\u003e\n                            \u003csmall class=\"text-muted\"\u003eReceptivity\u003c/small\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"col-lg-6\"\u003e\n        \u003cdiv class=\"partner-section p-3\"\u003e\n            \u003cdiv class=\"partner-label\"\u003ePartner 2\u003c/div\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-header\"\u003e\n                    \u003ch6\u003e\u003ci class=\"fas fa-user me-2\"\u003e\u003c/i\u003eVideo \u0026 Emotion Analysis\u003c/h6\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cdiv class=\"video-container mb-3\" style=\"height: 200px; background: #000; border-radius: 4px;\"\u003e\n                        \u003cvideo id=\"videoPartner2\" width=\"100%\" height=\"100%\" style=\"object-fit: cover;\" muted\u003e\u003c/video\u003e\n                        \u003cdiv class=\"emotion-overlay\" style=\"position: absolute; top: 10px; right: 10px; background: rgba(0,0,0,0.8); color: white; padding: 4px 8px; border-radius: 4px; font-size: 0.8em;\"\u003e\n                            \u003cdiv id=\"emotion2\"\u003eNeutral\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"d-flex justify-content-between text-center\"\u003e\n                        \u003cdiv\u003e\n                            \u003cdiv class=\"h6 mb-0\" id=\"engagement2\"\u003e80%\u003c/div\u003e\n                            \u003csmall class=\"text-muted\"\u003eEngagement\u003c/small\u003e\n                        \u003c/div\u003e\n                        \u003cdiv\u003e\n                            \u003cdiv class=\"h6 mb-0\" id=\"stress2\"\u003eLow\u003c/div\u003e\n                            \u003csmall class=\"text-muted\"\u003eStress\u003c/small\u003e\n                        \u003c/div\u003e\n                        \u003cdiv\u003e\n                            \u003cdiv class=\"h6 mb-0\" id=\"receptivity2\"\u003eHigh\u003c/div\u003e\n                            \u003csmall class=\"text-muted\"\u003eReceptivity\u003c/small\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Relationship Dynamics Dashboard --\u003e\n\u003cdiv class=\"row g-4 mb-4\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-chart-line me-2\"\u003e\u003c/i\u003eRelationship Dynamics\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"row g-3\"\u003e\n                    \u003cdiv class=\"col-md-3\"\u003e\n                        \u003cdiv class=\"text-center\"\u003e\n                            \u003cdiv class=\"h4 mb-1\" id=\"emotionalSync\"\u003e85%\u003c/div\u003e\n                            \u003cdiv class=\"text-muted\"\u003eEmotional Sync\u003c/div\u003e\n                            \u003cdiv class=\"progress mt-2\" style=\"height: 6px;\"\u003e\n                                \u003cdiv class=\"progress-bar bg-success\" style=\"width: 85%\"\u003e\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-3\"\u003e\n                        \u003cdiv class=\"text-center\"\u003e\n                            \u003cdiv class=\"h4 mb-1\" id=\"communicationQuality\"\u003e72%\u003c/div\u003e\n                            \u003cdiv class=\"text-muted\"\u003eCommunication Quality\u003c/div\u003e\n                            \u003cdiv class=\"progress mt-2\" style=\"height: 6px;\"\u003e\n                                \u003cdiv class=\"progress-bar bg-info\" style=\"width: 72%\"\u003e\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-3\"\u003e\n                        \u003cdiv class=\"text-center\"\u003e\n                            \u003cdiv class=\"h4 mb-1\" id=\"conflictLevel\"\u003eLow\u003c/div\u003e\n                            \u003cdiv class=\"text-muted\"\u003eConflict Level\u003c/div\u003e\n                            \u003cdiv class=\"progress mt-2\" style=\"height: 6px;\"\u003e\n                                \u003cdiv class=\"progress-bar bg-warning\" style=\"width: 25%\"\u003e\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-3\"\u003e\n                        \u003cdiv class=\"text-center\"\u003e\n                            \u003cdiv class=\"h4 mb-1\" id=\"intimacyLevel\"\u003eGood\u003c/div\u003e\n                            \u003cdiv class=\"text-muted\"\u003eIntimacy Level\u003c/div\u003e\n                            \u003cdiv class=\"progress mt-2\" style=\"height: 6px;\"\u003e\n                                \u003cdiv class=\"progress-bar bg-danger\" style=\"width: 78%\"\u003e\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Session Input --\u003e\n\u003cdiv class=\"row\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-comments me-2\"\u003e\u003c/i\u003eRelationship Session\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cform id=\"relationshipForm\"\u003e\n                    \u003cdiv class=\"row g-3 mb-3\"\u003e\n                        \u003cdiv class=\"col-md-6\"\u003e\n                            \u003clabel for=\"partner1Name\" class=\"form-label\"\u003ePartner 1 Name\u003c/label\u003e\n                            \u003cinput type=\"text\" class=\"form-control\" id=\"partner1Name\" required\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"col-md-6\"\u003e\n                            \u003clabel for=\"partner2Name\" class=\"form-label\"\u003ePartner 2 Name\u003c/label\u003e\n                            \u003cinput type=\"text\" class=\"form-control\" id=\"partner2Name\" required\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"row g-3 mb-3\"\u003e\n                        \u003cdiv class=\"col-md-6\"\u003e\n                            \u003clabel for=\"relationshipLength\" class=\"form-label\"\u003eRelationship Length\u003c/label\u003e\n                            \u003cselect class=\"form-select\" id=\"relationshipLength\"\u003e\n                                \u003coption value=\"new\"\u003eLess than 6 months\u003c/option\u003e\n                                \u003coption value=\"6months\"\u003e6 months - 1 year\u003c/option\u003e\n                                \u003coption value=\"1year\"\u003e1-2 years\u003c/option\u003e\n                                \u003coption value=\"2years\"\u003e2-5 years\u003c/option\u003e\n                                \u003coption value=\"5years\"\u003e5+ years\u003c/option\u003e\n                                \u003coption value=\"married\"\u003eMarried\u003c/option\u003e\n                            \u003c/select\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"col-md-6\"\u003e\n                            \u003clabel for=\"sessionFocus\" class=\"form-label\"\u003eSession Focus\u003c/label\u003e\n                            \u003cselect class=\"form-select\" id=\"sessionFocus\"\u003e\n                                \u003coption value=\"communication\"\u003eCommunication Issues\u003c/option\u003e\n                                \u003coption value=\"conflict\"\u003eConflict Resolution\u003c/option\u003e\n                                \u003coption value=\"intimacy\"\u003eIntimacy \u0026 Connection\u003c/option\u003e\n                                \u003coption value=\"trust\"\u003eTrust Issues\u003c/option\u003e\n                                \u003coption value=\"future\"\u003eFuture Planning\u003c/option\u003e\n                                \u003coption value=\"family\"\u003eFamily Dynamics\u003c/option\u003e\n                                \u003coption value=\"general\"\u003eGeneral Relationship Health\u003c/option\u003e\n                            \u003c/select\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel for=\"relationshipConcern\" class=\"form-label\"\u003eWhat's the main concern you'd like to discuss?\u003c/label\u003e\n                        \u003ctextarea class=\"form-control\" id=\"relationshipConcern\" rows=\"4\" \n                                placeholder=\"Describe the issue you're facing as a couple...\" required\u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"row g-3 mb-3\"\u003e\n                        \u003cdiv class=\"col-md-6\"\u003e\n                            \u003clabel for=\"partner1Perspective\" class=\"form-label\"\u003ePartner 1's Perspective\u003c/label\u003e\n                            \u003ctextarea class=\"form-control\" id=\"partner1Perspective\" rows=\"3\" \n                                    placeholder=\"How does Partner 1 view this situation?\"\u003e\u003c/textarea\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"col-md-6\"\u003e\n                            \u003clabel for=\"partner2Perspective\" class=\"form-label\"\u003ePartner 2's Perspective\u003c/label\u003e\n                            \u003ctextarea class=\"form-control\" id=\"partner2Perspective\" rows=\"3\" \n                                    placeholder=\"How does Partner 2 view this situation?\"\u003e\u003c/textarea\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"row g-3 mb-4\"\u003e\n                        \u003cdiv class=\"col-md-6\"\u003e\n                            \u003clabel for=\"relationshipGoal\" class=\"form-label\"\u003eRelationship Goal\u003c/label\u003e\n                            \u003cselect class=\"form-select\" id=\"relationshipGoal\"\u003e\n                                \u003coption value=\"improve_communication\"\u003eImprove Communication\u003c/option\u003e\n                                \u003coption value=\"resolve_conflict\"\u003eResolve Current Conflict\u003c/option\u003e\n                                \u003coption value=\"rebuild_trust\"\u003eRebuild Trust\u003c/option\u003e\n                                \u003coption value=\"increase_intimacy\"\u003eIncrease Intimacy\u003c/option\u003e\n                                \u003coption value=\"strengthen_bond\"\u003eStrengthen Bond\u003c/option\u003e\n                                \u003coption value=\"prepare_commitment\"\u003ePrepare for Commitment\u003c/option\u003e\n                            \u003c/select\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"col-md-6\"\u003e\n                            \u003clabel for=\"sessionPriority\" class=\"form-label\"\u003eSession Priority\u003c/label\u003e\n                            \u003cselect class=\"form-select\" id=\"sessionPriority\"\u003e\n                                \u003coption value=\"urgent\"\u003eUrgent - Crisis\u003c/option\u003e\n                                \u003coption value=\"important\"\u003eImportant - Major Issue\u003c/option\u003e\n                                \u003coption value=\"moderate\"\u003eModerate - Ongoing Concern\u003c/option\u003e\n                                \u003coption value=\"maintenance\"\u003eMaintenance - General Health\u003c/option\u003e\n                            \u003c/select\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"d-grid\"\u003e\n                        \u003cbutton type=\"submit\" class=\"btn btn-danger btn-lg\"\u003e\n                            \u003ci class=\"fas fa-heart me-2\"\u003e\u003c/i\u003eStart Relationship Analysis\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- AI Analysis Results --\u003e\n\u003cdiv class=\"row mt-4\" id=\"analysisSection\" style=\"display: none;\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card border-danger\"\u003e\n            \u003cdiv class=\"card-header bg-danger text-white\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-robot me-2\"\u003e\u003c/i\u003eAI Relationship Analysis\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv id=\"relationshipAnalysis\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Communication Patterns --\u003e\n\u003cdiv class=\"row mt-4\" id=\"communicationSection\" style=\"display: none;\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card border-info\"\u003e\n            \u003cdiv class=\"card-header bg-info text-white\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-comments me-2\"\u003e\u003c/i\u003eCommunication Analysis\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv id=\"communicationPatterns\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Relationship Exercises --\u003e\n\u003cdiv class=\"row mt-4\" id=\"exercisesSection\" style=\"display: none;\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card border-success\"\u003e\n            \u003cdiv class=\"card-header bg-success text-white\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-heart me-2\"\u003e\u003c/i\u003eRelationship Exercises\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv id=\"relationshipExercises\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003cscript src=\"{{ url_for('static', filename='js/video-processing.js') }}\"\u003e\u003c/script\u003e\n\u003cscript src=\"{{ url_for('static', filename='js/real-time-analysis.js') }}\"\u003e\u003c/script\u003e\n\n\u003cscript\u003e\ndocument.addEventListener('DOMContentLoaded', function() {\n    const relationshipForm = document.getElementById('relationshipForm');\n    \n    relationshipForm.addEventListener('submit', async function(e) {\n        e.preventDefault();\n        \n        const formData = {\n            partner1_name: document.getElementById('partner1Name').value,\n            partner2_name: document.getElementById('partner2Name').value,\n            relationship_length: document.getElementById('relationshipLength').value,\n            session_focus: document.getElementById('sessionFocus').value,\n            main_concern: document.getElementById('relationshipConcern').value,\n            partner1_perspective: document.getElementById('partner1Perspective').value,\n            partner2_perspective: document.getElementById('partner2Perspective').value,\n            relationship_goal: document.getElementById('relationshipGoal').value,\n            session_priority: document.getElementById('sessionPriority').value,\n            session_type: 'relationship'\n        };\n\n        const submitBtn = this.querySelector('button[type=\"submit\"]');\n        const originalText = submitBtn.innerHTML;\n        submitBtn.innerHTML = '\u003ci class=\"fas fa-spinner fa-spin me-2\"\u003e\u003c/i\u003eAnalyzing Relationship...';\n        submitBtn.disabled = true;\n\n        try {\n            const response = await fetch('/api/analyze-text', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    text: formData.main_concern,\n                    session_type: 'relationship',\n                    relationship_data: formData\n                })\n            });\n\n            const result = await response.json();\n            displayRelationshipAnalysis(result, formData);\n        } catch (error) {\n            console.error('Analysis error:', error);\n            alert('An error occurred during analysis. Please try again.');\n        } finally {\n            submitBtn.innerHTML = originalText;\n            submitBtn.disabled = false;\n        }\n    });\n\n    function displayRelationshipAnalysis(result, formData) {\n        // Display main analysis\n        const analysisHtml = `\n            \u003cdiv class=\"row g-4\"\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003ch6\u003e\u003ci class=\"fas fa-brain me-2\"\u003e\u003c/i\u003eAI Insights\u003c/h6\u003e\n                    \u003cdiv class=\"alert alert-info\"\u003e\n                        ${result.ai_response || 'Relationship analysis complete.'}\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003ch6\u003e\u003ci class=\"fas fa-chart-pie me-2\"\u003e\u003c/i\u003eRelationship Health Score\u003c/h6\u003e\n                    \u003cdiv class=\"text-center\"\u003e\n                        \u003cdiv class=\"display-6 text-primary\"\u003e${result.relationship_score || 75}%\u003c/div\u003e\n                        \u003csmall class=\"text-muted\"\u003eOverall relationship health\u003c/small\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003chr class=\"my-4\"\u003e\n\n            \u003cdiv class=\"row g-4\"\u003e\n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003cdiv class=\"card bg-dark border-0\"\u003e\n                        \u003cdiv class=\"card-body text-center\"\u003e\n                            \u003ci class=\"fas fa-comments fa-2x text-info mb-2\"\u003e\u003c/i\u003e\n                            \u003ch6\u003eCommunication Style\u003c/h6\u003e\n                            \u003cp class=\"mb-0\"\u003e${result.communication_style || 'Collaborative'}\u003c/p\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003cdiv class=\"card bg-dark border-0\"\u003e\n                        \u003cdiv class=\"card-body text-center\"\u003e\n                            \u003ci class=\"fas fa-handshake fa-2x text-warning mb-2\"\u003e\u003c/i\u003e\n                            \u003ch6\u003eConflict Resolution\u003c/h6\u003e\n                            \u003cp class=\"mb-0\"\u003e${result.conflict_style || 'Constructive'}\u003c/p\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003cdiv class=\"card bg-dark border-0\"\u003e\n                        \u003cdiv class=\"card-body text-center\"\u003e\n                            \u003ci class=\"fas fa-heart fa-2x text-danger mb-2\"\u003e\u003c/i\u003e\n                            \u003ch6\u003eEmotional Connection\u003c/h6\u003e\n                            \u003cp class=\"mb-0\"\u003e${result.emotional_connection || 'Strong'}\u003c/p\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        `;\n\n        document.getElementById('relationshipAnalysis').innerHTML = analysisHtml;\n\n        // Display communication patterns\n        if (result.communication_patterns) {\n            displayCommunicationPatterns(result.communication_patterns);\n        }\n\n        // Display exercises\n        if (result.exercises) {\n            displayRelationshipExercises(result.exercises);\n        }\n\n        // Show sections\n        document.getElementById('analysisSection').style.display = 'block';\n        document.getElementById('communicationSection').style.display = 'block';\n        document.getElementById('exercisesSection').style.display = 'block';\n    }\n\n    function displayCommunicationPatterns(patterns) {\n        const patternsHtml = `\n            \u003cdiv class=\"row g-4\"\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003ch6\u003ePositive Patterns\u003c/h6\u003e\n                    \u003cul class=\"list-group list-group-flush\"\u003e\n                        ${patterns.positive ? patterns.positive.map(pattern =\u003e \n                            `\u003cli class=\"list-group-item bg-transparent border-success text-success\"\u003e\n                                \u003ci class=\"fas fa-check me-2\"\u003e\u003c/i\u003e${pattern}\n                            \u003c/li\u003e`\n                        ).join('') : '\u003cli class=\"list-group-item bg-transparent\"\u003eActive listening observed\u003c/li\u003e'}\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003ch6\u003eAreas for Improvement\u003c/h6\u003e\n                    \u003cul class=\"list-group list-group-flush\"\u003e\n                        ${patterns.improvements ? patterns.improvements.map(improvement =\u003e \n                            `\u003cli class=\"list-group-item bg-transparent border-warning text-warning\"\u003e\n                                \u003ci class=\"fas fa-exclamation-triangle me-2\"\u003e\u003c/i\u003e${improvement}\n                            \u003c/li\u003e`\n                        ).join('') : '\u003cli class=\"list-group-item bg-transparent\"\u003eFocus on emotional validation\u003c/li\u003e'}\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        `;\n\n        document.getElementById('communicationPatterns').innerHTML = patternsHtml;\n    }\n\n    function displayRelationshipExercises(exercises) {\n        let exercisesHtml = '';\n\n        const defaultExercises = exercises \u0026\u0026 exercises.length \u003e 0 ? exercises : [\n            {\n                title: \"Daily Check-in Ritual\",\n                description: \"Establish a daily connection practice\",\n                instructions: [\n                    \"Set aside 10 minutes each day\",\n                    \"Share one thing you appreciated about your partner\",\n                    \"Share one thing that was challenging\",\n                    \"End with physical affection\"\n                ],\n                duration_minutes: 10,\n                benefits: [\"Improves communication\", \"Builds intimacy\"]\n            },\n            {\n                title: \"Conflict Resolution Framework\",\n                description: \"Structured approach to handling disagreements\",\n                instructions: [\n                    \"Each partner states their perspective (2 minutes each)\",\n                    \"Reflect back what you heard\",\n                    \"Identify common ground\",\n                    \"Brainstorm solutions together\"\n                ],\n                duration_minutes: 20,\n                benefits: [\"Reduces conflict\", \"Improves understanding\"]\n            }\n        ];\n\n        defaultExercises.forEach((exercise, index) =\u003e {\n            exercisesHtml += `\n                \u003cdiv class=\"card mb-3\"\u003e\n                    \u003cdiv class=\"card-header\"\u003e\n                        \u003ch6\u003e\u003ci class=\"fas fa-heart me-2\"\u003e\u003c/i\u003e${exercise.title}\u003c/h6\u003e\n                        \u003csmall class=\"text-muted\"\u003e${exercise.duration_minutes} minutes\u003c/small\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cp\u003e${exercise.description}\u003c/p\u003e\n                        \u003cdiv class=\"mb-3\"\u003e\n                            \u003cstrong\u003eSteps:\u003c/strong\u003e\n                            \u003col class=\"mt-2\"\u003e\n                                ${exercise.instructions.map(step =\u003e `\u003cli\u003e${step}\u003c/li\u003e`).join('')}\n                            \u003c/ol\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                            \u003cdiv\u003e\n                                \u003cstrong\u003eBenefits:\u003c/strong\u003e ${exercise.benefits.join(', ')}\n                            \u003c/div\u003e\n                            \u003cbutton class=\"btn btn-danger btn-sm\" onclick=\"startRelationshipExercise(${index})\"\u003e\n                                \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart Together\n                            \u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            `;\n        });\n\n        document.getElementById('relationshipExercises').innerHTML = exercisesHtml;\n    }\n\n    // Global function for exercise interaction\n    window.startRelationshipExercise = function(index) {\n        console.log('Starting relationship exercise:', index);\n        // Implementation for guided couple exercises\n    };\n\n    // Simulate real-time relationship dynamics (in a real app, this would come from video analysis)\n    function updateRelationshipDynamics() {\n        // This would be updated based on actual video and audio analysis\n        const dynamics = {\n            emotionalSync: Math.floor(Math.random() * 20) + 70,\n            communicationQuality: Math.floor(Math.random() * 30) + 60,\n            conflictLevel: Math.random() \u003e 0.7 ? 'Medium' : 'Low',\n            intimacyLevel: Math.random() \u003e 0.5 ? 'Good' : 'Excellent'\n        };\n\n        document.getElementById('emotionalSync').textContent = dynamics.emotionalSync + '%';\n        document.getElementById('communicationQuality').textContent = dynamics.communicationQuality + '%';\n        document.getElementById('conflictLevel').textContent = dynamics.conflictLevel;\n        document.getElementById('intimacyLevel').textContent = dynamics.intimacyLevel;\n    }\n\n    // Update dynamics every 30 seconds (in demo mode)\n    setInterval(updateRelationshipDynamics, 30000);\n});\n\u003c/script\u003e\n{% endblock %}\n",
                "session.html": "{% extends \"base.html\" %}\n\n{% block title %}Therapy Session - Mind Mend{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"row\"\u003e\n    \u003cdiv class=\"col-lg-8 mx-auto\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch3\u003e\u003ci class=\"fas fa-comments me-2\"\u003e\u003c/i\u003eTherapy Session\u003c/h3\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                {% if error %}\n                \u003cdiv class=\"alert alert-danger\"\u003e\n                    \u003ci class=\"fas fa-exclamation-circle me-2\"\u003e\u003c/i\u003e{{ error }}\n                \u003c/div\u003e\n                {% endif %}\n\n                {% if not ai_response %}\n                \u003c!-- Session Input Form --\u003e\n                \u003cform method=\"post\" id=\"sessionForm\"\u003e\n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel for=\"name\" class=\"form-label\"\u003eYour Name\u003c/label\u003e\n                        \u003cinput type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" required\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel for=\"session_type\" class=\"form-label\"\u003eSession Type\u003c/label\u003e\n                        \u003cselect class=\"form-select\" id=\"session_type\" name=\"session_type\"\u003e\n                            \u003coption value=\"individual\"\u003eIndividual Therapy\u003c/option\u003e\n                            \u003coption value=\"couple\"\u003eCouple Therapy\u003c/option\u003e\n                            \u003coption value=\"group\"\u003eGroup Therapy\u003c/option\u003e\n                        \u003c/select\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel for=\"user_input\" class=\"form-label\"\u003eWhat's on your mind?\u003c/label\u003e\n                        \u003ctextarea class=\"form-control\" id=\"user_input\" name=\"user_input\" rows=\"5\" \n                                placeholder=\"Share your thoughts, feelings, or concerns...\" required\u003e\u003c/textarea\u003e\n                        \u003cdiv class=\"form-text\"\u003eYour input will be analyzed by AI for personalized support.\u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003cdiv class=\"d-grid gap-2\"\u003e\n                        \u003cbutton type=\"submit\" class=\"btn btn-primary btn-lg\"\u003e\n                            \u003ci class=\"fas fa-paper-plane me-2\"\u003e\u003c/i\u003eSend Message\n                        \u003c/button\u003e\n                        \u003cbutton type=\"button\" class=\"btn btn-outline-info\" onclick=\"startChatSession()\"\u003e\n                            \u003ci class=\"fas fa-comments me-2\"\u003e\u003c/i\u003eStart Live Chat\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/form\u003e\n                {% else %}\n                \u003c!-- Session Results --\u003e\n                \u003cdiv class=\"session-results\"\u003e\n                    \u003cdiv class=\"alert alert-info\"\u003e\n                        \u003ch5\u003e\u003ci class=\"fas fa-user me-2\"\u003e\u003c/i\u003eSession Summary\u003c/h5\u003e\n                        \u003cp\u003e\u003cstrong\u003eName:\u003c/strong\u003e {{ name }}\u003c/p\u003e\n                        \u003cp\u003e\u003cstrong\u003eSession Type:\u003c/strong\u003e {{ session_type.title() }}\u003c/p\u003e\n                    \u003c/div\u003e\n\n                    \u003c!-- User Input --\u003e\n                    \u003cdiv class=\"card mb-3\"\u003e\n                        \u003cdiv class=\"card-header\"\u003e\n                            \u003ch6\u003e\u003ci class=\"fas fa-comment me-2\"\u003e\u003c/i\u003eYour Message\u003c/h6\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"card-body\"\u003e\n                            \u003cp\u003e{{ user_input }}\u003c/p\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003c!-- AI Response --\u003e\n                    \u003cdiv class=\"card mb-3 border-primary\"\u003e\n                        \u003cdiv class=\"card-header bg-primary text-white\"\u003e\n                            \u003ch6\u003e\u003ci class=\"fas fa-robot me-2\"\u003e\u003c/i\u003eAI Therapist Response\u003c/h6\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"card-body\"\u003e\n                            \u003cp\u003e{{ ai_response }}\u003c/p\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    \u003c!-- Alerts Section --\u003e\n                    {% if alerts %}\n                    \u003cdiv class=\"card mb-3 border-warning\"\u003e\n                        \u003cdiv class=\"card-header bg-warning text-dark\"\u003e\n                            \u003ch6\u003e\u003ci class=\"fas fa-exclamation-triangle me-2\"\u003e\u003c/i\u003eHealth \u0026 Safety Alerts\u003c/h6\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"card-body\"\u003e\n                            {% for alert in alerts %}\n                            \u003cdiv class=\"alert alert-{{ 'danger' if alert.severity == 'critical' else 'warning' if alert.severity == 'high' else 'info' }} mb-2\"\u003e\n                                \u003cstrong\u003e{{ alert.message }}\u003c/strong\u003e\n                                {% if alert.resources %}\n                                \u003cdiv class=\"mt-2\"\u003e\n                                    \u003csmall\u003e\u003cstrong\u003eResources:\u003c/strong\u003e\u003c/small\u003e\n                                    \u003cul class=\"mb-0\"\u003e\n                                        {% for resource in alert.resources %}\n                                        \u003cli\u003e\u003csmall\u003e{{ resource.name }}: {{ resource.contact }}\u003c/small\u003e\u003c/li\u003e\n                                        {% endfor %}\n                                    \u003c/ul\u003e\n                                \u003c/div\u003e\n                                {% endif %}\n                            \u003c/div\u003e\n                            {% endfor %}\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    {% endif %}\n\n                    \u003c!-- Action Buttons --\u003e\n                    \u003cdiv class=\"d-flex gap-2 flex-wrap\"\u003e\n                        \u003ca href=\"{{ url_for('session') }}\" class=\"btn btn-primary\"\u003e\n                            \u003ci class=\"fas fa-plus me-2\"\u003e\u003c/i\u003eNew Session\n                        \u003c/a\u003e\n                        \u003ca href=\"{{ url_for('video_assessment') }}\" class=\"btn btn-info\"\u003e\n                            \u003ci class=\"fas fa-video me-2\"\u003e\u003c/i\u003eVideo Assessment\n                        \u003c/a\u003e\n                        \u003ca href=\"{{ url_for('dashboard') }}\" class=\"btn btn-secondary\"\u003e\n                            \u003ci class=\"fas fa-chart-line me-2\"\u003e\u003c/i\u003eView Progress\n                        \u003c/a\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                {% endif %}\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Real-time Analysis Panel (Hidden by default) --\u003e\n\u003cdiv class=\"row mt-4\" id=\"realTimePanel\" style=\"display: none;\"\u003e\n    \u003cdiv class=\"col-lg-8 mx-auto\"\u003e\n        \u003cdiv class=\"card border-info\"\u003e\n            \u003cdiv class=\"card-header bg-info text-white\"\u003e\n                \u003ch6\u003e\u003ci class=\"fas fa-analytics me-2\"\u003e\u003c/i\u003eReal-time Analysis\u003c/h6\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv id=\"realTimeResults\"\u003e\n                    \u003c!-- Real-time analysis results will be displayed here --\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003cscript\u003e\ndocument.addEventListener('DOMContentLoaded', function() {\n    const userInput = document.getElementById('user_input');\n    const realTimePanel = document.getElementById('realTimePanel');\n    const realTimeResults = document.getElementById('realTimeResults');\n    let analysisTimeout;\n\n    // Real-time text analysis\n    if (userInput) {\n        userInput.addEventListener('input', function() {\n            clearTimeout(analysisTimeout);\n            \n            const text = this.value.trim();\n            if (text.length \u003e 50) { // Only analyze if sufficient text\n                analysisTimeout = setTimeout(() =\u003e {\n                    analyzeText(text);\n                }, 1000); // Debounce for 1 second\n            }\n        });\n    }\n\n    function analyzeText(text) {\n        fetch('/api/analyze-text', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                text: text,\n                session_type: document.getElementById('session_type')?.value || 'individual'\n            })\n        })\n        .then(response =\u003e response.json())\n        .then(data =\u003e {\n            if (data.error) {\n                console.error('Analysis error:', data.error);\n                realTimePanel.style.display = 'none';\n                return;\n            }\n            \n            // Show real-time analysis\n            realTimePanel.style.display = 'block';\n            \n            // Display analysis results\n            realTimeResults.innerHTML = `\n                \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-md-6\"\u003e\n                        \u003ch6\u003e\u003ci class=\"fas fa-brain me-2\"\u003e\u003c/i\u003eEmotional Analysis\u003c/h6\u003e\n                        \u003cp\u003e\u003cstrong\u003ePrimary Emotion:\u003c/strong\u003e ${data.ai_response?.emotional_state || 'Analyzing...'}\u003c/p\u003e\n                        \u003cp\u003e\u003cstrong\u003eConfidence:\u003c/strong\u003e ${data.ai_response?.confidence || 'N/A'}%\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-6\"\u003e\n                        \u003ch6\u003e\u003ci class=\"fas fa-shield-alt me-2\"\u003e\u003c/i\u003eRisk Assessment\u003c/h6\u003e\n                        \u003cp\u003e\u003cstrong\u003eLevel:\u003c/strong\u003e \u003cspan class=\"badge bg-${data.alerts?.length \u003e 0 ? 'warning' : 'success'}\"\u003e${data.alerts?.length \u003e 0 ? 'Moderate' : 'Low'}\u003c/span\u003e\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            `;\n        })\n        .catch(error =\u003e {\n            console.error('Real-time analysis error:', error);\n            realTimePanel.style.display = 'none';\n        });\n    }\n\n    // Chat functionality for modern GPT interface\n    window.startChatSession = function() {\n        const chatContainer = document.createElement('div');\n        chatContainer.className = 'chat-interface mt-4';\n        chatContainer.innerHTML = `\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-header bg-primary text-white\"\u003e\n                    \u003ch6\u003e\u003ci class=\"fas fa-comments me-2\"\u003e\u003c/i\u003eLive Chat with AI Therapist\u003c/h6\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-body\" style=\"height: 400px; overflow-y: auto;\" id=\"chatMessages\"\u003e\n                    \u003cdiv class=\"text-muted text-center p-3\"\u003e\n                        \u003ci class=\"fas fa-robot fa-2x mb-2\"\u003e\u003c/i\u003e\n                        \u003cp\u003eAI Therapist is ready to chat. How are you feeling today?\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-footer\"\u003e\n                    \u003cdiv class=\"input-group\"\u003e\n                        \u003cinput type=\"text\" class=\"form-control\" id=\"chatInput\" placeholder=\"Type your message...\"\u003e\n                        \u003cbutton class=\"btn btn-primary\" onclick=\"sendChatMessage()\"\u003e\n                            \u003ci class=\"fas fa-paper-plane\"\u003e\u003c/i\u003e\n                        \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        `;\n        \n        const formContainer = document.querySelector('.session-results') || document.querySelector('.card-body');\n        formContainer.appendChild(chatContainer);\n        \n        // Focus on chat input\n        document.getElementById('chatInput').focus();\n    };\n\n    window.sendChatMessage = function() {\n        const input = document.getElementById('chatInput');\n        const messages = document.getElementById('chatMessages');\n        const message = input.value.trim();\n        \n        if (!message) return;\n        \n        // Add user message\n        addChatMessage('user', message);\n        input.value = '';\n        \n        // Show typing indicator\n        const typingId = addChatMessage('ai', '\u003ci class=\"fas fa-spinner fa-spin\"\u003e\u003c/i\u003e Typing...');\n        \n        // Send to API\n        fetch('/api/session', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                message: message,\n                session_type: 'individual',\n                name: 'Chat User'\n            })\n        })\n        .then(response =\u003e response.json())\n        .then(data =\u003e {\n            // Remove typing indicator\n            document.getElementById(typingId).remove();\n            \n            if (data.success) {\n                addChatMessage('ai', data.response);\n            } else {\n                addChatMessage('ai', 'I apologize, but I\\'m having technical difficulties. Please try again.');\n            }\n        })\n        .catch(error =\u003e {\n            console.error('Chat error:', error);\n            document.getElementById(typingId).remove();\n            addChatMessage('ai', 'I\\'m sorry, I\\'m having connection issues. Please try again.');\n        });\n    };\n\n    function addChatMessage(sender, message) {\n        const messages = document.getElementById('chatMessages');\n        const messageId = 'msg_' + Date.now();\n        const messageDiv = document.createElement('div');\n        messageDiv.id = messageId;\n        messageDiv.className = `mb-3 ${sender === 'user' ? 'text-end' : ''}`;\n        \n        messageDiv.innerHTML = `\n            \u003cdiv class=\"d-inline-block p-3 rounded ${sender === 'user' ? 'bg-primary text-white' : 'bg-light'}\" style=\"max-width: 70%;\"\u003e\n                \u003cdiv class=\"small mb-1\"\u003e\n                    \u003ci class=\"fas fa-${sender === 'user' ? 'user' : 'robot'} me-1\"\u003e\u003c/i\u003e\n                    ${sender === 'user' ? 'You' : 'AI Therapist'}\n                \u003c/div\u003e\n                \u003cdiv\u003e${message}\u003c/div\u003e\n            \u003c/div\u003e\n        `;\n        \n        messages.appendChild(messageDiv);\n        messages.scrollTop = messages.scrollHeight;\n        \n        return messageId;\n    }\n\n    // Allow Enter key to send messages\n    document.addEventListener('keypress', function(e) {\n        if (e.target.id === 'chatInput' \u0026\u0026 e.key === 'Enter') {\n            sendChatMessage();\n        }\n    });\n\n    function displayRealTimeAnalysis(data) {\n        let html = '';\n        \n        // AI Response Preview\n        if (data.ai_response \u0026\u0026 typeof data.ai_response === 'object') {\n            html += '\u003cdiv class=\"mb-3\"\u003e';\n            html += '\u003ch6\u003e\u003ci class=\"fas fa-brain me-2\"\u003e\u003c/i\u003eAI Insights\u003c/h6\u003e';\n            html += `\u003cp\u003e\u003cstrong\u003eEmotional State:\u003c/strong\u003e ${data.ai_response.emotional_state || 'Analyzing...'}\u003c/p\u003e`;\n            if (data.ai_response.key_themes \u0026\u0026 data.ai_response.key_themes.length \u003e 0) {\n                html += '\u003cp\u003e\u003cstrong\u003eKey Themes:\u003c/strong\u003e ' + data.ai_response.key_themes.join(', ') + '\u003c/p\u003e';\n            }\n            html += '\u003c/div\u003e';\n        }\n\n        // Alerts\n        if (data.alerts \u0026\u0026 data.alerts.length \u003e 0) {\n            html += '\u003cdiv class=\"mb-3\"\u003e';\n            html += '\u003ch6\u003e\u003ci class=\"fas fa-exclamation-triangle me-2 text-warning\"\u003e\u003c/i\u003eAlerts\u003c/h6\u003e';\n            data.alerts.forEach(alert =\u003e {\n                const alertClass = alert.severity === 'critical' ? 'danger' : \n                                 alert.severity === 'high' ? 'warning' : 'info';\n                html += `\u003cdiv class=\"alert alert-${alertClass} py-2 mb-2\"\u003e${alert.message}\u003c/div\u003e`;\n            });\n            html += '\u003c/div\u003e';\n        }\n\n        // Exercises\n        if (data.exercises \u0026\u0026 data.exercises.length \u003e 0) {\n            html += '\u003cdiv class=\"mb-3\"\u003e';\n            html += '\u003ch6\u003e\u003ci class=\"fas fa-dumbbell me-2\"\u003e\u003c/i\u003eSuggested Exercises\u003c/h6\u003e';\n            data.exercises.slice(0, 2).forEach(exercise =\u003e {\n                html += `\u003cdiv class=\"card card-body py-2 mb-2\"\u003e`;\n                html += `\u003cstrong\u003e${exercise.title}\u003c/strong\u003e - ${exercise.description}`;\n                html += `\u003c/div\u003e`;\n            });\n            html += '\u003c/div\u003e';\n        }\n\n        realTimeResults.innerHTML = html || '\u003cp class=\"text-muted\"\u003eAnalyzing your input...\u003c/p\u003e';\n    }\n\n    // Form enhancement\n    const sessionForm = document.getElementById('sessionForm');\n    if (sessionForm) {\n        sessionForm.addEventListener('submit', function(e) {\n            const submitBtn = this.querySelector('button[type=\"submit\"]');\n            submitBtn.innerHTML = '\u003ci class=\"fas fa-spinner fa-spin me-2\"\u003e\u003c/i\u003eProcessing...';\n            submitBtn.disabled = true;\n        });\n    }\n});\n\u003c/script\u003e\n{% endblock %}\n",
                "subscribe.html": "{% extends \"base.html\" %}\n\n{% block title %}Subscribe - Mind Mend{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"row\"\u003e\n    \u003cdiv class=\"col-lg-8 mx-auto\"\u003e\n        \u003cdiv class=\"text-center mb-5\"\u003e\n            \u003ch2\u003e\u003ci class=\"fas fa-crown me-2 text-warning\"\u003e\u003c/i\u003eUpgrade to Mind Mend Premium\u003c/h2\u003e\n            \u003cp class=\"lead\"\u003eUnlock advanced AI therapy features and premium support\u003c/p\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n{% if request.args.get('canceled') %}\n\u003cdiv class=\"row\"\u003e\n    \u003cdiv class=\"col-lg-8 mx-auto\"\u003e\n        \u003cdiv class=\"alert alert-warning\"\u003e\n            \u003ci class=\"fas fa-info-circle me-2\"\u003e\u003c/i\u003ePayment was canceled. You can try again anytime.\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endif %}\n\n\u003cdiv class=\"row g-4 justify-content-center\"\u003e\n    \u003c!-- Free Plan --\u003e\n    \u003cdiv class=\"col-lg-4 col-md-6\"\u003e\n        \u003cdiv class=\"card h-100\"\u003e\n            \u003cdiv class=\"card-header text-center\"\u003e\n                \u003ch4\u003eFree\u003c/h4\u003e\n                \u003ch2 class=\"text-muted\"\u003e$0\u003csmall\u003e/month\u003c/small\u003e\u003c/h2\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eBasic AI therapy sessions\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003e5 sessions per month\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eBasic mood tracking\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eCrisis detection\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-times text-muted me-2\"\u003e\u003c/i\u003eVideo analysis\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-times text-muted me-2\"\u003e\u003c/i\u003eBiometric integration\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-times text-muted me-2\"\u003e\u003c/i\u003eHuman counselor access\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer\"\u003e\n                \u003ca href=\"{{ url_for('individual_therapy') }}\" class=\"btn btn-outline-primary w-100\"\u003e\n                    Current Plan\n                \u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Premium Plan --\u003e\n    \u003cdiv class=\"col-lg-4 col-md-6\"\u003e\n        \u003cdiv class=\"card h-100 border-warning\"\u003e\n            \u003cdiv class=\"card-header bg-warning text-dark text-center\"\u003e\n                \u003ch4\u003e\u003ci class=\"fas fa-crown me-2\"\u003e\u003c/i\u003ePremium\u003c/h4\u003e\n                \u003ch2\u003e$29.99\u003csmall\u003e/month\u003c/small\u003e\u003c/h2\u003e\n                \u003cspan class=\"badge bg-dark\"\u003eMost Popular\u003c/span\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eUnlimited AI therapy sessions\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eAdvanced GPT-4o conversations\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eVideo emotion analysis\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eBiometric monitoring\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003ePersonalized exercises\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003ePriority crisis support\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eHuman counselor booking\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eProgress analytics\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer\"\u003e\n                \u003cform action=\"{{ url_for('create_checkout_session') }}\" method=\"post\"\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-warning w-100\"\u003e\n                        \u003ci class=\"fas fa-credit-card me-2\"\u003e\u003c/i\u003eSubscribe Now\n                    \u003c/button\u003e\n                \u003c/form\u003e\n                \u003csmall class=\"text-muted d-block mt-2 text-center\"\u003eCancel anytime\u003c/small\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Enterprise Plan --\u003e\n    \u003cdiv class=\"col-lg-4 col-md-6\"\u003e\n        \u003cdiv class=\"card h-100\"\u003e\n            \u003cdiv class=\"card-header text-center\"\u003e\n                \u003ch4\u003eEnterprise\u003c/h4\u003e\n                \u003ch2 class=\"text-muted\"\u003eContact Us\u003c/h2\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eEverything in Premium\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eWhite-label solution\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eCustom AI training\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eHIPAA compliance\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eDedicated support\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eAPI access\u003c/li\u003e\n                    \u003cli class=\"mb-2\"\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eCustom integrations\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer\"\u003e\n                \u003ca href=\"mailto:enterprise@mindmend.com\" class=\"btn btn-outline-secondary w-100\"\u003e\n                    Contact Sales\n                \u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"row mt-5\"\u003e\n    \u003cdiv class=\"col-lg-8 mx-auto\"\u003e\n        \u003cdiv class=\"card bg-light\"\u003e\n            \u003cdiv class=\"card-body text-center\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-shield-alt me-2 text-success\"\u003e\u003c/i\u003eSecure \u0026 Private\u003c/h5\u003e\n                \u003cp class=\"mb-0\"\u003eAll payments processed securely through Stripe. Your therapy data is encrypted and never shared.\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Stripe JS (only needed if using Stripe Elements) --\u003e\n\u003cscript src=\"https://js.stripe.com/v3/\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n// Initialize Stripe (for future custom payment forms)\nconst stripe = Stripe('{{ stripe_publishable_key }}');\n\u003c/script\u003e\n{% endblock %}",
                "video_assess.html": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eAI Video Assessment - Mind Mend\u003c/title\u003e\n    \u003clink href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\"\u003e\n    \u003cstyle\u003e\n        body {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            font-family: 'Arial', sans-serif;\n        }\n        .assessment-container {\n            background: rgba(255, 255, 255, 0.95);\n            border-radius: 20px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            padding: 2rem;\n            margin: 2rem auto;\n            max-width: 800px;\n        }\n        .feature-card {\n            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n            color: white;\n            border-radius: 15px;\n            padding: 1.5rem;\n            margin: 1rem 0;\n            transition: transform 0.3s ease;\n        }\n        .feature-card:hover {\n            transform: translateY(-5px);\n        }\n        .coming-soon {\n            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n            color: white;\n            border-radius: 15px;\n            padding: 2rem;\n            text-align: center;\n            margin: 2rem 0;\n        }\n        .video-placeholder {\n            background: #f8f9fa;\n            border: 3px dashed #dee2e6;\n            border-radius: 15px;\n            height: 300px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            flex-direction: column;\n            margin: 2rem 0;\n        }\n        .btn-start-assessment {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            border: none;\n            padding: 15px 30px;\n            border-radius: 50px;\n            color: white;\n            font-weight: bold;\n            transition: all 0.3s ease;\n        }\n        .btn-start-assessment:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);\n            color: white;\n        }\n        .tech-preview {\n            background: rgba(255, 193, 7, 0.1);\n            border: 2px solid #ffc107;\n            border-radius: 10px;\n            padding: 1rem;\n            margin: 1rem 0;\n        }\n    \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"assessment-container\"\u003e\n            \u003cdiv class=\"text-center mb-4\"\u003e\n                \u003ch1 class=\"display-4 text-primary\"\u003e\n                    \u003ci class=\"fas fa-video me-3\"\u003e\u003c/i\u003eAI Video Assessment\n                \u003c/h1\u003e\n                \u003cp class=\"lead text-muted\"\u003eAdvanced AI-powered mental health evaluation through video analysis\u003c/p\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"tech-preview\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-flask me-2\"\u003e\u003c/i\u003eTechnology Preview - Level 2\u003c/h5\u003e\n                \u003cp class=\"mb-0\"\u003eThis is a preview of our upcoming AI video assessment features. Full functionality will be available in Level 3+.\u003c/p\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Video Assessment Area --\u003e\n            \u003cdiv class=\"video-placeholder\"\u003e\n                \u003ci class=\"fas fa-camera fa-4x text-muted mb-3\"\u003e\u003c/i\u003e\n                \u003ch4 class=\"text-muted\"\u003eVideo Assessment Portal\u003c/h4\u003e\n                \u003cp class=\"text-muted\"\u003eCamera access and video analysis will be enabled in Level 3+\u003c/p\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Start Assessment Button --\u003e\n            \u003cdiv class=\"text-center mb-4\"\u003e\n                \u003cbutton class=\"btn btn-start-assessment btn-lg\" onclick=\"showComingSoon()\"\u003e\n                    \u003ci class=\"fas fa-play me-2\"\u003e\u003c/i\u003eStart Video Assessment\n                \u003c/button\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Upcoming Features --\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003cdiv class=\"feature-card\"\u003e\n                        \u003ch5\u003e\u003ci class=\"fas fa-brain me-2\"\u003e\u003c/i\u003eAI Microexpression Analysis\u003c/h5\u003e\n                        \u003cp class=\"mb-0\"\u003eAdvanced facial analysis to detect subtle emotional changes and micro-expressions that reveal underlying mental states.\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003cdiv class=\"feature-card\"\u003e\n                        \u003ch5\u003e\u003ci class=\"fas fa-heartbeat me-2\"\u003e\u003c/i\u003eApple Watch Integration\u003c/h5\u003e\n                        \u003cp class=\"mb-0\"\u003eReal-time biosensor data from Apple Watch including heart rate variability, stress levels, and activity patterns.\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003cdiv class=\"feature-card\"\u003e\n                        \u003ch5\u003e\u003ci class=\"fas fa-eye me-2\"\u003e\u003c/i\u003eGaze Tracking\u003c/h5\u003e\n                        \u003cp class=\"mb-0\"\u003eEye movement analysis to assess attention patterns, cognitive load, and emotional engagement during sessions.\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003cdiv class=\"feature-card\"\u003e\n                        \u003ch5\u003e\u003ci class=\"fas fa-microphone me-2\"\u003e\u003c/i\u003eVoice Analysis\u003c/h5\u003e\n                        \u003cp class=\"mb-0\"\u003eVocal biomarker detection for stress, anxiety, and emotional state through advanced speech pattern analysis.\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Coming Soon Section --\u003e\n            \u003cdiv class=\"coming-soon\"\u003e\n                \u003ch3\u003e\u003ci class=\"fas fa-rocket me-2\"\u003e\u003c/i\u003eComing in Level 3+\u003c/h3\u003e\n                \u003cp class=\"mb-3\"\u003eRevolutionary mental health assessment combining:\u003c/p\u003e\n                \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-md-3 text-center mb-2\"\u003e\n                        \u003ci class=\"fas fa-video fa-2x mb-2\"\u003e\u003c/i\u003e\n                        \u003cp\u003eVideo Analysis\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-3 text-center mb-2\"\u003e\n                        \u003ci class=\"fas fa-chart-line fa-2x mb-2\"\u003e\u003c/i\u003e\n                        \u003cp\u003eBiosensor Data\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-3 text-center mb-2\"\u003e\n                        \u003ci class=\"fas fa-robot fa-2x mb-2\"\u003e\u003c/i\u003e\n                        \u003cp\u003eAI Analysis\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-3 text-center mb-2\"\u003e\n                        \u003ci class=\"fas fa-clipboard-check fa-2x mb-2\"\u003e\u003c/i\u003e\n                        \u003cp\u003eReal-time Assessment\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Technical Details --\u003e\n            \u003cdiv class=\"accordion mt-4\" id=\"technicalDetails\"\u003e\n                \u003cdiv class=\"accordion-item\"\u003e\n                    \u003ch2 class=\"accordion-header\" id=\"headingTech\"\u003e\n                        \u003cbutton class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTech\"\u003e\n                            \u003ci class=\"fas fa-cogs me-2\"\u003e\u003c/i\u003eTechnical Implementation (Level 3+ Preview)\n                        \u003c/button\u003e\n                    \u003c/h2\u003e\n                    \u003cdiv id=\"collapseTech\" class=\"accordion-collapse collapse\" data-bs-parent=\"#technicalDetails\"\u003e\n                        \u003cdiv class=\"accordion-body\"\u003e\n                            \u003ch6\u003eWebRTC Integration\u003c/h6\u003e\n                            \u003cul\u003e\n                                \u003cli\u003eReal-time video streaming and processing\u003c/li\u003e\n                                \u003cli\u003eSecure peer-to-peer connections\u003c/li\u003e\n                                \u003cli\u003eCross-platform camera access\u003c/li\u003e\n                            \u003c/ul\u003e\n                            \n                            \u003ch6\u003eAI Models\u003c/h6\u003e\n                            \u003cul\u003e\n                                \u003cli\u003eFacial Action Unit (AU) detection using computer vision\u003c/li\u003e\n                                \u003cli\u003eEmotion classification with 95%+ accuracy\u003c/li\u003e\n                                \u003cli\u003eVoice stress analysis and vocal biomarkers\u003c/li\u003e\n                            \u003c/ul\u003e\n                            \n                            \u003ch6\u003eBiosensor APIs\u003c/h6\u003e\n                            \u003cul\u003e\n                                \u003cli\u003eHealthKit integration for Apple Watch\u003c/li\u003e\n                                \u003cli\u003eWeb Bluetooth for direct device communication\u003c/li\u003e\n                                \u003cli\u003eReal-time data streaming and analysis\u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003c!-- Navigation --\u003e\n            \u003cdiv class=\"text-center mt-4\"\u003e\n                \u003ca href=\"/\" class=\"btn btn-outline-primary me-2\"\u003e\n                    \u003ci class=\"fas fa-home me-1\"\u003e\u003c/i\u003eBack to Home\n                \u003c/a\u003e\n                \u003ca href=\"/premium\" class=\"btn btn-outline-success\"\u003e\n                    \u003ci class=\"fas fa-crown me-1\"\u003e\u003c/i\u003eUpgrade to Premium\n                \u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cscript src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        function showComingSoon() {\n            alert('🚀 Coming Soon in Level 3+!\\n\\nFull video assessment with:\\n• Real-time facial analysis\\n• Microexpression detection\\n• Apple Watch integration\\n• Voice pattern analysis\\n\\nStay tuned for the next major update!');\n        }\n\n        // Placeholder for future WebRTC integration\n        class VideoAssessment {\n            constructor() {\n                this.stream = null;\n                this.isRecording = false;\n                this.analysisResults = [];\n            }\n\n            async startAssessment() {\n                // Future implementation:\n                // 1. Request camera and microphone access\n                // 2. Initialize WebRTC connection\n                // 3. Start real-time video analysis\n                // 4. Begin biosensor data collection\n                console.log('Video assessment will start here in Level 3+');\n            }\n\n            analyzeFrame(frameData) {\n                // Future implementation:\n                // 1. Send frame to AI microexpression analyzer\n                // 2. Process facial landmarks and emotion detection\n                // 3. Correlate with biosensor data\n                // 4. Generate real-time insights\n                return {\n                    emotions: {},\n                    microexpressions: {},\n                    stress_level: 0,\n                    engagement: 0\n                };\n            }\n\n            generateReport() {\n                // Future implementation:\n                // 1. Compile all analysis results\n                // 2. Generate comprehensive mental health assessment\n                // 3. Provide personalized recommendations\n                // 4. Create progress tracking metrics\n                return {\n                    overall_score: 0,\n                    emotional_patterns: [],\n                    recommendations: [],\n                    next_steps: []\n                };\n            }\n        }\n\n        // Initialize placeholder assessment system\n        const videoAssessment = new VideoAssessment();\n        console.log('Video Assessment System initialized (placeholder)');\n    \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e",
                "video_assessment.html": "{% extends \"base.html\" %}\n\n{% block title %}AI Video Assessment - Mind Mend{% endblock %}\n\n{% block head %}\n\u003cstyle\u003e\n    .video-assessment-container {\n        position: relative;\n        background: #000;\n        border-radius: 12px;\n        overflow: hidden;\n        box-shadow: 0 4px 20px rgba(0,0,0,0.3);\n        transition: all 0.3s ease;\n    }\n    \n    /* Mobile-friendly camera view */\n    .camera-container {\n        position: relative;\n        width: 100%;\n        height: 400px;\n        transition: all 0.3s ease;\n    }\n    \n    .camera-container.minimized {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        width: 200px;\n        height: 150px;\n        z-index: 1000;\n        border: 2px solid #fff;\n        border-radius: 12px;\n        box-shadow: 0 4px 20px rgba(0,0,0,0.5);\n    }\n    \n    .video-element {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n        border-radius: 10px;\n    }\n    \n    .camera-controls {\n        position: absolute;\n        bottom: 10px;\n        left: 50%;\n        transform: translateX(-50%);\n        display: flex;\n        gap: 10px;\n    }\n    \n    .camera-controls.minimized {\n        bottom: 5px;\n        gap: 5px;\n    }\n    \n    .camera-btn {\n        padding: 8px 12px;\n        border: none;\n        border-radius: 20px;\n        background: rgba(255,255,255,0.9);\n        color: #333;\n        font-size: 12px;\n        cursor: pointer;\n        transition: all 0.2s ease;\n    }\n    \n    .camera-btn.minimized {\n        padding: 4px 8px;\n        font-size: 10px;\n    }\n    \n    .camera-btn:hover {\n        background: rgba(255,255,255,1);\n        transform: scale(1.05);\n    }\n    \n    /* Questions panel - always visible on mobile */\n    .questions-panel {\n        background: rgba(255,255,255,0.95);\n        border-radius: 12px;\n        padding: 20px;\n        margin-top: 20px;\n        min-height: 300px;\n    }\n    \n    .questions-panel.camera-active {\n        margin-top: 0;\n    }\n    \n    /* Mobile-specific styles */\n    @media (max-width: 768px) {\n        .camera-container {\n            height: 300px;\n        }\n        \n        .camera-container.minimized {\n            width: 150px;\n            height: 100px;\n            top: 10px;\n            right: 10px;\n        }\n        \n        .questions-panel {\n            padding: 15px;\n            margin-bottom: 120px; /* Space for minimized camera */\n        }\n        \n        .questions-panel.camera-active {\n            padding-top: 60px; /* Space for minimized camera when active */\n        }\n    }\n    \n    .assessment-overlay {\n        position: absolute;\n        top: 0;\n        right: 0;\n        background: linear-gradient(45deg, rgba(0,0,0,0.8), rgba(0,0,0,0.6));\n        color: white;\n        padding: 15px;\n        border-radius: 0 12px 0 12px;\n        min-width: 200px;\n    }\n    .emotion-indicator {\n        display: inline-block;\n        width: 16px;\n        height: 16px;\n        border-radius: 50%;\n        margin-right: 8px;\n    }\n    .confidence-bar {\n        height: 6px;\n        background: rgba(255,255,255,0.3);\n        border-radius: 3px;\n        overflow: hidden;\n        margin-top: 4px;\n    }\n    .confidence-fill {\n        height: 100%;\n        background: linear-gradient(90deg, #ff6b6b, #4ecdc4, #45b7d1);\n        transition: width 0.3s ease;\n    }\n    .microexpression-alert {\n        position: absolute;\n        bottom: 20px;\n        left: 20px;\n        background: rgba(255, 193, 7, 0.9);\n        color: #000;\n        padding: 8px 12px;\n        border-radius: 6px;\n        font-size: 0.9em;\n        transform: translateY(100px);\n        opacity: 0;\n        transition: all 0.3s ease;\n    }\n    .microexpression-alert.show {\n        transform: translateY(0);\n        opacity: 1;\n    }\n    .assessment-phase {\n        border-left: 4px solid var(--bs-primary);\n        background: rgba(var(--bs-primary-rgb), 0.1);\n    }\n    .assessment-complete {\n        border-left: 4px solid var(--bs-success);\n        background: rgba(var(--bs-success-rgb), 0.1);\n    }\n\u003c/style\u003e\n{% endblock %}\n\n{% block content %}\n\u003cdiv class=\"row\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"d-flex justify-content-between align-items-center mb-4\"\u003e\n            \u003ch2\u003e\u003ci class=\"fas fa-video me-2\"\u003e\u003c/i\u003eAI Video Assessment\u003c/h2\u003e\n            \u003cdiv class=\"d-flex gap-2\"\u003e\n                \u003cspan class=\"badge bg-info\" id=\"assessmentStatus\"\u003eReady to Start\u003c/span\u003e\n                \u003cbutton class=\"btn btn-outline-primary\" id=\"settingsBtn\"\u003e\n                    \u003ci class=\"fas fa-cog me-1\"\u003e\u003c/i\u003eSettings\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cp class=\"text-muted\"\u003eComprehensive AI-powered video interview with emotion analysis, microexpression detection, and therapeutic assessment.\u003c/p\u003e\n        \n        \u003c!-- Camera Permission Notice --\u003e\n        \u003cdiv class=\"alert alert-info alert-dismissible fade show\" role=\"alert\"\u003e\n            \u003ci class=\"fas fa-info-circle me-2\"\u003e\u003c/i\u003e\n            \u003cstrong\u003eCamera Access Required:\u003c/strong\u003e This assessment requires camera access for facial analysis. \n            If you haven't granted permissions, click \"Start Assessment\" and allow camera access when prompted. \n            Alternatively, use \"Test Mode\" to explore the assessment without camera.\n            \u003cbutton type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"\u003e\u003c/button\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Video Assessment Interface --\u003e\n\u003cdiv class=\"row g-4\"\u003e\n    \u003cdiv class=\"col-lg-8\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-body p-0\"\u003e\n                \u003cdiv class=\"camera-container\" id=\"cameraContainer\"\u003e\n                    \u003cdiv class=\"video-assessment-container\" style=\"height: 450px;\"\u003e\n                        \u003cvideo id=\"assessmentVideo\" width=\"100%\" height=\"100%\" style=\"object-fit: cover;\" muted class=\"video-element\"\u003e\u003c/video\u003e\n                        \n                        \u003c!-- Camera Controls Overlay --\u003e\n                        \u003cdiv class=\"camera-controls\" id=\"cameraControls\"\u003e\n                            \u003cbutton class=\"camera-btn\" id=\"minimizeBtn\" onclick=\"toggleCameraSize()\"\u003e\n                                \u003ci class=\"fas fa-compress\"\u003e\u003c/i\u003e Minimize\n                            \u003c/button\u003e\n                            \u003cbutton class=\"camera-btn\" id=\"maximizeBtn\" onclick=\"toggleCameraSize()\" style=\"display: none;\"\u003e\n                                \u003ci class=\"fas fa-expand\"\u003e\u003c/i\u003e Expand\n                            \u003c/button\u003e\n                        \u003c/div\u003e\n                    \n                    \u003c!-- Real-time Analysis Overlay --\u003e\n                    \u003cdiv class=\"assessment-overlay\" id=\"analysisOverlay\"\u003e\n                        \u003cdiv class=\"mb-2\"\u003e\n                            \u003cstrong\u003ePrimary Emotion\u003c/strong\u003e\n                            \u003cdiv class=\"d-flex align-items-center mt-1\"\u003e\n                                \u003cspan class=\"emotion-indicator bg-primary\" id=\"emotionIndicator\"\u003e\u003c/span\u003e\n                                \u003cspan id=\"primaryEmotion\"\u003eNeutral\u003c/span\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"confidence-bar\"\u003e\n                                \u003cdiv class=\"confidence-fill\" id=\"emotionConfidence\" style=\"width: 0%\"\u003e\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \n                        \u003cdiv class=\"mb-2\"\u003e\n                            \u003cstrong\u003eStress Level\u003c/strong\u003e\n                            \u003cdiv class=\"mt-1\"\u003e\n                                \u003cspan id=\"stressLevel\"\u003eLow\u003c/span\u003e\n                                \u003cdiv class=\"confidence-bar\"\u003e\n                                    \u003cdiv class=\"confidence-fill\" id=\"stressConfidence\" style=\"width: 25%\"\u003e\u003c/div\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \n                        \u003cdiv class=\"mb-2\"\u003e\n                            \u003cstrong\u003eEngagement\u003c/strong\u003e\n                            \u003cdiv class=\"mt-1\"\u003e\n                                \u003cspan id=\"engagementLevel\"\u003eHigh\u003c/span\u003e\n                                \u003cdiv class=\"confidence-bar\"\u003e\n                                    \u003cdiv class=\"confidence-fill\" id=\"engagementConfidence\" style=\"width: 85%\"\u003e\u003c/div\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \n                        \u003cdiv\u003e\n                            \u003cstrong\u003eEye Contact\u003c/strong\u003e\n                            \u003cdiv class=\"mt-1\"\u003e\n                                \u003cspan id=\"eyeContact\"\u003eGood\u003c/span\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \n                    \u003c!-- Microexpression Alert --\u003e\n                    \u003cdiv class=\"microexpression-alert\" id=\"microAlert\"\u003e\n                        \u003ci class=\"fas fa-exclamation-triangle me-2\"\u003e\u003c/i\u003e\n                        \u003cspan id=\"microText\"\u003eSubtle emotional shift detected\u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003c!-- Video Controls --\u003e\n                \u003cdiv class=\"p-3 border-top\"\u003e\n                    \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                        \u003cdiv class=\"d-flex gap-2\"\u003e\n                            \u003cbutton class=\"btn btn-success\" id=\"startAssessment\"\u003e\n                                \u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eStart Assessment\n                            \u003c/button\u003e\n                            \u003cbutton class=\"btn btn-danger\" id=\"stopAssessment\" disabled\u003e\n                                \u003ci class=\"fas fa-stop me-1\"\u003e\u003c/i\u003eStop\n                            \u003c/button\u003e\n                            \u003cbutton class=\"btn btn-warning\" id=\"pauseAssessment\" disabled\u003e\n                                \u003ci class=\"fas fa-pause me-1\"\u003e\u003c/i\u003ePause\n                            \u003c/button\u003e\n                            \u003cbutton class=\"btn btn-secondary\" id=\"testMode\"\u003e\n                                \u003ci class=\"fas fa-flask me-1\"\u003e\u003c/i\u003eTest Mode\n                            \u003c/button\u003e\n                        \u003c/div\u003e\n                        \n                        \u003cdiv class=\"d-flex align-items-center gap-3\"\u003e\n                            \u003cdiv class=\"form-check form-switch\"\u003e\n                                \u003cinput class=\"form-check-input\" type=\"checkbox\" id=\"enableMicroexpression\" checked\u003e\n                                \u003clabel class=\"form-check-label\" for=\"enableMicroexpression\"\u003e\n                                    Microexpression Analysis\n                                \u003c/label\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"form-check form-switch\"\u003e\n                                \u003cinput class=\"form-check-input\" type=\"checkbox\" id=\"enableVoiceAnalysis\" checked\u003e\n                                \u003clabel class=\"form-check-label\" for=\"enableVoiceAnalysis\"\u003e\n                                    Voice Analysis\n                                \u003c/label\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"col-lg-4\"\u003e\n        \u003cdiv class=\"card h-100\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch6\u003e\u003ci class=\"fas fa-list-check me-2\"\u003e\u003c/i\u003eAssessment Progress\u003c/h6\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv id=\"assessmentPhases\"\u003e\n                    \u003cdiv class=\"assessment-phase p-3 rounded mb-3\" id=\"phase1\"\u003e\n                        \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                            \u003cdiv\u003e\n                                \u003ch6 class=\"mb-1\"\u003e1. Initial Calibration\u003c/h6\u003e\n                                \u003csmall class=\"text-muted\"\u003eEstablishing baseline\u003c/small\u003e\n                            \u003c/div\u003e\n                            \u003ci class=\"fas fa-clock text-muted\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"progress mt-2\" style=\"height: 4px;\"\u003e\n                            \u003cdiv class=\"progress-bar\" style=\"width: 0%\" id=\"phase1Progress\"\u003e\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"assessment-phase p-3 rounded mb-3\" id=\"phase2\"\u003e\n                        \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                            \u003cdiv\u003e\n                                \u003ch6 class=\"mb-1\"\u003e2. Mood Assessment\u003c/h6\u003e\n                                \u003csmall class=\"text-muted\"\u003eCurrent emotional state\u003c/small\u003e\n                            \u003c/div\u003e\n                            \u003ci class=\"fas fa-clock text-muted\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"progress mt-2\" style=\"height: 4px;\"\u003e\n                            \u003cdiv class=\"progress-bar\" style=\"width: 0%\" id=\"phase2Progress\"\u003e\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"assessment-phase p-3 rounded mb-3\" id=\"phase3\"\u003e\n                        \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                            \u003cdiv\u003e\n                                \u003ch6 class=\"mb-1\"\u003e3. Stress Response\u003c/h6\u003e\n                                \u003csmall class=\"text-muted\"\u003eAnxiety and stress indicators\u003c/small\u003e\n                            \u003c/div\u003e\n                            \u003ci class=\"fas fa-clock text-muted\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"progress mt-2\" style=\"height: 4px;\"\u003e\n                            \u003cdiv class=\"progress-bar\" style=\"width: 0%\" id=\"phase3Progress\"\u003e\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"assessment-phase p-3 rounded mb-3\" id=\"phase4\"\u003e\n                        \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                            \u003cdiv\u003e\n                                \u003ch6 class=\"mb-1\"\u003e4. Communication Patterns\u003c/h6\u003e\n                                \u003csmall class=\"text-muted\"\u003eVoice and expression analysis\u003c/small\u003e\n                            \u003c/div\u003e\n                            \u003ci class=\"fas fa-clock text-muted\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"progress mt-2\" style=\"height: 4px;\"\u003e\n                            \u003cdiv class=\"progress-bar\" style=\"width: 0%\" id=\"phase4Progress\"\u003e\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"assessment-phase p-3 rounded\" id=\"phase5\"\u003e\n                        \u003cdiv class=\"d-flex justify-content-between align-items-center\"\u003e\n                            \u003cdiv\u003e\n                                \u003ch6 class=\"mb-1\"\u003e5. Comprehensive Analysis\u003c/h6\u003e\n                                \u003csmall class=\"text-muted\"\u003eGenerating recommendations\u003c/small\u003e\n                            \u003c/div\u003e\n                            \u003ci class=\"fas fa-clock text-muted\"\u003e\u003c/i\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"progress mt-2\" style=\"height: 4px;\"\u003e\n                            \u003cdiv class=\"progress-bar\" style=\"width: 0%\" id=\"phase5Progress\"\u003e\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv id=\"currentInstructions\" class=\"mt-4\"\u003e\n                    \u003ch6\u003eInstructions\u003c/h6\u003e\n                    \u003cp class=\"text-muted\" id=\"instructionText\"\u003ePosition yourself comfortably in front of the camera and click \"Start Assessment\" when ready.\u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Questions Panel for Mobile --\u003e\n\u003cdiv class=\"questions-panel\" id=\"questionsPanel\" style=\"display: none;\"\u003e\n    \u003cdiv class=\"card\"\u003e\n        \u003cdiv class=\"card-header\"\u003e\n            \u003ch5\u003e\u003ci class=\"fas fa-question-circle me-2\"\u003e\u003c/i\u003eAssessment Questions\u003c/h5\u003e\n            \u003csmall class=\"text-muted\"\u003eAnswer while the camera is recording\u003c/small\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"card-body\"\u003e\n            \u003cdiv id=\"currentQuestion\"\u003e\n                \u003ch6\u003eQuestion 1 of 5\u003c/h6\u003e\n                \u003cp class=\"mb-3\"\u003eHow have you been feeling emotionally over the past week?\u003c/p\u003e\n                \u003cdiv class=\"form-group mb-3\"\u003e\n                    \u003ctextarea class=\"form-control\" rows=\"3\" placeholder=\"Type your response here...\" id=\"questionResponse\"\u003e\u003c/textarea\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"d-flex justify-content-between\"\u003e\n                    \u003cbutton class=\"btn btn-outline-secondary\" id=\"prevQuestion\" disabled\u003ePrevious\u003c/button\u003e\n                    \u003cbutton class=\"btn btn-primary\" id=\"nextQuestion\"\u003eNext Question\u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Assessment Results Modal --\u003e\n\u003cdiv class=\"modal fade\" id=\"resultsModal\" tabindex=\"-1\"\u003e\n    \u003cdiv class=\"modal-dialog modal-lg\"\u003e\n        \u003cdiv class=\"modal-content\"\u003e\n            \u003cdiv class=\"modal-header\"\u003e\n                \u003ch5 class=\"modal-title\"\u003eAssessment Complete\u003c/h5\u003e\n                \u003cbutton type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"\u003e\u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"modal-body\"\u003e\n                \u003cdiv id=\"assessmentResults\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"modal-footer\"\u003e\n                \u003cbutton type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\"\u003eClose\u003c/button\u003e\n                \u003cbutton type=\"button\" class=\"btn btn-primary\" id=\"scheduleSession\"\u003eSchedule Follow-up Session\u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n{% endblock %}\n\n{% block scripts %}\n\u003cscript\u003e\n// Mobile detection and camera management\nlet isMobile = window.innerWidth \u003c= 768 || /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\nlet cameraMinimized = false;\nlet assessmentActive = false;\nlet currentQuestionIndex = 0;\n\nconst questions = [\n    \"How have you been feeling emotionally over the past week?\",\n    \"What situations or events tend to make you feel stressed or anxious?\", \n    \"How would you describe your energy levels and motivation recently?\",\n    \"What coping strategies do you currently use when facing challenges?\",\n    \"What are your main goals for improving your mental well-being?\"\n];\n\n// Auto-minimize camera on mobile when assessment starts\nfunction autoMinimizeOnMobile() {\n    if (isMobile \u0026\u0026 assessmentActive \u0026\u0026 !cameraMinimized) {\n        setTimeout(() =\u003e {\n            toggleCameraSize();\n            showQuestionsPanel();\n        }, 3000); // Auto-minimize after 3 seconds on mobile\n    }\n}\n\nfunction toggleCameraSize() {\n    const container = document.getElementById('cameraContainer');\n    const controls = document.getElementById('cameraControls');\n    const minimizeBtn = document.getElementById('minimizeBtn');\n    const maximizeBtn = document.getElementById('maximizeBtn');\n    \n    if (cameraMinimized) {\n        // Expand camera\n        container.classList.remove('minimized');\n        controls.classList.remove('minimized');\n        minimizeBtn.style.display = 'block';\n        maximizeBtn.style.display = 'none';\n        cameraMinimized = false;\n        hideQuestionsPanel();\n    } else {\n        // Minimize camera\n        container.classList.add('minimized');\n        controls.classList.add('minimized');\n        minimizeBtn.style.display = 'none';\n        maximizeBtn.style.display = 'block';\n        cameraMinimized = true;\n        if (assessmentActive) {\n            showQuestionsPanel();\n        }\n    }\n}\n\nfunction showQuestionsPanel() {\n    const panel = document.getElementById('questionsPanel');\n    panel.style.display = 'block';\n    panel.classList.add('camera-active');\n    updateQuestion();\n}\n\nfunction hideQuestionsPanel() {\n    const panel = document.getElementById('questionsPanel');\n    panel.style.display = 'none';\n    panel.classList.remove('camera-active');\n}\n\nfunction updateQuestion() {\n    const questionDiv = document.getElementById('currentQuestion');\n    const questionText = questions[currentQuestionIndex];\n    const questionNumber = currentQuestionIndex + 1;\n    \n    questionDiv.innerHTML = `\n        \u003ch6\u003eQuestion ${questionNumber} of ${questions.length}\u003c/h6\u003e\n        \u003cp class=\"mb-3\"\u003e${questionText}\u003c/p\u003e\n        \u003cdiv class=\"form-group mb-3\"\u003e\n            \u003ctextarea class=\"form-control\" rows=\"3\" placeholder=\"Type your response here...\" id=\"questionResponse\"\u003e\u003c/textarea\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"d-flex justify-content-between\"\u003e\n            \u003cbutton class=\"btn btn-outline-secondary\" id=\"prevQuestion\" ${currentQuestionIndex === 0 ? 'disabled' : ''}\u003ePrevious\u003c/button\u003e\n            \u003cbutton class=\"btn btn-primary\" id=\"nextQuestion\"\u003e${currentQuestionIndex === questions.length - 1 ? 'Complete Assessment' : 'Next Question'}\u003c/button\u003e\n        \u003c/div\u003e\n    `;\n    \n    // Re-attach event listeners\n    document.getElementById('prevQuestion').onclick = previousQuestion;\n    document.getElementById('nextQuestion').onclick = nextQuestion;\n}\n\nfunction nextQuestion() {\n    if (currentQuestionIndex \u003c questions.length - 1) {\n        currentQuestionIndex++;\n        updateQuestion();\n    } else {\n        // Complete assessment\n        completeAssessment();\n    }\n}\n\nfunction previousQuestion() {\n    if (currentQuestionIndex \u003e 0) {\n        currentQuestionIndex--;\n        updateQuestion();\n    }\n}\n\nfunction completeAssessment() {\n    assessmentActive = false;\n    hideQuestionsPanel();\n    \n    // Show results modal\n    const modal = new bootstrap.Modal(document.getElementById('resultsModal'));\n    document.getElementById('assessmentResults').innerHTML = `\n        \u003cdiv class=\"text-center mb-4\"\u003e\n            \u003ci class=\"fas fa-check-circle fa-3x text-success mb-3\"\u003e\u003c/i\u003e\n            \u003ch4\u003eAssessment Complete!\u003c/h4\u003e\n            \u003cp class=\"text-muted\"\u003eYour video assessment has been processed and analyzed.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-6\"\u003e\n                \u003ch6\u003eKey Findings:\u003c/h6\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-circle text-success me-2\"\u003e\u003c/i\u003eOverall mood: Stable\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-circle text-warning me-2\"\u003e\u003c/i\u003eStress indicators: Moderate\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-circle text-info me-2\"\u003e\u003c/i\u003eEngagement level: High\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-md-6\"\u003e\n                \u003ch6\u003eRecommendations:\u003c/h6\u003e\n                \u003cul class=\"list-unstyled\"\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-lightbulb text-warning me-2\"\u003e\u003c/i\u003eConsider mindfulness exercises\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-lightbulb text-warning me-2\"\u003e\u003c/i\u003eRegular therapy sessions recommended\u003c/li\u003e\n                    \u003cli\u003e\u003ci class=\"fas fa-lightbulb text-warning me-2\"\u003e\u003c/i\u003eStress management techniques\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    `;\n    modal.show();\n}\n\n// Camera and assessment controls\ndocument.addEventListener('DOMContentLoaded', function() {\n    const startBtn = document.getElementById('startAssessment');\n    const stopBtn = document.getElementById('stopAssessment');\n    const pauseBtn = document.getElementById('pauseAssessment');\n    \n    startBtn.addEventListener('click', async function() {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ \n                video: { \n                    facingMode: 'user',\n                    width: { ideal: 1280 },\n                    height: { ideal: 720 }\n                }, \n                audio: true \n            });\n            \n            document.getElementById('assessmentVideo').srcObject = stream;\n            assessmentActive = true;\n            \n            // Auto-minimize on mobile after starting\n            autoMinimizeOnMobile();\n            \n            startBtn.disabled = true;\n            stopBtn.disabled = false;\n            pauseBtn.disabled = false;\n            \n            document.getElementById('assessmentStatus').textContent = 'Recording';\n            document.getElementById('assessmentStatus').className = 'badge bg-danger';\n            \n        } catch (error) {\n            console.error('Camera access error:', error);\n            alert('Unable to access camera. Please ensure camera permissions are granted.');\n        }\n    });\n    \n    stopBtn.addEventListener('click', function() {\n        const video = document.getElementById('assessmentVideo');\n        const stream = video.srcObject;\n        \n        if (stream) {\n            stream.getTracks().forEach(track =\u003e track.stop());\n            video.srcObject = null;\n        }\n        \n        assessmentActive = false;\n        hideQuestionsPanel();\n        \n        startBtn.disabled = false;\n        stopBtn.disabled = true;\n        pauseBtn.disabled = true;\n        \n        document.getElementById('assessmentStatus').textContent = 'Stopped';\n        document.getElementById('assessmentStatus').className = 'badge bg-secondary';\n    });\n    \n    // Handle window resize for mobile detection\n    window.addEventListener('resize', function() {\n        isMobile = window.innerWidth \u003c= 768;\n        if (!isMobile \u0026\u0026 cameraMinimized) {\n            toggleCameraSize(); // Auto-expand on desktop\n        }\n    });\n});\n\u003c/script\u003e\n                    \u003cp class=\"text-muted\" id=\"instructionText\"\u003e\n                        Click \"Start Assessment\" to begin. Make sure you're in a well-lit area and looking directly at the camera.\n                    \u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Assessment Questions --\u003e\n\u003cdiv class=\"row mt-4\" id=\"questionSection\" style=\"display: none;\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-question-circle me-2\"\u003e\u003c/i\u003eAssessment Questions\u003c/h5\u003e\n                \u003cdiv class=\"progress mt-2\" style=\"height: 4px;\"\u003e\n                    \u003cdiv class=\"progress-bar\" id=\"questionProgress\" style=\"width: 0%\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv id=\"currentQuestion\"\u003e\n                    \u003c!-- Questions will be loaded here --\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Assessment Results --\u003e\n\u003cdiv class=\"row mt-4\" id=\"resultsSection\" style=\"display: none;\"\u003e\n    \u003cdiv class=\"col-12\"\u003e\n        \u003cdiv class=\"card border-success\"\u003e\n            \u003cdiv class=\"card-header bg-success text-white\"\u003e\n                \u003ch5\u003e\u003ci class=\"fas fa-chart-line me-2\"\u003e\u003c/i\u003eAssessment Results\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv id=\"assessmentResults\"\u003e\n                    \u003c!-- Results will be displayed here --\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Settings Modal --\u003e\n\u003cdiv class=\"modal fade\" id=\"settingsModal\" tabindex=\"-1\"\u003e\n    \u003cdiv class=\"modal-dialog\"\u003e\n        \u003cdiv class=\"modal-content\"\u003e\n            \u003cdiv class=\"modal-header\"\u003e\n                \u003ch5 class=\"modal-title\"\u003e\u003ci class=\"fas fa-cog me-2\"\u003e\u003c/i\u003eAssessment Settings\u003c/h5\u003e\n                \u003cbutton type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"\u003e\u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"modal-body\"\u003e\n                \u003cform id=\"settingsForm\"\u003e\n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel for=\"assessmentDuration\" class=\"form-label\"\u003eAssessment Duration\u003c/label\u003e\n                        \u003cselect class=\"form-select\" id=\"assessmentDuration\"\u003e\n                            \u003coption value=\"5\"\u003e5 minutes (Quick)\u003c/option\u003e\n                            \u003coption value=\"10\" selected\u003e10 minutes (Standard)\u003c/option\u003e\n                            \u003coption value=\"15\"\u003e15 minutes (Comprehensive)\u003c/option\u003e\n                        \u003c/select\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003clabel for=\"analysisDepth\" class=\"form-label\"\u003eAnalysis Depth\u003c/label\u003e\n                        \u003cselect class=\"form-select\" id=\"analysisDepth\"\u003e\n                            \u003coption value=\"basic\"\u003eBasic Emotions\u003c/option\u003e\n                            \u003coption value=\"standard\" selected\u003eStandard Analysis\u003c/option\u003e\n                            \u003coption value=\"advanced\"\u003eAdvanced + Microexpressions\u003c/option\u003e\n                        \u003c/select\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003cdiv class=\"form-check\"\u003e\n                            \u003cinput class=\"form-check-input\" type=\"checkbox\" id=\"saveRecording\"\u003e\n                            \u003clabel class=\"form-check-label\" for=\"saveRecording\"\u003e\n                                Save recording for later review\n                            \u003c/label\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"mb-3\"\u003e\n                        \u003cdiv class=\"form-check\"\u003e\n                            \u003cinput class=\"form-check-input\" type=\"checkbox\" id=\"shareWithTherapist\"\u003e\n                            \u003clabel class=\"form-check-label\" for=\"shareWithTherapist\"\u003e\n                                Share results with assigned therapist\n                            \u003c/label\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"modal-footer\"\u003e\n                \u003cbutton type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\"\u003eCancel\u003c/button\u003e\n                \u003cbutton type=\"button\" class=\"btn btn-primary\" id=\"saveSettings\"\u003eSave Settings\u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n{% endblock %}\n\n{% block scripts %}\n\u003cscript src=\"{{ url_for('static', filename='js/video-processing.js') }}\"\u003e\u003c/script\u003e\n\u003cscript src=\"{{ url_for('static', filename='js/real-time-analysis.js') }}\"\u003e\u003c/script\u003e\n\n\u003cscript\u003e\ndocument.addEventListener('DOMContentLoaded', function() {\n    let assessmentActive = false;\n    let currentPhase = 0;\n    let currentQuestionIndex = 0;\n    let assessmentData = {};\n    \n    // Assessment questions for different phases\n    const assessmentQuestions = [\n        {\n            phase: 2,\n            question: \"How are you feeling right now, on a scale of 1 to 10?\",\n            type: \"scale\",\n            instruction: \"Please answer naturally while looking at the camera.\"\n        },\n        {\n            phase: 2,\n            question: \"Can you describe what's been on your mind lately?\",\n            type: \"open\",\n            instruction: \"Take your time to respond. Your facial expressions and voice will be analyzed.\"\n        },\n        {\n            phase: 3,\n            question: \"Think about a recent stressful situation. How did it make you feel?\",\n            type: \"open\",\n            instruction: \"Notice any changes in how you feel as you recall this memory.\"\n        },\n        {\n            phase: 4,\n            question: \"Tell me about something that makes you happy.\",\n            type: \"open\",\n            instruction: \"Let your natural emotions show as you speak.\"\n        },\n        {\n            phase: 4,\n            question: \"How comfortable do you feel talking about your emotions?\",\n            type: \"scale\",\n            instruction: \"Your response pattern will help calibrate our analysis.\"\n        }\n    ];\n    \n    // Initialize video processing\n    const videoProcessor = new VideoProcessor();\n    const realTimeAnalyzer = new RealTimeAnalyzer();\n    \n    // Event listeners\n    document.getElementById('startAssessment').addEventListener('click', startAssessment);\n    document.getElementById('stopAssessment').addEventListener('click', stopAssessment);\n    document.getElementById('pauseAssessment').addEventListener('click', pauseAssessment);\n    document.getElementById('settingsBtn').addEventListener('click', showSettings);\n    document.getElementById('saveSettings').addEventListener('click', saveSettings);\n    document.getElementById('testMode').addEventListener('click', startTestMode);\n    \n    // Test Mode functionality\n    async function startTestMode() {\n        // Check camera permissions first\n        try {\n            const permissionStatus = await navigator.permissions.query({ name: 'camera' });\n            \n            if (permissionStatus.state === 'granted') {\n                alert('Camera permissions are already granted. You can use the regular assessment mode.');\n                return;\n            }\n            \n            if (permissionStatus.state === 'prompt') {\n                alert('Camera permissions have not been set. Click \"Start Assessment\" to request camera access, or continue with test mode without camera.');\n            } else {\n                alert('Camera permissions are denied. You can still use test mode to see how the assessment works without camera access.');\n            }\n        } catch (e) {\n            // Permissions API not supported\n            alert('Test mode allows you to experience the assessment without camera access. For full functionality, use \"Start Assessment\" instead.');\n        }\n        \n        // Start test mode without camera\n        startAssessmentWithoutCamera();\n    }\n    \n    async function startAssessmentWithoutCamera() {\n        assessmentActive = true;\n        currentPhase = 1;\n        \n        // Create a mock video element with test pattern\n        const videoElement = document.getElementById('assessmentVideo');\n        const canvas = document.createElement('canvas');\n        canvas.width = 640;\n        canvas.height = 480;\n        const ctx = canvas.getContext('2d');\n        \n        // Draw test pattern\n        ctx.fillStyle = '#1a1a1a';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '24px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('Test Mode - No Camera', canvas.width/2, canvas.height/2);\n        \n        // Convert to video stream\n        const stream = canvas.captureStream(30);\n        videoElement.srcObject = stream;\n        \n        // Update UI\n        document.getElementById('startAssessment').disabled = true;\n        document.getElementById('stopAssessment').disabled = false;\n        document.getElementById('pauseAssessment').disabled = false;\n        document.getElementById('assessmentStatus').textContent = 'Test Mode Active';\n        document.getElementById('assessmentStatus').className = 'badge bg-info';\n        \n        // Run assessment phases\n        runAssessmentPhases();\n        \n        // Use mock data for real-time analysis\n        startMockRealTimeAnalysis();\n    }\n    \n    async function startAssessment() {\n        try {\n            // Start video capture\n            const videoElement = document.getElementById('assessmentVideo');\n            await videoProcessor.startCapture(videoElement);\n            \n            assessmentActive = true;\n            currentPhase = 1;\n            \n            // Update UI\n            document.getElementById('startAssessment').disabled = true;\n            document.getElementById('stopAssessment').disabled = false;\n            document.getElementById('pauseAssessment').disabled = false;\n            document.getElementById('assessmentStatus').textContent = 'Assessment Active';\n            document.getElementById('assessmentStatus').className = 'badge bg-success';\n            \n            // Start assessment phases\n            runAssessmentPhases();\n            \n            // Start real-time analysis\n            startRealTimeAnalysis();\n            \n        } catch (error) {\n            console.error('Error starting assessment:', error);\n            \n            // More detailed error handling\n            let errorMessage = 'Unable to access camera. ';\n            \n            if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {\n                errorMessage += 'Please grant camera permissions and refresh the page.';\n            } else if (error.name === 'NotFoundError' || error.name === 'DevicesNotFoundError') {\n                errorMessage += 'No camera device found. Please connect a camera.';\n            } else if (error.name === 'NotReadableError' || error.name === 'TrackStartError') {\n                errorMessage += 'Camera is being used by another application.';\n            } else if (error.name === 'OverconstrainedError' || error.name === 'ConstraintNotSatisfiedError') {\n                errorMessage += 'Camera settings are not supported.';\n            } else {\n                errorMessage += error.message || 'Please check your browser settings.';\n            }\n            \n            alert(errorMessage);\n            \n            // Reset UI\n            document.getElementById('startAssessment').disabled = false;\n            document.getElementById('stopAssessment').disabled = true;\n            document.getElementById('pauseAssessment').disabled = true;\n            document.getElementById('assessmentStatus').textContent = 'Camera Error';\n            document.getElementById('assessmentStatus').className = 'badge bg-danger';\n        }\n    }\n    \n    function stopAssessment() {\n        assessmentActive = false;\n        videoProcessor.stopCapture();\n        \n        // Update UI\n        document.getElementById('startAssessment').disabled = false;\n        document.getElementById('stopAssessment').disabled = true;\n        document.getElementById('pauseAssessment').disabled = true;\n        document.getElementById('assessmentStatus').textContent = 'Assessment Complete';\n        document.getElementById('assessmentStatus').className = 'badge bg-primary';\n        \n        // Generate final results\n        generateAssessmentResults();\n    }\n    \n    function pauseAssessment() {\n        const pauseBtn = document.getElementById('pauseAssessment');\n        if (assessmentActive) {\n            assessmentActive = false;\n            pauseBtn.innerHTML = '\u003ci class=\"fas fa-play me-1\"\u003e\u003c/i\u003eResume';\n            document.getElementById('assessmentStatus').textContent = 'Paused';\n            document.getElementById('assessmentStatus').className = 'badge bg-warning';\n        } else {\n            assessmentActive = true;\n            pauseBtn.innerHTML = '\u003ci class=\"fas fa-pause me-1\"\u003e\u003c/i\u003ePause';\n            document.getElementById('assessmentStatus').textContent = 'Assessment Active';\n            document.getElementById('assessmentStatus').className = 'badge bg-success';\n        }\n    }\n    \n    async function runAssessmentPhases() {\n        const phaseDurations = [30, 60, 45, 90, 30]; // seconds for each phase\n        const phaseInstructions = [\n            \"Please look directly at the camera and remain still for calibration.\",\n            \"We'll now assess your current mood. Please answer the questions naturally.\",\n            \"Let's evaluate your stress response patterns.\",\n            \"We'll analyze your communication style and expressions.\",\n            \"Generating your comprehensive assessment report...\"\n        ];\n        \n        for (let phase = 1; phase \u003c= 5; phase++) {\n            if (!assessmentActive) break;\n            \n            currentPhase = phase;\n            updatePhaseUI(phase, phaseInstructions[phase - 1]);\n            \n            if (phase === 2 || phase === 3 || phase === 4) {\n                await runQuestionsForPhase(phase);\n            } else {\n                await runTimedPhase(phase, phaseDurations[phase - 1]);\n            }\n            \n            markPhaseComplete(phase);\n        }\n        \n        if (assessmentActive) {\n            stopAssessment();\n        }\n    }\n    \n    function updatePhaseUI(phase, instruction) {\n        // Reset all phases to default state\n        for (let i = 1; i \u003c= 5; i++) {\n            const phaseElement = document.getElementById(`phase${i}`);\n            phaseElement.className = 'assessment-phase p-3 rounded mb-3';\n            phaseElement.querySelector('i').className = 'fas fa-clock text-muted';\n        }\n        \n        // Highlight current phase\n        const currentPhaseElement = document.getElementById(`phase${phase}`);\n        currentPhaseElement.className = 'assessment-phase p-3 rounded mb-3 border-primary bg-primary bg-opacity-10';\n        currentPhaseElement.querySelector('i').className = 'fas fa-play text-primary';\n        \n        // Update instructions\n        document.getElementById('instructionText').textContent = instruction;\n    }\n    \n    async function runTimedPhase(phase, duration) {\n        const progressBar = document.getElementById(`phase${phase}Progress`);\n        const startTime = Date.now();\n        \n        return new Promise((resolve) =\u003e {\n            const interval = setInterval(() =\u003e {\n                if (!assessmentActive) {\n                    clearInterval(interval);\n                    resolve();\n                    return;\n                }\n                \n                const elapsed = (Date.now() - startTime) / 1000;\n                const progress = Math.min((elapsed / duration) * 100, 100);\n                progressBar.style.width = progress + '%';\n                \n                if (elapsed \u003e= duration) {\n                    clearInterval(interval);\n                    resolve();\n                }\n            }, 100);\n        });\n    }\n    \n    async function runQuestionsForPhase(phase) {\n        const phaseQuestions = assessmentQuestions.filter(q =\u003e q.phase === phase);\n        \n        document.getElementById('questionSection').style.display = 'block';\n        \n        for (let i = 0; i \u003c phaseQuestions.length; i++) {\n            if (!assessmentActive) break;\n            \n            await showQuestion(phaseQuestions[i], i, phaseQuestions.length);\n            updatePhaseProgress(phase, (i + 1) / phaseQuestions.length * 100);\n        }\n        \n        document.getElementById('questionSection').style.display = 'none';\n    }\n    \n    function showQuestion(questionData, index, total) {\n        return new Promise((resolve) =\u003e {\n            const questionHtml = `\n                \u003cdiv class=\"mb-4\"\u003e\n                    \u003ch6\u003eQuestion ${index + 1} of ${total}\u003c/h6\u003e\n                    \u003cp class=\"lead\"\u003e${questionData.question}\u003c/p\u003e\n                    \u003cp class=\"text-muted\"\u003e${questionData.instruction}\u003c/p\u003e\n                \u003c/div\u003e\n                \n                ${questionData.type === 'scale' ? `\n                    \u003cdiv class=\"mb-4\"\u003e\n                        \u003clabel for=\"scaleAnswer\" class=\"form-label\"\u003eRating (1-10):\u003c/label\u003e\n                        \u003cinput type=\"range\" class=\"form-range\" id=\"scaleAnswer\" min=\"1\" max=\"10\" value=\"5\"\u003e\n                        \u003cdiv class=\"d-flex justify-content-between\"\u003e\n                            \u003csmall\u003e1 - Very Low\u003c/small\u003e\n                            \u003csmall id=\"scaleValue\"\u003e5\u003c/small\u003e\n                            \u003csmall\u003e10 - Very High\u003c/small\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                ` : `\n                    \u003cdiv class=\"mb-4\"\u003e\n                        \u003ctextarea class=\"form-control\" id=\"openAnswer\" rows=\"4\" \n                                placeholder=\"Share your thoughts...\"\u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                `}\n                \n                \u003cdiv class=\"d-flex justify-content-between\"\u003e\n                    \u003cbutton class=\"btn btn-outline-secondary\" onclick=\"skipQuestion()\"\u003eSkip\u003c/button\u003e\n                    \u003cbutton class=\"btn btn-primary\" onclick=\"submitAnswer()\"\u003eNext\u003c/button\u003e\n                \u003c/div\u003e\n            `;\n            \n            document.getElementById('currentQuestion').innerHTML = questionHtml;\n            document.getElementById('questionProgress').style.width = ((index + 1) / total * 100) + '%';\n            \n            if (questionData.type === 'scale') {\n                const scaleInput = document.getElementById('scaleAnswer');\n                const scaleValue = document.getElementById('scaleValue');\n                scaleInput.addEventListener('input', function() {\n                    scaleValue.textContent = this.value;\n                });\n            }\n            \n            // Global functions for question handling\n            window.submitAnswer = function() {\n                let answer;\n                if (questionData.type === 'scale') {\n                    answer = document.getElementById('scaleAnswer').value;\n                } else {\n                    answer = document.getElementById('openAnswer').value;\n                }\n                \n                assessmentData[`question_${index}`] = {\n                    question: questionData.question,\n                    answer: answer,\n                    timestamp: Date.now()\n                };\n                \n                resolve();\n            };\n            \n            window.skipQuestion = function() {\n                assessmentData[`question_${index}`] = {\n                    question: questionData.question,\n                    answer: 'skipped',\n                    timestamp: Date.now()\n                };\n                resolve();\n            };\n            \n            // Auto-advance after 2 minutes if no response\n            setTimeout(() =\u003e {\n                if (document.getElementById('currentQuestion').innerHTML === questionHtml) {\n                    window.skipQuestion();\n                }\n            }, 120000);\n        });\n    }\n    \n    function updatePhaseProgress(phase, progress) {\n        document.getElementById(`phase${phase}Progress`).style.width = progress + '%';\n    }\n    \n    function markPhaseComplete(phase) {\n        const phaseElement = document.getElementById(`phase${phase}`);\n        phaseElement.className = 'assessment-complete p-3 rounded mb-3';\n        phaseElement.querySelector('i').className = 'fas fa-check text-success';\n        document.getElementById(`phase${phase}Progress`).style.width = '100%';\n    }\n    \n    async function startRealTimeAnalysis() {\n        const analysisInterval = setInterval(async () =\u003e {\n            if (!assessmentActive) {\n                clearInterval(analysisInterval);\n                return;\n            }\n            \n            try {\n                // Get current video frame\n                const frameData = await videoProcessor.getCurrentFrame();\n                \n                if (frameData) {\n                    // Send to analysis endpoint\n                    const response = await fetch('/api/video-analysis', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({\n                            frame_data: frameData,\n                            phase: currentPhase,\n                            enable_microexpression: document.getElementById('enableMicroexpression').checked\n                        })\n                    });\n                    \n                    const analysis = await response.json();\n                    updateRealTimeDisplay(analysis);\n                }\n            } catch (error) {\n                console.error('Real-time analysis error:', error);\n            }\n        }, 2000); // Analyze every 2 seconds\n    }\n    \n    function updateRealTimeDisplay(analysis) {\n        if (analysis.emotions) {\n            const primaryEmotion = Object.keys(analysis.emotions).reduce((a, b) =\u003e \n                analysis.emotions[a] \u003e analysis.emotions[b] ? a : b\n            );\n            \n            document.getElementById('primaryEmotion').textContent = primaryEmotion;\n            document.getElementById('emotionConfidence').style.width = \n                (analysis.emotions[primaryEmotion] * 100) + '%';\n            \n            // Update emotion indicator color\n            const emotionColors = {\n                'happy': '#28a745',\n                'sad': '#6c757d',\n                'angry': '#dc3545',\n                'fearful': '#ffc107',\n                'surprised': '#17a2b8',\n                'disgusted': '#6f42c1',\n                'neutral': '#007bff'\n            };\n            document.getElementById('emotionIndicator').style.backgroundColor = \n                emotionColors[primaryEmotion] || '#007bff';\n        }\n        \n        // Update stress level\n        if (analysis.stress_level !== undefined) {\n            const stressLevels = ['Very Low', 'Low', 'Moderate', 'High', 'Very High'];\n            const stressIndex = Math.floor(analysis.stress_level * 5);\n            document.getElementById('stressLevel').textContent = stressLevels[stressIndex] || 'Low';\n            document.getElementById('stressConfidence').style.width = (analysis.stress_level * 100) + '%';\n        }\n        \n        // Show microexpression alerts\n        if (analysis.microexpressions \u0026\u0026 Object.keys(analysis.microexpressions).length \u003e 0) {\n            showMicroexpressionAlert(analysis.microexpressions);\n        }\n    }\n    \n    function showMicroexpressionAlert(microexpressions) {\n        const alert = document.getElementById('microAlert');\n        const text = document.getElementById('microText');\n        \n        const expressions = Object.keys(microexpressions);\n        if (expressions.length \u003e 0) {\n            text.textContent = `Detected: ${expressions.join(', ')}`;\n            alert.classList.add('show');\n            \n            setTimeout(() =\u003e {\n                alert.classList.remove('show');\n            }, 3000);\n        }\n    }\n    \n    // Mock real-time analysis for test mode\n    function startMockRealTimeAnalysis() {\n        const emotions = ['happy', 'neutral', 'sad', 'anxious', 'calm'];\n        const stressLevels = [0.2, 0.3, 0.4, 0.5, 0.6];\n        \n        const analysisInterval = setInterval(() =\u003e {\n            if (!assessmentActive) {\n                clearInterval(analysisInterval);\n                return;\n            }\n            \n            // Generate mock analysis data\n            const mockAnalysis = {\n                emotions: {\n                    [emotions[Math.floor(Math.random() * emotions.length)]]: Math.random() * 0.5 + 0.5,\n                    neutral: Math.random() * 0.3\n                },\n                stress_level: stressLevels[Math.floor(Math.random() * stressLevels.length)],\n                engagement_level: Math.random() * 0.4 + 0.6\n            };\n            \n            updateRealTimeDisplay(mockAnalysis);\n        }, 2000);\n    }\n    \n    async function generateAssessmentResults() {\n        document.getElementById('resultsSection').style.display = 'block';\n        \n        try {\n            // Send comprehensive assessment data\n            const response = await fetch('/api/video-analysis', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    assessment_complete: true,\n                    assessment_data: assessmentData,\n                    duration: Date.now() - assessmentStartTime\n                })\n            });\n            \n            const results = await response.json();\n            displayAssessmentResults(results);\n            \n        } catch (error) {\n            console.error('Error generating results:', error);\n            document.getElementById('assessmentResults').innerHTML = `\n                \u003cdiv class=\"alert alert-danger\"\u003e\n                    \u003ci class=\"fas fa-exclamation-triangle me-2\"\u003e\u003c/i\u003e\n                    Error generating assessment results. Please try again.\n                \u003c/div\u003e\n            `;\n        }\n    }\n    \n    function displayAssessmentResults(results) {\n        const resultsHtml = `\n            \u003cdiv class=\"row g-4 mb-4\"\u003e\n                \u003cdiv class=\"col-md-3 text-center\"\u003e\n                    \u003cdiv class=\"card bg-dark border-0\"\u003e\n                        \u003cdiv class=\"card-body\"\u003e\n                            \u003ci class=\"fas fa-brain fa-2x text-primary mb-2\"\u003e\u003c/i\u003e\n                            \u003ch4\u003e${results.overall_score || 75}%\u003c/h4\u003e\n                            \u003csmall class=\"text-muted\"\u003eOverall Wellness\u003c/small\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-3 text-center\"\u003e\n                    \u003cdiv class=\"card bg-dark border-0\"\u003e\n                        \u003cdiv class=\"card-body\"\u003e\n                            \u003ci class=\"fas fa-heart fa-2x text-danger mb-2\"\u003e\u003c/i\u003e\n                            \u003ch4\u003e${results.emotional_stability || 'Good'}\u003c/h4\u003e\n                            \u003csmall class=\"text-muted\"\u003eEmotional Stability\u003c/small\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-3 text-center\"\u003e\n                    \u003cdiv class=\"card bg-dark border-0\"\u003e\n                        \u003cdiv class=\"card-body\"\u003e\n                            \u003ci class=\"fas fa-shield-alt fa-2x text-success mb-2\"\u003e\u003c/i\u003e\n                            \u003ch4\u003e${results.stress_resilience || 'Moderate'}\u003c/h4\u003e\n                            \u003csmall class=\"text-muted\"\u003eStress Resilience\u003c/small\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-3 text-center\"\u003e\n                    \u003cdiv class=\"card bg-dark border-0\"\u003e\n                        \u003cdiv class=\"card-body\"\u003e\n                            \u003ci class=\"fas fa-comments fa-2x text-info mb-2\"\u003e\u003c/i\u003e\n                            \u003ch4\u003e${results.communication_style || 'Open'}\u003c/h4\u003e\n                            \u003csmall class=\"text-muted\"\u003eCommunication\u003c/small\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003cdiv class=\"row g-4\"\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003ch6\u003e\u003ci class=\"fas fa-lightbulb me-2\"\u003e\u003c/i\u003eKey Insights\u003c/h6\u003e\n                    \u003cul class=\"list-unstyled\"\u003e\n                        ${(results.insights || [\n                            'Strong emotional awareness demonstrated',\n                            'Good eye contact and engagement',\n                            'Moderate stress response patterns',\n                            'Effective communication style'\n                        ]).map(insight =\u003e `\u003cli\u003e\u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003e${insight}\u003c/li\u003e`).join('')}\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-6\"\u003e\n                    \u003ch6\u003e\u003ci class=\"fas fa-exclamation-triangle me-2\"\u003e\u003c/i\u003eAreas for Focus\u003c/h6\u003e\n                    \u003cul class=\"list-unstyled\"\u003e\n                        ${(results.recommendations || [\n                            'Practice stress management techniques',\n                            'Continue with regular therapy sessions',\n                            'Monitor mood patterns',\n                            'Maintain social connections'\n                        ]).map(rec =\u003e `\u003cli\u003e\u003ci class=\"fas fa-arrow-right text-warning me-2\"\u003e\u003c/i\u003e${rec}\u003c/li\u003e`).join('')}\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003chr class=\"my-4\"\u003e\n            \n            \u003cdiv class=\"d-flex justify-content-between flex-wrap gap-2\"\u003e\n                \u003cdiv\u003e\n                    \u003cbutton class=\"btn btn-primary\" onclick=\"downloadResults()\"\u003e\n                        \u003ci class=\"fas fa-download me-1\"\u003e\u003c/i\u003eDownload Report\n                    \u003c/button\u003e\n                    \u003cbutton class=\"btn btn-outline-info\" onclick=\"scheduleFollowUp()\"\u003e\n                        \u003ci class=\"fas fa-calendar me-1\"\u003e\u003c/i\u003eSchedule Follow-up\n                    \u003c/button\u003e\n                \u003c/div\u003e\n                \u003cdiv\u003e\n                    \u003ca href=\"{{ url_for('individual_therapy') }}\" class=\"btn btn-success\"\u003e\n                        \u003ci class=\"fas fa-comments me-1\"\u003e\u003c/i\u003eStart Therapy Session\n                    \u003c/a\u003e\n                    \u003ca href=\"{{ url_for('dashboard') }}\" class=\"btn btn-outline-secondary\"\u003e\n                        \u003ci class=\"fas fa-chart-line me-1\"\u003e\u003c/i\u003eView Dashboard\n                    \u003c/a\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        `;\n        \n        document.getElementById('assessmentResults').innerHTML = resultsHtml;\n    }\n    \n    function showSettings() {\n        const modal = new bootstrap.Modal(document.getElementById('settingsModal'));\n        modal.show();\n    }\n    \n    function saveSettings() {\n        // Save settings logic would go here\n        const modal = bootstrap.Modal.getInstance(document.getElementById('settingsModal'));\n        modal.hide();\n        \n        // Show confirmation\n        const toast = document.createElement('div');\n        toast.className = 'toast-container position-fixed top-0 end-0 p-3';\n        toast.innerHTML = `\n            \u003cdiv class=\"toast show\" role=\"alert\"\u003e\n                \u003cdiv class=\"toast-body\"\u003e\n                    \u003ci class=\"fas fa-check text-success me-2\"\u003e\u003c/i\u003eSettings saved successfully!\n                \u003c/div\u003e\n            \u003c/div\u003e\n        `;\n        document.body.appendChild(toast);\n        \n        setTimeout(() =\u003e {\n            document.body.removeChild(toast);\n        }, 3000);\n    }\n    \n    // Global functions for results interaction\n    window.downloadResults = function() {\n        // Implementation for downloading results\n        console.log('Downloading assessment results...');\n    };\n    \n    window.scheduleFollowUp = function() {\n        // Implementation for scheduling follow-up\n        console.log('Scheduling follow-up appointment...');\n    };\n    \n    let assessmentStartTime;\n    \n    // Track assessment start time\n    document.getElementById('startAssessment').addEventListener('click', function() {\n        assessmentStartTime = Date.now();\n    });\n});\n\u003c/script\u003e\n{% endblock %}\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "creationTimestamp": "2025-10-09T00:15:15Z",
                "name": "app-cm4",
                "namespace": "default",
                "resourceVersion": "1759968915536991020",
                "uid": "80aab57f-c8b6-482e-9935-e7893bb6c639"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "ADMIN_SECRET_KEY": "(\u003e.}YkVC4\u0026\u003e@LEi-Yax^anFj*R0c1z|J=%$\u003eq.J7F7rDVMqlnm*_v]a3jNQ(tRRy",
                "ALERT_RECIPIENTS": "sticky.pty.ltd@gmail.com",
                "BACKUP_ENABLED": "true",
                "BACKUP_RETENTION_DAYS": "30",
                "BACKUP_SCHEDULE": "0 2 * * *",
                "COMPANY_ADDRESS": "Suite 329/98-100 Elizabeth Street, Melbourne, VIC, 3000",
                "COMPANY_EMAIL": "sticky.pty.ltd@gmail.com",
                "COMPANY_NAME": "Sticky Pty Ltd",
                "DATABASE_URL": "postgresql://mindmend_user:aLo0aPR\u003e{#Rp6{SKpx0,dPyRd9$+:-d\u003e@postgres:5432/mindmend_production",
                "DOMAIN": "mindmend.xyz",
                "ERROR_LOG": "/var/log/mindmend/error.log",
                "FLASK_ENV": "production",
                "FORCE_HTTPS": "true",
                "HSTS_MAX_AGE": "31536000",
                "HUGGINGFACE_API_KEY": "hf_your-huggingface-token-here",
                "JWT_SECRET_KEY": ",3zt8l9pVMljUMn#iR_wAGVc)+8]\u003e\u003eB.4lb\u003e_BTBV4(w]wVtGi.C,IQxxrMc+wP\u003c",
                "LOCKOUT_DURATION": "900",
                "LOG_FILE": "/var/log/mindmend/app.log",
                "LOG_LEVEL": "INFO",
                "MAIL_PASSWORD": "your-gmail-app-password-here",
                "MAIL_PORT": "587",
                "MAIL_SERVER": "smtp.gmail.com",
                "MAIL_USERNAME": "sticky.pty.ltd@gmail.com",
                "MAIL_USE_TLS": "1",
                "MAX_CONTENT_LENGTH": "16777216",
                "MAX_LOGIN_ATTEMPTS": "5",
                "MAX_REQUESTS": "10000",
                "MOBILE_JWT_SECRET": "t}b\u003c02qulhD.Na{cjF!a8l.*}emlH80Y(*a^\u003eIK\u003cKQhbKr_1PMWcWFPPhz",
                "OLLAMA_HOST": "http://ollama:11434",
                "OPENAI_API_KEY": "sk-your-openai-api-key-here",
                "PAYPAL_CLIENT_ID": "your-paypal-client-id",
                "PAYPAL_CLIENT_SECRET": "your-paypal-client-secret",
                "PAYPAL_MODE": "live",
                "POSTGRES_PASSWORD": "aLo0aPR\u003e{#Rp6{SKpx0,dPyRd9$+:-d\u003e",
                "PREFERRED_URL_SCHEME": "https",
                "RATE_LIMIT_STORAGE_URL": "redis://:!xKp,J2=Kuw|U^6NTh@vc|K8N.+P+t;p@redis:6379/0",
                "REDIS_PASSWORD": "!xKp,J2=Kuw|U^6NTh@vc|K8N.+P+t;p",
                "SECRET_KEY": "Z+Q{_e9O0(6\u0026rs\u003eK]j|gXCh\u003cR;YWh6i3[[H^f*TmpL1_S}B\u003c",
                "SERVER_NAME": "mindmend.xyz",
                "SESSION_SECRET": "QsrRROTkg^9zRBgeh}=dstLfvy))8i=(QOy,4]W()TiFzef^x}=oW#Dy|T9\u0026i()0",
                "SESSION_TIMEOUT": "3600",
                "SQLALCHEMY_DATABASE_URI": "postgresql://mindmend_user:@postgres:5432/mindmend_production",
                "STRIPE_PUBLISHABLE_KEY": "pk_live_your-stripe-publishable-key",
                "STRIPE_SECRET_KEY": "sk_live_your-stripe-secret-key",
                "SUPER_ADMIN_ID": "mindmend_admin",
                "SUPER_ADMIN_PASSWORD_HASH": "$2b$12.1.B0bYKbtmW6SC1yildQdyuCOpI1zi",
                "TIMEOUT": "120",
                "UPLOAD_FOLDER": "/var/www/mindmend/uploads",
                "WORKERS": "4",
                "WORKER_CONNECTIONS": "1000"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"ADMIN_SECRET_KEY\":\"(\\u003e.}YkVC4\\u0026\\u003e@LEi-Yax^anFj*R0c1z|J=%$\\u003eq.J7F7rDVMqlnm*_v]a3jNQ(tRRy\",\"ALERT_RECIPIENTS\":\"sticky.pty.ltd@gmail.com\",\"BACKUP_ENABLED\":\"true\",\"BACKUP_RETENTION_DAYS\":\"30\",\"BACKUP_SCHEDULE\":\"0 2 * * *\",\"COMPANY_ADDRESS\":\"Suite 329/98-100 Elizabeth Street, Melbourne, VIC, 3000\",\"COMPANY_EMAIL\":\"sticky.pty.ltd@gmail.com\",\"COMPANY_NAME\":\"Sticky Pty Ltd\",\"DATABASE_URL\":\"postgresql://mindmend_user:aLo0aPR\\u003e{#Rp6{SKpx0,dPyRd9$+:-d\\u003e@postgres:5432/mindmend_production\",\"DOMAIN\":\"mindmend.xyz\",\"ERROR_LOG\":\"/var/log/mindmend/error.log\",\"FLASK_ENV\":\"production\",\"FORCE_HTTPS\":\"true\",\"HSTS_MAX_AGE\":\"31536000\",\"HUGGINGFACE_API_KEY\":\"hf_your-huggingface-token-here\",\"JWT_SECRET_KEY\":\",3zt8l9pVMljUMn#iR_wAGVc)+8]\\u003e\\u003eB.4lb\\u003e_BTBV4(w]wVtGi.C,IQxxrMc+wP\\u003c\",\"LOCKOUT_DURATION\":\"900\",\"LOG_FILE\":\"/var/log/mindmend/app.log\",\"LOG_LEVEL\":\"INFO\",\"MAIL_PASSWORD\":\"your-gmail-app-password-here\",\"MAIL_PORT\":\"587\",\"MAIL_SERVER\":\"smtp.gmail.com\",\"MAIL_USERNAME\":\"sticky.pty.ltd@gmail.com\",\"MAIL_USE_TLS\":\"1\",\"MAX_CONTENT_LENGTH\":\"16777216\",\"MAX_LOGIN_ATTEMPTS\":\"5\",\"MAX_REQUESTS\":\"10000\",\"MOBILE_JWT_SECRET\":\"t}b\\u003c02qulhD.Na{cjF!a8l.*}emlH80Y(*a^\\u003eIK\\u003cKQhbKr_1PMWcWFPPhz\",\"OLLAMA_HOST\":\"http://ollama:11434\",\"OPENAI_API_KEY\":\"sk-your-openai-api-key-here\",\"PAYPAL_CLIENT_ID\":\"your-paypal-client-id\",\"PAYPAL_CLIENT_SECRET\":\"your-paypal-client-secret\",\"PAYPAL_MODE\":\"live\",\"POSTGRES_PASSWORD\":\"aLo0aPR\\u003e{#Rp6{SKpx0,dPyRd9$+:-d\\u003e\",\"PREFERRED_URL_SCHEME\":\"https\",\"RATE_LIMIT_STORAGE_URL\":\"redis://:!xKp,J2=Kuw|U^6NTh@vc|K8N.+P+t;p@redis:6379/0\",\"REDIS_PASSWORD\":\"!xKp,J2=Kuw|U^6NTh@vc|K8N.+P+t;p\",\"SECRET_KEY\":\"Z+Q{_e9O0(6\\u0026rs\\u003eK]j|gXCh\\u003cR;YWh6i3[[H^f*TmpL1_S}B\\u003c\",\"SERVER_NAME\":\"mindmend.xyz\",\"SESSION_SECRET\":\"QsrRROTkg^9zRBgeh}=dstLfvy))8i=(QOy,4]W()TiFzef^x}=oW#Dy|T9\\u0026i()0\",\"SESSION_TIMEOUT\":\"3600\",\"SQLALCHEMY_DATABASE_URI\":\"postgresql://mindmend_user:@postgres:5432/mindmend_production\",\"STRIPE_PUBLISHABLE_KEY\":\"pk_live_your-stripe-publishable-key\",\"STRIPE_SECRET_KEY\":\"sk_live_your-stripe-secret-key\",\"SUPER_ADMIN_ID\":\"mindmend_admin\",\"SUPER_ADMIN_PASSWORD_HASH\":\"$2b$12.1.B0bYKbtmW6SC1yildQdyuCOpI1zi\",\"TIMEOUT\":\"120\",\"UPLOAD_FOLDER\":\"/var/www/mindmend/uploads\",\"WORKERS\":\"4\",\"WORKER_CONNECTIONS\":\"1000\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"labels\":{\"io.kompose.service\":\"app-env-production\"},\"name\":\"env-production\",\"namespace\":\"default\"}}\n"
                },
                "creationTimestamp": "2025-09-28T07:02:47Z",
                "labels": {
                    "io.kompose.service": "app-env-production"
                },
                "name": "env-production",
                "namespace": "default",
                "resourceVersion": "1759042967549983016",
                "uid": "09e12fb5-f1e0-4dae-b5a1-d1ed3ec3e6f3"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "ca.crt": "-----BEGIN CERTIFICATE-----\nMIIELDCCApSgAwIBAgIQdEkbUROVP0jzFt73weMS1TANBgkqhkiG9w0BAQsFADAv\nMS0wKwYDVQQDEyQxODY3YWYwMy1jZDQwLTQ5YjctYjVmZi1hMmNjZDk1MGVmZTYw\nIBcNMjUwOTE5MjMzMjU1WhgPMjA1NTA5MTMwMDMyNTVaMC8xLTArBgNVBAMTJDE4\nNjdhZjAzLWNkNDAtNDliNy1iNWZmLWEyY2NkOTUwZWZlNjCCAaIwDQYJKoZIhvcN\nAQEBBQADggGPADCCAYoCggGBAOC82Vl3cCMiiS59DLLtIUp8N87fXlBAMnfHVdim\nZYNDtwDNl3oPPq3LZkVfVIZb9cPawN7FwFnTdbdoRsn/JkbzHemBIUE8/4DkKvue\nJbQdQwdlkyjkIR2/WPkONZCpmy9459CQ3nv4fJP5S2kxKOj/IpmcDZRA/rrNnwAH\nJRRo0ay/lnC9+FV0l4bExA6SqpIAwJg62W6erthDQ5HV44WQdYvpK9etg0gO5aBO\n9Eg8lxIROF3UHdxF3RsUpiluf22FCuv+q81Y80Rc6g3xE82PzdFVIoNgnWaOckc3\naDurXlppOQ9DDW/Nd7AsunvFYw6AGm9wiSpAsMb7f2qGfk5YIe+17Eft0PVU90yx\ni3jQpaKvGUm0oI+x3buvpcQfpWP2FUprPmHtwcmTMKPhG9lJpISnusDcSA3AyERo\nEXRXgaXwqBRE0rdZVcpSvjesrndmHY79J9Ztxa1dVlgjFPZsWcK+CGb21FHolOH6\nWmJnis9t3SFuM15v/Li7ZvxatwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAgQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwf6mDlkM/wC9GjMC9APUkR2/CWQwDQYJ\nKoZIhvcNAQELBQADggGBADOvnShVMpCCxrA9JD1fuMbCY/XvtxRDscP6M1NbKW7K\nplXbJus7zR+nlGOILFUFZaxE2F11dnZVj8+wvPkNRZvWDyKIwInuFRe16z8skt8M\nAPUF2MRhLR0nA1gXegbTQLxAXbusToEZLarxoH+c/kpft9wvLd+XKvBKMaRFk252\nvTAv29pOH/61v9YQ521u+oOk+sBpcD7Uwj6z4yuci+j05hiTE2pSpiCRE1MNYXTi\n1sYZSo8vJsn5zSQwtLl57impnRHDj+HQK4JMxb4hfFi47Y2PISn6AwfBUggTsxve\ntfmuAay+FU4MXQkVi0Qi9G0t97zne63bqIlV2bXj+uR53jBn7uCAXD/DMeXwx1bp\nwxrHRSCjwhHtsDXxxX8K5LwHpYH+RSqyYx3vY0RUAM41r4g9y1Cp3sq7DHomqvm+\nKJ1avnqHDLWznEzzGIX2EuI6hx0qPdbf5z7CH3LlGP23Fs3BVrrgaw1TAVD6G174\nT6DWmKVVHdmH801y9fsQrA==\n-----END CERTIFICATE-----\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubernetes.io/description": "Contains a CA bundle that can be used to verify the kube-apiserver when using internal endpoints such as the internal service IP or kubernetes.default.svc. No other usage is guaranteed across distributions of Kubernetes clusters."
                },
                "creationTimestamp": "2025-09-22T09:13:27Z",
                "name": "kube-root-ca.crt",
                "namespace": "default",
                "resourceVersion": "1758532407291695024",
                "uid": "31d4e74c-d3cb-4a83-b7e0-9698cb8313df"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "DATABASE_URL": "postgresql://mindmend_user:aLo0aPR\u003e{#Rp6{SKpx0,dPyRd9$+:-d\u003e@postgres:5432/mindmend_production",
                "DOMAIN": "mindmend.xyz",
                "FLASK_ENV": "production",
                "REDIS_URL": "redis://:!xKp,J2=Kuw|U^6NTh@vc|K8N.+P+t;p@redis:6379/0"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"DATABASE_URL\":\"postgresql://mindmend_user:aLo0aPR\\u003e{#Rp6{SKpx0,dPyRd9$+:-d\\u003e@postgres:5432/mindmend_production\",\"DOMAIN\":\"mindmend.xyz\",\"FLASK_ENV\":\"production\",\"REDIS_URL\":\"redis://:!xKp,J2=Kuw|U^6NTh@vc|K8N.+P+t;p@redis:6379/0\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"mindmend-config\",\"namespace\":\"default\"}}\n"
                },
                "creationTimestamp": "2025-09-22T09:24:19Z",
                "name": "mindmend-config",
                "namespace": "default",
                "resourceVersion": "1758533059985471020",
                "uid": "9423827e-e974-444d-bb0e-f20951fd4cdc"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "nginx.conf": "# MindMend Nginx Configuration (HTTP-only for debugging)\n# ===============================================\n\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log warn;\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections 1024;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # Logging format\n    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                   '$status $body_bytes_sent \"$http_referer\" '\n                   '\"$http_user_agent\" \"$http_x_forwarded_for\" '\n                   'rt=$request_time uct=\"$upstream_connect_time\" '\n                   'uht=\"$upstream_header_time\" urt=\"$upstream_response_time\"';\n\n    access_log /var/log/nginx/access.log main;\n\n    # Performance optimizations\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    client_max_body_size 16M;\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 10240;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/atom+xml\n        image/svg+xml;\n\n    # Rate limiting\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n    limit_req_zone $binary_remote_addr zone=admin:10m rate=5r/s;\n    limit_req_zone $binary_remote_addr zone=login:10m rate=3r/s;\n\n    # Connection limiting\n    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n\n    # Hide Nginx version\n    server_tokens off;\n\n    # Upstream configuration\n    upstream mindmend_app {\n        server app:8000;\n        keepalive 32;\n    }\n\n    # Main application server (HTTP-only)\n    server {\n        listen 80;\n        server_name mindmend.xyz www.mindmend.xyz;\n\n        # Security headers for main app\n        add_header Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline' https://js.stripe.com https://checkout.stripe.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.stripe.com; frame-src https://checkout.stripe.com https://js.stripe.com;\" always;\n\n        # Rate limiting\n        limit_req zone=api burst=20 nodelay;\n        limit_conn conn_limit_per_ip 20;\n\n        # Root directory\n        root /var/www;\n\n        # Static files\n        location /static/ {\n            alias /var/www/static/;\n            expires 1y;\n            add_header Cache-Control \"public, immutable\";\n            gzip_static on;\n        }\n\n        location /uploads/ {\n            alias /var/www/uploads/;\n            expires 30d;\n            add_header Cache-Control \"public\";\n        }\n\n        # API routes with stricter rate limiting\n        location /api/ {\n            limit_req zone=api burst=10 nodelay;\n            proxy_pass http://mindmend_app;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_buffering off;\n            proxy_request_buffering off;\n        }\n\n        # WebSocket connections for real-time chat\n        location /socket.io/ {\n            proxy_pass http://mindmend_app;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_read_timeout 86400;\n        }\n\n        # Authentication routes with strict rate limiting\n        location ~ ^/(login|register|reset_password) {\n            limit_req zone=login burst=3 nodelay;\n            proxy_pass http://mindmend_app;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n\n        # Health check endpoint\n        location /health {\n            proxy_pass http://mindmend_app;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            access_log off;\n        }\n\n        # Main application\n        location / {\n            proxy_pass http://mindmend_app;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_set_header X-Forwarded-Host $host;\n            proxy_connect_timeout 60s;\n            proxy_send_timeout 60s;\n            proxy_read_timeout 60s;\n        }\n\n        # Block access to sensitive files\n        location ~ /\\. {\n            deny all;\n            access_log off;\n            log_not_found off;\n        }\n\n        location ~ \\.(env|log|conf)$ {\n            deny all;\n            access_log off;\n            log_not_found off;\n        }\n    }\n\n    # Admin panel server (HTTP-only for debugging)\n    server {\n        listen 80;\n        server_name admin.mindmend.xyz;\n\n        # Enhanced security headers for admin panel\n        add_header Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self';\" always;\n        add_header X-Frame-Options \"DENY\" always;\n\n        # IP whitelist for admin access (uncomment and add your IPs)\n        # allow 203.0.113.1;  # Your office IP\n        # allow 198.51.100.1; # Your home IP\n        # deny all;\n\n        # Strict rate limiting for admin\n        limit_req zone=admin burst=5 nodelay;\n        limit_conn conn_limit_per_ip 5;\n\n        # Static files for admin\n        location /static/ {\n            alias /var/www/static/;\n            expires 1d;\n        }\n\n        # Admin authentication with very strict rate limiting\n        location ~ ^/admin/(login|auth) {\n            limit_req zone=login burst=2 nodelay;\n            proxy_pass http://mindmend_app;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n\n        # Admin panel routes\n        location /admin/ {\n            proxy_pass http://mindmend_app;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_set_header X-Admin-Request \"true\";\n        }\n\n        # Redirect root to admin\n        location = / {\n            return 301 http://$server_name/admin/;\n        }\n\n        # Block all other requests\n        location / {\n            return 403;\n        }\n\n        # Block access to sensitive files\n        location ~ /\\. {\n            deny all;\n            access_log off;\n            log_not_found off;\n        }\n\n        location ~ \\.(env|log|conf)$ {\n            deny all;\n            access_log off;\n            log_not_found off;\n        }\n    }\n}"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"nginx.conf\":\"# MindMend Nginx Configuration (HTTP-only for debugging)\\n# ===============================================\\n\\nuser nginx;\\nworker_processes auto;\\nerror_log /var/log/nginx/error.log warn;\\npid /var/run/nginx.pid;\\n\\nevents {\\n    worker_connections 1024;\\n    use epoll;\\n    multi_accept on;\\n}\\n\\nhttp {\\n    include /etc/nginx/mime.types;\\n    default_type application/octet-stream;\\n\\n    # Logging format\\n    log_format main '$remote_addr - $remote_user [$time_local] \\\"$request\\\" '\\n                   '$status $body_bytes_sent \\\"$http_referer\\\" '\\n                   '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\" '\\n                   'rt=$request_time uct=\\\"$upstream_connect_time\\\" '\\n                   'uht=\\\"$upstream_header_time\\\" urt=\\\"$upstream_response_time\\\"';\\n\\n    access_log /var/log/nginx/access.log main;\\n\\n    # Performance optimizations\\n    sendfile on;\\n    tcp_nopush on;\\n    tcp_nodelay on;\\n    keepalive_timeout 65;\\n    types_hash_max_size 2048;\\n    client_max_body_size 16M;\\n\\n    # Gzip compression\\n    gzip on;\\n    gzip_vary on;\\n    gzip_min_length 10240;\\n    gzip_proxied any;\\n    gzip_comp_level 6;\\n    gzip_types\\n        text/plain\\n        text/css\\n        text/xml\\n        text/javascript\\n        application/json\\n        application/javascript\\n        application/xml+rss\\n        application/atom+xml\\n        image/svg+xml;\\n\\n    # Rate limiting\\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\\n    limit_req_zone $binary_remote_addr zone=admin:10m rate=5r/s;\\n    limit_req_zone $binary_remote_addr zone=login:10m rate=3r/s;\\n\\n    # Connection limiting\\n    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;\\n\\n    # Security headers\\n    add_header X-Frame-Options \\\"SAMEORIGIN\\\" always;\\n    add_header X-Content-Type-Options \\\"nosniff\\\" always;\\n    add_header X-XSS-Protection \\\"1; mode=block\\\" always;\\n    add_header Referrer-Policy \\\"strict-origin-when-cross-origin\\\" always;\\n    add_header Strict-Transport-Security \\\"max-age=31536000; includeSubDomains\\\" always;\\n\\n    # Hide Nginx version\\n    server_tokens off;\\n\\n    # Upstream configuration\\n    upstream mindmend_app {\\n        server app:8000;\\n        keepalive 32;\\n    }\\n\\n    # Main application server (HTTP-only)\\n    server {\\n        listen 80;\\n        server_name mindmend.xyz www.mindmend.xyz;\\n\\n        # Security headers for main app\\n        add_header Content-Security-Policy \\\"default-src 'self'; script-src 'self' 'unsafe-inline' https://js.stripe.com https://checkout.stripe.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.stripe.com; frame-src https://checkout.stripe.com https://js.stripe.com;\\\" always;\\n\\n        # Rate limiting\\n        limit_req zone=api burst=20 nodelay;\\n        limit_conn conn_limit_per_ip 20;\\n\\n        # Root directory\\n        root /var/www;\\n\\n        # Static files\\n        location /static/ {\\n            alias /var/www/static/;\\n            expires 1y;\\n            add_header Cache-Control \\\"public, immutable\\\";\\n            gzip_static on;\\n        }\\n\\n        location /uploads/ {\\n            alias /var/www/uploads/;\\n            expires 30d;\\n            add_header Cache-Control \\\"public\\\";\\n        }\\n\\n        # API routes with stricter rate limiting\\n        location /api/ {\\n            limit_req zone=api burst=10 nodelay;\\n            proxy_pass http://mindmend_app;\\n            proxy_set_header Host $host;\\n            proxy_set_header X-Real-IP $remote_addr;\\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n            proxy_set_header X-Forwarded-Proto $scheme;\\n            proxy_buffering off;\\n            proxy_request_buffering off;\\n        }\\n\\n        # WebSocket connections for real-time chat\\n        location /socket.io/ {\\n            proxy_pass http://mindmend_app;\\n            proxy_http_version 1.1;\\n            proxy_set_header Upgrade $http_upgrade;\\n            proxy_set_header Connection \\\"upgrade\\\";\\n            proxy_set_header Host $host;\\n            proxy_set_header X-Real-IP $remote_addr;\\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n            proxy_set_header X-Forwarded-Proto $scheme;\\n            proxy_read_timeout 86400;\\n        }\\n\\n        # Authentication routes with strict rate limiting\\n        location ~ ^/(login|register|reset_password) {\\n            limit_req zone=login burst=3 nodelay;\\n            proxy_pass http://mindmend_app;\\n            proxy_set_header Host $host;\\n            proxy_set_header X-Real-IP $remote_addr;\\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n            proxy_set_header X-Forwarded-Proto $scheme;\\n        }\\n\\n        # Health check endpoint\\n        location /health {\\n            proxy_pass http://mindmend_app;\\n            proxy_set_header Host $host;\\n            proxy_set_header X-Real-IP $remote_addr;\\n            access_log off;\\n        }\\n\\n        # Main application\\n        location / {\\n            proxy_pass http://mindmend_app;\\n            proxy_set_header Host $host;\\n            proxy_set_header X-Real-IP $remote_addr;\\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n            proxy_set_header X-Forwarded-Proto $scheme;\\n            proxy_set_header X-Forwarded-Host $host;\\n            proxy_connect_timeout 60s;\\n            proxy_send_timeout 60s;\\n            proxy_read_timeout 60s;\\n        }\\n\\n        # Block access to sensitive files\\n        location ~ /\\\\. {\\n            deny all;\\n            access_log off;\\n            log_not_found off;\\n        }\\n\\n        location ~ \\\\.(env|log|conf)$ {\\n            deny all;\\n            access_log off;\\n            log_not_found off;\\n        }\\n    }\\n\\n    # Admin panel server (HTTP-only for debugging)\\n    server {\\n        listen 80;\\n        server_name admin.mindmend.xyz;\\n\\n        # Enhanced security headers for admin panel\\n        add_header Content-Security-Policy \\\"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self';\\\" always;\\n        add_header X-Frame-Options \\\"DENY\\\" always;\\n\\n        # IP whitelist for admin access (uncomment and add your IPs)\\n        # allow 203.0.113.1;  # Your office IP\\n        # allow 198.51.100.1; # Your home IP\\n        # deny all;\\n\\n        # Strict rate limiting for admin\\n        limit_req zone=admin burst=5 nodelay;\\n        limit_conn conn_limit_per_ip 5;\\n\\n        # Static files for admin\\n        location /static/ {\\n            alias /var/www/static/;\\n            expires 1d;\\n        }\\n\\n        # Admin authentication with very strict rate limiting\\n        location ~ ^/admin/(login|auth) {\\n            limit_req zone=login burst=2 nodelay;\\n            proxy_pass http://mindmend_app;\\n            proxy_set_header Host $host;\\n            proxy_set_header X-Real-IP $remote_addr;\\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n            proxy_set_header X-Forwarded-Proto $scheme;\\n        }\\n\\n        # Admin panel routes\\n        location /admin/ {\\n            proxy_pass http://mindmend_app;\\n            proxy_set_header Host $host;\\n            proxy_set_header X-Real-IP $remote_addr;\\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n            proxy_set_header X-Forwarded-Proto $scheme;\\n            proxy_set_header X-Admin-Request \\\"true\\\";\\n        }\\n\\n        # Redirect root to admin\\n        location = / {\\n            return 301 http://$server_name/admin/;\\n        }\\n\\n        # Block all other requests\\n        location / {\\n            return 403;\\n        }\\n\\n        # Block access to sensitive files\\n        location ~ /\\\\. {\\n            deny all;\\n            access_log off;\\n            log_not_found off;\\n        }\\n\\n        location ~ \\\\.(env|log|conf)$ {\\n            deny all;\\n            access_log off;\\n            log_not_found off;\\n        }\\n    }\\n}\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{\"use-subpath\":\"true\"},\"labels\":{\"io.kompose.service\":\"nginx\"},\"name\":\"nginx-cm0\",\"namespace\":\"default\"}}\n",
                    "use-subpath": "true"
                },
                "creationTimestamp": "2025-09-24T19:25:17Z",
                "labels": {
                    "io.kompose.service": "nginx"
                },
                "name": "nginx-cm0",
                "namespace": "default",
                "resourceVersion": "1758742130627055010",
                "uid": "bb65814e-eff2-49a5-9f9c-d3a983d1e59c"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "nginx.conf": "server {\n    listen 80;\n    server_name mindmend.xyz;\n\n    location / {\n        proxy_pass http://mindmend-backend-service;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n\n    location /socket.io {\n        proxy_pass http://mindmend-backend-service/socket.io;\n        proxy_http_version 1.1;\n        proxy_buffering off;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n    }\n}\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"nginx.conf\":\"server {\\n    listen 80;\\n    server_name mindmend.xyz;\\n\\n    location / {\\n        proxy_pass http://mindmend-backend-service;\\n        proxy_set_header Host $host;\\n        proxy_set_header X-Real-IP $remote_addr;\\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n    }\\n\\n    location /socket.io {\\n        proxy_pass http://mindmend-backend-service/socket.io;\\n        proxy_http_version 1.1;\\n        proxy_buffering off;\\n        proxy_set_header Upgrade $http_upgrade;\\n        proxy_set_header Connection \\\"Upgrade\\\";\\n    }\\n}\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"nginx-config\",\"namespace\":\"default\"}}\n"
                },
                "creationTimestamp": "2025-09-24T22:03:13Z",
                "name": "nginx-config",
                "namespace": "default",
                "resourceVersion": "1758751393277215014",
                "uid": "15af7220-fe4a-4026-b5e8-afcf745da683"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "postgresql.conf": "# PostgreSQL Configuration for MindMend Production\n# ===============================================\n\n# Connection Settings\nlisten_addresses = '*'\nport = 5432\nmax_connections = 200\n\n# Memory Settings\nshared_buffers = 256MB\neffective_cache_size = 1GB\nwork_mem = 4MB\nmaintenance_work_mem = 64MB\n\n# Write-Ahead Logging\nwal_level = replica\nmax_wal_size = 1GB\nmin_wal_size = 80MB\n\n# Logging\nlog_destination = 'stderr'\nlogging_collector = on\nlog_directory = 'pg_log'\nlog_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'\nlog_min_messages = warning\nlog_min_error_statement = error\nlog_connections = on\nlog_disconnections = on\nlog_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '\n\n# Query and Index Statistics\ntrack_activities = on\ntrack_counts = on\ntrack_io_timing = on\ntrack_functions = all\n\n# Autovacuum\nautovacuum = on\nautovacuum_vacuum_threshold = 50\nautovacuum_analyze_threshold = 50\nautovacuum_vacuum_scale_factor = 0.2\nautovacuum_analyze_scale_factor = 0.1\n\n# Lock Management\ndeadlock_timeout = 1s\n\n# SSL Configuration\nssl = on\nssl_cert_file = 'server.crt'\nssl_key_file = 'server.key'\n\n# Security\npassword_encryption = scram-sha-256"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"postgresql.conf\":\"# PostgreSQL Configuration for MindMend Production\\n# ===============================================\\n\\n# Connection Settings\\nlisten_addresses = '*'\\nport = 5432\\nmax_connections = 200\\n\\n# Memory Settings\\nshared_buffers = 256MB\\neffective_cache_size = 1GB\\nwork_mem = 4MB\\nmaintenance_work_mem = 64MB\\n\\n# Write-Ahead Logging\\nwal_level = replica\\nmax_wal_size = 1GB\\nmin_wal_size = 80MB\\n\\n# Logging\\nlog_destination = 'stderr'\\nlogging_collector = on\\nlog_directory = 'pg_log'\\nlog_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'\\nlog_min_messages = warning\\nlog_min_error_statement = error\\nlog_connections = on\\nlog_disconnections = on\\nlog_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '\\n\\n# Query and Index Statistics\\ntrack_activities = on\\ntrack_counts = on\\ntrack_io_timing = on\\ntrack_functions = all\\n\\n# Autovacuum\\nautovacuum = on\\nautovacuum_vacuum_threshold = 50\\nautovacuum_analyze_threshold = 50\\nautovacuum_vacuum_scale_factor = 0.2\\nautovacuum_analyze_scale_factor = 0.1\\n\\n# Lock Management\\ndeadlock_timeout = 1s\\n\\n# SSL Configuration\\nssl = on\\nssl_cert_file = 'server.crt'\\nssl_key_file = 'server.key'\\n\\n# Security\\npassword_encryption = scram-sha-256\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{\"use-subpath\":\"true\"},\"labels\":{\"io.kompose.service\":\"postgres\"},\"name\":\"postgres-cm1\",\"namespace\":\"default\"}}\n",
                    "use-subpath": "true"
                },
                "creationTimestamp": "2025-09-24T14:30:29Z",
                "labels": {
                    "io.kompose.service": "postgres"
                },
                "name": "postgres-cm1",
                "namespace": "default",
                "resourceVersion": "1758724229193903007",
                "uid": "7134bc04-b83f-4406-a9b6-620225b90e35"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "init-db.sql": "-- MindMend Database Initialization Script\n-- ========================================\n\n-- Create extensions\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"pgcrypto\";\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\";\n\n-- Create additional database user for backups\nCREATE USER mindmend_backup WITH PASSWORD 'backup_password_change_me';\nGRANT CONNECT ON DATABASE mindmend_production TO mindmend_backup;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO mindmend_backup;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO mindmend_backup;\n\n-- Create audit logging function\nCREATE OR REPLACE FUNCTION audit_trigger_function()\nRETURNS TRIGGER AS $$\nBEGIN\n    IF TG_OP = 'INSERT' THEN\n        INSERT INTO audit_log (table_name, operation, row_data, changed_by, changed_at)\n        VALUES (TG_TABLE_NAME, TG_OP, row_to_json(NEW), current_user, current_timestamp);\n        RETURN NEW;\n    ELSIF TG_OP = 'UPDATE' THEN\n        INSERT INTO audit_log (table_name, operation, row_data, old_data, changed_by, changed_at)\n        VALUES (TG_TABLE_NAME, TG_OP, row_to_json(NEW), row_to_json(OLD), current_user, current_timestamp);\n        RETURN NEW;\n    ELSIF TG_OP = 'DELETE' THEN\n        INSERT INTO audit_log (table_name, operation, old_data, changed_by, changed_at)\n        VALUES (TG_TABLE_NAME, TG_OP, row_to_json(OLD), current_user, current_timestamp);\n        RETURN OLD;\n    END IF;\n    RETURN NULL;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create audit log table\nCREATE TABLE IF NOT EXISTS audit_log (\n    id SERIAL PRIMARY KEY,\n    table_name TEXT NOT NULL,\n    operation TEXT NOT NULL,\n    row_data JSONB,\n    old_data JSONB,\n    changed_by TEXT NOT NULL,\n    changed_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create indexes for better performance\nCREATE INDEX IF NOT EXISTS idx_audit_log_table_name ON audit_log(table_name);\nCREATE INDEX IF NOT EXISTS idx_audit_log_changed_at ON audit_log(changed_at);\nCREATE INDEX IF NOT EXISTS idx_audit_log_operation ON audit_log(operation);\n\n-- HIPAA Compliance: Create session tracking table\nCREATE TABLE IF NOT EXISTS hipaa_session_log (\n    id SERIAL PRIMARY KEY,\n    user_id INTEGER,\n    session_id VARCHAR(255) NOT NULL,\n    ip_address INET NOT NULL,\n    user_agent TEXT,\n    login_time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    logout_time TIMESTAMP WITH TIME ZONE,\n    session_duration INTERVAL,\n    actions_performed INTEGER DEFAULT 0,\n    data_accessed TEXT[],\n    compliance_flags JSONB DEFAULT '{}'::jsonb\n);\n\n-- Create indexes for session tracking\nCREATE INDEX IF NOT EXISTS idx_hipaa_session_user_id ON hipaa_session_log(user_id);\nCREATE INDEX IF NOT EXISTS idx_hipaa_session_login_time ON hipaa_session_log(login_time);\nCREATE INDEX IF NOT EXISTS idx_hipaa_session_ip ON hipaa_session_log(ip_address);\n\n-- Data retention policy function\nCREATE OR REPLACE FUNCTION cleanup_old_audit_logs()\nRETURNS void AS $$\nBEGIN\n    -- Delete audit logs older than 7 years (HIPAA requirement)\n    DELETE FROM audit_log WHERE changed_at \u003c NOW() - INTERVAL '7 years';\n    \n    -- Delete session logs older than 7 years\n    DELETE FROM hipaa_session_log WHERE login_time \u003c NOW() - INTERVAL '7 years';\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Grant necessary permissions\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO mindmend_user;\nGRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO mindmend_user;\nGRANT EXECUTE ON FUNCTION audit_trigger_function() TO mindmend_user;\nGRANT EXECUTE ON FUNCTION cleanup_old_audit_logs() TO mindmend_user;"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"init-db.sql\":\"-- MindMend Database Initialization Script\\n-- ========================================\\n\\n-- Create extensions\\nCREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\\nCREATE EXTENSION IF NOT EXISTS \\\"pgcrypto\\\";\\nCREATE EXTENSION IF NOT EXISTS \\\"pg_trgm\\\";\\n\\n-- Create additional database user for backups\\nCREATE USER mindmend_backup WITH PASSWORD 'backup_password_change_me';\\nGRANT CONNECT ON DATABASE mindmend_production TO mindmend_backup;\\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO mindmend_backup;\\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO mindmend_backup;\\n\\n-- Create audit logging function\\nCREATE OR REPLACE FUNCTION audit_trigger_function()\\nRETURNS TRIGGER AS $$\\nBEGIN\\n    IF TG_OP = 'INSERT' THEN\\n        INSERT INTO audit_log (table_name, operation, row_data, changed_by, changed_at)\\n        VALUES (TG_TABLE_NAME, TG_OP, row_to_json(NEW), current_user, current_timestamp);\\n        RETURN NEW;\\n    ELSIF TG_OP = 'UPDATE' THEN\\n        INSERT INTO audit_log (table_name, operation, row_data, old_data, changed_by, changed_at)\\n        VALUES (TG_TABLE_NAME, TG_OP, row_to_json(NEW), row_to_json(OLD), current_user, current_timestamp);\\n        RETURN NEW;\\n    ELSIF TG_OP = 'DELETE' THEN\\n        INSERT INTO audit_log (table_name, operation, old_data, changed_by, changed_at)\\n        VALUES (TG_TABLE_NAME, TG_OP, row_to_json(OLD), current_user, current_timestamp);\\n        RETURN OLD;\\n    END IF;\\n    RETURN NULL;\\nEND;\\n$$ LANGUAGE plpgsql;\\n\\n-- Create audit log table\\nCREATE TABLE IF NOT EXISTS audit_log (\\n    id SERIAL PRIMARY KEY,\\n    table_name TEXT NOT NULL,\\n    operation TEXT NOT NULL,\\n    row_data JSONB,\\n    old_data JSONB,\\n    changed_by TEXT NOT NULL,\\n    changed_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP\\n);\\n\\n-- Create indexes for better performance\\nCREATE INDEX IF NOT EXISTS idx_audit_log_table_name ON audit_log(table_name);\\nCREATE INDEX IF NOT EXISTS idx_audit_log_changed_at ON audit_log(changed_at);\\nCREATE INDEX IF NOT EXISTS idx_audit_log_operation ON audit_log(operation);\\n\\n-- HIPAA Compliance: Create session tracking table\\nCREATE TABLE IF NOT EXISTS hipaa_session_log (\\n    id SERIAL PRIMARY KEY,\\n    user_id INTEGER,\\n    session_id VARCHAR(255) NOT NULL,\\n    ip_address INET NOT NULL,\\n    user_agent TEXT,\\n    login_time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\\n    logout_time TIMESTAMP WITH TIME ZONE,\\n    session_duration INTERVAL,\\n    actions_performed INTEGER DEFAULT 0,\\n    data_accessed TEXT[],\\n    compliance_flags JSONB DEFAULT '{}'::jsonb\\n);\\n\\n-- Create indexes for session tracking\\nCREATE INDEX IF NOT EXISTS idx_hipaa_session_user_id ON hipaa_session_log(user_id);\\nCREATE INDEX IF NOT EXISTS idx_hipaa_session_login_time ON hipaa_session_log(login_time);\\nCREATE INDEX IF NOT EXISTS idx_hipaa_session_ip ON hipaa_session_log(ip_address);\\n\\n-- Data retention policy function\\nCREATE OR REPLACE FUNCTION cleanup_old_audit_logs()\\nRETURNS void AS $$\\nBEGIN\\n    -- Delete audit logs older than 7 years (HIPAA requirement)\\n    DELETE FROM audit_log WHERE changed_at \\u003c NOW() - INTERVAL '7 years';\\n    \\n    -- Delete session logs older than 7 years\\n    DELETE FROM hipaa_session_log WHERE login_time \\u003c NOW() - INTERVAL '7 years';\\nEND;\\n$$ LANGUAGE plpgsql;\\n\\n-- Grant necessary permissions\\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO mindmend_user;\\nGRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO mindmend_user;\\nGRANT EXECUTE ON FUNCTION audit_trigger_function() TO mindmend_user;\\nGRANT EXECUTE ON FUNCTION cleanup_old_audit_logs() TO mindmend_user;\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{\"use-subpath\":\"true\"},\"labels\":{\"io.kompose.service\":\"postgres\"},\"name\":\"postgres-cm2\",\"namespace\":\"default\"}}\n",
                    "use-subpath": "true"
                },
                "creationTimestamp": "2025-09-24T14:30:29Z",
                "labels": {
                    "io.kompose.service": "postgres"
                },
                "name": "postgres-cm2",
                "namespace": "default",
                "resourceVersion": "1758724229251359008",
                "uid": "7a488b4e-0942-489f-910a-e063c6836714"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "ksm-metrics-collector-config-data": "# proto-file: cloud/kubernetes/metrics/components/collector/config/collector.proto\n# proto-message: Config\n\nscrape_target: {\n  url: \"http://127.0.0.1:8081/metrics\"\n  target_name: \"kube-state-metrics\"\n}\n\nexport_target: {\n  endpoint: \"monitoring.googleapis.com:443\"\n}\nmetrics: {\n  source_metric_name: \"kube_state_metrics_watch_total\"\n  export_metric_name: \"kubernetes.io/internal/addons/cluster_infra_metrics/kube_state_metrics_watch_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"resource\"\n    type: METRIC_LABEL_STRING\n    description: \"K8S API object resource.\"\n  }\n  metric_labels: {\n    source_name: \"result\"\n    type: METRIC_LABEL_STRING\n    description: \"list operation result: success or error.\"\n  }\n  description: \"Number of total resource watches in kube-state-metrics.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kube_state_metrics_list_total\"\n  export_metric_name: \"kubernetes.io/internal/addons/cluster_infra_metrics/kube_state_metrics_list_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"resource\"\n    type: METRIC_LABEL_STRING\n    description: \"K8S API object resource.\"\n  }\n  metric_labels: {\n    source_name: \"result\"\n    type: METRIC_LABEL_STRING\n    description: \"list operation result: success or error.\"\n  }\n  description: \"Number of total resource lists in kube-state-metrics.\"\n  unit: \"1\"\n}"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "cluster-infra-metrics",
                    "components.gke.io/component-version": "1.33.4-gke.2"
                },
                "creationTimestamp": "2025-09-20T00:38:06Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile"
                },
                "name": "ksm-metrics-collector-config-map",
                "namespace": "gke-managed-cim",
                "resourceVersion": "1759495110305279009",
                "uid": "46e85714-36ec-4fcb-80c7-7c2d41c1351b"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "ca.crt": "-----BEGIN CERTIFICATE-----\nMIIELDCCApSgAwIBAgIQdEkbUROVP0jzFt73weMS1TANBgkqhkiG9w0BAQsFADAv\nMS0wKwYDVQQDEyQxODY3YWYwMy1jZDQwLTQ5YjctYjVmZi1hMmNjZDk1MGVmZTYw\nIBcNMjUwOTE5MjMzMjU1WhgPMjA1NTA5MTMwMDMyNTVaMC8xLTArBgNVBAMTJDE4\nNjdhZjAzLWNkNDAtNDliNy1iNWZmLWEyY2NkOTUwZWZlNjCCAaIwDQYJKoZIhvcN\nAQEBBQADggGPADCCAYoCggGBAOC82Vl3cCMiiS59DLLtIUp8N87fXlBAMnfHVdim\nZYNDtwDNl3oPPq3LZkVfVIZb9cPawN7FwFnTdbdoRsn/JkbzHemBIUE8/4DkKvue\nJbQdQwdlkyjkIR2/WPkONZCpmy9459CQ3nv4fJP5S2kxKOj/IpmcDZRA/rrNnwAH\nJRRo0ay/lnC9+FV0l4bExA6SqpIAwJg62W6erthDQ5HV44WQdYvpK9etg0gO5aBO\n9Eg8lxIROF3UHdxF3RsUpiluf22FCuv+q81Y80Rc6g3xE82PzdFVIoNgnWaOckc3\naDurXlppOQ9DDW/Nd7AsunvFYw6AGm9wiSpAsMb7f2qGfk5YIe+17Eft0PVU90yx\ni3jQpaKvGUm0oI+x3buvpcQfpWP2FUprPmHtwcmTMKPhG9lJpISnusDcSA3AyERo\nEXRXgaXwqBRE0rdZVcpSvjesrndmHY79J9Ztxa1dVlgjFPZsWcK+CGb21FHolOH6\nWmJnis9t3SFuM15v/Li7ZvxatwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAgQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwf6mDlkM/wC9GjMC9APUkR2/CWQwDQYJ\nKoZIhvcNAQELBQADggGBADOvnShVMpCCxrA9JD1fuMbCY/XvtxRDscP6M1NbKW7K\nplXbJus7zR+nlGOILFUFZaxE2F11dnZVj8+wvPkNRZvWDyKIwInuFRe16z8skt8M\nAPUF2MRhLR0nA1gXegbTQLxAXbusToEZLarxoH+c/kpft9wvLd+XKvBKMaRFk252\nvTAv29pOH/61v9YQ521u+oOk+sBpcD7Uwj6z4yuci+j05hiTE2pSpiCRE1MNYXTi\n1sYZSo8vJsn5zSQwtLl57impnRHDj+HQK4JMxb4hfFi47Y2PISn6AwfBUggTsxve\ntfmuAay+FU4MXQkVi0Qi9G0t97zne63bqIlV2bXj+uR53jBn7uCAXD/DMeXwx1bp\nwxrHRSCjwhHtsDXxxX8K5LwHpYH+RSqyYx3vY0RUAM41r4g9y1Cp3sq7DHomqvm+\nKJ1avnqHDLWznEzzGIX2EuI6hx0qPdbf5z7CH3LlGP23Fs3BVrrgaw1TAVD6G174\nT6DWmKVVHdmH801y9fsQrA==\n-----END CERTIFICATE-----\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubernetes.io/description": "Contains a CA bundle that can be used to verify the kube-apiserver when using internal endpoints such as the internal service IP or kubernetes.default.svc. No other usage is guaranteed across distributions of Kubernetes clusters."
                },
                "creationTimestamp": "2025-09-20T00:38:04Z",
                "name": "kube-root-ca.crt",
                "namespace": "gke-managed-cim",
                "resourceVersion": "1758328684920159003",
                "uid": "6701fcf2-7390-4400-b3c2-45b2645e0ec9"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "custom-resource-state-config.yaml": "kind: CustomResourceStateMetrics\nspec:\n  resources:\n  - groupVersionKind:\n      # Version is not specified due to a bug (fix https://github.com/kubernetes/kube-state-metrics/pull/2567 is not yet released).\n      # We will decide whether to add the version after next KSM OSS release.\n      group: jobset.x-k8s.io\n      kind: \"JobSet\"\n    labelsFromPath:\n      jobset_name:\n      - metadata\n      - name\n      namespace:\n      - metadata\n      - namespace\n    metricNamePrefix: kube_jobset\n    metrics:\n    - name: \"specified_replicas\"\n      help: \"The Number of specified replicas per replicated jobs in a jobset.\"\n      each:\n        type: Gauge\n        gauge:\n          path: [spec, replicatedJobs]\n          labelsFromPath:\n            replicated_job_name: [\"name\"]\n          valueFrom: [\"replicas\"]\n          nilIsZero: true\n    - name: \"ready_replicas\"\n      help: \"The Number of ready replicas per replicated jobs in a jobset.\"\n      each:\n        type: Gauge\n        gauge:\n          path: [status, replicatedJobsStatus]\n          labelsFromPath:\n            replicated_job_name: [\"name\"]\n          valueFrom: [\"ready\"]\n          nilIsZero: true\n    - name: \"succeeded_replicas\"\n      help: \"The Number of succeeded replicas per replicated jobs in a jobset.\"\n      each:\n        type: Gauge\n        gauge:\n          path: [status, replicatedJobsStatus]\n          labelsFromPath:\n            replicated_job_name: [\"name\"]\n          valueFrom: [\"succeeded\"]\n          nilIsZero: true\n    - name: \"failed_replicas\"\n      help: \"The Number of failed replicas per replicated jobs in a jobset.\"\n      each:\n        type: Gauge\n        gauge:\n          path: [status, replicatedJobsStatus]\n          labelsFromPath:\n            replicated_job_name: [\"name\"]\n          valueFrom: [\"failed\"]\n          nilIsZero: true\n    - name: \"active_replicas\"\n      help: \"The Number of active replicas per replicated jobs in a jobset.\"\n      each:\n        type: Gauge\n        gauge:\n          path: [status, replicatedJobsStatus]\n          labelsFromPath:\n            replicated_job_name: [\"name\"]\n          valueFrom: [\"active\"]\n          nilIsZero: true\n    - name: \"suspended_replicas\"\n      help: \"The Number of suspended replicas per replicated jobs in a jobset.\"\n      each:\n        type: Gauge\n        gauge:\n          path: [status, replicatedJobsStatus]\n          labelsFromPath:\n            replicated_job_name: [\"name\"]\n          valueFrom: [\"suspended\"]\n          nilIsZero: true\n    - name: \"status_condition\"\n      # The error log could be spammy if the metric path is not found.\n      errorLogV: 4\n      help: \"The current status conditions of a jobset.\"\n      each:\n        type: Gauge\n        gauge:\n          path: [status, conditions]\n          labelsFromPath:\n            condition: [\"type\"]\n          valueFrom: [\"status\"]\n    - name: \"restarts\"\n      # The error log could be spammy if the metric path is not found.\n      errorLogV: 4\n      help: \"The restart number of a jobset.\"\n      each:\n        type: Gauge\n        gauge:\n          path: [status]\n          valueFrom: [\"restarts\"]"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "cluster-infra-metrics",
                    "components.gke.io/component-version": "1.33.4-gke.2"
                },
                "creationTimestamp": "2025-09-20T00:38:07Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile"
                },
                "name": "kube-state-metrics-cr-metrics",
                "namespace": "gke-managed-cim",
                "resourceVersion": "1759495110402415003",
                "uid": "6c8d5340-26b1-49dd-b7a7-4a29cbecadba"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "default-counters.csv": "## GPU performance metrics,,\n# FieldID 100\nDCGM_FI_DEV_SM_CLOCK, gauge, SM clock frequency (in MHz).\n# FieldID 140\nDCGM_FI_DEV_MEMORY_TEMP, gauge, Memory temperature for the device.\n# FieldID 150\nDCGM_FI_DEV_GPU_TEMP, gauge, Current temperature readings for the device in degrees C.\n# FieldID 155\nDCGM_FI_DEV_POWER_USAGE, gauge, Power usage for the device in Watts.\n# Field ID 156\nDCGM_FI_DEV_TOTAL_ENERGY_CONSUMPTION, counter, Total energy consumption for the GPU in mJ since the driver was last reloaded.\n\n# Utilization (the sample period varies depending on the product),,\n# FieldID 203\nDCGM_FI_DEV_GPU_UTIL, gauge, GPU utilization (in %).\n# FieldID 204\nDCGM_FI_DEV_MEM_COPY_UTIL, gauge, Memory utilization (in %).\n\n# Memory usage,,\n# FieldID 250\nDCGM_FI_DEV_FB_TOTAL, gauge, Total Frame Buffer of the GPU in MB.\n# FieldID 251\nDCGM_FI_DEV_FB_FREE, gauge, Framebuffer memory free (in MiB).\n# FieldID 252\nDCGM_FI_DEV_FB_USED, gauge, Framebuffer memory used (in MiB).\n\n# Profiling metrics,,\n# FieldID 1001\nDCGM_FI_PROF_GR_ENGINE_ACTIVE, gauge, Ratio of time the graphics engine is active.\n# FieldID 1002\nDCGM_FI_PROF_SM_ACTIVE, gauge, The ratio of cycles an SM has at least 1 warp assigned.\n# FieldID 1004\nDCGM_FI_PROF_PIPE_TENSOR_ACTIVE, gauge, The ratio of cycles the tensor (HMMA) pipe is active (off the peak sustained elapsed cycles).\n# FieldID 1005\nDCGM_FI_PROF_DRAM_ACTIVE, gauge, Ratio of cycles the device memory interface is active sending or receiving data.\n# FieldID 1006\nDCGM_FI_PROF_PIPE_FP64_ACTIVE, gauge, The fraction of cycles the FP64 (double precision) pipe was active.\n# FieldID 1007\nDCGM_FI_PROF_PIPE_FP32_ACTIVE, gauge, The fraction of cycles the FP32 (single precision) pipe was active.\n# FieldID 1008\nDCGM_FI_PROF_PIPE_FP16_ACTIVE, gauge, The fraction of cycles the FP16 (half precision) pipe was active.\n\n# PCIE,,\n# FieldID 1009\nDCGM_FI_PROF_PCIE_TX_BYTES, gauge, Total number of bytes transmitted through PCIe TX.\n# FieldID 1010\nDCGM_FI_PROF_PCIE_RX_BYTES, gauge, Total number of bytes received through PCIe RX.\n\n# NVLink,,\n# FieldID 1011\nDCGM_FI_PROF_NVLINK_TX_BYTES, gauge, The number of bytes of active NvLink tx (transmit) data including both header and payload.\n# FieldID 1012\nDCGM_FI_PROF_NVLINK_RX_BYTES, gauge, The number of bytes of active NvLink rx (read) data including both header and payload."
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "gpu-dcgm",
                    "components.gke.io/component-version": "1.33.0-gke.3",
                    "components.gke.io/layer": "addon"
                },
                "creationTimestamp": "2025-09-20T00:38:28Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "app.kubernetes.io/name": "gke-managed-dcgm-exporter"
                },
                "name": "dcgm-exporter-metrics",
                "namespace": "gke-managed-system",
                "resourceVersion": "1759495119308559012",
                "uid": "b5554965-bce5-4367-8156-774d07a8e8df"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "ca.crt": "-----BEGIN CERTIFICATE-----\nMIIELDCCApSgAwIBAgIQdEkbUROVP0jzFt73weMS1TANBgkqhkiG9w0BAQsFADAv\nMS0wKwYDVQQDEyQxODY3YWYwMy1jZDQwLTQ5YjctYjVmZi1hMmNjZDk1MGVmZTYw\nIBcNMjUwOTE5MjMzMjU1WhgPMjA1NTA5MTMwMDMyNTVaMC8xLTArBgNVBAMTJDE4\nNjdhZjAzLWNkNDAtNDliNy1iNWZmLWEyY2NkOTUwZWZlNjCCAaIwDQYJKoZIhvcN\nAQEBBQADggGPADCCAYoCggGBAOC82Vl3cCMiiS59DLLtIUp8N87fXlBAMnfHVdim\nZYNDtwDNl3oPPq3LZkVfVIZb9cPawN7FwFnTdbdoRsn/JkbzHemBIUE8/4DkKvue\nJbQdQwdlkyjkIR2/WPkONZCpmy9459CQ3nv4fJP5S2kxKOj/IpmcDZRA/rrNnwAH\nJRRo0ay/lnC9+FV0l4bExA6SqpIAwJg62W6erthDQ5HV44WQdYvpK9etg0gO5aBO\n9Eg8lxIROF3UHdxF3RsUpiluf22FCuv+q81Y80Rc6g3xE82PzdFVIoNgnWaOckc3\naDurXlppOQ9DDW/Nd7AsunvFYw6AGm9wiSpAsMb7f2qGfk5YIe+17Eft0PVU90yx\ni3jQpaKvGUm0oI+x3buvpcQfpWP2FUprPmHtwcmTMKPhG9lJpISnusDcSA3AyERo\nEXRXgaXwqBRE0rdZVcpSvjesrndmHY79J9Ztxa1dVlgjFPZsWcK+CGb21FHolOH6\nWmJnis9t3SFuM15v/Li7ZvxatwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAgQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwf6mDlkM/wC9GjMC9APUkR2/CWQwDQYJ\nKoZIhvcNAQELBQADggGBADOvnShVMpCCxrA9JD1fuMbCY/XvtxRDscP6M1NbKW7K\nplXbJus7zR+nlGOILFUFZaxE2F11dnZVj8+wvPkNRZvWDyKIwInuFRe16z8skt8M\nAPUF2MRhLR0nA1gXegbTQLxAXbusToEZLarxoH+c/kpft9wvLd+XKvBKMaRFk252\nvTAv29pOH/61v9YQ521u+oOk+sBpcD7Uwj6z4yuci+j05hiTE2pSpiCRE1MNYXTi\n1sYZSo8vJsn5zSQwtLl57impnRHDj+HQK4JMxb4hfFi47Y2PISn6AwfBUggTsxve\ntfmuAay+FU4MXQkVi0Qi9G0t97zne63bqIlV2bXj+uR53jBn7uCAXD/DMeXwx1bp\nwxrHRSCjwhHtsDXxxX8K5LwHpYH+RSqyYx3vY0RUAM41r4g9y1Cp3sq7DHomqvm+\nKJ1avnqHDLWznEzzGIX2EuI6hx0qPdbf5z7CH3LlGP23Fs3BVrrgaw1TAVD6G174\nT6DWmKVVHdmH801y9fsQrA==\n-----END CERTIFICATE-----\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubernetes.io/description": "Contains a CA bundle that can be used to verify the kube-apiserver when using internal endpoints such as the internal service IP or kubernetes.default.svc. No other usage is guaranteed across distributions of Kubernetes clusters."
                },
                "creationTimestamp": "2025-09-20T00:38:20Z",
                "name": "kube-root-ca.crt",
                "namespace": "gke-managed-system",
                "resourceVersion": "1758328700799871011",
                "uid": "9ebb4bda-b65c-45e7-83fe-6f6c249e660b"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "ca.crt": "-----BEGIN CERTIFICATE-----\nMIIELDCCApSgAwIBAgIQdEkbUROVP0jzFt73weMS1TANBgkqhkiG9w0BAQsFADAv\nMS0wKwYDVQQDEyQxODY3YWYwMy1jZDQwLTQ5YjctYjVmZi1hMmNjZDk1MGVmZTYw\nIBcNMjUwOTE5MjMzMjU1WhgPMjA1NTA5MTMwMDMyNTVaMC8xLTArBgNVBAMTJDE4\nNjdhZjAzLWNkNDAtNDliNy1iNWZmLWEyY2NkOTUwZWZlNjCCAaIwDQYJKoZIhvcN\nAQEBBQADggGPADCCAYoCggGBAOC82Vl3cCMiiS59DLLtIUp8N87fXlBAMnfHVdim\nZYNDtwDNl3oPPq3LZkVfVIZb9cPawN7FwFnTdbdoRsn/JkbzHemBIUE8/4DkKvue\nJbQdQwdlkyjkIR2/WPkONZCpmy9459CQ3nv4fJP5S2kxKOj/IpmcDZRA/rrNnwAH\nJRRo0ay/lnC9+FV0l4bExA6SqpIAwJg62W6erthDQ5HV44WQdYvpK9etg0gO5aBO\n9Eg8lxIROF3UHdxF3RsUpiluf22FCuv+q81Y80Rc6g3xE82PzdFVIoNgnWaOckc3\naDurXlppOQ9DDW/Nd7AsunvFYw6AGm9wiSpAsMb7f2qGfk5YIe+17Eft0PVU90yx\ni3jQpaKvGUm0oI+x3buvpcQfpWP2FUprPmHtwcmTMKPhG9lJpISnusDcSA3AyERo\nEXRXgaXwqBRE0rdZVcpSvjesrndmHY79J9Ztxa1dVlgjFPZsWcK+CGb21FHolOH6\nWmJnis9t3SFuM15v/Li7ZvxatwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAgQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwf6mDlkM/wC9GjMC9APUkR2/CWQwDQYJ\nKoZIhvcNAQELBQADggGBADOvnShVMpCCxrA9JD1fuMbCY/XvtxRDscP6M1NbKW7K\nplXbJus7zR+nlGOILFUFZaxE2F11dnZVj8+wvPkNRZvWDyKIwInuFRe16z8skt8M\nAPUF2MRhLR0nA1gXegbTQLxAXbusToEZLarxoH+c/kpft9wvLd+XKvBKMaRFk252\nvTAv29pOH/61v9YQ521u+oOk+sBpcD7Uwj6z4yuci+j05hiTE2pSpiCRE1MNYXTi\n1sYZSo8vJsn5zSQwtLl57impnRHDj+HQK4JMxb4hfFi47Y2PISn6AwfBUggTsxve\ntfmuAay+FU4MXQkVi0Qi9G0t97zne63bqIlV2bXj+uR53jBn7uCAXD/DMeXwx1bp\nwxrHRSCjwhHtsDXxxX8K5LwHpYH+RSqyYx3vY0RUAM41r4g9y1Cp3sq7DHomqvm+\nKJ1avnqHDLWznEzzGIX2EuI6hx0qPdbf5z7CH3LlGP23Fs3BVrrgaw1TAVD6G174\nT6DWmKVVHdmH801y9fsQrA==\n-----END CERTIFICATE-----\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubernetes.io/description": "Contains a CA bundle that can be used to verify the kube-apiserver when using internal endpoints such as the internal service IP or kubernetes.default.svc. No other usage is guaranteed across distributions of Kubernetes clusters."
                },
                "creationTimestamp": "2025-09-20T00:38:26Z",
                "name": "kube-root-ca.crt",
                "namespace": "gke-managed-volumepopulator",
                "resourceVersion": "1758328706515023013",
                "uid": "20b1c275-e966-4da6-9720-20880ec0f32a"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "ca.crt": "-----BEGIN CERTIFICATE-----\nMIIELDCCApSgAwIBAgIQdEkbUROVP0jzFt73weMS1TANBgkqhkiG9w0BAQsFADAv\nMS0wKwYDVQQDEyQxODY3YWYwMy1jZDQwLTQ5YjctYjVmZi1hMmNjZDk1MGVmZTYw\nIBcNMjUwOTE5MjMzMjU1WhgPMjA1NTA5MTMwMDMyNTVaMC8xLTArBgNVBAMTJDE4\nNjdhZjAzLWNkNDAtNDliNy1iNWZmLWEyY2NkOTUwZWZlNjCCAaIwDQYJKoZIhvcN\nAQEBBQADggGPADCCAYoCggGBAOC82Vl3cCMiiS59DLLtIUp8N87fXlBAMnfHVdim\nZYNDtwDNl3oPPq3LZkVfVIZb9cPawN7FwFnTdbdoRsn/JkbzHemBIUE8/4DkKvue\nJbQdQwdlkyjkIR2/WPkONZCpmy9459CQ3nv4fJP5S2kxKOj/IpmcDZRA/rrNnwAH\nJRRo0ay/lnC9+FV0l4bExA6SqpIAwJg62W6erthDQ5HV44WQdYvpK9etg0gO5aBO\n9Eg8lxIROF3UHdxF3RsUpiluf22FCuv+q81Y80Rc6g3xE82PzdFVIoNgnWaOckc3\naDurXlppOQ9DDW/Nd7AsunvFYw6AGm9wiSpAsMb7f2qGfk5YIe+17Eft0PVU90yx\ni3jQpaKvGUm0oI+x3buvpcQfpWP2FUprPmHtwcmTMKPhG9lJpISnusDcSA3AyERo\nEXRXgaXwqBRE0rdZVcpSvjesrndmHY79J9Ztxa1dVlgjFPZsWcK+CGb21FHolOH6\nWmJnis9t3SFuM15v/Li7ZvxatwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAgQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwf6mDlkM/wC9GjMC9APUkR2/CWQwDQYJ\nKoZIhvcNAQELBQADggGBADOvnShVMpCCxrA9JD1fuMbCY/XvtxRDscP6M1NbKW7K\nplXbJus7zR+nlGOILFUFZaxE2F11dnZVj8+wvPkNRZvWDyKIwInuFRe16z8skt8M\nAPUF2MRhLR0nA1gXegbTQLxAXbusToEZLarxoH+c/kpft9wvLd+XKvBKMaRFk252\nvTAv29pOH/61v9YQ521u+oOk+sBpcD7Uwj6z4yuci+j05hiTE2pSpiCRE1MNYXTi\n1sYZSo8vJsn5zSQwtLl57impnRHDj+HQK4JMxb4hfFi47Y2PISn6AwfBUggTsxve\ntfmuAay+FU4MXQkVi0Qi9G0t97zne63bqIlV2bXj+uR53jBn7uCAXD/DMeXwx1bp\nwxrHRSCjwhHtsDXxxX8K5LwHpYH+RSqyYx3vY0RUAM41r4g9y1Cp3sq7DHomqvm+\nKJ1avnqHDLWznEzzGIX2EuI6hx0qPdbf5z7CH3LlGP23Fs3BVrrgaw1TAVD6G174\nT6DWmKVVHdmH801y9fsQrA==\n-----END CERTIFICATE-----\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubernetes.io/description": "Contains a CA bundle that can be used to verify the kube-apiserver when using internal endpoints such as the internal service IP or kubernetes.default.svc. No other usage is guaranteed across distributions of Kubernetes clusters."
                },
                "creationTimestamp": "2025-09-20T00:38:45Z",
                "name": "kube-root-ca.crt",
                "namespace": "gmp-public",
                "resourceVersion": "1758328725907071023",
                "uid": "643ae26f-f6f8-441d-abfe-6e5097df927a"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "config.yaml": "global:\n    external_labels:\n        cluster: mindmend-cluster\n        location: asia-southeast1-a\n        project_id: mindmend-production\nscrape_configs:\n    - job_name: ClusterNodeMonitoring/gmp-kubelet-cadvisor/metrics/cadvisor\n      honor_timestamps: false\n      scrape_interval: 30s\n      scrape_timeout: 30s\n      metrics_path: /metrics/cadvisor\n      scheme: https\n      authorization:\n        credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: false\n      follow_redirects: false\n      enable_http2: false\n      relabel_configs:\n        - target_label: job\n          replacement: gmp-kubelet-cadvisor\n          action: replace\n        - source_labels: [__meta_kubernetes_node_name]\n          target_label: node\n          action: replace\n        - source_labels: [__meta_kubernetes_node_name]\n          target_label: instance\n          replacement: $1:metrics/cadvisor\n          action: replace\n        - target_label: project_id\n          replacement: mindmend-production\n          action: replace\n        - target_label: location\n          replacement: asia-southeast1-a\n          action: replace\n        - target_label: cluster\n          replacement: mindmend-cluster\n          action: replace\n      metric_relabel_configs:\n        - source_labels: [__name__]\n          regex: container_cpu_cfs_periods_total|container_cpu_cfs_throttled_periods_total|container_cpu_usage_seconds_total|container_fs_limit_bytes|container_fs_read_seconds_total|container_fs_reads_bytes_total|container_fs_reads_total|container_fs_usage_bytes|container_fs_write_seconds_total|container_fs_writes_bytes_total|container_fs_writes_total|container_memory_rss|container_memory_working_set_bytes|container_network_receive_bytes_total|container_network_receive_packets_dropped_total|container_network_receive_packets_total|container_network_transmit_bytes_total|container_network_transmit_packets_dropped_total|container_network_transmit_packets_total\n          action: keep\n      kubernetes_sd_configs:\n        - role: node\n          kubeconfig_file: \"\"\n          follow_redirects: true\n          enable_http2: true\n          selectors:\n            - role: node\n              field: metadata.name=$(NODE_NAME)\n    - job_name: ClusterNodeMonitoring/gmp-kubelet-metrics/metrics\n      honor_timestamps: false\n      scrape_interval: 30s\n      scrape_timeout: 30s\n      metrics_path: /metrics\n      scheme: https\n      authorization:\n        credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: false\n      follow_redirects: false\n      enable_http2: false\n      relabel_configs:\n        - target_label: job\n          replacement: gmp-kubelet-metrics\n          action: replace\n        - source_labels: [__meta_kubernetes_node_name]\n          target_label: node\n          action: replace\n        - source_labels: [__meta_kubernetes_node_name]\n          target_label: instance\n          replacement: $1:metrics\n          action: replace\n        - target_label: project_id\n          replacement: mindmend-production\n          action: replace\n        - target_label: location\n          replacement: asia-southeast1-a\n          action: replace\n        - target_label: cluster\n          replacement: mindmend-cluster\n          action: replace\n      metric_relabel_configs:\n        - source_labels: [__name__]\n          regex: kubelet_certificate_manager_server_ttl_seconds|kubelet_node_name|kubelet_pleg_relist_duration_seconds.*|kubelet_pod_worker_duration_seconds.*|kubelet_running_containers|kubelet_running_pods|kubelet_runtime_operations_total|kubelet_volume_stats_available_bytes|kubelet_volume_stats_capacity_bytes|kubelet_volume_stats_inodes|kubelet_volume_stats_inodes_free|kubelet_volume_stats_inodes_used|kubelet_volume_stats_used_bytes\n          action: keep\n      kubernetes_sd_configs:\n        - role: node\n          kubeconfig_file: \"\"\n          follow_redirects: true\n          enable_http2: true\n          selectors:\n            - role: node\n              field: metadata.name=$(NODE_NAME)\n    - job_name: ClusterPodMonitoring/gke-managed-dcgm-exporter/metrics\n      honor_timestamps: false\n      scrape_interval: 30s\n      scrape_timeout: 30s\n      metrics_path: /metrics\n      follow_redirects: true\n      enable_http2: true\n      relabel_configs:\n        - target_label: project_id\n          replacement: mindmend-production\n          action: replace\n        - target_label: location\n          replacement: asia-southeast1-a\n          action: replace\n        - target_label: cluster\n          replacement: mindmend-cluster\n          action: replace\n        - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]\n          regex: gke-managed-dcgm-exporter\n          action: keep\n        - target_label: job\n          replacement: gke-managed-dcgm-exporter\n          action: replace\n        - source_labels: [__meta_kubernetes_pod_phase]\n          regex: (Failed|Succeeded)\n          action: drop\n        - source_labels: [__meta_kubernetes_pod_name]\n          target_label: __tmp_instance\n          action: replace\n        - source_labels: [__meta_kubernetes_pod_controller_kind, __meta_kubernetes_pod_node_name]\n          regex: DaemonSet;(.*)\n          target_label: __tmp_instance\n          replacement: $1\n          action: replace\n        - source_labels: [__meta_kubernetes_pod_container_port_name]\n          regex: metrics\n          action: keep\n        - source_labels: [__tmp_instance, __meta_kubernetes_pod_container_port_name]\n          regex: (.+);(.+)\n          target_label: instance\n          replacement: $1:$2\n          action: replace\n      kubernetes_sd_configs:\n        - role: pod\n          kubeconfig_file: \"\"\n          follow_redirects: true\n          enable_http2: true\n          selectors:\n            - role: pod\n              field: spec.nodeName=$(NODE_NAME)\n    - job_name: ClusterPodMonitoring/kube-state-metrics/k8s-objects\n      honor_timestamps: false\n      scrape_interval: 30s\n      scrape_timeout: 30s\n      metrics_path: /metrics\n      follow_redirects: true\n      enable_http2: true\n      relabel_configs:\n        - target_label: project_id\n          replacement: mindmend-production\n          action: replace\n        - target_label: location\n          replacement: asia-southeast1-a\n          action: replace\n        - target_label: cluster\n          replacement: mindmend-cluster\n          action: replace\n        - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]\n          regex: gke-managed-kube-state-metrics\n          action: keep\n        - target_label: job\n          replacement: kube-state-metrics\n          action: replace\n        - source_labels: [__meta_kubernetes_pod_phase]\n          regex: (Failed|Succeeded)\n          action: drop\n        - source_labels: [__meta_kubernetes_pod_name]\n          target_label: __tmp_instance\n          action: replace\n        - source_labels: [__meta_kubernetes_pod_controller_kind, __meta_kubernetes_pod_node_name]\n          regex: DaemonSet;(.*)\n          target_label: __tmp_instance\n          replacement: $1\n          action: replace\n        - source_labels: [__meta_kubernetes_pod_container_port_name]\n          regex: k8s-objects\n          action: keep\n        - source_labels: [__tmp_instance, __meta_kubernetes_pod_container_port_name]\n          regex: (.+);(.+)\n          target_label: instance\n          replacement: $1:$2\n          action: replace\n      metric_relabel_configs:\n        - source_labels: [namespace]\n          regex: gke-managed-.*\n          action: drop\n      kubernetes_sd_configs:\n        - role: pod\n          kubeconfig_file: \"\"\n          follow_redirects: true\n          enable_http2: true\n          selectors:\n            - role: pod\n              field: spec.nodeName=$(NODE_NAME)\ngoogle_cloud:\n    export:\n        compression: \"\"\n        credentials: \"\"\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "creationTimestamp": "2025-09-20T00:39:38Z",
                "name": "collector",
                "namespace": "gmp-system",
                "resourceVersion": "1758328799808415008",
                "uid": "78ecfb04-c877-46c9-9a53-b418a0ab2df7"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "datasource-syncer": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/prometheus-engine/datasource-syncer:v0.15.4-gke.0@sha256:4e9eb5e0723efc5711f107ae20d555301bdcf97e402e1be321bca8da17a6123a",
                "example-app": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/prometheus-engine/example-app:v0.15.4-gke.0@sha256:e84026aa80a3f6941e2de64d1e18b4b4fc141d29eecfcb0b74eeaa1b64b2d681",
                "frontend": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/prometheus-engine/frontend:v0.15.4-gke.0@sha256:9d940ec6d4321cca1a20311da40c2b7abc391aaceb430b73a26b296752c0d306"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "managed-prometheus",
                    "components.gke.io/component-version": "0.15.4-gke.3",
                    "components.gke.io/image-map": "Images deployed by operator",
                    "components.gke.io/layer": "addon"
                },
                "creationTimestamp": "2025-09-20T00:38:52Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile"
                },
                "name": "config-images",
                "namespace": "gmp-system",
                "resourceVersion": "1758328732870687010",
                "uid": "9e453c80-0d56-488b-8490-7b3835f6f793"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "ca.crt": "-----BEGIN CERTIFICATE-----\nMIIELDCCApSgAwIBAgIQdEkbUROVP0jzFt73weMS1TANBgkqhkiG9w0BAQsFADAv\nMS0wKwYDVQQDEyQxODY3YWYwMy1jZDQwLTQ5YjctYjVmZi1hMmNjZDk1MGVmZTYw\nIBcNMjUwOTE5MjMzMjU1WhgPMjA1NTA5MTMwMDMyNTVaMC8xLTArBgNVBAMTJDE4\nNjdhZjAzLWNkNDAtNDliNy1iNWZmLWEyY2NkOTUwZWZlNjCCAaIwDQYJKoZIhvcN\nAQEBBQADggGPADCCAYoCggGBAOC82Vl3cCMiiS59DLLtIUp8N87fXlBAMnfHVdim\nZYNDtwDNl3oPPq3LZkVfVIZb9cPawN7FwFnTdbdoRsn/JkbzHemBIUE8/4DkKvue\nJbQdQwdlkyjkIR2/WPkONZCpmy9459CQ3nv4fJP5S2kxKOj/IpmcDZRA/rrNnwAH\nJRRo0ay/lnC9+FV0l4bExA6SqpIAwJg62W6erthDQ5HV44WQdYvpK9etg0gO5aBO\n9Eg8lxIROF3UHdxF3RsUpiluf22FCuv+q81Y80Rc6g3xE82PzdFVIoNgnWaOckc3\naDurXlppOQ9DDW/Nd7AsunvFYw6AGm9wiSpAsMb7f2qGfk5YIe+17Eft0PVU90yx\ni3jQpaKvGUm0oI+x3buvpcQfpWP2FUprPmHtwcmTMKPhG9lJpISnusDcSA3AyERo\nEXRXgaXwqBRE0rdZVcpSvjesrndmHY79J9Ztxa1dVlgjFPZsWcK+CGb21FHolOH6\nWmJnis9t3SFuM15v/Li7ZvxatwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAgQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwf6mDlkM/wC9GjMC9APUkR2/CWQwDQYJ\nKoZIhvcNAQELBQADggGBADOvnShVMpCCxrA9JD1fuMbCY/XvtxRDscP6M1NbKW7K\nplXbJus7zR+nlGOILFUFZaxE2F11dnZVj8+wvPkNRZvWDyKIwInuFRe16z8skt8M\nAPUF2MRhLR0nA1gXegbTQLxAXbusToEZLarxoH+c/kpft9wvLd+XKvBKMaRFk252\nvTAv29pOH/61v9YQ521u+oOk+sBpcD7Uwj6z4yuci+j05hiTE2pSpiCRE1MNYXTi\n1sYZSo8vJsn5zSQwtLl57impnRHDj+HQK4JMxb4hfFi47Y2PISn6AwfBUggTsxve\ntfmuAay+FU4MXQkVi0Qi9G0t97zne63bqIlV2bXj+uR53jBn7uCAXD/DMeXwx1bp\nwxrHRSCjwhHtsDXxxX8K5LwHpYH+RSqyYx3vY0RUAM41r4g9y1Cp3sq7DHomqvm+\nKJ1avnqHDLWznEzzGIX2EuI6hx0qPdbf5z7CH3LlGP23Fs3BVrrgaw1TAVD6G174\nT6DWmKVVHdmH801y9fsQrA==\n-----END CERTIFICATE-----\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubernetes.io/description": "Contains a CA bundle that can be used to verify the kube-apiserver when using internal endpoints such as the internal service IP or kubernetes.default.svc. No other usage is guaranteed across distributions of Kubernetes clusters."
                },
                "creationTimestamp": "2025-09-20T00:38:45Z",
                "name": "kube-root-ca.crt",
                "namespace": "gmp-system",
                "resourceVersion": "1758328725609311021",
                "uid": "5b938248-3374-4bf0-95a2-a3ca129a6a37"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "config.yaml": "global:\n    external_labels:\n        cluster: mindmend-cluster\n        location: asia-southeast1-a\n        project_id: mindmend-production\nalerting:\n    alertmanagers:\n        - follow_redirects: true\n          enable_http2: true\n          scheme: http\n          timeout: 10s\n          api_version: v2\n          static_configs:\n            - targets:\n                - alertmanager.gmp-system:9093\nrule_files:\n    - /etc/rules/*.yaml\ngoogle_cloud:\n    query:\n        project_id: mindmend-production\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "creationTimestamp": "2025-09-20T00:39:59Z",
                "name": "rule-evaluator",
                "namespace": "gmp-system",
                "resourceVersion": "1758328799372943004",
                "uid": "581c4d43-1947-46cf-9ece-04d512b88481"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "empty.yaml": ""
            },
            "kind": "ConfigMap",
            "metadata": {
                "creationTimestamp": "2025-09-20T00:39:38Z",
                "labels": {
                    "app.kubernetes.io/name": "rule-evaluator"
                },
                "name": "rules-generated",
                "namespace": "gmp-system",
                "resourceVersion": "1758328778180479002",
                "uid": "4c288ff9-7436-457c-a9f7-1dc5f06aef8c"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "ca.crt": "-----BEGIN CERTIFICATE-----\nMIIELDCCApSgAwIBAgIQdEkbUROVP0jzFt73weMS1TANBgkqhkiG9w0BAQsFADAv\nMS0wKwYDVQQDEyQxODY3YWYwMy1jZDQwLTQ5YjctYjVmZi1hMmNjZDk1MGVmZTYw\nIBcNMjUwOTE5MjMzMjU1WhgPMjA1NTA5MTMwMDMyNTVaMC8xLTArBgNVBAMTJDE4\nNjdhZjAzLWNkNDAtNDliNy1iNWZmLWEyY2NkOTUwZWZlNjCCAaIwDQYJKoZIhvcN\nAQEBBQADggGPADCCAYoCggGBAOC82Vl3cCMiiS59DLLtIUp8N87fXlBAMnfHVdim\nZYNDtwDNl3oPPq3LZkVfVIZb9cPawN7FwFnTdbdoRsn/JkbzHemBIUE8/4DkKvue\nJbQdQwdlkyjkIR2/WPkONZCpmy9459CQ3nv4fJP5S2kxKOj/IpmcDZRA/rrNnwAH\nJRRo0ay/lnC9+FV0l4bExA6SqpIAwJg62W6erthDQ5HV44WQdYvpK9etg0gO5aBO\n9Eg8lxIROF3UHdxF3RsUpiluf22FCuv+q81Y80Rc6g3xE82PzdFVIoNgnWaOckc3\naDurXlppOQ9DDW/Nd7AsunvFYw6AGm9wiSpAsMb7f2qGfk5YIe+17Eft0PVU90yx\ni3jQpaKvGUm0oI+x3buvpcQfpWP2FUprPmHtwcmTMKPhG9lJpISnusDcSA3AyERo\nEXRXgaXwqBRE0rdZVcpSvjesrndmHY79J9Ztxa1dVlgjFPZsWcK+CGb21FHolOH6\nWmJnis9t3SFuM15v/Li7ZvxatwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAgQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwf6mDlkM/wC9GjMC9APUkR2/CWQwDQYJ\nKoZIhvcNAQELBQADggGBADOvnShVMpCCxrA9JD1fuMbCY/XvtxRDscP6M1NbKW7K\nplXbJus7zR+nlGOILFUFZaxE2F11dnZVj8+wvPkNRZvWDyKIwInuFRe16z8skt8M\nAPUF2MRhLR0nA1gXegbTQLxAXbusToEZLarxoH+c/kpft9wvLd+XKvBKMaRFk252\nvTAv29pOH/61v9YQ521u+oOk+sBpcD7Uwj6z4yuci+j05hiTE2pSpiCRE1MNYXTi\n1sYZSo8vJsn5zSQwtLl57impnRHDj+HQK4JMxb4hfFi47Y2PISn6AwfBUggTsxve\ntfmuAay+FU4MXQkVi0Qi9G0t97zne63bqIlV2bXj+uR53jBn7uCAXD/DMeXwx1bp\nwxrHRSCjwhHtsDXxxX8K5LwHpYH+RSqyYx3vY0RUAM41r4g9y1Cp3sq7DHomqvm+\nKJ1avnqHDLWznEzzGIX2EuI6hx0qPdbf5z7CH3LlGP23Fs3BVrrgaw1TAVD6G174\nT6DWmKVVHdmH801y9fsQrA==\n-----END CERTIFICATE-----\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubernetes.io/description": "Contains a CA bundle that can be used to verify the kube-apiserver when using internal endpoints such as the internal service IP or kubernetes.default.svc. No other usage is guaranteed across distributions of Kubernetes clusters."
                },
                "creationTimestamp": "2025-09-20T00:37:26Z",
                "name": "kube-root-ca.crt",
                "namespace": "kube-node-lease",
                "resourceVersion": "1758328646287167012",
                "uid": "a74ad8ff-4ff9-4a2a-921a-bc4d70c859e8"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "ca.crt": "-----BEGIN CERTIFICATE-----\nMIIELDCCApSgAwIBAgIQdEkbUROVP0jzFt73weMS1TANBgkqhkiG9w0BAQsFADAv\nMS0wKwYDVQQDEyQxODY3YWYwMy1jZDQwLTQ5YjctYjVmZi1hMmNjZDk1MGVmZTYw\nIBcNMjUwOTE5MjMzMjU1WhgPMjA1NTA5MTMwMDMyNTVaMC8xLTArBgNVBAMTJDE4\nNjdhZjAzLWNkNDAtNDliNy1iNWZmLWEyY2NkOTUwZWZlNjCCAaIwDQYJKoZIhvcN\nAQEBBQADggGPADCCAYoCggGBAOC82Vl3cCMiiS59DLLtIUp8N87fXlBAMnfHVdim\nZYNDtwDNl3oPPq3LZkVfVIZb9cPawN7FwFnTdbdoRsn/JkbzHemBIUE8/4DkKvue\nJbQdQwdlkyjkIR2/WPkONZCpmy9459CQ3nv4fJP5S2kxKOj/IpmcDZRA/rrNnwAH\nJRRo0ay/lnC9+FV0l4bExA6SqpIAwJg62W6erthDQ5HV44WQdYvpK9etg0gO5aBO\n9Eg8lxIROF3UHdxF3RsUpiluf22FCuv+q81Y80Rc6g3xE82PzdFVIoNgnWaOckc3\naDurXlppOQ9DDW/Nd7AsunvFYw6AGm9wiSpAsMb7f2qGfk5YIe+17Eft0PVU90yx\ni3jQpaKvGUm0oI+x3buvpcQfpWP2FUprPmHtwcmTMKPhG9lJpISnusDcSA3AyERo\nEXRXgaXwqBRE0rdZVcpSvjesrndmHY79J9Ztxa1dVlgjFPZsWcK+CGb21FHolOH6\nWmJnis9t3SFuM15v/Li7ZvxatwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAgQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwf6mDlkM/wC9GjMC9APUkR2/CWQwDQYJ\nKoZIhvcNAQELBQADggGBADOvnShVMpCCxrA9JD1fuMbCY/XvtxRDscP6M1NbKW7K\nplXbJus7zR+nlGOILFUFZaxE2F11dnZVj8+wvPkNRZvWDyKIwInuFRe16z8skt8M\nAPUF2MRhLR0nA1gXegbTQLxAXbusToEZLarxoH+c/kpft9wvLd+XKvBKMaRFk252\nvTAv29pOH/61v9YQ521u+oOk+sBpcD7Uwj6z4yuci+j05hiTE2pSpiCRE1MNYXTi\n1sYZSo8vJsn5zSQwtLl57impnRHDj+HQK4JMxb4hfFi47Y2PISn6AwfBUggTsxve\ntfmuAay+FU4MXQkVi0Qi9G0t97zne63bqIlV2bXj+uR53jBn7uCAXD/DMeXwx1bp\nwxrHRSCjwhHtsDXxxX8K5LwHpYH+RSqyYx3vY0RUAM41r4g9y1Cp3sq7DHomqvm+\nKJ1avnqHDLWznEzzGIX2EuI6hx0qPdbf5z7CH3LlGP23Fs3BVrrgaw1TAVD6G174\nT6DWmKVVHdmH801y9fsQrA==\n-----END CERTIFICATE-----\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubernetes.io/description": "Contains a CA bundle that can be used to verify the kube-apiserver when using internal endpoints such as the internal service IP or kubernetes.default.svc. No other usage is guaranteed across distributions of Kubernetes clusters."
                },
                "creationTimestamp": "2025-09-20T00:37:26Z",
                "name": "kube-root-ca.crt",
                "namespace": "kube-public",
                "resourceVersion": "1758328646308991009",
                "uid": "539a33e3-665e-4b37-b851-5a75606125d2"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "status": "time: 2025-10-10 16:09:04.796148135 +0000 UTC\nautoscalerStatus: Running\nclusterWide:\n  health:\n    status: Healthy\n    nodeCounts:\n      registered:\n        total: 3\n        ready: 3\n        notStarted: 0\n      longUnregistered: 0\n      unregistered: 0\n    lastProbeTime: \"2025-10-10T16:09:04.796148135Z\"\n    lastTransitionTime: \"2025-10-03T12:38:34.101635386Z\"\n  scaleUp:\n    status: NoActivity\n    lastProbeTime: \"2025-10-10T16:09:04.796148135Z\"\n    lastTransitionTime: \"2025-10-09T01:21:08.135118814Z\"\n  scaleDown:\n    status: NoCandidates\n    lastProbeTime: \"2025-10-10T16:09:04.796148135Z\"\n    lastTransitionTime: \"2025-10-03T12:38:34.101635386Z\"\nnodeGroups:\n- name: https://www.googleapis.com/compute/v1/projects/mindmend-production/zones/asia-southeast1-a/instanceGroups/gke-mindmend-cluster-default-pool-3b075bf9-grp\n  health:\n    status: Healthy\n    nodeCounts:\n      registered:\n        total: 3\n        ready: 3\n        notStarted: 0\n      longUnregistered: 0\n      unregistered: 0\n    cloudProviderTarget: 3\n    minSize: 0\n    maxSize: 3\n    lastProbeTime: \"2025-10-10T16:09:04.796148135Z\"\n    lastTransitionTime: \"2025-10-03T12:38:34.101635386Z\"\n  scaleUp:\n    status: NoActivity\n    lastProbeTime: \"2025-10-10T16:09:04.796148135Z\"\n    lastTransitionTime: \"2025-10-03T12:38:34.101635386Z\"\n  scaleDown:\n    status: NoCandidates\n    lastProbeTime: \"2025-10-10T16:09:04.796148135Z\"\n    lastTransitionTime: \"2025-10-03T12:38:34.101635386Z\"\n- name: https://www.googleapis.com/compute/v1/projects/mindmend-production/zones/asia-southeast1-a/instanceGroups/gke-mindmend-cluster-gpu-pool-e144678a-grp\n  health:\n    status: Healthy\n    cloudProviderTarget: 0\n    minSize: 0\n    maxSize: 2\n  scaleUp:\n    status: NoActivity\n  scaleDown:\n    status: NoCandidates\n    lastProbeTime: \"2025-10-10T16:09:04.796148135Z\"\n    lastTransitionTime: \"2025-10-03T12:38:34.101635386Z\"\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "cluster-autoscaler.kubernetes.io/last-updated": "2025-10-10 16:09:04.796148135 +0000 UTC"
                },
                "creationTimestamp": "2025-10-03T12:38:20Z",
                "name": "cluster-autoscaler-status",
                "namespace": "kube-system",
                "resourceVersion": "1760112545403503005",
                "uid": "c15d7c4d-0871-4a67-98c0-70953f46819e"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "control-plane.alpha.kubernetes.io/leader": "{\"holderIdentity\":\"gke-65410496025c4a129600-70bc-d39d-vm\",\"leaseDurationSeconds\":15,\"acquireTime\":\"2025-10-03T12:38:20Z\",\"renewTime\":\"2025-10-10T16:09:05Z\",\"leaderTransitions\":3}"
                },
                "creationTimestamp": "2025-09-20T00:38:41Z",
                "name": "cluster-kubestore",
                "namespace": "kube-system",
                "resourceVersion": "1760112545258463017",
                "uid": "50dc63dc-4b50-4057-be2f-a79c59371444"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "core-metrics-exporter-config": "receivers:\n  kubenode:\n    endpoint: \"https://$KUBELET_HOST:10250\"\n    scrape_interval: 60s\n    cluster_name: mindmend-cluster\n    location: asia-southeast1-a\n    node_name: \"$NODE_NAME\"\n    kubernetes_service_host: \"$KUBERNETES_SERVICE_HOST\"\n    certificate_location: \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\"\n    use_watch: true\n  prometheus/nostarttime:\n    use_start_time_metric: false\n    config:\n      scrape_configs:\n      - job_name: \"self-observability\"\n        scrape_interval: 60s\n        static_configs:\n        - targets: [\"$HOST_LOOPBACK:8200\"]\n        metric_relabel_configs:\n        - source_labels: [ __name__ ]\n          target_label: gke_component_name\n          replacement: \"addons/gke_metrics_agent\"\n        - source_labels: [__name__]\n          target_label: container\n          replacement: \"gke-metrics-agent\"\n        - source_labels: [__name__]\n          target_label: pod\n          replacement: \"$POD_NAME\"\n        - source_labels: [__name__]\n          target_label: namespace\n          replacement: \"$POD_NAMESPACE\"\n        \n        - source_labels: [__name__]\n          regex: \"grpc_io_client_(completed_rpcs|roundtrip_latency_.*)\"\n          target_label: otelsvc_exporter\n          replacement: \"googlecloud\"\n        \n        - source_labels: [exporter]\n          target_label: otelsvc_exporter\n          replacement: ${ARG1}\n          regex: \"(.+)\"\n        - source_labels: [receiver]\n          target_label: otelsvc_receiver\n          replacement: ${ARG1}\n          regex: \"(.*)\"\n        - source_labels: [processor]\n          target_label: otelsvc_processor\n          replacement: ${ARG1}\n          regex: \"(.*)\"\n        - regex: \"service_name|service_instance_id|service_version|receiver|processor|exporter|transport\"\n          action: labeldrop\n      - job_name: \"self-observability-core-metrics\"\n        scrape_interval: 60s\n        static_configs:\n        - targets: [\"$HOST_LOOPBACK:8202\"]\n        metric_relabel_configs:\n        - source_labels: [ __name__ ]\n          target_label: gke_component_name\n          replacement: \"addons/gke_metrics_agent\"\n        - source_labels: [__name__]\n          target_label: container\n          replacement: \"core-metrics-exporter\"\n        - source_labels: [__name__]\n          target_label: pod\n          replacement: \"$POD_NAME\"\n        - source_labels: [__name__]\n          target_label: namespace\n          replacement: \"$POD_NAMESPACE\"\n        \n        - source_labels: [__name__]\n          regex: \"grpc_io_client_(completed_rpcs|roundtrip_latency_.*)\"\n          target_label: otelsvc_exporter\n          replacement: \"googlecloud\"\n        \n        - source_labels: [exporter]\n          target_label: otelsvc_exporter\n          replacement: ${ARG1}\n          regex: \"(.+)\"\n        - source_labels: [receiver]\n          target_label: otelsvc_receiver\n          replacement: ${ARG1}\n          regex: \"(.*)\"\n        - source_labels: [processor]\n          target_label: otelsvc_processor\n          replacement: ${ARG1}\n          regex: \"(.*)\"\n        - regex: \"service_name|service_instance_id|service_version|receiver|processor|exporter|transport\"\n          action: labeldrop\n  prometheus:\n    use_start_time_metric: true\n    start_time_metric_regex: \"^(.+_)*process_start_time_seconds$\"\n    allowed_metric_names:\n      \"process_start_time_seconds\": {}\n    config:\n      scrape_configs:\n      - job_name: \"addons\"\n        scrape_interval: 60s\n        kubernetes_sd_configs:\n        - role: pod\n          namespaces:\n            names:\n            - \"kube-system\"\n            # Only ever used in GKE Autopilot.\n            - gke-gmp-system\n            # Only ever used in GKE Standard.\n            - gmp-system\n          selectors:\n          - role: pod\n            field: \"spec.nodeName=$NODE_NAME,status.phase=Running\"\n        relabel_configs:\n        - source_labels: [ __meta_kubernetes_pod_container_port_name ]\n          regex: \".*metrics\"\n          action: keep\n        - source_labels: [ __meta_kubernetes_pod_annotation_components_gke_io_component_name ]\n          regex: \"^(fluentbit|managed-prometheus)$\"\n          action: keep\n        - source_labels: [ __meta_kubernetes_pod_annotationpresent_monitoring_gke_io_path, __meta_kubernetes_pod_annotation_monitoring_gke_io_path ]\n          regex: \"true;(.*)\"\n          target_label: __metrics_path__\n        - source_labels: []\n          replacement: true\n          target_label: __per_container_metric\n        - source_labels: [ __meta_kubernetes_pod_annotation_components_gke_io_component_name ]\n          target_label: gke_component_name\n          replacement: \"addons/${ARG1}\"\n        - source_labels: [ __meta_kubernetes_pod_name, __per_container_metric ]\n          regex: \"(.*);true\"\n          target_label: pod\n        - source_labels: [ __meta_kubernetes_pod_container_name, __per_container_metric ]\n          regex: \"(.*);true\"\n          target_label: container\n        - source_labels: [ __meta_kubernetes_namespace, __per_container_metric ]\n          regex: \"(.*);true\"\n          target_label: namespace\n        - source_labels: [ gke_component_name ]\n          target_label: gke_component_name\n          regex: \"(.*)-(.*)\"\n          replacement: \"${ARG1}_${ARG2}\"\nprocessors:\n  batch:\n    send_batch_max_size: 200\n    send_batch_size: 200\n    timeout: 15s\n  resource:\n    attributes:\n    - key: opencensus.resourcetype\n      action: upsert\n      value: \"host\"\n    - key: cloud.zone\n      action: upsert\n      value: asia-southeast1-a\n    - key: host.name\n      action: upsert\n      value: \"$NODE_NAME\"\n    - key: k8s.cluster.name\n      action: upsert\n      value: mindmend-cluster\n  metrics_export:\n    common_prefix: \"kubernetes.io/internal\"\n    detect_container_metrics: true\n    \n    allowed_labels:\n    - \"project\"\n    - \"location\"\n    - \"cluster_name\"\n    - \"node_name\"\n    - \"namespace\"\n    - \"pod\"\n    - \"container\"\n    export_map:\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/otelcol_receiver_accepted_metric_points\":\n        allowed_labels:\n        - \"otelsvc_receiver\"\n        export_name: \"kubernetes.io/internal/addons/gke_otelsvc/receiver/received_timeseries\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/otelcol_receiver_refused_metric_points\":\n        allowed_labels:\n        - \"otelsvc_receiver\"\n        export_name: \"kubernetes.io/internal/addons/gke_otelsvc/receiver/dropped_timeseries\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/receiver_accepted_metric_points\":\n        allowed_labels:\n        - \"otelsvc_receiver\"\n        export_name: \"kubernetes.io/internal/addons/gke_otelsvc/receiver/received_timeseries\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/receiver_refused_metric_points\":\n       allowed_labels:\n       - \"otelsvc_receiver\"\n       export_name: \"kubernetes.io/internal/addons/gke_otelsvc/receiver/dropped_timeseries\"\n       export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/processor_accepted_metric_points\":\n       allowed_labels:\n       - \"otelsvc_processor\"\n       export_name: \"kubernetes.io/internal/addons/gke_otelsvc/processor/received_timeseries_count\"\n       export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/processor_dropped_metric_points\":\n       allowed_labels:\n       - \"otelsvc_processor\"\n       export_name: \"kubernetes.io/internal/addons/gke_otelsvc/processor/dropped_timeseries_count\"\n       export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/processor_refused_metric_points\":\n       allowed_labels:\n       - \"otelsvc_processor\"\n       export_name: \"kubernetes.io/internal/addons/gke_otelsvc/processor/refused_timeseries_count\"\n       export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/exporter_sent_metric_points\":\n       allowed_labels:\n       - \"otelsvc_exporter\"\n       export_name: \"kubernetes.io/internal/addons/gke_otelsvc/exporter/received_timeseries\"\n       export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/exporter_send_failed_metric_points\":\n       allowed_labels:\n       - \"otelsvc_exporter\"\n       export_name: \"kubernetes.io/internal/addons/gke_otelsvc/exporter/dropped_timeseries\"\n       export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/http_client_roundtrip_latency\":\n       allowed_labels:\n       - \"otelsvc_receiver\"\n       - \"http_client_host\"\n       export_name: \"kubernetes.io/internal/addons/gke_otelsvc/http/client/roundtrip_latency\"\n       export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/http_client_completed_count\":\n       allowed_labels:\n       - \"otelsvc_receiver\"\n       - \"http_client_host\"\n       - \"http_client_status\"\n       export_name: \"kubernetes.io/internal/addons/gke_otelsvc/http/client/completed_count\"\n       export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/grpc_io_client_completed_rpcs\":\n       allowed_labels:\n       - \"otelsvc_exporter\"\n       - \"otelsvc_receiver\"\n       - \"grpc_client_method\"\n       - \"grpc_client_status\"\n       export_name: \"kubernetes.io/internal/addons/gke_otelsvc/grpc.io/client/completed_rpcs\"\n       export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/grpc_io_client_roundtrip_latency\":\n       allowed_labels:\n       - \"otelsvc_exporter\"\n       - \"otelsvc_receiver\"\n       - \"grpc_client_method\"\n       export_name: \"kubernetes.io/internal/addons/gke_otelsvc/grpc.io/client/roundtrip_latency\"\n       export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/cache_operation_count\":\n       allowed_labels:\n       - \"cache_name\"\n       - \"operation_type\"\n       export_name: \"kubernetes.io/internal/addons/gke_otelsvc/cache/operation_count\"\n       export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/cache_operation_duration\":\n       allowed_labels:\n       - \"cache_name\"\n       - \"operation_type\"\n       export_name: \"kubernetes.io/internal/addons/gke_otelsvc/cache/operation_duration\"\n       export_as_int: true\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/cache_item_count\":\n       allowed_labels:\n       - \"cache_name\"\n       export_name: \"kubernetes.io/internal/addons/gke_otelsvc/cache/item_count\"\n       export_as_int: true\n    - \"kubernetes.io/internal/addons/fluentbit/fluentbit_stackdriver_output_records_latency_seconds\":\n        allowed_labels:\n        - \"name\"\n        export_name: \"kubernetes.io/internal/addons/fluentbit/stackdriver_output_records_latency_seconds\"\n    - \"kubernetes.io/internal/addons/fluentbit/fluentbit_stackdriver_output_entries_total\":\n        allowed_labels:\n        - \"success\"\n        export_name: \"kubernetes.io/internal/addons/fluentbit/stackdriver_output_entries_total\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/fluentbit/fluentbit_stackdriver_output_entries_processed\":\n        allowed_labels: []\n        export_name: \"kubernetes.io/internal/addons/fluentbit/stackdriver_output_entries_processed\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/fluentbit/fluentbit_stackdriver_output_requests_total\":\n        allowed_labels:\n        - \"code\"\n        export_name: \"kubernetes.io/internal/addons/fluentbit/stackdriver_output_requests_total\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/fluentbit/fluentbit_stackdriver_output_logging_panics\":\n        allowed_labels: []\n        export_name: \"kubernetes.io/internal/addons/fluentbit/stackdriver_output_logging_panics\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/alertmanager_alerts_received_total\":\n        allowed_labels:\n        - \"status\"\n        - \"version\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/controller_runtime_active_workers\":\n        allowed_labels:\n        - \"controller\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/controller_runtime_max_concurrent_reconciles\":\n        allowed_labels:\n        - \"controller\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/controller_runtime_reconcile_errors_total\":\n        allowed_labels:\n        - \"controller\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/controller_runtime_reconcile_time_seconds\":\n        allowed_labels:\n        - \"controller\"\n    - \"kubernetes.io/internal/addons/managed_prometheus/controller_runtime_reconcile_total\":\n        allowed_labels:\n        - \"controller\"\n        - \"result\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/gcm_export_pending_requests\":\n        allowed_labels: []\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/gcm_export_projects_per_batch\":\n        allowed_labels: []\n    - \"kubernetes.io/internal/addons/managed_prometheus/gcm_export_samples_dropped_total\":\n        allowed_labels:\n        - \"reason\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/gcm_export_samples_exported_total\":\n        allowed_labels: []\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/gcm_export_samples_per_rpc_batch\":\n        allowed_labels: []\n    - \"kubernetes.io/internal/addons/managed_prometheus/gcm_export_samples_sent_total\":\n        allowed_labels: []\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/gcm_export_send_iterations_total\":\n        allowed_labels: []\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/gcm_export_shard_process_pending_total\":\n        allowed_labels: []\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/gcm_export_shard_process_samples_taken\":\n        allowed_labels: []\n    - \"kubernetes.io/internal/addons/managed_prometheus/gcm_export_shard_process_total\":\n        allowed_labels: []\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/grpc_client_handled_total\":\n        allowed_labels:\n        - \"grpc_code\"\n        - \"grpc_method\"\n        - \"grpc_service\"\n        - \"grpc_type\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/grpc_client_handling_seconds\":\n        allowed_labels:\n        - \"grpc_method\"\n        - \"grpc_service\"\n        - \"grpc_type\"\n    - \"kubernetes.io/internal/addons/managed_prometheus/prometheus_notifications_sent_total\":\n        allowed_labels:\n        - \"alertmanager\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/prometheus_rule_evaluations_total\":\n        allowed_labels:\n        - \"rule_group\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/prometheus_rule_evaluation_failures_total\":\n        allowed_labels:\n        - \"rule_group\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/rule_evaluator_query_requests_total\":\n        allowed_labels:\n        - \"code\"\n        - \"method\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/prometheus_rule_group_iterations_missed_total\":\n        allowed_labels:\n        - \"rule_group\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/prometheus_rule_group_iterations_total\":\n        allowed_labels:\n        - \"rule_group\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/reloader_reloads_failed_total\":\n        allowed_labels: []\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/reloader_reloads_total\":\n        allowed_labels: []\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/workqueue_adds_total\":\n        allowed_labels:\n        - \"name\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/workqueue_depth\":\n        allowed_labels:\n        - \"name\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/workqueue_retries_total\":\n        allowed_labels:\n        - \"name\"\n        export_as_int: true\n    - \"kubernetes.io/internal/addons/managed_prometheus/workqueue_work_duration_seconds\":\n        allowed_labels:\n        - \"name\"\n    - \"kubernetes.io/internal/addons/gke_metrics_agent/kubernetes_io_internal_node_token_broker_status\":\n        allowed_labels:\n        - \"status\"\n        - \"mode\"\n        export_name: \"kubernetes.io/internal/node_token_broker_status\"\n        export_as_int: true\nexporters:\n  googlecloud:\n    endpoint: monitoring.googleapis.com:443\n    timeout: 45s\n    retry_on_failure:\n      enabled: false\n    sending_queue:\n      enabled: false\n    \n    metric:\n      skip_create_descriptor: true\n    \nextensions:\n  observability:\n    metrics_export_enabled: false\n  health_check:\n    endpoint: \"0.0.0.0:8203\"\nservice:\n  extensions:\n  - observability\n  \n  - health_check\n  pipelines:\n    metrics/kube:\n      receivers:\n        - kubenode\n      exporters:\n        - googlecloud\n    metrics/prom:\n      receivers:\n        - prometheus\n        - prometheus/nostarttime\n      processors:\n        - resource\n        - metrics_export\n        - batch\n      exporters:\n        - googlecloud\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "gke-metrics-agent",
                    "components.gke.io/component-version": "2.133.22-gke.0"
                },
                "creationTimestamp": "2025-09-20T00:38:21Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile"
                },
                "name": "core-metrics-exporter-conf",
                "namespace": "kube-system",
                "resourceVersion": "1758328701373551012",
                "uid": "938c16cb-ff76-43ba-be15-254ef8a48a3f"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "efficiency-daemon-config.yaml": "drivers:\n- cpu_limits\n- memory_limits\n- cpuset_cpus\n- ek_cpu_limits\ncpuBuffer: 0m\ncpuMinLimit: 840m\nmemoryBuffer: 200Mi\nmemoryBufferPerGiNodeCapacity: 4.5Mi\nmemoryMinLimit: 1.5Gi\nmanagedNamespaces:\n- kube-system\n- gke-gmp-system\n- gke-managed-cim\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "efficiency-daemon",
                    "components.gke.io/component-version": "33.5.0"
                },
                "creationTimestamp": "2025-09-20T00:38:13Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile"
                },
                "name": "efficiency-daemon-config",
                "namespace": "kube-system",
                "resourceVersion": "1758328693168767007",
                "uid": "186de523-f655-46ca-afdf-b63eda27253e"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "client-ca-file": "-----BEGIN CERTIFICATE-----\nMIIELDCCApSgAwIBAgIQdEkbUROVP0jzFt73weMS1TANBgkqhkiG9w0BAQsFADAv\nMS0wKwYDVQQDEyQxODY3YWYwMy1jZDQwLTQ5YjctYjVmZi1hMmNjZDk1MGVmZTYw\nIBcNMjUwOTE5MjMzMjU1WhgPMjA1NTA5MTMwMDMyNTVaMC8xLTArBgNVBAMTJDE4\nNjdhZjAzLWNkNDAtNDliNy1iNWZmLWEyY2NkOTUwZWZlNjCCAaIwDQYJKoZIhvcN\nAQEBBQADggGPADCCAYoCggGBAOC82Vl3cCMiiS59DLLtIUp8N87fXlBAMnfHVdim\nZYNDtwDNl3oPPq3LZkVfVIZb9cPawN7FwFnTdbdoRsn/JkbzHemBIUE8/4DkKvue\nJbQdQwdlkyjkIR2/WPkONZCpmy9459CQ3nv4fJP5S2kxKOj/IpmcDZRA/rrNnwAH\nJRRo0ay/lnC9+FV0l4bExA6SqpIAwJg62W6erthDQ5HV44WQdYvpK9etg0gO5aBO\n9Eg8lxIROF3UHdxF3RsUpiluf22FCuv+q81Y80Rc6g3xE82PzdFVIoNgnWaOckc3\naDurXlppOQ9DDW/Nd7AsunvFYw6AGm9wiSpAsMb7f2qGfk5YIe+17Eft0PVU90yx\ni3jQpaKvGUm0oI+x3buvpcQfpWP2FUprPmHtwcmTMKPhG9lJpISnusDcSA3AyERo\nEXRXgaXwqBRE0rdZVcpSvjesrndmHY79J9Ztxa1dVlgjFPZsWcK+CGb21FHolOH6\nWmJnis9t3SFuM15v/Li7ZvxatwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAgQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwf6mDlkM/wC9GjMC9APUkR2/CWQwDQYJ\nKoZIhvcNAQELBQADggGBADOvnShVMpCCxrA9JD1fuMbCY/XvtxRDscP6M1NbKW7K\nplXbJus7zR+nlGOILFUFZaxE2F11dnZVj8+wvPkNRZvWDyKIwInuFRe16z8skt8M\nAPUF2MRhLR0nA1gXegbTQLxAXbusToEZLarxoH+c/kpft9wvLd+XKvBKMaRFk252\nvTAv29pOH/61v9YQ521u+oOk+sBpcD7Uwj6z4yuci+j05hiTE2pSpiCRE1MNYXTi\n1sYZSo8vJsn5zSQwtLl57impnRHDj+HQK4JMxb4hfFi47Y2PISn6AwfBUggTsxve\ntfmuAay+FU4MXQkVi0Qi9G0t97zne63bqIlV2bXj+uR53jBn7uCAXD/DMeXwx1bp\nwxrHRSCjwhHtsDXxxX8K5LwHpYH+RSqyYx3vY0RUAM41r4g9y1Cp3sq7DHomqvm+\nKJ1avnqHDLWznEzzGIX2EuI6hx0qPdbf5z7CH3LlGP23Fs3BVrrgaw1TAVD6G174\nT6DWmKVVHdmH801y9fsQrA==\n-----END CERTIFICATE-----\n",
                "requestheader-allowed-names": "[\"aggregator\"]",
                "requestheader-client-ca-file": "-----BEGIN CERTIFICATE-----\nMIIELDCCApSgAwIBAgIQVbHWpnuC3FsHSaPZiyo4pDANBgkqhkiG9w0BAQsFADAv\nMS0wKwYDVQQDEyRjOGI5YmE1ZC04ZTE4LTQ4NzAtOTU1MS01YWMzYzU3ZDI3Yjgw\nIBcNMjUwOTE5MjMzNDI3WhgPMjA1NTA5MTMwMDM0MjdaMC8xLTArBgNVBAMTJGM4\nYjliYTVkLThlMTgtNDg3MC05NTUxLTVhYzNjNTdkMjdiODCCAaIwDQYJKoZIhvcN\nAQEBBQADggGPADCCAYoCggGBANJ171hlaqHD7gQ7vAfbJ5z/7qWOfph21sQWyIGm\nzphfGyg2KKqIyCAl6U+HfcuEExF+UhyZfC0lxPqCP4GrRGvZss+lWromW+p9EzXb\nsH+4pvS0jeOSxKniTNlGMY0kfLua5OANx5TWoUxdronLREjlmU+ls+Zg3dEUS8aG\na3GT6zgntHVev+/iy49+up/OqJypZ2+zNTv3WSvgXRm8ninJaGW51Zllg7mj3WSe\nRp25uA9SLqGa4k2VtYHgQr7n7PzjchfWRAxjYP+MCYE0CRlJWH84yvc73BKg3Oj+\nJJ+4HlTVSUyIfxyINw0k5GPoJkDcqttyJP24fwAzISObKAJxUMRaG4gyi+E+bvbl\ncuvvovvII/FphE6bubEYMTbZNqkOYQe5MfzRSNDR3aB45FtP6G6+eSZqIymh3SrO\nIF5WESSgSIRogbPJDdg3sm4eH4n99GcIQ3Agoz9P4UgH89+g0nHes6PVIww4oBQ+\nUvEPdLSVU1QSMlS8+3yBRyxG7wIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAgQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUnx1cUrPS7O7bQZ5ettVFSS3XRJgwDQYJ\nKoZIhvcNAQELBQADggGBAB34In3ZCtAJpK5k7idxWNmDxmL7+hD5v9kPJfH/c4Ae\ngUatBP2lTa2492dMeBAIiewo7VMOMeqtJNE431uzMBIeiPF271YuZUmwYNr5vhP7\nKppGE+ve0m3unZtnAUjyM/PkBrNXIf9WB4m3zZmZ6n/YbwMK23D7IXiDiiEUDoNO\nyoFKbIBa9kAl96JS7t7XUaO1vg6B/U0zKrkRpmOaRMvwX1azhz08hFQAJud5o5Rx\nUC+PzodAJWcLkQ552fH9z3FIhXktqqMBCySCxLv6GAYWzvnZc7if4lj6xsovmS5E\nRDYVcS+3RTJM3g06g+sik305Vd+s2A+6wrvK7OWnsaOOC/aP06b8u79RSoE9m/NH\nviZRkDwI5byqd+9gPmfk8enn9S6Wt+ejC3Xc13WOZj6IYnk+4L6J6CdCSI8hcHQB\nJxRg2lEiLAypavIP322jrsoo8VpZp0y8up314CGXiq81mXzAuKpajMtQxliPYRt5\nbI9jmgQZbXM0Jz4gC+fWnA==\n-----END CERTIFICATE-----\n",
                "requestheader-extra-headers-prefix": "[\"X-Remote-Extra-\"]",
                "requestheader-group-headers": "[\"X-Remote-Group\"]",
                "requestheader-username-headers": "[\"X-Remote-User\"]"
            },
            "kind": "ConfigMap",
            "metadata": {
                "creationTimestamp": "2025-09-20T00:36:18Z",
                "name": "extension-apiserver-authentication",
                "namespace": "kube-system",
                "resourceVersion": "1758328578398831002",
                "uid": "d6d03b78-1b6b-46f9-8182-993c836be69b"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "fluent-bit.conf": "[SERVICE]\n    Flush         5\n    Grace         120\n    Log_Level     info\n    \n    Log_File      /var/log/fluentbit.log\n    Daemon        off\n    Parsers_File  parsers.conf\n    HTTP_Server   On\n    HTTP_Listen   0.0.0.0\n    HTTP_PORT     2020\n\n\n[INPUT]\n    Name             tail\n    Alias            kube_containers_kube-system\n    Tag              kube_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003ccontainer_name\u003e\n    Tag_Regex        (?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cnamespace_name\u003e[^_]+)_(?\u003ccontainer_name\u003e.+)-\n    Path             /var/log/containers/*_kube-system_*.log\n    DB               /var/lib/google-fluentbit/pos-files/flb_kube_kube-system.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    5MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            kube_containers_istio-system\n    Tag              kube_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003ccontainer_name\u003e\n    Tag_Regex        (?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cnamespace_name\u003e[^_]+)_(?\u003ccontainer_name\u003e.+)-\n    Path             /var/log/containers/*_istio-system_*.log\n    DB               /var/lib/google-fluentbit/pos-files/flb_kube_istio-system.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    5MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            kube_containers_knative-serving\n    Tag              kube_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003ccontainer_name\u003e\n    Tag_Regex        (?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cnamespace_name\u003e[^_]+)_(?\u003ccontainer_name\u003e.+)-\n    Path             /var/log/containers/*_knative-serving_*.log\n    DB               /var/lib/google-fluentbit/pos-files/flb_kube_knative-serving.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    5MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            kube_containers_gke-system\n    Tag              kube_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003ccontainer_name\u003e\n    Tag_Regex        (?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cnamespace_name\u003e[^_]+)_(?\u003ccontainer_name\u003e.+)-\n    Path             /var/log/containers/*_gke-system_*.log\n    DB               /var/lib/google-fluentbit/pos-files/flb_kube_gke-system.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    5MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            kube_containers_config-management-system\n    Tag              kube_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003ccontainer_name\u003e\n    Tag_Regex        (?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cnamespace_name\u003e[^_]+)_(?\u003ccontainer_name\u003e.+)-\n    Path             /var/log/containers/*_config-management-system_*.log\n    DB               /var/lib/google-fluentbit/pos-files/flb_kube_config-management-system.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    5MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            kube_containers_gmp-system\n    Tag              kube_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003ccontainer_name\u003e\n    Tag_Regex        (?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cnamespace_name\u003e[^_]+)_(?\u003ccontainer_name\u003e.+)-\n    Path             /var/log/containers/*_gmp-system_*.log\n    DB               /var/lib/google-fluentbit/pos-files/flb_kube_gmp-system.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    5MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            kube_containers_gke-managed-cim\n    Tag              kube_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003ccontainer_name\u003e\n    Tag_Regex        (?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cnamespace_name\u003e[^_]+)_(?\u003ccontainer_name\u003e.+)-\n    Path             /var/log/containers/*_gke-managed-cim_*.log\n    DB               /var/lib/google-fluentbit/pos-files/flb_kube_gke-managed-cim.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    5MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            kube_containers_gke-managed-volumepopulator\n    Tag              kube_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003ccontainer_name\u003e\n    Tag_Regex        (?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cnamespace_name\u003e[^_]+)_(?\u003ccontainer_name\u003e.+)-\n    Path             /var/log/containers/*_gke-managed-volumepopulator_*.log\n    DB               /var/lib/google-fluentbit/pos-files/flb_kube_gke-managed-volumepopulator.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    5MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            kube_containers_gke-managed-checkpointing\n    Tag              kube_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003ccontainer_name\u003e\n    Tag_Regex        (?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cnamespace_name\u003e[^_]+)_(?\u003ccontainer_name\u003e.+)-\n    Path             /var/log/containers/*_gke-managed-checkpointing_*.log\n    DB               /var/lib/google-fluentbit/pos-files/flb_kube_gke-managed-checkpointing.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    5MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            kube_containers_gke-managed-lustrecsi\n    Tag              kube_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003ccontainer_name\u003e\n    Tag_Regex        (?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cnamespace_name\u003e[^_]+)_(?\u003ccontainer_name\u003e.+)-\n    Path             /var/log/containers/*_gke-managed-lustrecsi_*.log\n    DB               /var/lib/google-fluentbit/pos-files/flb_kube_gke-managed-lustrecsi.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    5MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n\n\n[INPUT]\n    Name             tail\n    Alias            kube_containers\n    Tag              kube_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003ccontainer_name\u003e\n    Tag_Regex        (?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cnamespace_name\u003e[^_]+)_(?\u003ccontainer_name\u003e.+)-\n    Path             /var/log/containers/*.log\n    Exclude_Path     /var/log/containers/*_kube-system_*.log,/var/log/containers/*_istio-system_*.log,/var/log/containers/*_knative-serving_*.log,/var/log/containers/*_gke-system_*.log,/var/log/containers/*_config-management-system_*.log,/var/log/containers/*_gmp-system_*.log,/var/log/containers/*_gke-managed-cim_*.log,/var/log/containers/*_gke-managed-volumepopulator_*.log,/var/log/containers/*_gke-managed-checkpointing_*.log,/var/log/containers/*_gke-managed-lustrecsi_*.log\n    DB               /var/lib/google-fluentbit/pos-files/flb_kube.db\n    Buffer_Max_Size  20MB\n    Mem_Buf_Limit    100MB\n    Skip_Long_Lines  On\n    Refresh_Interval 1\n    Read_from_Head   True\n\n\n[FILTER]\n    Name         parser\n    Match        kube_*\n    Key_Name     log\n    Reserve_Data True\n    Parser       containerd\n\n# This input is used  to watch changes to Kubernetes pod log files live in the\n# directory /var/log/pods/NAMESPACE_NAME_UID. The file name is used to\n# capture the pod namespace, name and runtime name.\n\n\n[INPUT]\n    Name             tail\n    Alias            gvisor_kube-system\n    Tag              kube-pod_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003cruntime\u003e\n    Tag_Regex        \\/var\\/log\\/pods\\/(?\u003cnamespace_name\u003e[^_]+)_(?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cid\u003e[\\-a-z0-9]+)\\/(?\u003cruntime\u003e[a-z]+)\\.log\n    Path             /var/log/pods/kube-system_*/*\n    DB               /var/lib/google-fluentbit/pos-files/gvisor_kube-system.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    1MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            gvisor_istio-system\n    Tag              kube-pod_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003cruntime\u003e\n    Tag_Regex        \\/var\\/log\\/pods\\/(?\u003cnamespace_name\u003e[^_]+)_(?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cid\u003e[\\-a-z0-9]+)\\/(?\u003cruntime\u003e[a-z]+)\\.log\n    Path             /var/log/pods/istio-system_*/*\n    DB               /var/lib/google-fluentbit/pos-files/gvisor_istio-system.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    1MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            gvisor_knative-serving\n    Tag              kube-pod_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003cruntime\u003e\n    Tag_Regex        \\/var\\/log\\/pods\\/(?\u003cnamespace_name\u003e[^_]+)_(?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cid\u003e[\\-a-z0-9]+)\\/(?\u003cruntime\u003e[a-z]+)\\.log\n    Path             /var/log/pods/knative-serving_*/*\n    DB               /var/lib/google-fluentbit/pos-files/gvisor_knative-serving.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    1MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            gvisor_gke-system\n    Tag              kube-pod_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003cruntime\u003e\n    Tag_Regex        \\/var\\/log\\/pods\\/(?\u003cnamespace_name\u003e[^_]+)_(?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cid\u003e[\\-a-z0-9]+)\\/(?\u003cruntime\u003e[a-z]+)\\.log\n    Path             /var/log/pods/gke-system_*/*\n    DB               /var/lib/google-fluentbit/pos-files/gvisor_gke-system.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    1MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            gvisor_config-management-system\n    Tag              kube-pod_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003cruntime\u003e\n    Tag_Regex        \\/var\\/log\\/pods\\/(?\u003cnamespace_name\u003e[^_]+)_(?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cid\u003e[\\-a-z0-9]+)\\/(?\u003cruntime\u003e[a-z]+)\\.log\n    Path             /var/log/pods/config-management-system_*/*\n    DB               /var/lib/google-fluentbit/pos-files/gvisor_config-management-system.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    1MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            gvisor_gmp-system\n    Tag              kube-pod_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003cruntime\u003e\n    Tag_Regex        \\/var\\/log\\/pods\\/(?\u003cnamespace_name\u003e[^_]+)_(?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cid\u003e[\\-a-z0-9]+)\\/(?\u003cruntime\u003e[a-z]+)\\.log\n    Path             /var/log/pods/gmp-system_*/*\n    DB               /var/lib/google-fluentbit/pos-files/gvisor_gmp-system.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    1MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            gvisor_gke-managed-cim\n    Tag              kube-pod_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003cruntime\u003e\n    Tag_Regex        \\/var\\/log\\/pods\\/(?\u003cnamespace_name\u003e[^_]+)_(?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cid\u003e[\\-a-z0-9]+)\\/(?\u003cruntime\u003e[a-z]+)\\.log\n    Path             /var/log/pods/gke-managed-cim_*/*\n    DB               /var/lib/google-fluentbit/pos-files/gvisor_gke-managed-cim.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    1MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            gvisor_gke-managed-volumepopulator\n    Tag              kube-pod_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003cruntime\u003e\n    Tag_Regex        \\/var\\/log\\/pods\\/(?\u003cnamespace_name\u003e[^_]+)_(?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cid\u003e[\\-a-z0-9]+)\\/(?\u003cruntime\u003e[a-z]+)\\.log\n    Path             /var/log/pods/gke-managed-volumepopulator_*/*\n    DB               /var/lib/google-fluentbit/pos-files/gvisor_gke-managed-volumepopulator.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    1MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            gvisor_gke-managed-checkpointing\n    Tag              kube-pod_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003cruntime\u003e\n    Tag_Regex        \\/var\\/log\\/pods\\/(?\u003cnamespace_name\u003e[^_]+)_(?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cid\u003e[\\-a-z0-9]+)\\/(?\u003cruntime\u003e[a-z]+)\\.log\n    Path             /var/log/pods/gke-managed-checkpointing_*/*\n    DB               /var/lib/google-fluentbit/pos-files/gvisor_gke-managed-checkpointing.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    1MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            gvisor_gke-managed-lustrecsi\n    Tag              kube-pod_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003cruntime\u003e\n    Tag_Regex        \\/var\\/log\\/pods\\/(?\u003cnamespace_name\u003e[^_]+)_(?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cid\u003e[\\-a-z0-9]+)\\/(?\u003cruntime\u003e[a-z]+)\\.log\n    Path             /var/log/pods/gke-managed-lustrecsi_*/*\n    DB               /var/lib/google-fluentbit/pos-files/gvisor_gke-managed-lustrecsi.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    1MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n\n\n[INPUT]\n    Name             tail\n    Alias            gvisor\n    Tag              kube-pod_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003cruntime\u003e\n    Tag_Regex        \\/var\\/log\\/pods\\/(?\u003cnamespace_name\u003e[^_]+)_(?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cid\u003e[\\-a-z0-9]+)\\/(?\u003cruntime\u003e[a-z]+)\\.log\n    Exclude_Path     /var/log/pods/*/*_panic.log,/var/log/pods/kube-system_*/*,/var/log/pods/istio-system_*/*,/var/log/pods/knative-serving_*/*,/var/log/pods/gke-system_*/*,/var/log/pods/config-management-system_*/*,/var/log/pods/gmp-system_*/*,/var/log/pods/gke-managed-cim_*/*,/var/log/pods/gke-managed-volumepopulator_*/*,/var/log/pods/gke-managed-checkpointing_*/*,/var/log/pods/gke-managed-lustrecsi_*/*\n    Path             /var/log/pods/*/*.log\n    DB               /var/lib/google-fluentbit/pos-files/gvisor.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    1MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n[INPUT]\n    Name             tail\n    Alias            gvisor_panic\n    Tag              kube-pod_\u003cnamespace_name\u003e_\u003cpod_name\u003e_\u003cruntime\u003epanic\n    Tag_Regex        \\/var\\/log\\/pods\\/(?\u003cnamespace_name\u003e[^_]+)_(?\u003cpod_name\u003e[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?\u003cid\u003e[\\-a-z0-9]+)\\/(?\u003cruntime\u003e[a-z]+)_panic\\.log\n    Exclude_Path     /var/log/pods/kube-system_*/*,/var/log/pods/istio-system_*/*,/var/log/pods/knative-serving_*/*,/var/log/pods/gke-system_*/*,/var/log/pods/config-management-system_*/*,/var/log/pods/gmp-system_*/*,/var/log/pods/gke-managed-cim_*/*,/var/log/pods/gke-managed-volumepopulator_*/*,/var/log/pods/gke-managed-checkpointing_*/*,/var/log/pods/gke-managed-lustrecsi_*/*\n    Path             /var/log/pods/*/*_panic.log\n    DB               /var/lib/google-fluentbit/pos-files/gvisor_panic.db\n    Buffer_Max_Size  1MB\n    Mem_Buf_Limit    1MB\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n\n# Example:\n# Dec 21 23:17:22 gke-foo-1-1-4b5cbd14-node-4eoj startupscript: Finished running startup script /var/run/google.startup.script\n[INPUT]\n    Name   tail\n    Parser syslog\n    Path   /var/log/startupscript.log\n    DB     /var/lib/google-fluentbit/pos-files/startupscript.db\n    Alias  startupscript\n    Tag    startupscript\n\n# Logs from anetd for policy action\n[INPUT]\n    Name             tail\n    Parser           network-log\n    Alias            policy-action\n    Tag              policy-action\n    Path             /var/log/network/policy_action.log\n    DB               /var/lib/google-fluentbit/pos-files/policy-action.db\n    Skip_Long_Lines  On\n    Refresh_Interval 5\n    Read_from_Head   True\n\n# Example:\n# I1118 21:26:53.975789       6 proxier.go:1096] Port \"nodePort for kube-system/default-http-backend:http\" (:31429/tcp) was open before and is still needed\n[INPUT]\n    Name            tail\n    Alias           kube-proxy\n    Tag             kube-proxy\n    Path            /var/log/kube-proxy.log\n    DB              /var/lib/google-fluentbit/pos-files/kube-proxy.db\n    Buffer_Max_Size 1MB\n    Mem_Buf_Limit   1MB\n    Parser          glog\n    Read_from_Head  True\n\n# Logs from systemd-journal for interesting services.\n\n[INPUT]\n    Name            systemd\n    Alias           docker\n    Tag             docker\n    Systemd_Filter  _SYSTEMD_UNIT=docker.service\n    Path            /var/log/journal\n    DB              /var/lib/google-fluentbit/pos-files/docker.db\n    Mem_Buf_Limit   1MB\n\n[INPUT]\n    Name            systemd\n    Alias           kubelet\n    Tag             kubelet\n    Systemd_Filter  _SYSTEMD_UNIT=kubelet.service\n    Path            /var/log/journal\n    DB              /var/lib/google-fluentbit/pos-files/kubelet.db\n    Mem_Buf_Limit   1MB\n\n[INPUT]\n    Name            systemd\n    Alias           kube-node-installation\n    Tag             kube-node-installation\n    Systemd_Filter  _SYSTEMD_UNIT=kube-node-installation.service\n    Path            /var/log/journal\n    DB              /var/lib/google-fluentbit/pos-files/kube-node-installation.db\n    Mem_Buf_Limit   1MB\n\n[INPUT]\n    Name            systemd\n    Alias           kube-node-configuration\n    Tag             kube-node-configuration\n    Systemd_Filter  _SYSTEMD_UNIT=kube-node-configuration.service\n    Path            /var/log/journal\n    DB              /var/lib/google-fluentbit/pos-files/kube-node-configuration.db\n    Mem_Buf_Limit   1MB\n\n[INPUT]\n    Name            systemd\n    Alias           kube-logrotate\n    Tag             kube-logrotate\n    Systemd_Filter  _SYSTEMD_UNIT=kube-logrotate.service\n    Path            /var/log/journal\n    DB              /var/lib/google-fluentbit/pos-files/kube-logrotate.db\n    Mem_Buf_Limit   1MB\n\n[INPUT]\n    Name            systemd\n    Alias           node-problem-detector\n    Tag             node-problem-detector\n    Systemd_Filter  _SYSTEMD_UNIT=node-problem-detector.service\n    Path            /var/log/journal\n    DB              /var/lib/google-fluentbit/pos-files/node-problem-detector.db\n    Mem_Buf_Limit   1MB\n\n[INPUT]\n    Name            systemd\n    Alias           kube-container-runtime-monitor\n    Tag             kube-container-runtime-monitor\n    Systemd_Filter  _SYSTEMD_UNIT=kube-container-runtime-monitor.service\n    Path            /var/log/journal\n    DB              /var/lib/google-fluentbit/pos-files/kube-container-runtime-monitor.db\n    Mem_Buf_Limit   1MB\n\n[INPUT]\n    Name            systemd\n    Alias           kubelet-monitor\n    Tag             kubelet-monitor\n    Systemd_Filter  _SYSTEMD_UNIT=kubelet-monitor.service\n    Path            /var/log/journal\n    DB              /var/lib/google-fluentbit/pos-files/kubelet-monitor.db\n    Mem_Buf_Limit   1MB\n\n[INPUT]\n    Name            systemd\n    Alias           gcfsd\n    Tag             gcfsd\n    Systemd_Filter  _SYSTEMD_UNIT=gcfsd.service\n    Path            /var/log/journal\n    DB              /var/lib/google-fluentbit/pos-files/gcfsd.db\n    Mem_Buf_Limit   1MB\n\n[INPUT]\n    Name            systemd\n    Alias           gcfs-snapshotter\n    Tag             gcfs-snapshotter\n    Systemd_Filter  _SYSTEMD_UNIT=gcfs-snapshotter.service\n    Path            /var/log/journal\n    DB              /var/lib/google-fluentbit/pos-files/gcfs-snapshotter.db\n    Mem_Buf_Limit   1MB\n\n\n[INPUT]\n    Name            systemd\n    Alias           container-runtime\n    Tag             container-runtime\n    Systemd_Filter  _SYSTEMD_UNIT=containerd.service\n    Path            /var/log/journal\n    DB              /var/lib/google-fluentbit/pos-files/container-runtime.db\n    Mem_Buf_Limit   1MB\n\n[FILTER]\n    Name                lua\n    Alias               redact-kubelet-lua\n    Match               kubelet\n    Script              redact_kubelet.lua\n    Call                redact_sensitive_info\n\n[FILTER]\n    Name               modify\n    Match              kubelet\n    Alias              kubelet_remove_cmdline\n    Remove             _CMDLINE\n\n\n[FILTER]\n    Name        modify\n    Match       *\n    Hard_rename log message\n\n[FILTER]\n    Name         parser\n    Match        kube_*\n    Key_Name     message\n    Reserve_Data True\n    Parser       glog\n    Parser       json\n\n# level is a common synonym for severity,\n# the default field name in libraries such as GoLang's zap.\n# populate severity with level, if severity does not exist.\n[FILTER]\n    Name        modify\n    Match       kube_*\n    Copy        level severity\n\n[OUTPUT]\n    Name        http\n    Match       *\n    Host        127.0.0.1\n    Port        2021\n    URI         /logs\n    header_tag  FLUENT-TAG\n    Format      msgpack\n    Retry_Limit 2",
                "parsers.conf": "[PARSER]\n    Name        containerd\n    Format      regex\n    # The timestamp is described in https://www.rfc-editor.org/rfc/rfc3339#section-5.6\n    # Containerd logs follow the pattern of CRI Log Format (https://github.com/kubernetes/design-proposals-archive/blob/main/node/kubelet-cri-logging.md): \u003ctimestamp\u003e \u003cstream\u003e \u003ctag\u003e \u003cmessage\u003e\n    # F in tag means \"Full Log\", and P means \"Partial Log\".\n    Regex       ^(?\u003ctime\u003e[0-9]{4}-[0-9]{2}-[0-9]{2}[Tt ][0-9]{2}:[0-9]{2}:[0-9]{2}(?:\\.[0-9]+)?(?:[Zz]|[+-][0-9]{2}:[0-9]{2}))\\s+(?\u003cstream\u003estdout|stderr)\\s(F|P)\\s(?\u003clog\u003e.*)$\n    Time_Key    time\n    Time_Format %Y-%m-%dT%H:%M:%S.%L%z\n\n[PARSER]\n    Name        json\n    Format      json\n\n[PARSER]\n    Name        syslog\n    Format      regex\n    Regex       ^\\\u003c(?\u003cpri\u003e[0-9]+)\\\u003e(?\u003ctime\u003e[^ ]* {1,2}[^ ]* [^ ]*) (?\u003chost\u003e[^ ]*) (?\u003cident\u003e[a-zA-Z0-9_\\/\\.\\-]*)(?:\\[(?\u003cpid\u003e[0-9]+)\\])?(?:[^\\:]*\\:)? *(?\u003cmessage\u003e.*)$\n    Time_Key    time\n    Time_Format %b %d %H:%M:%S\n\n[PARSER]\n    Name        glog\n    Format      regex\n    # We skip the glog timestamp as it doesn't have year (in most cases) and time zone information.\n    # Instead, we rely on the containerd timestamp, which is available for every log line.\n    Regex       ^(?\u003cseverity\u003e\\w)\\d{4}?\\d{4} [^\\s]*\\s+(?\u003cpid\u003e\\d+)\\s+(?\u003csource_file\u003e[^ \\]]+)\\:(?\u003csource_line\u003e\\d+)\\]\\s(?\u003cmessage\u003e.*)$\n\n[PARSER]\n    Name        network-log\n    Format      json\n    Time_Key    timestamp\n    Time_Format %Y-%m-%dT%H:%M:%S.%L%z\n\n# Example:\n# [2023/01/05 00:01:58] [ info] [output:http:http.0] 127.0.0.1:2021, HTTP status=200\\\n# Rubular: https://screenshot.googleplex.com/8SvHiZJLUkW9idQ\n[PARSER]\n    Name   fluentbit\n    Format regex\n    Regex  ^\\[(?\u003ctime\u003e[^\\]]+)\\][ ]*\\[[ ]*(?\u003cseverity\u003e[^\\]]+)\\][ ]*\\[(?\u003cplugin\u003e[^\\]]+)\\] (?\u003clog\u003e.*)\n    Time_Key time\n    Time_Format %Y/%m/%d %H:%M:%S",
                "redact_kubelet.lua": "function redact_sensitive_info(tag, timestamp, record)\n  message = record[\"MESSAGE\"]\n  if message then\n    if string.find(message, \"access_token=ya29.[a-zA-Z0-9._-]*\") then\n      local redact_message = string.gsub(message, \"access_token=ya29.[a-zA-Z0-9._-]*\", \"access_token=\u003cREDACTED\u003e\")\n      record[\"MESSAGE\"] = redact_message\n      return 2, timestamp, record\n    end\n  end\n  return 0, timestamp, record\nend"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "fluentbit",
                    "components.gke.io/component-version": "1.33.6-gke.0"
                },
                "creationTimestamp": "2025-09-20T00:38:14Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile"
                },
                "name": "fluentbit-gke-config-v1.4.0",
                "namespace": "kube-system",
                "resourceVersion": "1758328694598399023",
                "uid": "6dc19d90-0f33-42b5-ad7b-d3d0976b72db"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "fluentbit-metrics-collector-config-data": "# proto-file: cloud/kubernetes/metrics/components/collector/config/collector.proto\n# proto-message: Config\n\nscrape_target:  {\n  url:  \"http://127.0.0.1:2020/api/v1/metrics/prometheus\"\n  target_name:  \"fluentbit\"\n}\nexport_target:  {\n  endpoint:  \"monitoring.googleapis.com:443\"\n}\nmetrics:  {\n  source_metric_name:  \"fluentbit_input_records_total\"\n  export_metric_name:  \"kubernetes.io/internal/addons/fluentbit/input_records_total\"\n  resource_metadata:  {\n    metric_schema:  SCHEMA_K8S_CONTAINER\n  }\n  value_type:  VALUE_TYPE_INT64\n  metric_kind:  METRIC_KIND_CUMULATIVE\n  metric_labels:  {\n    source_name:  \"name\"\n    type:  METRIC_LABEL_STRING\n    description:  \"Name of the input plugin.\"\n  }\n  description:  \"Number of records read by the input plugin.\"\n  unit:  \"1\"\n}\nmetrics:  {\n  source_metric_name:  \"fluentbit_input_bytes_total\"\n  export_metric_name:  \"kubernetes.io/internal/addons/fluentbit/input_bytes_total\"\n  resource_metadata:  {\n    metric_schema:  SCHEMA_K8S_CONTAINER\n  }\n  value_type:  VALUE_TYPE_INT64\n  metric_kind:  METRIC_KIND_CUMULATIVE\n  metric_labels:  {\n    source_name:  \"name\"\n    type:  METRIC_LABEL_STRING\n    description:  \"Name of the input plugin.\"\n  }\n  description:  \"Number of bytes read by the input plugin.\"\n  unit:  \"By\"\n}\nmetrics:  {\n  source_metric_name:  \"fluentbit_build_info\"\n  export_metric_name:  \"kubernetes.io/internal/addons/fluentbit/fluentbit_build_info\"\n  resource_metadata:  {\n    metric_schema:  SCHEMA_K8S_CONTAINER\n  }\n  value_type:  VALUE_TYPE_INT64\n  metric_kind:  METRIC_KIND_GAUGE\n  metric_labels:  {\n    source_name:  \"edition\"\n    type:  METRIC_LABEL_STRING\n    description:  \"Fluentbit edition.\"\n  }\n  metric_labels:  {\n    source_name:  \"version\"\n    type:  METRIC_LABEL_STRING\n    description:  \"Fluentbit version.\"\n  }\n  description:  \"Build information(version and edition) about open source fluentbit that is running.\"\n  unit:  \"1\"\n}\nmetrics:  {\n  source_metric_name:  \"fluentbit_output_proc_records_total\"\n  export_metric_name:  \"kubernetes.io/internal/addons/fluentbit/output_proc_records_total\"\n  resource_metadata:  {\n    metric_schema:  SCHEMA_K8S_CONTAINER\n  }\n  value_type:  VALUE_TYPE_INT64\n  metric_kind:  METRIC_KIND_CUMULATIVE\n  metric_labels:  {\n    source_name:  \"name\"\n    type:  METRIC_LABEL_STRING\n    description:  \"Name of the output plugin.\"\n  }\n  description:  \"Number of records successfully processed by the output plugin.\"\n  unit:  \"1\"\n}\nmetrics:  {\n  source_metric_name:  \"fluentbit_output_proc_bytes_total\"\n  export_metric_name:  \"kubernetes.io/internal/addons/fluentbit/output_proc_bytes_total\"\n  resource_metadata:  {\n    metric_schema:  SCHEMA_K8S_CONTAINER\n  }\n  value_type:  VALUE_TYPE_INT64\n  metric_kind:  METRIC_KIND_CUMULATIVE\n  metric_labels:  {\n    source_name:  \"name\"\n    type:  METRIC_LABEL_STRING\n    description:  \"Name of the output plugin.\"\n  }\n  description:  \"Number of bytes successfully processed by the output plugin.\"\n  unit:  \"By\"\n}\nmetrics:  {\n  source_metric_name:  \"fluentbit_output_errors_total\"\n  export_metric_name:  \"kubernetes.io/internal/addons/fluentbit/output_errors_total\"\n  resource_metadata:  {\n    metric_schema:  SCHEMA_K8S_CONTAINER\n  }\n  value_type:  VALUE_TYPE_INT64\n  metric_kind:  METRIC_KIND_CUMULATIVE\n  metric_labels:  {\n    source_name:  \"name\"\n    type:  METRIC_LABEL_STRING\n    description:  \"Name of the output plugin.\"\n  }\n  description:  \"Number of dropped log batches by the output plugin.\"\n  unit:  \"1\"\n}\nmetrics:  {\n  source_metric_name:  \"fluentbit_output_retries_total\"\n  export_metric_name:  \"kubernetes.io/internal/addons/fluentbit/output_retries_total\"\n  resource_metadata:  {\n    metric_schema:  SCHEMA_K8S_CONTAINER\n  }\n  value_type:  VALUE_TYPE_INT64\n  metric_kind:  METRIC_KIND_CUMULATIVE\n  metric_labels:  {\n    source_name:  \"name\"\n    type:  METRIC_LABEL_STRING\n    description:  \"Name of fluent-bit plugin.\"\n  }\n  description:  \"Number of times Fluent Bit retried to send log batches.\"\n  unit:  \"1\"\n}\nmetrics:  {\n  source_metric_name:  \"fluentbit_output_retries_failed_total\"\n  export_metric_name:  \"kubernetes.io/internal/addons/fluentbit/output_retries_failed_total\"\n  resource_metadata:  {\n    metric_schema:  SCHEMA_K8S_CONTAINER\n  }\n  value_type:  VALUE_TYPE_INT64\n  metric_kind:  METRIC_KIND_CUMULATIVE\n  metric_labels:  {\n    source_name:  \"name\"\n    type:  METRIC_LABEL_STRING\n    description:  \"Name of fluent-bit plugin.\"\n  }\n  description:  \"Number of dropped log batches due to reaching retry limit.\"\n  unit:  \"1\"\n}\n\nmetrics:  {\n  source_metric_name:  \"fluentbit_filter_drop_records_total\"\n  export_metric_name:  \"kubernetes.io/internal/addons/fluentbit/filter_drop_records_total\"\n  resource_metadata:  {\n    metric_schema:  SCHEMA_K8S_CONTAINER\n  }\n  value_type:  VALUE_TYPE_INT64\n  metric_kind:  METRIC_KIND_CUMULATIVE\n  metric_labels:  {\n    source_name:  \"name\"\n    type:  METRIC_LABEL_STRING\n    description:  \"name: the name or alias for the filter instance\"\n  }\n  description:  \"The number of log records that have been dropped by the filter. This means they removed from the data pipeline.\"\n  unit:  \"1\"\n}"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "fluentbit",
                    "components.gke.io/component-version": "1.33.6-gke.0",
                    "components.gke.io/layer": "addon"
                },
                "creationTimestamp": "2025-09-20T00:38:16Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile"
                },
                "name": "fluentbit-metrics-collector-config-map",
                "namespace": "kube-system",
                "resourceVersion": "1758328696675279003",
                "uid": "1d69e161-32da-4a70-9fe5-8db1a5f674c7"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "1760112446530815995": "{\"hostname\":\"gke-65410496025c4a129600-70bc-d39d-vm\",\"version\":\"33.33.19-gke.0\"}",
                "1760112475236502867": "{\"hostname\":\"gke-65410496025c4a129600-70bc-d39d-vm\",\"version\":\"33.33.19-gke.0\"}",
                "1760112509925569794": "{\"hostname\":\"gke-65410496025c4a129600-70bc-d39d-vm\",\"version\":\"33.33.19-gke.0\"}",
                "1760112540951726081": "{\"hostname\":\"gke-65410496025c4a129600-70bc-d39d-vm\",\"version\":\"33.33.19-gke.0\"}"
            },
            "kind": "ConfigMap",
            "metadata": {
                "creationTimestamp": "2025-09-20T00:38:18Z",
                "name": "gke-common-webhook-heartbeat",
                "namespace": "kube-system",
                "resourceVersion": "1760112540965615016",
                "uid": "6a4a6ada-d593-4c0e-852f-133d744bb375"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "gke-metrics-agent-config": "receivers:\n  prometheus/resourcemetrics:\n    use_start_time_metric: false\n    config:\n      scrape_configs:\n      - job_name: \"resources\"\n        scrape_interval: 15s\n        static_configs:\n        - targets: [\"$KUBELET_HOST:10250\"]\n        scheme: \"https\"\n        authorization:\n          type: \"Bearer\"\n          credentials_file: \"/var/run/secrets/kubernetes.io/serviceaccount/token\"\n        tls_config:\n          ca_file: \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\"\n        metrics_path: \"metrics/resource\"\n        metric_relabel_configs:\n        - source_labels: [ __name__ ]\n          regex: \"container_memory_working_set_bytes|container_cpu_usage_seconds_total\"\n          action: keep\n        - source_labels: [ __name__ ]\n          regex: \"container_memory_working_set_bytes\"\n          target_label: \"memory_type\"\n          replacement: \"non-evictable\"\nexporters:\n  uas:\n    endpoint: asia-southeast1-autoscaling.googleapis.com:443\n    location: asia-southeast1-a\n    cluster_name: mindmend-cluster\n    project: 840448055519\n    is_multi_tenant_cluster: false\n    scrape_interval: 15s\n    gke_hostname: container.googleapis.com\nprocessors:\n  resource:\n    attributes:\n    - key: opencensus.resourcetype\n      action: upsert\n      value: \"host\"\n    - key: cloud.zone\n      action: upsert\n      value: asia-southeast1-a\n    - key: host.name\n      action: upsert\n      value: \"$NODE_NAME\"\n    - key: k8s.cluster.name\n      action: upsert\n      value: mindmend-cluster\n  metrics_export/resource:\n    detect_container_metrics: true\n    allowed_labels:\n    - \"project\"\n    - \"location\"\n    - \"cluster_name\"\n    - \"node_name\"\n    - \"namespace\"\n    - \"pod\"\n    - \"container\"\n    export_map:\n    - \"container_memory_working_set_bytes\":\n        export_name: \"kubernetes.io/container/memory/used_bytes\"\n    - \"container_cpu_usage_seconds_total\":\n        export_name: \"kubernetes.io/container/cpu/core_usage_time\"\nextensions:\n  observability:\n    metrics_export_enabled: false\n  health_check:\n    endpoint: \"$HOST_LOOPBACK:8201\"\nservice:\n  extensions:\n  - observability\n  \n  - health_check\n  pipelines:\n    \n    metrics/resource_uas:\n      receivers:\n      - prometheus/resourcemetrics\n      processors:\n      - resource\n      - metrics_export/resource\n      exporters:\n       - uas\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "gke-metrics-agent",
                    "components.gke.io/component-version": "2.133.22-gke.0"
                },
                "creationTimestamp": "2025-09-20T00:38:21Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile"
                },
                "name": "gke-metrics-agent-conf",
                "namespace": "kube-system",
                "resourceVersion": "1758328701670911014",
                "uid": "99aa6cac-5844-481c-a2da-ebb724f9a8e9"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "provider-uid": "a79c505b89ade47b",
                "uid": "a79c505b89ade47b"
            },
            "kind": "ConfigMap",
            "metadata": {
                "creationTimestamp": "2025-09-20T00:38:43Z",
                "name": "ingress-uid",
                "namespace": "kube-system",
                "resourceVersion": "1758328723663311004",
                "uid": "4603f5a7-b026-4394-b973-09ae2057195a"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "ladder": "{\n  \"coresToReplicas\": [],\n  \"nodesToReplicas\":\n  [\n    [1, 1],\n    [2, 2],\n    [3, 3],\n    [4, 4],\n    [5, 5],\n    [6, 6],\n    [10, 8],\n    [100, 12],\n    [250, 18],\n    [500, 25],\n    [2000, 50],\n    [5000, 100]\n  ]\n}"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "konnectivitynetworkproxy-combined",
                    "components.gke.io/component-version": "1.15.6",
                    "components.gke.io/layer": "addon"
                },
                "creationTimestamp": "2025-09-20T00:38:36Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "EnsureExists",
                    "kubernetes.io/cluster-service": "true"
                },
                "name": "konnectivity-agent-autoscaler-config",
                "namespace": "kube-system",
                "resourceVersion": "1758328716864271001",
                "uid": "d6b95354-62f2-4ed8-ad0b-18fb4ea8e7ea"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "konnectivity-agent-metrics-collector-config-data": "# proto-file: cloud/kubernetes/metrics/components/collector/config/collector.proto\n# proto-message: Config\n\nscrape_target: {\n  url: \"http://localhost:8093/metrics\"\n  target_name: \"konnectivity-agent\"\n}\nexport_target: {\n  endpoint: \"monitoring.googleapis.com:443\"\n}\nmetrics: {\n  source_metric_name: \"go_goroutines\"\n  export_metric_name: \"kubernetes.io/internal/addons/konnectivitynetworkproxy_agent/go_goroutines\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  description: \"The current number of goroutines in existence in the Konnectivity proxy agent.\"\n  unit: \"count\"\n}\nmetrics: {\n  source_metric_name: \"process_start_time_seconds\"\n  export_metric_name: \"kubernetes.io/internal/addons/konnectivitynetworkproxy_agent/process_start_time_seconds\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  description: \"Start time of the Konnectivity proxy agent since unix epoch in seconds.\"\n  unit: \"seconds\"\n}\nmetrics: {\n  source_metric_name: \"process_virtual_memory_bytes\"\n  export_metric_name: \"kubernetes.io/internal/addons/konnectivitynetworkproxy_agent/process_virtual_memory_bytes\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_DOUBLE\n  metric_kind: METRIC_KIND_GAUGE\n  description: \"Virtual memory (bytes) used by the Konnectivity proxy agent.\"\n  unit: \"By\"\n}\nmetrics: {\n  source_metric_name: \"konnectivity_network_proxy_agent_dial_duration_seconds\"\n  export_metric_name: \"kubernetes.io/internal/addons/konnectivitynetworkproxy_agent/konnectivity_network_proxy_agent_dial_duration_seconds\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"The latency of the Konnectivity proxy agent dialing to the final endpoint, in seconds.\"\n  unit: \"seconds\"\n}\nmetrics: {\n  source_metric_name: \"konnectivity_network_proxy_agent_server_connection_failure_count\"\n  export_metric_name: \"kubernetes.io/internal/addons/konnectivitynetworkproxy_agent/konnectivity_network_proxy_agent_server_connection_failure_count\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"direction\"\n    type: METRIC_LABEL_STRING\n    description: \"Direction of the connection, either from_server or to_server\"\n  }\n  description: \"Count of failures of Konnectivity proxy agent sending to or receiving from the proxy server.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"konnectivity_network_proxy_agent_endpoint_dial_failure_total\"\n  export_metric_name: \"kubernetes.io/internal/addons/konnectivitynetworkproxy_agent/konnectivity_network_proxy_agent_endpoint_dial_failure_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"reason\"\n    type: METRIC_LABEL_STRING\n    description: \"reason\"\n  }\n  description: \"Number of failures dialing the remote endpoint, by reason (example: timeout).\"\n  unit: \"count\"\n}\nmetrics: {\n  source_metric_name: \"konnectivity_network_proxy_agent_open_server_connections\"\n  export_metric_name: \"kubernetes.io/internal/addons/konnectivitynetworkproxy_agent/konnectivity_network_proxy_agent_open_server_connections\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  description: \"Current number of open server connections.\"\n  unit: \"count\"\n}\nmetrics: {\n  source_metric_name: \"konnectivity_network_proxy_agent_open_endpoint_connections\"\n  export_metric_name: \"kubernetes.io/internal/addons/konnectivitynetworkproxy_agent/konnectivity_network_proxy_agent_open_endpoint_connections\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  description: \"Current number of open endpoint connections.\"\n  unit: \"count\"\n}\nmetrics: {\n  source_metric_name: \"konnectivity_network_proxy_agent_stream_packets_total\"\n  export_metric_name: \"kubernetes.io/internal/addons/konnectivitynetworkproxy_agent/konnectivity_network_proxy_agent_stream_packets_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"packet_type\"\n    type: METRIC_LABEL_STRING\n    description: \"packet_type\"\n  }\n  metric_labels: {\n    source_name: \"segment\"\n    type: METRIC_LABEL_STRING\n    description: \"segment\"\n  }\n  description: \"Count of packets processed, by segment and packet type (example: from_client, DIAL_REQ).\"\n  unit: \"count\"\n}\nmetrics: {\n  source_metric_name: \"konnectivity_network_proxy_agent_stream_errors_total\"\n  export_metric_name: \"kubernetes.io/internal/addons/konnectivitynetworkproxy_agent/konnectivity_network_proxy_agent_stream_errors_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"code\"\n    type: METRIC_LABEL_STRING\n    description: \"code\"\n  }\n  metric_labels: {\n    source_name: \"packet_type\"\n    type: METRIC_LABEL_STRING\n    description: \"packet_type\"\n  }\n  metric_labels: {\n    source_name: \"segment\"\n    type: METRIC_LABEL_STRING\n    description: \"segment\"\n  }\n  description: \"Count of gRPC stream errors, by segment, grpc Code, packet type. (example: from_agent, Code.Unavailable, DIAL_RSP).\"\n  unit: \"count\"\n}\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "konnectivitynetworkproxy-combined",
                    "components.gke.io/component-version": "1.15.6",
                    "components.gke.io/layer": "addon"
                },
                "creationTimestamp": "2025-09-20T00:38:37Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile"
                },
                "name": "konnectivity-agent-metrics-collector-config-map",
                "namespace": "kube-system",
                "resourceVersion": "1758328717548063001",
                "uid": "5b286cba-340b-4b11-b6ac-ae2c80613f85"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "since": "2025-09-20"
            },
            "kind": "ConfigMap",
            "metadata": {
                "creationTimestamp": "2025-09-20T00:36:18Z",
                "name": "kube-apiserver-legacy-service-account-token-tracking",
                "namespace": "kube-system",
                "resourceVersion": "1758328578335375007",
                "uid": "3975f367-772d-4bc4-ac22-ad057b39787a"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ConfigMap",
            "metadata": {
                "creationTimestamp": "2025-09-20T00:37:55Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "EnsureExists"
                },
                "name": "kube-dns",
                "namespace": "kube-system",
                "resourceVersion": "1758328675660015001",
                "uid": "8f7a786b-9b82-4b6f-ad44-3054cc6825d3"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "linear": "{\"coresPerReplica\":256,\"includeUnschedulableNodes\":true,\"nodesPerReplica\":16,\"preventSinglePointFailure\":true}"
            },
            "kind": "ConfigMap",
            "metadata": {
                "creationTimestamp": "2025-09-20T00:39:37Z",
                "name": "kube-dns-autoscaler",
                "namespace": "kube-system",
                "resourceVersion": "1758328777724623012",
                "uid": "dd65c139-2c74-4df9-8d99-c92814001b5b"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "ca.crt": "-----BEGIN CERTIFICATE-----\nMIIELDCCApSgAwIBAgIQdEkbUROVP0jzFt73weMS1TANBgkqhkiG9w0BAQsFADAv\nMS0wKwYDVQQDEyQxODY3YWYwMy1jZDQwLTQ5YjctYjVmZi1hMmNjZDk1MGVmZTYw\nIBcNMjUwOTE5MjMzMjU1WhgPMjA1NTA5MTMwMDMyNTVaMC8xLTArBgNVBAMTJDE4\nNjdhZjAzLWNkNDAtNDliNy1iNWZmLWEyY2NkOTUwZWZlNjCCAaIwDQYJKoZIhvcN\nAQEBBQADggGPADCCAYoCggGBAOC82Vl3cCMiiS59DLLtIUp8N87fXlBAMnfHVdim\nZYNDtwDNl3oPPq3LZkVfVIZb9cPawN7FwFnTdbdoRsn/JkbzHemBIUE8/4DkKvue\nJbQdQwdlkyjkIR2/WPkONZCpmy9459CQ3nv4fJP5S2kxKOj/IpmcDZRA/rrNnwAH\nJRRo0ay/lnC9+FV0l4bExA6SqpIAwJg62W6erthDQ5HV44WQdYvpK9etg0gO5aBO\n9Eg8lxIROF3UHdxF3RsUpiluf22FCuv+q81Y80Rc6g3xE82PzdFVIoNgnWaOckc3\naDurXlppOQ9DDW/Nd7AsunvFYw6AGm9wiSpAsMb7f2qGfk5YIe+17Eft0PVU90yx\ni3jQpaKvGUm0oI+x3buvpcQfpWP2FUprPmHtwcmTMKPhG9lJpISnusDcSA3AyERo\nEXRXgaXwqBRE0rdZVcpSvjesrndmHY79J9Ztxa1dVlgjFPZsWcK+CGb21FHolOH6\nWmJnis9t3SFuM15v/Li7ZvxatwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAgQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwf6mDlkM/wC9GjMC9APUkR2/CWQwDQYJ\nKoZIhvcNAQELBQADggGBADOvnShVMpCCxrA9JD1fuMbCY/XvtxRDscP6M1NbKW7K\nplXbJus7zR+nlGOILFUFZaxE2F11dnZVj8+wvPkNRZvWDyKIwInuFRe16z8skt8M\nAPUF2MRhLR0nA1gXegbTQLxAXbusToEZLarxoH+c/kpft9wvLd+XKvBKMaRFk252\nvTAv29pOH/61v9YQ521u+oOk+sBpcD7Uwj6z4yuci+j05hiTE2pSpiCRE1MNYXTi\n1sYZSo8vJsn5zSQwtLl57impnRHDj+HQK4JMxb4hfFi47Y2PISn6AwfBUggTsxve\ntfmuAay+FU4MXQkVi0Qi9G0t97zne63bqIlV2bXj+uR53jBn7uCAXD/DMeXwx1bp\nwxrHRSCjwhHtsDXxxX8K5LwHpYH+RSqyYx3vY0RUAM41r4g9y1Cp3sq7DHomqvm+\nKJ1avnqHDLWznEzzGIX2EuI6hx0qPdbf5z7CH3LlGP23Fs3BVrrgaw1TAVD6G174\nT6DWmKVVHdmH801y9fsQrA==\n-----END CERTIFICATE-----\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubernetes.io/description": "Contains a CA bundle that can be used to verify the kube-apiserver when using internal endpoints such as the internal service IP or kubernetes.default.svc. No other usage is guaranteed across distributions of Kubernetes clusters."
                },
                "creationTimestamp": "2025-09-20T00:37:26Z",
                "name": "kube-root-ca.crt",
                "namespace": "kube-system",
                "resourceVersion": "1758328646327199004",
                "uid": "c48b7175-cf7e-4318-8122-942d8c64d0f3"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "kubedns.dnsmasq-nanny": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/k8s-dns-dnsmasq-nanny:1.26.4-gke.7@sha256:392e7c5ea5ce1d0eb2c296ba112e6d1edefc8dfbc25a89a02429a3e8e82826ce",
                "kubedns.kube-dns": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/k8s-dns-kube-dns:1.26.4-gke.7@sha256:1d2d3f962be36b000d5d429fe950f2b8a43c1501a64b7fae387ec1422878a235",
                "kubedns.kubedns-metrics-collector": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/gke-metrics-collector:20250821_2300_RC0@sha256:44b242f7acad93034bf7c5d67009b5feec1eafcc53840546225b00cb03a53d37",
                "kubedns.sidecar": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/k8s-dns-sidecar:1.26.4-gke.7@sha256:1b3d3b744fc69cd2bfee58946056f80522142b9d7ed8236409e0e2a409492d1c",
                "kubedns.token-broker-adc-init": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/node_token_broker/init:gke_node_token_broker_init_20250407.00_p0@sha256:8c161bd0d3f2ffc1d580f8b28a2a848cdc1867a84ff8abf7fd6908291697a075"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "kubedns",
                    "components.gke.io/component-version": "33.2.6",
                    "components.gke.io/image-map": "Images deployed by operator"
                },
                "creationTimestamp": "2025-09-20T00:38:37Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "kubedns.cloud.google.com/operator-system": "true"
                },
                "name": "kubedns-config-images",
                "namespace": "kube-system",
                "resourceVersion": "1758889489758191013",
                "uid": "9a21135b-c3e8-45a4-bb2d-e8f1f1f5907f"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "kubedns-metrics-collector-config-data": "# proto-file: cloud/kubernetes/metrics/components/collector/config/collector.proto\n# proto-message: Config\n\nscrape_target: {\n  url: \"http://127.0.0.1:10055/metrics\"\n  target_name: \"kubedns\"\n}\nexport_target: {\n  endpoint: \"monitoring.googleapis.com:443\"\n}\nmetrics: {\n  source_metric_name: \"skydns_skydns_dns_request_count_total\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubedns/skydns_dns_request_count_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"system\"\n    type: METRIC_LABEL_STRING\n    description: \"Name of the system handling the query - cache, stub, recursive...\"\n  }\n  description: \"Counter of DNS requests made.\"\n  unit: \"{requests}\"\n}\nmetrics: {\n  source_metric_name: \"skydns_skydns_dns_request_duration_seconds\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubedns/skydns_dns_request_duration_seconds\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"system\"\n    type: METRIC_LABEL_STRING\n    description: \"Name of the system handling the query - cache, stub, recursive...\"\n  }\n  description: \"Histogram of the time (in seconds) each request took to resolve.\"\n  unit: \"s\"\n}\nmetrics: {\n  source_metric_name: \"skydns_skydns_dns_response_size_bytes\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubedns/skydns_dns_response_size_bytes\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"system\"\n    type: METRIC_LABEL_STRING\n    description: \"Name of the system handling the query - cache, stub, recursive...\"\n  }\n  description: \"Size of the returns response in bytes.\"\n  unit: \"By\"\n}\nmetrics: {\n  source_metric_name: \"skydns_skydns_dns_error_count_total\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubedns/skydns_dns_error_count_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"cause\"\n    type: METRIC_LABEL_STRING\n    description: \"Cause of the error.\"\n  }\n  metric_labels: {\n    source_name: \"system\"\n    type: METRIC_LABEL_STRING\n    description: \"Name of the system handling the query - cache, stub, recursive...\"\n  }\n  description: \"Counter of DNS requests resulting in an error.\"\n  unit: \"{requests}\"\n}\nmetrics: {\n  source_metric_name: \"skydns_skydns_dns_cachemiss_count_total\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubedns/skydns_dns_cachemiss_count_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"cache\"\n    type: METRIC_LABEL_STRING\n    description: \"Type of cache - DNSSec cache or Responses cache.\"\n  }\n  description: \"Counter of DNS requests that result in a cache miss.\"\n  unit: \"{requests}\"\n}\n",
                "sidecar-metrics-collector-config-data": "# proto-file: cloud/kubernetes/metrics/components/collector/config/collector.proto\n# proto-message: Config\n\nscrape_target: {\n  url: \"http://127.0.0.1:10054/metrics\"\n  target_name: \"sidecar\"\n}\nexport_target: {\n  endpoint: \"monitoring.googleapis.com:443\"\n}\nmetrics: {\n  source_metric_name: \"kubedns_probe_kubedns_latency_ms\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubedns/probe_kubedns_latency_ms\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"Latency of the DNS probe request kubedns.\"\n  unit: \"ms\"\n}\nmetrics: {\n  source_metric_name: \"kubedns_probe_kubedns_errors\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubedns/probe_kubedns_errors\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"Count of errors in name resolution of kubedns.\"\n  unit: \"{errors}\"\n}\nmetrics: {\n  source_metric_name: \"kubedns_probe_dnsmasq_latency_ms\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubedns/probe_dnsmasq_latency_ms\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"Latency of the DNS probe request dnsmasq.\"\n  unit: \"ms\"\n}\nmetrics: {\n  source_metric_name: \"kubedns_probe_dnsmasq_errors\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubedns/probe_dnsmasq_errors\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"Count of errors in name resolution of dnsmasq.\"\n  unit: \"{errors}\"\n}\nmetrics: {\n  source_metric_name: \"kubedns_dnsmasq_misses\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubedns/dnsmasq_misses\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"Number of DNS cache misses (from start of process).\"\n  unit: \"{requests}\"\n}\nmetrics: {\n  source_metric_name: \"kubedns_dnsmasq_hits\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubedns/dnsmasq_hits\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"Number of DNS cache hits (from start of process).\"\n  unit: \"{requests}\"\n}\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "kubedns",
                    "components.gke.io/component-version": "33.2.6",
                    "components.gke.io/layer": "addon"
                },
                "creationTimestamp": "2025-09-20T00:38:38Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile"
                },
                "name": "kubedns-metrics-collector-config-map",
                "namespace": "kube-system",
                "resourceVersion": "1758889489859647006",
                "uid": "908ff033-3ea9-4d5d-a549-49ebc86ad5ee"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "autoscaling-metrics-exporter": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/autoscaling-metrics-exporter:autoscaling-0.0.11-gke.0@sha256:83f5130ab7f1d84b09bf0aa236f80b0c815b5eda055bea631ac71e2c50d2ebd3",
                "core-metrics-exporter": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/gke-metrics-agent:1.15.6-gke.0@sha256:8d3f6c749a8589ac729c66564b41e8babb35c5f181e774cd586c9d2761beeb96",
                "gke-metrics-agent": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/gke-metrics-agent:1.15.6-gke.0@sha256:8d3f6c749a8589ac729c66564b41e8babb35c5f181e774cd586c9d2761beeb96",
                "node-token-broker": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/node_token_broker/init:gke_node_token_broker_init_20250408.00_p0@sha256:37e96e6fdb960fd60b14599e4aca02f4c4e46dac9700f27500e06f9442ab1046",
                "prometheus-metrics-collector": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/gke-metrics-collector:20250508_2300_RC0@sha256:d074c77bdc0ee1c4245113e62d93ef1ed6f1a51960ea854a972861a6a0c774ce"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "gke-metrics-agent",
                    "components.gke.io/component-version": "2.133.22-gke.0",
                    "components.gke.io/image-map": "Extractor uncaught images",
                    "components.gke.io/layer": "addon"
                },
                "creationTimestamp": "2025-09-20T00:38:25Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile"
                },
                "name": "metrics-agent-linux-config-images",
                "namespace": "kube-system",
                "resourceVersion": "1758328705278159001",
                "uid": "d3d17901-8179-45c0-bbe9-e1b95d357d26"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "autoscaling-metrics-exporter": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/autoscaling-metrics-exporter-windows:autoscaling-0.0.11-gke.0@sha256:47c79424d74cb69dfca6506e509a32e8e2e84a236becac00425edebc92451778",
                "core-metrics-exporter": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/gke-metrics-agent-windows:1.15.6-gke.0@sha256:e91c4b0088231a6cba000fb0c96e0078d0950ae5111eef182df4c9d06831e254",
                "gke-metrics-agent": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/gke-metrics-agent-windows:1.15.6-gke.0@sha256:e91c4b0088231a6cba000fb0c96e0078d0950ae5111eef182df4c9d06831e254",
                "prometheus-metrics-collector": "asia-southeast1-artifactregistry.gcr.io/gke-release/gke-release/gke-metrics-collector-win:20250508_2300_RC0@sha256:bb1f28f3ced9aad8445200862a97a4bd2a269b319d730dba6804c85105147c9d"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "gke-metrics-agent",
                    "components.gke.io/component-version": "2.133.22-gke.0",
                    "components.gke.io/image-map": "Extractor uncaught images",
                    "components.gke.io/layer": "addon"
                },
                "creationTimestamp": "2025-09-20T00:38:25Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile"
                },
                "name": "metrics-agent-windows-config-images",
                "namespace": "kube-system",
                "resourceVersion": "1758328705873455021",
                "uid": "a0af3bda-12c5-4165-a59b-962418597507"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "NannyConfiguration": "apiVersion: nannyconfig/v1alpha1\nkind: NannyConfiguration"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "metrics-server",
                    "components.gke.io/component-version": "1.33.0-gke.3",
                    "components.gke.io/layer": "addon"
                },
                "creationTimestamp": "2025-09-20T00:38:55Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "EnsureExists",
                    "kubernetes.io/cluster-service": "true"
                },
                "name": "metrics-server-config",
                "namespace": "kube-system",
                "resourceVersion": "1758328735464303016",
                "uid": "73e22197-8200-4fb5-9ae8-064286c71922"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "gpu-device-plugin-metrics-collector-config-data": "# proto-file: cloud/kubernetes/metrics/components/collector/config/collector.proto\n# proto-message: Config\n\nscrape_target: {\n  url: \"http://127.0.0.1:2112/metrics\"\n  target_name: \"gpu-device-plugin\"\n}\n\nexport_target: {\n  endpoint: \"monitoring.googleapis.com:443\"\n}\n\nmetrics: {\n  source_metric_name: \"memory_total\"\n  export_metric_name: \"kubernetes.io/container/accelerator/memory_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  description: \"Total accelerator memory in bytes.\"\n  unit: \"bytes\"\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  metric_labels: {\n    source_name: \"make\"\n    type: METRIC_LABEL_STRING\n    description: \"Make of the accelerator (e.g. nvidia)\"\n  }\n  metric_labels: {\n    source_name: \"accelerator_id\"\n    type: METRIC_LABEL_STRING\n    description: \"ID of the accelerator\"\n  }\n  metric_labels: {\n    source_name: \"model\"\n    type: METRIC_LABEL_STRING\n    description: \"Model of the accelerator (e.g. Tesla P100)\"\n  }\n  override_labels: {\n    resource_label_target: {\n      name: \"namespace_name\"\n    }\n    metric_label: {\n      name: \"namespace\"\n    }\n  }\n  override_labels: {\n    resource_label_target: {\n      name: \"pod_name\"\n    }\n    metric_label: {\n      name: \"pod\"\n    }\n  }\n  override_labels: {\n    resource_label_target: {\n      name: \"container_name\"\n    }\n    metric_label: {\n      name: \"container\"\n    }\n  }\n}\n\nmetrics: {\n  source_metric_name: \"memory_used\"\n  export_metric_name: \"kubernetes.io/container/accelerator/memory_used\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  description: \"Total accelerator memory allocated in bytes.\"\n  unit: \"bytes\"\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  metric_labels: {\n    source_name: \"make\"\n    type: METRIC_LABEL_STRING\n    description: \"Make of the accelerator (e.g. nvidia)\"\n  }\n  metric_labels: {\n    source_name: \"accelerator_id\"\n    type: METRIC_LABEL_STRING\n    description: \"ID of the accelerator\"\n  }\n  metric_labels: {\n    source_name: \"model\"\n    type: METRIC_LABEL_STRING\n    description: \"Model of the accelerator (e.g. Tesla P100)\"\n  }\n  override_labels: {\n    resource_label_target: {\n      name: \"namespace_name\"\n    }\n    metric_label: {\n      name: \"namespace\"\n    }\n  }\n  override_labels: {\n    resource_label_target: {\n      name: \"pod_name\"\n    }\n    metric_label: {\n      name: \"pod\"\n    }\n  }\n  override_labels: {\n    resource_label_target: {\n      name: \"container_name\"\n    }\n    metric_label: {\n      name: \"container\"\n    }\n  }\n}\n\nmetrics: {\n  source_metric_name: \"duty_cycle\"\n  export_metric_name: \"kubernetes.io/container/accelerator/duty_cycle\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  description: \"Percent of time over the past sample period (10s) during which the accelerator was actively processing. Values are integers between 0 and 100.\"\n  unit: \"%\"\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  metric_labels: {\n    source_name: \"make\"\n    type: METRIC_LABEL_STRING\n    description: \"Make of the accelerator (e.g. nvidia)\"\n  }\n  metric_labels: {\n    source_name: \"accelerator_id\"\n    type: METRIC_LABEL_STRING\n    description: \"ID of the accelerator\"\n  }\n  metric_labels: {\n    source_name: \"model\"\n    type: METRIC_LABEL_STRING\n    description: \"Model of the accelerator (e.g. Tesla P100)\"\n  }\n  override_labels: {\n    resource_label_target: {\n      name: \"namespace_name\"\n    }\n    metric_label: {\n      name: \"namespace\"\n    }\n  }\n  override_labels: {\n    resource_label_target: {\n      name: \"pod_name\"\n    }\n    metric_label: {\n      name: \"pod\"\n    }\n  }\n  override_labels: {\n    resource_label_target: {\n      name: \"container_name\"\n    }\n    metric_label: {\n      name: \"container\"\n    }\n  }\n}\n\nmetrics: {\n  source_metric_name: \"memory_total_gpu_node\"\n  export_metric_name: \"kubernetes.io/node/accelerator/memory_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  description: \"Total accelerator memory with node in bytes.\"\n  unit: \"bytes\"\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  metric_labels: {\n    source_name: \"make\"\n    type: METRIC_LABEL_STRING\n    description: \"Make of the accelerator (e.g. nvidia)\"\n  }\n  metric_labels: {\n    source_name: \"accelerator_id\"\n    type: METRIC_LABEL_STRING\n    description: \"ID of the accelerator\"\n  }\n  metric_labels: {\n    source_name: \"model\"\n    type: METRIC_LABEL_STRING\n    description: \"Model of the accelerator (e.g. Tesla P100)\"\n  }\n}\n\nmetrics: {\n  source_metric_name: \"memory_used_gpu_node\"\n  export_metric_name: \"kubernetes.io/node/accelerator/memory_used\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  description: \"Total accelerator memory allocated with node in bytes.\"\n  unit: \"bytes\"\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  metric_labels: {\n    source_name: \"make\"\n    type: METRIC_LABEL_STRING\n    description: \"Make of the accelerator (e.g. nvidia)\"\n  }\n  metric_labels: {\n    source_name: \"accelerator_id\"\n    type: METRIC_LABEL_STRING\n    description: \"ID of the accelerator\"\n  }\n  metric_labels: {\n    source_name: \"model\"\n    type: METRIC_LABEL_STRING\n    description: \"Model of the accelerator (e.g. Tesla P100)\"\n  }\n}\n\nmetrics: {\n  source_metric_name: \"duty_cycle_gpu_node\"\n  export_metric_name: \"kubernetes.io/node/accelerator/duty_cycle\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  description: \"Total accelerator memory allocated with node in bytes.\"\n  unit: \"bytes\"\n  value_type: VALUE_TYPE_DOUBLE\n  metric_kind: METRIC_KIND_GAUGE\n  metric_labels: {\n    source_name: \"make\"\n    type: METRIC_LABEL_STRING\n    description: \"Make of the accelerator (e.g. nvidia)\"\n  }\n  metric_labels: {\n    source_name: \"accelerator_id\"\n    type: METRIC_LABEL_STRING\n    description: \"ID of the accelerator\"\n  }\n  metric_labels: {\n    source_name: \"model\"\n    type: METRIC_LABEL_STRING\n    description: \"Model of the accelerator (e.g. Tesla P100)\"\n  }\n}\n\nmetrics: {\n  source_metric_name: \"request\"\n  export_metric_name: \"kubernetes.io/internal/container/accelerator/request\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  description: \"Number of accelerator devices requested by the container.\"\n  unit: \"{devices}\"\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  metric_labels: {\n    source_name: \"resource_name\"\n    type: METRIC_LABEL_STRING\n    description: \"Name of the requested accelerator resource.\"\n  }\n  override_labels: {\n    resource_label_target: {\n      name: \"namespace_name\"\n    }\n    metric_label: {\n      name: \"namespace\"\n    }\n  }\n  override_labels: {\n    resource_label_target: {\n      name: \"pod_name\"\n    }\n    metric_label: {\n      name: \"pod\"\n    }\n  }\n  override_labels: {\n    resource_label_target: {\n      name: \"container_name\"\n    }\n    metric_label: {\n      name: \"container\"\n    }\n  }\n}\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "gpu-device-plugin",
                    "components.gke.io/component-version": "1.33.10-gke.1",
                    "components.gke.io/layer": "addon"
                },
                "creationTimestamp": "2025-09-20T00:38:30Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile"
                },
                "name": "nvidia-metrics-collector-config-map",
                "namespace": "kube-system",
                "resourceVersion": "1758889488036495019",
                "uid": "b99cd844-cc03-4054-a61d-df573ff46d2b"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "containerd-metrics-collector-config-data": "# proto-file: cloud/kubernetes/metrics/components/collector/config/collector.proto\n# proto-message: Config\n\nscrape_target: {\n  url: \"http://${HOST_LOOPBACK}:1338/v1/metrics\"\n  target_name: \"containerd\"\n}\n\nexport_target: {\n  endpoint: \"monitoring.googleapis.com:443\"\n}\n\nmetrics: {\n  source_metric_name: \"containerd_cri_network_plugin_operations_duration_seconds_seconds\",\n  export_metric_name: \"kubernetes.io/internal/nodes/containerd/network_plugin_operations_duration_seconds\",\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  },\n  description: \"latency in seconds of network plugin operations. Broken down by operation type.\",\n  unit: \"seconds\",\n  value_type: VALUE_TYPE_DISTRIBUTION,\n  metric_kind: METRIC_KIND_CUMULATIVE,\n  metric_labels: {\n    source_name: \"operation_type\",\n    type: METRIC_LABEL_STRING,\n    description: \"operation type.\"\n  }\n},\nmetrics: {\n  source_metric_name: \"containerd_cri_network_plugin_operations_total_total\",\n  export_metric_name: \"kubernetes.io/internal/nodes/containerd/network_plugin_operations_total\",\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  },\n  description: \"cumulative number of network plugin operations by operation type.\",\n  unit: \"1\",\n  value_type: VALUE_TYPE_INT64,\n  metric_kind: METRIC_KIND_CUMULATIVE,\n  metric_labels: {\n    source_name: \"operation_type\",\n    type: METRIC_LABEL_STRING,\n    description: \"operation type.\"\n  }\n},\nmetrics: {\n  source_metric_name: \"containerd_cri_network_plugin_operations_errors_total_total\",\n  export_metric_name: \"kubernetes.io/internal/nodes/containerd/network_plugin_operations_errors_total\",\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  },\n  description: \"cumulative number of network plugin operations error by operation type.\",\n  unit: \"1\",\n  value_type: VALUE_TYPE_INT64,\n  metric_kind: METRIC_KIND_CUMULATIVE,\n  metric_labels: {\n    source_name: \"operation_type\",\n    type: METRIC_LABEL_STRING,\n    description: \"operation type.\"\n  }\n}",
                "kube-proxy-metrics-collector-config-data": "# proto-file: cloud/kubernetes/metrics/components/collector/config/collector.proto\n# proto-message: Config\n\nscrape_target: {\n  url: \"http://${HOST_LOOPBACK}:10249/metrics\"\n  target_name: \"kube-proxy\"\n}\nexport_target: {\n  endpoint: \"monitoring.googleapis.com:443\"\n}\nmetrics: {\n  source_metric_name: \"kubeproxy_sync_proxy_rules_duration_seconds\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubeproxy/sync_proxy_rules_duration_seconds\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"SyncProxyRules latency in seconds.\"\n  unit: \"s\"\n}\nmetrics: {\n  source_metric_name: \"kubeproxy_sync_proxy_rules_last_timestamp_seconds\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubeproxy/sync_proxy_rules_last_timestamp_seconds\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  description: \"The last time proxy rules were successfully synced.\"\n  unit: \"s\"\n}\nmetrics: {\n  source_metric_name: \"kubeproxy_network_programming_duration_seconds\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubeproxy/network_programming_duration_seconds\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"In Cluster Network Programming Latency in seconds.\"\n  unit: \"s\"\n}\nmetrics: {\n  source_metric_name: \"kubeproxy_sync_proxy_rules_endpoint_changes_pending\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubeproxy/sync_proxy_rules_endpoint_changes_pending\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  description: \"Pending proxy rules Endpoint changes.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kubeproxy_sync_proxy_rules_endpoint_changes_total\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubeproxy/sync_proxy_rules_endpoint_changes_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"Cumulative proxy rules Endpoint changes.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kubeproxy_sync_proxy_rules_service_changes_pending\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubeproxy/sync_proxy_rules_service_changes_pending\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  description: \"Pending proxy rules Service changes.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kubeproxy_sync_proxy_rules_service_changes_total\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubeproxy/sync_proxy_rules_service_changes_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"Cumulative proxy rules Service changes.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kubeproxy_sync_proxy_rules_iptables_restore_failures_total\"\n  export_metric_name: \"kubernetes.io/internal/addons/kubeproxy/sync_proxy_rules_iptables_restore_failures_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"Cumulative proxy iptables restore failures.\"\n  unit: \"1\"\n}\n",
                "kubelet-metrics-collector-config-data": "# proto-file: cloud/kubernetes/metrics/components/collector/config/collector.proto\n# proto-message: Config\n\nscrape_target: {\n  url: \"https://${KUBELET_HOST}:10250/metrics\"\n  target_name: \"kubelet\"\n\n  authorization: {\n    type: \"Bearer\"\n    credentials_file: \"/var/run/secrets/kubernetes.io/serviceaccount/token\"\n    ca_file: \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\"\n  }\n}\n\nexport_target: {\n  endpoint: \"monitoring.googleapis.com:443\"\n}\nmetrics: {\n  source_metric_name: \"csi_operations_seconds\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/csi_operations_seconds\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"driver_name\"\n    type: METRIC_LABEL_STRING\n    description: \"Name of the CSI Driver.\"\n  }\n  metric_labels: {\n    source_name: \"grpc_status_code\"\n    type: METRIC_LABEL_STRING\n    description: \"The gRPC status code of the response.\"\n  }\n  metric_labels: {\n    source_name: \"method_name\"\n    type: METRIC_LABEL_STRING\n    description: \"Name of the CSI operation.\"\n  }\n  metric_labels: {\n    source_name: \"migrated\"\n    type: METRIC_LABEL_BOOL\n    description: \"Whether CSI Migration is enabled.\"\n  }\n  description: \"Duration in seconds of Container Storage Interface (CSI) operations invoked by kubelet.\\ndriver_name(String): Name of the CSI Driver.\\nmethod_name(String): Name of the CSI operation.\\ngrpc_status_code(String): The gRPC status code of the response.\\nmigrated(Bool): Whether CSI Migration is enabled.\"\n  unit: \"seconds\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_credential_provider_plugin_duration\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/credential_provider_plugin_duration\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"plugin_name\"\n    type: METRIC_LABEL_STRING\n    description: \"plugin_name\"\n  }\n  description: \"Duration of execution in seconds for credential provider plugin.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_credential_provider_plugin_errors\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/credential_provider_plugin_errors\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"plugin_name\"\n    type: METRIC_LABEL_STRING\n    description: \"plugin_name\"\n  }\n  description: \"Cumulative number of kubelet image credential provider errors by provider name on user nodes.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_docker_operations_errors_total\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/docker_operations_errors_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"operation_type\"\n    type: METRIC_LABEL_STRING\n    description: \"Type of the operation, for example create_container, stop_container, pull_image, etc.\"\n  }\n  description: \"Cumulative number of Docker operation errors by operation type.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_docker_operations_total\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/docker_operations_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"operation_type\"\n    type: METRIC_LABEL_STRING\n    description: \"Type of the operation, for example create_container, stop_container, pull_image, etc.\"\n  }\n  description: \"Cumulative number of Docker operations by operation type.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_http_requests_total\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/http_requests_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"long_running\"\n    type: METRIC_LABEL_STRING\n    description: \"whether the request is long-running or not: yes or no\"\n  }\n  metric_labels: {\n    source_name: \"method\"\n    type: METRIC_LABEL_STRING\n    description: \"the http request method\"\n  }\n  metric_labels: {\n    source_name: \"path\"\n    type: METRIC_LABEL_STRING\n    description: \"the http request path\"\n  }\n  metric_labels: {\n    source_name: \"server_type\"\n    type: METRIC_LABEL_STRING\n    description: \"the http server type: readonly or readwrite\"\n  }\n  description: \"Number of the http requests received since the server started.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_network_plugin_operations_duration_seconds\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/network_plugin_operations_duration_seconds\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"operation_type\"\n    type: METRIC_LABEL_STRING\n    description: \"Container Network operation type.\"\n  }\n  description: \"Latency in seconds of network plugin operations. Broken down by operation type.\"\n  unit: \"seconds\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_network_plugin_operations_errors_total\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/network_plugin_operations_errors_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"operation_type\"\n    type: METRIC_LABEL_STRING\n    description: \"Container Network operation type.\"\n  }\n  description: \"Cumulative number of network plugin operation errors by operation type.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_network_plugin_operations_total\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/network_plugin_operations_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"operation_type\"\n    type: METRIC_LABEL_STRING\n    description: \"Container Network operation type.\"\n  }\n  description: \"Cumulative number of network plugin operations by operation type.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_pod_start_duration_seconds\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/pod_start_duration_seconds\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"Duration in seconds for a single pod to go from pending to running.\"\n  unit: \"s\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_pod_start_sli_duration_seconds\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/pod_start_sli_duration_seconds\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"Duration in seconds to start a pod, excluding time to pull images and run init containers, measured from pod creation timestamp to when all its containers are reported as started and observed via watch\"\n  unit: \"seconds\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_pod_start_total_duration_seconds\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/pod_start_total_duration_seconds\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  description: \"Duration in seconds to start a pod, including time to pull images and run init containers, measured from pod creation timestamp to when all its containers are reported as started and observed via watch\"\n  unit: \"seconds\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_runtime_operations_duration_seconds\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/runtime_operations_duration_seconds\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"operation_type\"\n    type: METRIC_LABEL_STRING\n    description: \"Operation type.\"\n  }\n  description: \"Duration in seconds of runtime operations. Broken down by operation type.\"\n  unit: \"s\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_runtime_operations_errors_total\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/runtime_operations_errors_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"operation_type\"\n    type: METRIC_LABEL_STRING\n    description: \"Type of the operation, for example create_container, stop_container, pull_image, etc.\"\n  }\n  description: \"Cumulative number of runtime operation errors by operation type.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_runtime_operations_total\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/runtime_operations_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"operation_type\"\n    type: METRIC_LABEL_STRING\n    description: \"Type of the operation, for example create_container, stop_container, pull_image, etc.\"\n  }\n  description: \"Cumulative number of runtime operations by operation type.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"rest_client_requests_total\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/rest_client_requests_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"code\"\n    type: METRIC_LABEL_STRING\n    description: \"HTTP status code\"\n  }\n  metric_labels: {\n    source_name: \"host\"\n    type: METRIC_LABEL_STRING\n    description: \"The name of the host, usually an IP address\"\n  }\n  metric_labels: {\n    source_name: \"method\"\n    type: METRIC_LABEL_STRING\n    description: \"HTTP verb/method, for example: GET, POST, PUT\"\n  }\n  description: \"Number of HTTP requests, partitioned by status code, method, and host.\"\n  unit: \"requests\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_running_containers\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/running_containers\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  metric_labels: {\n    source_name: \"container_state\"\n    type: METRIC_LABEL_STRING\n    description: \"The current state of the running container.\"\n  }\n  description: \"Number of containers currently running.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_started_containers_total\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/started_containers_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"container_type\"\n    type: METRIC_LABEL_STRING\n    description: \"Container type.\"\n  }\n  description: \"Cumulative number of containers started.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"storage_operation_duration_seconds\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/storage_operation_duration_seconds\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_DISTRIBUTION\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"migrated\"\n    type: METRIC_LABEL_BOOL\n    description: \"If the operation is for CSI migration\"\n  }\n  metric_labels: {\n    source_name: \"operation_name\"\n    type: METRIC_LABEL_STRING\n    description: \"Name of the storage operation\"\n  }\n  metric_labels: {\n    source_name: \"status\"\n    type: METRIC_LABEL_STRING\n    description: \"The status of the storage operation\"\n  }\n  metric_labels: {\n    source_name: \"volume_plugin\"\n    type: METRIC_LABEL_STRING\n    description: \"Name of the volume plugin executing the storage operation\"\n  }\n  description: \"Duration of storage operations.\\nstatus: The status of the storage operation.\\nvolume_plugin(String): The volume plugin of the operation.\\noperation_name(String): The name of the operation.\\nmigrated: If the operation is for CSI migration.\"\n  unit: \"seconds\"\n}\nmetrics: {\n  source_metric_name: \"storage_operation_errors_total\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/storage_operation_errors_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"operation_name\"\n    type: METRIC_LABEL_STRING\n    description: \"Name of the storage operation\"\n  }\n  metric_labels: {\n    source_name: \"volume_plugin\"\n    type: METRIC_LABEL_STRING\n    description: \"Name of the volume plugin executing the storage operation\"\n  }\n  description: \"Count of storage operation errors.\\nvolume_plugin(String): The volume plugin of the operation.\\noperation_name(String): The name of the operation.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"storage_operation_status_count\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/storage_operation_status_count\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"operation_name\"\n    type: METRIC_LABEL_STRING\n    description: \"Name of the storage operation\"\n  }\n  metric_labels: {\n    source_name: \"status\"\n    type: METRIC_LABEL_STRING\n    description: \"Return status of the storage operation\"\n  }\n  metric_labels: {\n    source_name: \"volume_plugin\"\n    type: METRIC_LABEL_STRING\n    description: \"Name of the volume plugin executing the storage operation\"\n  }\n  description: \"Count of storage operation statuses.\\nstatus(String): The return status of the operation.\\nvolume_plugin(String): The volume plugin of the operation.\\noperation_name(String): The name of the operation.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"kubelet_evictions\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/evictions\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"eviction_signal\"\n    type: METRIC_LABEL_STRING\n    description: \"The signal that triggered the eviction.\"\n  }\n  description: \"Counter that tracks the cumulative number of pod evictions initiated by the kubelet, broken down by eviction signal.\"\n  unit: \"1\"\n}\n",
                "kubelet-prober-metrics-collector-config-data": "# proto-file: cloud/kubernetes/metrics/components/collector/config/collector.proto\n# proto-message: Config\n\nscrape_target: {\n  url: \"https://${KUBELET_HOST}:10250/metrics/probes\"\n  target_name: \"kubelet-prober\"\n\n  authorization: {\n    type: \"Bearer\"\n    credentials_file: \"/var/run/secrets/kubernetes.io/serviceaccount/token\"\n    ca_file: \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\"\n  }\n}\n\nexport_target: {\n  endpoint: \"monitoring.googleapis.com:443\"\n}\nmetrics: {\n  source_metric_name: \"prober_probe_total\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/prober_probe_total\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_CUMULATIVE\n  metric_labels: {\n    source_name: \"pod_uid\"\n    type: METRIC_LABEL_STRING\n    description: \"Uid of the pod.\"\n  }\n  metric_labels: {\n    source_name: \"probe_type\"\n    type: METRIC_LABEL_STRING\n    description: \"Type of the probe, can be either of \u003cLiveness, Readiness\u003e.\"\n  }\n  metric_labels: {\n    source_name: \"result\"\n    type: METRIC_LABEL_STRING\n    description: \"Result of the probe, can be any of \u003csuccessful, failed, unknown\u003e.\"\n  }\n  description: \"Cumulative number of a liveness or readiness probe for a container by result.\"\n  unit: \"1\"\n  override_labels: {\n    resource_label_target: {\n      name: \"namespace_name\"\n    }\n    metric_label: {\n      name: \"namespace\"\n    }\n  }\n  override_labels: {\n    resource_label_target: {\n      name: \"pod_name\"\n    }\n    metric_label: {\n      name: \"pod\"\n    }\n  }\n  override_labels: {\n    resource_label_target: {\n      name: \"container_name\"\n    }\n    metric_label: {\n      name: \"container\"\n    }\n  }\n}\n",
                "kubelet-resource-metrics-collector-config-data": "# proto-file: cloud/kubernetes/metrics/components/collector/config/collector.proto\n# proto-message: Config\n\nscrape_target: {\n  url: \"https://${KUBELET_HOST}:10250/metrics/resource\"\n  target_name: \"kubelet-resource\"\n\n  authorization: {\n    type: \"Bearer\"\n    credentials_file: \"/var/run/secrets/kubernetes.io/serviceaccount/token\"\n    ca_file: \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\"\n  }\n}\n\nexport_target: {\n  endpoint: \"monitoring.googleapis.com:443\"\n}\nmetrics: {\n  source_metric_name: \"container_swap_usage_bytes\"\n  export_metric_name: \"kubernetes.io/internal/container/kubelet/memory/swap_used_bytes\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_CONTAINER\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  description: \"Swap memory usage of the container in bytes.\"\n  unit: \"1\"\n}\nmetrics: {\n  source_metric_name: \"node_swap_usage_bytes\"\n  export_metric_name: \"kubernetes.io/internal/nodes/kubelet/swap_used_bytes\"\n  resource_metadata: {\n    metric_schema: SCHEMA_K8S_NODE\n  }\n  value_type: VALUE_TYPE_INT64\n  metric_kind: METRIC_KIND_GAUGE\n  description: \"Swap memory usage of the node in bytes.\"\n  unit: \"1\"\n}\n",
                "networkpolicy_antrea-metrics-collector-config-data": "# proto-file: cloud/kubernetes/metrics/components/collector/config/collector.proto\n# proto-message: Config\n\nscrape_target: {\n  url: \"http://${HOST_LOOPBACK}:10351\"\n  target_name: \"networkpolicy_antrea\"\n}\nexport_target:  {\n  endpoint:  \"monitoring.googleapis.com:443\"\n}\nmetrics:  {\n  source_metric_name:  \"antrea_agent_conntrack_antrea_connection_count\"\n  export_metric_name:  \"kubernetes.io/internal/addons/networkpolicy_antrea/antrea_agent_conntrack_antrea_connection_count\"\n  resource_metadata:  {\n    metric_schema:  SCHEMA_K8S_NODE\n  }\n  value_type:  VALUE_TYPE_INT64\n  metric_kind:  METRIC_KIND_GAUGE\n  description:  \"Number of connections in the Antrea ZoneID of the conntrack table. This metric gets updated at an interval specified by flowPollInterval, a configuration parameter for the Agent.\"\n  unit:  \"connections\"\n}\nmetrics:  {\n  source_metric_name:  \"antrea_agent_networkpolicy_count\"\n  export_metric_name:  \"kubernetes.io/internal/addons/networkpolicy_antrea/antrea_agent_networkpolicy_count\"\n  resource_metadata:  {\n    metric_schema:  SCHEMA_K8S_NODE\n  }\n  value_type:  VALUE_TYPE_INT64\n  metric_kind:  METRIC_KIND_GAUGE\n  description:  \"Number of NetworkPolicies on local Node which are managed by the Antrea Agent.\"\n  unit:  \"policies\"\n}\nmetrics:  {\n  source_metric_name:  \"antrea_agent_ovs_total_flow_count\"\n  export_metric_name:  \"kubernetes.io/internal/addons/networkpolicy_antrea/antrea_agent_ovs_total_flow_count\"\n  resource_metadata:  {\n    metric_schema:  SCHEMA_K8S_NODE\n  }\n  value_type:  VALUE_TYPE_INT64\n  metric_kind:  METRIC_KIND_GAUGE\n  description:  \"Total flow count of all OVS flow tables.\"\n  unit:  \"flows\"\n}\n",
                "node-problem-detector-metrics-collector-config-data": "# proto-file: cloud/kubernetes/metrics/components/collector/config/collector.proto\n# proto-message: Config\n\nscrape_target:  {\n  url:  \"http://${HOST_LOOPBACK}:20257/metrics\"\n  target_name: \"node-problem-detector\"\n\n  no_start_time_metric: true\n}\nexport_target:  {\n  endpoint:  \"monitoring.googleapis.com:443\"\n}\nmetrics:  {\n  source_metric_name:  \"problem_counter\"\n  export_metric_name:  \"kubernetes.io/internal/nodes/node_problem_detector/local_ssd_error_count\"\n  resource_metadata:  {\n    metric_schema:  SCHEMA_K8S_NODE\n  }\n  value_type:  VALUE_TYPE_INT64\n  metric_kind:  METRIC_KIND_CUMULATIVE\n  metric_labels:  {\n    source_name:  \"reason\"\n    type:  METRIC_LABEL_STRING\n    description:  \"The reason of local SSD failure.\"\n  }\n  description:  \"The number of GKE local SSD errors.\"\n  unit:  \"count\"\n}\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "components.gke.io/component-name": "gke-metrics-agent",
                    "components.gke.io/component-version": "2.133.22-gke.0",
                    "components.gke.io/layer": "addon"
                },
                "creationTimestamp": "2025-09-20T00:38:22Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile"
                },
                "name": "prometheus-metrics-collector-config-map",
                "namespace": "kube-system",
                "resourceVersion": "1758328702933375004",
                "uid": "83fd77bd-8a90-450e-8c76-e3d940b9caff"
            }
        },
        {
            "apiVersion": "v1",
            "data": {
                "ca.crt": "-----BEGIN CERTIFICATE-----\nMIIELDCCApSgAwIBAgIQdEkbUROVP0jzFt73weMS1TANBgkqhkiG9w0BAQsFADAv\nMS0wKwYDVQQDEyQxODY3YWYwMy1jZDQwLTQ5YjctYjVmZi1hMmNjZDk1MGVmZTYw\nIBcNMjUwOTE5MjMzMjU1WhgPMjA1NTA5MTMwMDMyNTVaMC8xLTArBgNVBAMTJDE4\nNjdhZjAzLWNkNDAtNDliNy1iNWZmLWEyY2NkOTUwZWZlNjCCAaIwDQYJKoZIhvcN\nAQEBBQADggGPADCCAYoCggGBAOC82Vl3cCMiiS59DLLtIUp8N87fXlBAMnfHVdim\nZYNDtwDNl3oPPq3LZkVfVIZb9cPawN7FwFnTdbdoRsn/JkbzHemBIUE8/4DkKvue\nJbQdQwdlkyjkIR2/WPkONZCpmy9459CQ3nv4fJP5S2kxKOj/IpmcDZRA/rrNnwAH\nJRRo0ay/lnC9+FV0l4bExA6SqpIAwJg62W6erthDQ5HV44WQdYvpK9etg0gO5aBO\n9Eg8lxIROF3UHdxF3RsUpiluf22FCuv+q81Y80Rc6g3xE82PzdFVIoNgnWaOckc3\naDurXlppOQ9DDW/Nd7AsunvFYw6AGm9wiSpAsMb7f2qGfk5YIe+17Eft0PVU90yx\ni3jQpaKvGUm0oI+x3buvpcQfpWP2FUprPmHtwcmTMKPhG9lJpISnusDcSA3AyERo\nEXRXgaXwqBRE0rdZVcpSvjesrndmHY79J9Ztxa1dVlgjFPZsWcK+CGb21FHolOH6\nWmJnis9t3SFuM15v/Li7ZvxatwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAgQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwf6mDlkM/wC9GjMC9APUkR2/CWQwDQYJ\nKoZIhvcNAQELBQADggGBADOvnShVMpCCxrA9JD1fuMbCY/XvtxRDscP6M1NbKW7K\nplXbJus7zR+nlGOILFUFZaxE2F11dnZVj8+wvPkNRZvWDyKIwInuFRe16z8skt8M\nAPUF2MRhLR0nA1gXegbTQLxAXbusToEZLarxoH+c/kpft9wvLd+XKvBKMaRFk252\nvTAv29pOH/61v9YQ521u+oOk+sBpcD7Uwj6z4yuci+j05hiTE2pSpiCRE1MNYXTi\n1sYZSo8vJsn5zSQwtLl57impnRHDj+HQK4JMxb4hfFi47Y2PISn6AwfBUggTsxve\ntfmuAay+FU4MXQkVi0Qi9G0t97zne63bqIlV2bXj+uR53jBn7uCAXD/DMeXwx1bp\nwxrHRSCjwhHtsDXxxX8K5LwHpYH+RSqyYx3vY0RUAM41r4g9y1Cp3sq7DHomqvm+\nKJ1avnqHDLWznEzzGIX2EuI6hx0qPdbf5z7CH3LlGP23Fs3BVrrgaw1TAVD6G174\nT6DWmKVVHdmH801y9fsQrA==\n-----END CERTIFICATE-----\n"
            },
            "kind": "ConfigMap",
            "metadata": {
                "annotations": {
                    "kubernetes.io/description": "Contains a CA bundle that can be used to verify the kube-apiserver when using internal endpoints such as the internal service IP or kubernetes.default.svc. No other usage is guaranteed across distributions of Kubernetes clusters."
                },
                "creationTimestamp": "2025-10-08T22:00:04Z",
                "name": "kube-root-ca.crt",
                "namespace": "mindmend",
                "resourceVersion": "1759960804238079005",
                "uid": "6073e682-1049-4bf0-8e13-381018da8d0d"
            }
        }
    ],
    "kind": "List",
    "metadata": {
        "resourceVersion": ""
    }
}

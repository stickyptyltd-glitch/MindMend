You are Replit’s AI agent. Create a full Flask web app called “Mind Mend” with the following:

📂 PROJECT STRUCTURE:
- app.py  (main Flask server)
- models/
    - ai_manager.py       (manages multiple AI models – dummy now, upgrade later)
    - health_checker.py   (scans text for red flags)
- templates/
    - index.html          (home page)
    - session.html        (session interface)
- static/ (empty for now – future CSS/JS)
- data/
    - patients.db (SQLite DB auto-created)

---

🏗 FEATURES:
✅ Flask app with routes:
   - “/” → Home page
   - “/session” → Therapy session form & AI response display
   - “/api/sessions” → JSON API returning past sessions

✅ SQLite DB (“data/patients.db”) stores:
   - patient_name
   - session_type (individual, couple, group)
   - input_text
   - ai_response
   - timestamp

✅ AI layer (models/ai_manager.py):
   - Uses a **dummy AI response** for now (placeholder for GPT/Claude later)
   - `get_response()` returns a supportive therapist-like reply.

✅ Health Checker (models/health_checker.py):
   - Scans input text for red flag keywords like “suicide”, “hurt someone”
   - Displays alerts if risk words are found

✅ Templates:
   - index.html: A welcome page with a “Start Session” button
   - session.html: A form for name, session type, user input + shows AI reply + alerts

---

📄 CODE CONTENTS:

📜 app.py
----------------
from flask import Flask, render_template, request, jsonify
import sqlite3
from models.ai_manager import AIManager
from models.health_checker import HealthChecker

app = Flask(__name__)
ai_manager = AIManager()
health_checker = HealthChecker()

def init_db():
    conn = sqlite3.connect("data/patients.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS sessions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    patient_name TEXT,
                    session_type TEXT,
                    input_text TEXT,
                    ai_response TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                 )''')
    conn.commit()
    conn.close()

init_db()

def log_session(patient_name, session_type, input_text, ai_response):
    conn = sqlite3.connect("data/patients.db")
    c = conn.cursor()
    c.execute("INSERT INTO sessions (patient_name, session_type, input_text, ai_response) VALUES (?, ?, ?, ?)",
              (patient_name, session_type, input_text, ai_response))
    conn.commit()
    conn.close()

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/session", methods=["GET", "POST"])
def session():
    if request.method == "POST":
        patient_name = request.form["name"]
        session_type = request.form["session_type"]
        user_input = request.form["user_input"]

        ai_response = ai_manager.get_response(user_input, session_type)
        log_session(patient_name, session_type, user_input, ai_response)

        alerts = health_checker.scan_text(user_input)

        return render_template("session.html", name=patient_name,
                               session_type=session_type,
                               user_input=user_input,
                               ai_response=ai_response,
                               alerts=alerts)
    return render_template("session.html")

@app.route("/api/sessions")
def api_sessions():
    conn = sqlite3.connect("data/patients.db")
    c = conn.cursor()
    c.execute("SELECT * FROM sessions ORDER BY timestamp DESC")
    rows = c.fetchall()
    conn.close()
    return jsonify(rows)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080, debug=True)

---

📜 models/ai_manager.py
----------------
class AIManager:
    def __init__(self):
        self.models = {
            "default": self.fake_ai_response
        }

    def fake_ai_response(self, text, context="general"):
        return f"[AI Therapist] I hear you saying: '{text}'. Let's explore this together."

    def get_response(self, text, session_type="general"):
        return self.models["default"](text, context=session_type)

---

📜 models/health_checker.py
----------------
class HealthChecker:
    def scan_text(self, text):
        alerts = []
        keywords = {
            "self-harm": ["kill myself", "suicide", "end it all"],
            "violence": ["hurt someone", "attack", "murder"],
            "severe distress": ["can't go on", "desperate", "worthless"]
        }
        for category, words in keywords.items():
            if any(word in text.lower() for word in words):
                alerts.append(f"⚠️ Possible {category} risk")
        return alerts

---

📜 templates/index.html
----------------
<!DOCTYPE html>
<html>
<head>
    <title>Mind Mend</title>
</head>
<body>
    <h1>🧠 Mind Mend</h1>
    <p>AI-supported sessions for individuals, couples, and groups.</p>
    <form action="/session" method="get">
        <button type="submit">Start a Session</button>
    </form>
</body>
</html>

---

📜 templates/session.html
----------------
<!DOCTYPE html>
<html>
<head><title>Session</title></head>
<body>
    <h2>Therapy Session</h2>
    <form method="post">
        <label>Your Name:</label><br>
        <input type="text" name="name" required><br><br>

        <label>Session Type:</label><br>
        <select name="session_type">
            <option value="individual">Individual</option>
            <option value="couple">Couple</option>
            <option value="group">Group</option>
        </select><br><br>

        <label>What’s on your mind?</label><br>
        <textarea name="user_input" rows="4" cols="50" required></textarea><br><br>

        <button type="submit">Send</button>
    </form>

    {% if ai_response %}
        <h3>AI Therapist says:</h3>
        <p>{{ ai_response }}</p>
    {% endif %}

    {% if alerts %}
        <h4 style="color:red;">⚠️ Alerts:</h4>
        <ul>
            {% for alert in alerts %}
                <li>{{ alert }}</li>
            {% endfor %}
        </ul>
    {% endif %}
</body>
</html>

---

📌 REQUIREMENTS:
- Install Flask: `pip install flask`
- Run: `python app.py`
- Replit will auto-preview the site.
